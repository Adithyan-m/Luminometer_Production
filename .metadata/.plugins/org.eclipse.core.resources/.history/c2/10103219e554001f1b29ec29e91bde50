/*
 * main_app.h
 *
 * Created on: Aug 6, 2024
 * Author: adith
 */

#ifndef MAIN_APP_INCLUDES_MAIN_APP_H_
#define MAIN_APP_INCLUDES_MAIN_APP_H_

#include "main.h"

// Peripheral Handles
extern ADC_HandleTypeDef hadc1;
extern DAC_HandleTypeDef hdac;
extern I2C_HandleTypeDef hi2c1;
extern I2C_HandleTypeDef hi2c3;
extern SPI_HandleTypeDef hspi3;
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim9;
extern UART_HandleTypeDef huart4;
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;
extern PCD_HandleTypeDef hpcd_USB_OTG_HS;

// State machine states
typedef enum {
    ST_INIT,
    ST_STARTUP,
    ST_HOMEMENU,
    ST_ERROR,
    ST_MAX_STATE
} MACHINE_STATE_t;

// State machine trigger events
typedef enum {
    NO_EVENT = 0,
    EVENT_INIT_COMPLETE,
    EVENT_STARTUP_COMPLETE,
    EVENT_STARTUP_FAILED
} MACHINE_EVENT_t;

// Function pointer type for state functions
typedef void (*StateFunctionPtr)(void);

// State Functions declarations
void stateInit(void);
void stateStartUp(void);
void stateHomeMenu(void);
void stateError(void);

// State array for function pointers
static const StateFunctionPtr StateArray[ST_MAX_STATE] = {
    stateInit,
    stateStartUp,
    stateHomeMenu,
    stateError
};

// State transition struct
typedef struct {
    MACHINE_STATE_t eCurrState;
    MACHINE_EVENT_t eEvent;
    MACHINE_STATE_t eNextState;
} STATE_TRANSITION_t;

// Transition table
static const STATE_TRANSITION_t StateTransition[] = {
    /* Current State */   /* Event */              /* Next State */
    { ST_INIT,            NO_EVENT,                ST_INIT            },
    { ST_INIT,            EVENT_INIT_COMPLETE,     ST_STARTUP         },

    { ST_STARTUP,         NO_EVENT,                ST_STARTUP         },
    { ST_STARTUP,         EVENT_STARTUP_COMPLETE,  ST_HOMEMENU        },
    { ST_STARTUP,         EVENT_STARTUP_FAILED,    ST_ERROR           },

    { ST_HOMEMENU,        NO_EVENT,                ST_HOMEMENU        },

    { ST_ERROR,           NO_EVENT,                ST_ERROR           }
};

// Number of transitions in the StateTransition array
#define STATE_TABLE_SIZE (sizeof(StateTransition) / sizeof(StateTransition[0]))

// State Machine struct
typedef struct {
    MACHINE_STATE_t eState;
    MACHINE_EVENT_t eEvent;
    bool bEventOccurred;
} StateMachine_t;

// Global State Machine instance
extern StateMachine_t StateMachine;

// State transition function
void StateTransition(void);

// Event checking function
void checkForEvents(void);

// Main loop
void main_app(void);

#endif /* MAIN_APP_INCLUDES_MAIN_APP_H_ */
