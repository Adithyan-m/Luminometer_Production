
prodV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ab0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08010c80  08010c80  00020c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e9c  08010e9c  00030098  2**0
                  CONTENTS
  4 .ARM          00000008  08010e9c  08010e9c  00020e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ea4  08010ea4  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ea4  08010ea4  00020ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010ea8  08010ea8  00020ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08010eac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011a8  20000098  08010f44  00030098  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20001240  08010f44  00031240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b958  00000000  00000000  0003010b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000065ab  00000000  00000000  0005ba63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f60  00000000  00000000  00062010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000185a  00000000  00000000  00063f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b8f5  00000000  00000000  000657ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ec38  00000000  00000000  000910bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb5af  00000000  00000000  000bfcf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008964  00000000  00000000  001ab2a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  001b3c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000098 	.word	0x20000098
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010c68 	.word	0x08010c68

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000009c 	.word	0x2000009c
 800020c:	08010c68 	.word	0x08010c68

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b970 	b.w	8000bc4 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9e08      	ldr	r6, [sp, #32]
 8000902:	460d      	mov	r5, r1
 8000904:	4604      	mov	r4, r0
 8000906:	460f      	mov	r7, r1
 8000908:	2b00      	cmp	r3, #0
 800090a:	d14a      	bne.n	80009a2 <__udivmoddi4+0xa6>
 800090c:	428a      	cmp	r2, r1
 800090e:	4694      	mov	ip, r2
 8000910:	d965      	bls.n	80009de <__udivmoddi4+0xe2>
 8000912:	fab2 f382 	clz	r3, r2
 8000916:	b143      	cbz	r3, 800092a <__udivmoddi4+0x2e>
 8000918:	fa02 fc03 	lsl.w	ip, r2, r3
 800091c:	f1c3 0220 	rsb	r2, r3, #32
 8000920:	409f      	lsls	r7, r3
 8000922:	fa20 f202 	lsr.w	r2, r0, r2
 8000926:	4317      	orrs	r7, r2
 8000928:	409c      	lsls	r4, r3
 800092a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800092e:	fa1f f58c 	uxth.w	r5, ip
 8000932:	fbb7 f1fe 	udiv	r1, r7, lr
 8000936:	0c22      	lsrs	r2, r4, #16
 8000938:	fb0e 7711 	mls	r7, lr, r1, r7
 800093c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000940:	fb01 f005 	mul.w	r0, r1, r5
 8000944:	4290      	cmp	r0, r2
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x62>
 8000948:	eb1c 0202 	adds.w	r2, ip, r2
 800094c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000950:	f080 811c 	bcs.w	8000b8c <__udivmoddi4+0x290>
 8000954:	4290      	cmp	r0, r2
 8000956:	f240 8119 	bls.w	8000b8c <__udivmoddi4+0x290>
 800095a:	3902      	subs	r1, #2
 800095c:	4462      	add	r2, ip
 800095e:	1a12      	subs	r2, r2, r0
 8000960:	b2a4      	uxth	r4, r4
 8000962:	fbb2 f0fe 	udiv	r0, r2, lr
 8000966:	fb0e 2210 	mls	r2, lr, r0, r2
 800096a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800096e:	fb00 f505 	mul.w	r5, r0, r5
 8000972:	42a5      	cmp	r5, r4
 8000974:	d90a      	bls.n	800098c <__udivmoddi4+0x90>
 8000976:	eb1c 0404 	adds.w	r4, ip, r4
 800097a:	f100 32ff 	add.w	r2, r0, #4294967295
 800097e:	f080 8107 	bcs.w	8000b90 <__udivmoddi4+0x294>
 8000982:	42a5      	cmp	r5, r4
 8000984:	f240 8104 	bls.w	8000b90 <__udivmoddi4+0x294>
 8000988:	4464      	add	r4, ip
 800098a:	3802      	subs	r0, #2
 800098c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000990:	1b64      	subs	r4, r4, r5
 8000992:	2100      	movs	r1, #0
 8000994:	b11e      	cbz	r6, 800099e <__udivmoddi4+0xa2>
 8000996:	40dc      	lsrs	r4, r3
 8000998:	2300      	movs	r3, #0
 800099a:	e9c6 4300 	strd	r4, r3, [r6]
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	428b      	cmp	r3, r1
 80009a4:	d908      	bls.n	80009b8 <__udivmoddi4+0xbc>
 80009a6:	2e00      	cmp	r6, #0
 80009a8:	f000 80ed 	beq.w	8000b86 <__udivmoddi4+0x28a>
 80009ac:	2100      	movs	r1, #0
 80009ae:	e9c6 0500 	strd	r0, r5, [r6]
 80009b2:	4608      	mov	r0, r1
 80009b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b8:	fab3 f183 	clz	r1, r3
 80009bc:	2900      	cmp	r1, #0
 80009be:	d149      	bne.n	8000a54 <__udivmoddi4+0x158>
 80009c0:	42ab      	cmp	r3, r5
 80009c2:	d302      	bcc.n	80009ca <__udivmoddi4+0xce>
 80009c4:	4282      	cmp	r2, r0
 80009c6:	f200 80f8 	bhi.w	8000bba <__udivmoddi4+0x2be>
 80009ca:	1a84      	subs	r4, r0, r2
 80009cc:	eb65 0203 	sbc.w	r2, r5, r3
 80009d0:	2001      	movs	r0, #1
 80009d2:	4617      	mov	r7, r2
 80009d4:	2e00      	cmp	r6, #0
 80009d6:	d0e2      	beq.n	800099e <__udivmoddi4+0xa2>
 80009d8:	e9c6 4700 	strd	r4, r7, [r6]
 80009dc:	e7df      	b.n	800099e <__udivmoddi4+0xa2>
 80009de:	b902      	cbnz	r2, 80009e2 <__udivmoddi4+0xe6>
 80009e0:	deff      	udf	#255	; 0xff
 80009e2:	fab2 f382 	clz	r3, r2
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f040 8090 	bne.w	8000b0c <__udivmoddi4+0x210>
 80009ec:	1a8a      	subs	r2, r1, r2
 80009ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f2:	fa1f fe8c 	uxth.w	lr, ip
 80009f6:	2101      	movs	r1, #1
 80009f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000a00:	0c22      	lsrs	r2, r4, #16
 8000a02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a06:	fb0e f005 	mul.w	r0, lr, r5
 8000a0a:	4290      	cmp	r0, r2
 8000a0c:	d908      	bls.n	8000a20 <__udivmoddi4+0x124>
 8000a0e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a12:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a16:	d202      	bcs.n	8000a1e <__udivmoddi4+0x122>
 8000a18:	4290      	cmp	r0, r2
 8000a1a:	f200 80cb 	bhi.w	8000bb4 <__udivmoddi4+0x2b8>
 8000a1e:	4645      	mov	r5, r8
 8000a20:	1a12      	subs	r2, r2, r0
 8000a22:	b2a4      	uxth	r4, r4
 8000a24:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a28:	fb07 2210 	mls	r2, r7, r0, r2
 8000a2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a30:	fb0e fe00 	mul.w	lr, lr, r0
 8000a34:	45a6      	cmp	lr, r4
 8000a36:	d908      	bls.n	8000a4a <__udivmoddi4+0x14e>
 8000a38:	eb1c 0404 	adds.w	r4, ip, r4
 8000a3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a40:	d202      	bcs.n	8000a48 <__udivmoddi4+0x14c>
 8000a42:	45a6      	cmp	lr, r4
 8000a44:	f200 80bb 	bhi.w	8000bbe <__udivmoddi4+0x2c2>
 8000a48:	4610      	mov	r0, r2
 8000a4a:	eba4 040e 	sub.w	r4, r4, lr
 8000a4e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a52:	e79f      	b.n	8000994 <__udivmoddi4+0x98>
 8000a54:	f1c1 0720 	rsb	r7, r1, #32
 8000a58:	408b      	lsls	r3, r1
 8000a5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a62:	fa05 f401 	lsl.w	r4, r5, r1
 8000a66:	fa20 f307 	lsr.w	r3, r0, r7
 8000a6a:	40fd      	lsrs	r5, r7
 8000a6c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a70:	4323      	orrs	r3, r4
 8000a72:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a76:	fa1f fe8c 	uxth.w	lr, ip
 8000a7a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a7e:	0c1c      	lsrs	r4, r3, #16
 8000a80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a84:	fb08 f50e 	mul.w	r5, r8, lr
 8000a88:	42a5      	cmp	r5, r4
 8000a8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a8e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a92:	d90b      	bls.n	8000aac <__udivmoddi4+0x1b0>
 8000a94:	eb1c 0404 	adds.w	r4, ip, r4
 8000a98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a9c:	f080 8088 	bcs.w	8000bb0 <__udivmoddi4+0x2b4>
 8000aa0:	42a5      	cmp	r5, r4
 8000aa2:	f240 8085 	bls.w	8000bb0 <__udivmoddi4+0x2b4>
 8000aa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000aaa:	4464      	add	r4, ip
 8000aac:	1b64      	subs	r4, r4, r5
 8000aae:	b29d      	uxth	r5, r3
 8000ab0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ab4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ab8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000abc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ac0:	45a6      	cmp	lr, r4
 8000ac2:	d908      	bls.n	8000ad6 <__udivmoddi4+0x1da>
 8000ac4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000acc:	d26c      	bcs.n	8000ba8 <__udivmoddi4+0x2ac>
 8000ace:	45a6      	cmp	lr, r4
 8000ad0:	d96a      	bls.n	8000ba8 <__udivmoddi4+0x2ac>
 8000ad2:	3b02      	subs	r3, #2
 8000ad4:	4464      	add	r4, ip
 8000ad6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ada:	fba3 9502 	umull	r9, r5, r3, r2
 8000ade:	eba4 040e 	sub.w	r4, r4, lr
 8000ae2:	42ac      	cmp	r4, r5
 8000ae4:	46c8      	mov	r8, r9
 8000ae6:	46ae      	mov	lr, r5
 8000ae8:	d356      	bcc.n	8000b98 <__udivmoddi4+0x29c>
 8000aea:	d053      	beq.n	8000b94 <__udivmoddi4+0x298>
 8000aec:	b156      	cbz	r6, 8000b04 <__udivmoddi4+0x208>
 8000aee:	ebb0 0208 	subs.w	r2, r0, r8
 8000af2:	eb64 040e 	sbc.w	r4, r4, lr
 8000af6:	fa04 f707 	lsl.w	r7, r4, r7
 8000afa:	40ca      	lsrs	r2, r1
 8000afc:	40cc      	lsrs	r4, r1
 8000afe:	4317      	orrs	r7, r2
 8000b00:	e9c6 7400 	strd	r7, r4, [r6]
 8000b04:	4618      	mov	r0, r3
 8000b06:	2100      	movs	r1, #0
 8000b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0c:	f1c3 0120 	rsb	r1, r3, #32
 8000b10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b14:	fa20 f201 	lsr.w	r2, r0, r1
 8000b18:	fa25 f101 	lsr.w	r1, r5, r1
 8000b1c:	409d      	lsls	r5, r3
 8000b1e:	432a      	orrs	r2, r5
 8000b20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b24:	fa1f fe8c 	uxth.w	lr, ip
 8000b28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b30:	0c11      	lsrs	r1, r2, #16
 8000b32:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b36:	fb00 f50e 	mul.w	r5, r0, lr
 8000b3a:	428d      	cmp	r5, r1
 8000b3c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b40:	d908      	bls.n	8000b54 <__udivmoddi4+0x258>
 8000b42:	eb1c 0101 	adds.w	r1, ip, r1
 8000b46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b4a:	d22f      	bcs.n	8000bac <__udivmoddi4+0x2b0>
 8000b4c:	428d      	cmp	r5, r1
 8000b4e:	d92d      	bls.n	8000bac <__udivmoddi4+0x2b0>
 8000b50:	3802      	subs	r0, #2
 8000b52:	4461      	add	r1, ip
 8000b54:	1b49      	subs	r1, r1, r5
 8000b56:	b292      	uxth	r2, r2
 8000b58:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b5c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b64:	fb05 f10e 	mul.w	r1, r5, lr
 8000b68:	4291      	cmp	r1, r2
 8000b6a:	d908      	bls.n	8000b7e <__udivmoddi4+0x282>
 8000b6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b70:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b74:	d216      	bcs.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b76:	4291      	cmp	r1, r2
 8000b78:	d914      	bls.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b7a:	3d02      	subs	r5, #2
 8000b7c:	4462      	add	r2, ip
 8000b7e:	1a52      	subs	r2, r2, r1
 8000b80:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b84:	e738      	b.n	80009f8 <__udivmoddi4+0xfc>
 8000b86:	4631      	mov	r1, r6
 8000b88:	4630      	mov	r0, r6
 8000b8a:	e708      	b.n	800099e <__udivmoddi4+0xa2>
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	e6e6      	b.n	800095e <__udivmoddi4+0x62>
 8000b90:	4610      	mov	r0, r2
 8000b92:	e6fb      	b.n	800098c <__udivmoddi4+0x90>
 8000b94:	4548      	cmp	r0, r9
 8000b96:	d2a9      	bcs.n	8000aec <__udivmoddi4+0x1f0>
 8000b98:	ebb9 0802 	subs.w	r8, r9, r2
 8000b9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	e7a3      	b.n	8000aec <__udivmoddi4+0x1f0>
 8000ba4:	4645      	mov	r5, r8
 8000ba6:	e7ea      	b.n	8000b7e <__udivmoddi4+0x282>
 8000ba8:	462b      	mov	r3, r5
 8000baa:	e794      	b.n	8000ad6 <__udivmoddi4+0x1da>
 8000bac:	4640      	mov	r0, r8
 8000bae:	e7d1      	b.n	8000b54 <__udivmoddi4+0x258>
 8000bb0:	46d0      	mov	r8, sl
 8000bb2:	e77b      	b.n	8000aac <__udivmoddi4+0x1b0>
 8000bb4:	3d02      	subs	r5, #2
 8000bb6:	4462      	add	r2, ip
 8000bb8:	e732      	b.n	8000a20 <__udivmoddi4+0x124>
 8000bba:	4608      	mov	r0, r1
 8000bbc:	e70a      	b.n	80009d4 <__udivmoddi4+0xd8>
 8000bbe:	4464      	add	r4, ip
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	e742      	b.n	8000a4a <__udivmoddi4+0x14e>

08000bc4 <__aeabi_idiv0>:
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bcc:	f001 f9ac 	bl	8001f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd0:	f000 f826 	bl	8000c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd4:	f000 fc22 	bl	800141c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000bd8:	f000 f88e 	bl	8000cf8 <MX_ADC1_Init>
  MX_DAC_Init();
 8000bdc:	f000 f8de 	bl	8000d9c <MX_DAC_Init>
  MX_I2C1_Init();
 8000be0:	f000 f910 	bl	8000e04 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000be4:	f000 f93c 	bl	8000e60 <MX_I2C3_Init>
  MX_UART4_Init();
 8000be8:	f000 fb68 	bl	80012bc <MX_UART4_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000bec:	f000 fbe4 	bl	80013b8 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM2_Init();
 8000bf0:	f000 fa3a 	bl	8001068 <MX_TIM2_Init>
  MX_SPI3_Init();
 8000bf4:	f000 f962 	bl	8000ebc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000bf8:	f000 fb8a 	bl	8001310 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000bfc:	f000 fbb2 	bl	8001364 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000c00:	f00a fa38 	bl	800b074 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000c04:	f00d fc4c 	bl	800e4a0 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000c08:	f000 f98e 	bl	8000f28 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000c0c:	f000 fa7e 	bl	800110c <MX_TIM4_Init>
  MX_TIM9_Init();
 8000c10:	f000 faf2 	bl	80011f8 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  main_app();
 8000c14:	f00e fc1e 	bl	800f454 <main_app>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000c18:	f00d fc68 	bl	800e4ec <MX_USB_HOST_Process>
 8000c1c:	e7fc      	b.n	8000c18 <main+0x50>
	...

08000c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b094      	sub	sp, #80	; 0x50
 8000c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	2234      	movs	r2, #52	; 0x34
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f00f fc42 	bl	80104b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c34:	f107 0308 	add.w	r3, r7, #8
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <SystemClock_Config+0xd0>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	4a28      	ldr	r2, [pc, #160]	; (8000cf0 <SystemClock_Config+0xd0>)
 8000c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c52:	6413      	str	r3, [r2, #64]	; 0x40
 8000c54:	4b26      	ldr	r3, [pc, #152]	; (8000cf0 <SystemClock_Config+0xd0>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c60:	2300      	movs	r3, #0
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <SystemClock_Config+0xd4>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c6c:	4a21      	ldr	r2, [pc, #132]	; (8000cf4 <SystemClock_Config+0xd4>)
 8000c6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c72:	6013      	str	r3, [r2, #0]
 8000c74:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <SystemClock_Config+0xd4>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c80:	2301      	movs	r3, #1
 8000c82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c88:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c94:	2304      	movs	r3, #4
 8000c96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000c98:	2348      	movs	r3, #72	; 0x48
 8000c9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	4618      	mov	r0, r3
 8000cae:	f006 fbc1 	bl	8007434 <HAL_RCC_OscConfig>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000cb8:	f000 fca2 	bl	8001600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ccc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cd2:	f107 0308 	add.w	r3, r7, #8
 8000cd6:	2102      	movs	r1, #2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f005 fd37 	bl	800674c <HAL_RCC_ClockConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ce4:	f000 fc8c 	bl	8001600 <Error_Handler>
  }
}
 8000ce8:	bf00      	nop
 8000cea:	3750      	adds	r7, #80	; 0x50
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40007000 	.word	0x40007000

08000cf8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d0a:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d0c:	4a21      	ldr	r2, [pc, #132]	; (8000d94 <MX_ADC1_Init+0x9c>)
 8000d0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d10:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d16:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d22:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d28:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d30:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d36:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d38:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <MX_ADC1_Init+0xa0>)
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d56:	480e      	ldr	r0, [pc, #56]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d58:	f001 f97c 	bl	8002054 <HAL_ADC_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d62:	f000 fc4d 	bl	8001600 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000d66:	230b      	movs	r3, #11
 8000d68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d72:	463b      	mov	r3, r7
 8000d74:	4619      	mov	r1, r3
 8000d76:	4806      	ldr	r0, [pc, #24]	; (8000d90 <MX_ADC1_Init+0x98>)
 8000d78:	f001 f9b0 	bl	80020dc <HAL_ADC_ConfigChannel>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d82:	f000 fc3d 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200000b4 	.word	0x200000b4
 8000d94:	40012000 	.word	0x40012000
 8000d98:	0f000001 	.word	0x0f000001

08000d9c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000da2:	463b      	mov	r3, r7
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_DAC_Init+0x60>)
 8000dac:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <MX_DAC_Init+0x64>)
 8000dae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000db0:	4812      	ldr	r0, [pc, #72]	; (8000dfc <MX_DAC_Init+0x60>)
 8000db2:	f001 fcd2 	bl	800275a <HAL_DAC_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000dbc:	f000 fc20 	bl	8001600 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000dc8:	463b      	mov	r3, r7
 8000dca:	2200      	movs	r2, #0
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480b      	ldr	r0, [pc, #44]	; (8000dfc <MX_DAC_Init+0x60>)
 8000dd0:	f001 fd66 	bl	80028a0 <HAL_DAC_ConfigChannel>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000dda:	f000 fc11 	bl	8001600 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000dde:	463b      	mov	r3, r7
 8000de0:	2210      	movs	r2, #16
 8000de2:	4619      	mov	r1, r3
 8000de4:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_DAC_Init+0x60>)
 8000de6:	f001 fd5b 	bl	80028a0 <HAL_DAC_ConfigChannel>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000df0:	f000 fc06 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	200000fc 	.word	0x200000fc
 8000e00:	40007400 	.word	0x40007400

08000e04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e0a:	4a13      	ldr	r2, [pc, #76]	; (8000e58 <MX_I2C1_Init+0x54>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e10:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <MX_I2C1_Init+0x58>)
 8000e12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e42:	f004 fb4f 	bl	80054e4 <HAL_I2C_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e4c:	f000 fbd8 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000110 	.word	0x20000110
 8000e58:	40005400 	.word	0x40005400
 8000e5c:	000186a0 	.word	0x000186a0

08000e60 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <MX_I2C3_Init+0x50>)
 8000e66:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <MX_I2C3_Init+0x54>)
 8000e68:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_I2C3_Init+0x50>)
 8000e6c:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <MX_I2C3_Init+0x58>)
 8000e6e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_I2C3_Init+0x50>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_I2C3_Init+0x50>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_I2C3_Init+0x50>)
 8000e7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e82:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <MX_I2C3_Init+0x50>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_I2C3_Init+0x50>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <MX_I2C3_Init+0x50>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_I2C3_Init+0x50>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <MX_I2C3_Init+0x50>)
 8000e9e:	f004 fb21 	bl	80054e4 <HAL_I2C_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000ea8:	f000 fbaa 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000164 	.word	0x20000164
 8000eb4:	40005c00 	.word	0x40005c00
 8000eb8:	000186a0 	.word	0x000186a0

08000ebc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <MX_SPI3_Init+0x64>)
 8000ec2:	4a18      	ldr	r2, [pc, #96]	; (8000f24 <MX_SPI3_Init+0x68>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <MX_SPI3_Init+0x64>)
 8000ec8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ecc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <MX_SPI3_Init+0x64>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <MX_SPI3_Init+0x64>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <MX_SPI3_Init+0x64>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <MX_SPI3_Init+0x64>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <MX_SPI3_Init+0x64>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <MX_SPI3_Init+0x64>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <MX_SPI3_Init+0x64>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <MX_SPI3_Init+0x64>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <MX_SPI3_Init+0x64>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <MX_SPI3_Init+0x64>)
 8000f06:	220a      	movs	r2, #10
 8000f08:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_SPI3_Init+0x64>)
 8000f0c:	f006 fd30 	bl	8007970 <HAL_SPI_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_SPI3_Init+0x5e>
  {
    Error_Handler();
 8000f16:	f000 fb73 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200001b8 	.word	0x200001b8
 8000f24:	40003c00 	.word	0x40003c00

08000f28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b096      	sub	sp, #88	; 0x58
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]
 8000f56:	615a      	str	r2, [r3, #20]
 8000f58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2220      	movs	r2, #32
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f00f faa9 	bl	80104b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f66:	4b3e      	ldr	r3, [pc, #248]	; (8001060 <MX_TIM1_Init+0x138>)
 8000f68:	4a3e      	ldr	r2, [pc, #248]	; (8001064 <MX_TIM1_Init+0x13c>)
 8000f6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f6c:	4b3c      	ldr	r3, [pc, #240]	; (8001060 <MX_TIM1_Init+0x138>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f72:	4b3b      	ldr	r3, [pc, #236]	; (8001060 <MX_TIM1_Init+0x138>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f78:	4b39      	ldr	r3, [pc, #228]	; (8001060 <MX_TIM1_Init+0x138>)
 8000f7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f80:	4b37      	ldr	r3, [pc, #220]	; (8001060 <MX_TIM1_Init+0x138>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f86:	4b36      	ldr	r3, [pc, #216]	; (8001060 <MX_TIM1_Init+0x138>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8c:	4b34      	ldr	r3, [pc, #208]	; (8001060 <MX_TIM1_Init+0x138>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f92:	4833      	ldr	r0, [pc, #204]	; (8001060 <MX_TIM1_Init+0x138>)
 8000f94:	f006 fd75 	bl	8007a82 <HAL_TIM_Base_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f9e:	f000 fb2f 	bl	8001600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fa8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fac:	4619      	mov	r1, r3
 8000fae:	482c      	ldr	r0, [pc, #176]	; (8001060 <MX_TIM1_Init+0x138>)
 8000fb0:	f007 fae8 	bl	8008584 <HAL_TIM_ConfigClockSource>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000fba:	f000 fb21 	bl	8001600 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fbe:	4828      	ldr	r0, [pc, #160]	; (8001060 <MX_TIM1_Init+0x138>)
 8000fc0:	f006 fe07 	bl	8007bd2 <HAL_TIM_PWM_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000fca:	f000 fb19 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4820      	ldr	r0, [pc, #128]	; (8001060 <MX_TIM1_Init+0x138>)
 8000fde:	f007 ffdf 	bl	8008fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000fe8:	f000 fb0a 	bl	8001600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fec:	2360      	movs	r3, #96	; 0x60
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001000:	2300      	movs	r3, #0
 8001002:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001004:	2300      	movs	r3, #0
 8001006:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100c:	2200      	movs	r2, #0
 800100e:	4619      	mov	r1, r3
 8001010:	4813      	ldr	r0, [pc, #76]	; (8001060 <MX_TIM1_Init+0x138>)
 8001012:	f007 f9f5 	bl	8008400 <HAL_TIM_PWM_ConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800101c:	f000 faf0 	bl	8001600 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001034:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001038:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	4619      	mov	r1, r3
 8001042:	4807      	ldr	r0, [pc, #28]	; (8001060 <MX_TIM1_Init+0x138>)
 8001044:	f008 f828 	bl	8009098 <HAL_TIMEx_ConfigBreakDeadTime>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800104e:	f000 fad7 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001052:	4803      	ldr	r0, [pc, #12]	; (8001060 <MX_TIM1_Init+0x138>)
 8001054:	f000 fd28 	bl	8001aa8 <HAL_TIM_MspPostInit>

}
 8001058:	bf00      	nop
 800105a:	3758      	adds	r7, #88	; 0x58
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000210 	.word	0x20000210
 8001064:	40010000 	.word	0x40010000

08001068 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106e:	f107 0310 	add.w	r3, r7, #16
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001078:	463b      	mov	r3, r7
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001084:	4b20      	ldr	r3, [pc, #128]	; (8001108 <MX_TIM2_Init+0xa0>)
 8001086:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800108a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800108c:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <MX_TIM2_Init+0xa0>)
 800108e:	2200      	movs	r2, #0
 8001090:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001092:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <MX_TIM2_Init+0xa0>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <MX_TIM2_Init+0xa0>)
 800109a:	f04f 32ff 	mov.w	r2, #4294967295
 800109e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a0:	4b19      	ldr	r3, [pc, #100]	; (8001108 <MX_TIM2_Init+0xa0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a6:	4b18      	ldr	r3, [pc, #96]	; (8001108 <MX_TIM2_Init+0xa0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80010ac:	4816      	ldr	r0, [pc, #88]	; (8001108 <MX_TIM2_Init+0xa0>)
 80010ae:	f006 ff21 	bl	8007ef4 <HAL_TIM_IC_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010b8:	f000 faa2 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	4619      	mov	r1, r3
 80010ca:	480f      	ldr	r0, [pc, #60]	; (8001108 <MX_TIM2_Init+0xa0>)
 80010cc:	f007 ff68 	bl	8008fa0 <HAL_TIMEx_MasterConfigSynchronization>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80010d6:	f000 fa93 	bl	8001600 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010da:	2300      	movs	r3, #0
 80010dc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010de:	2301      	movs	r3, #1
 80010e0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010ea:	463b      	mov	r3, r7
 80010ec:	2200      	movs	r2, #0
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_TIM2_Init+0xa0>)
 80010f2:	f007 f8e9 	bl	80082c8 <HAL_TIM_IC_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80010fc:	f000 fa80 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000258 	.word	0x20000258

0800110c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08e      	sub	sp, #56	; 0x38
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001112:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001120:	f107 0320 	add.w	r3, r7, #32
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
 8001138:	615a      	str	r2, [r3, #20]
 800113a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800113c:	4b2c      	ldr	r3, [pc, #176]	; (80011f0 <MX_TIM4_Init+0xe4>)
 800113e:	4a2d      	ldr	r2, [pc, #180]	; (80011f4 <MX_TIM4_Init+0xe8>)
 8001140:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001142:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <MX_TIM4_Init+0xe4>)
 8001144:	2200      	movs	r2, #0
 8001146:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001148:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <MX_TIM4_Init+0xe4>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800114e:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <MX_TIM4_Init+0xe4>)
 8001150:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001154:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001156:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <MX_TIM4_Init+0xe4>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115c:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <MX_TIM4_Init+0xe4>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001162:	4823      	ldr	r0, [pc, #140]	; (80011f0 <MX_TIM4_Init+0xe4>)
 8001164:	f006 fc8d 	bl	8007a82 <HAL_TIM_Base_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800116e:	f000 fa47 	bl	8001600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001178:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800117c:	4619      	mov	r1, r3
 800117e:	481c      	ldr	r0, [pc, #112]	; (80011f0 <MX_TIM4_Init+0xe4>)
 8001180:	f007 fa00 	bl	8008584 <HAL_TIM_ConfigClockSource>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800118a:	f000 fa39 	bl	8001600 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800118e:	4818      	ldr	r0, [pc, #96]	; (80011f0 <MX_TIM4_Init+0xe4>)
 8001190:	f006 fd1f 	bl	8007bd2 <HAL_TIM_PWM_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800119a:	f000 fa31 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011a6:	f107 0320 	add.w	r3, r7, #32
 80011aa:	4619      	mov	r1, r3
 80011ac:	4810      	ldr	r0, [pc, #64]	; (80011f0 <MX_TIM4_Init+0xe4>)
 80011ae:	f007 fef7 	bl	8008fa0 <HAL_TIMEx_MasterConfigSynchronization>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80011b8:	f000 fa22 	bl	8001600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011bc:	2360      	movs	r3, #96	; 0x60
 80011be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2200      	movs	r2, #0
 80011d0:	4619      	mov	r1, r3
 80011d2:	4807      	ldr	r0, [pc, #28]	; (80011f0 <MX_TIM4_Init+0xe4>)
 80011d4:	f007 f914 	bl	8008400 <HAL_TIM_PWM_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80011de:	f000 fa0f 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011e2:	4803      	ldr	r0, [pc, #12]	; (80011f0 <MX_TIM4_Init+0xe4>)
 80011e4:	f000 fc60 	bl	8001aa8 <HAL_TIM_MspPostInit>

}
 80011e8:	bf00      	nop
 80011ea:	3738      	adds	r7, #56	; 0x38
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200002a0 	.word	0x200002a0
 80011f4:	40000800 	.word	0x40000800

080011f8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08c      	sub	sp, #48	; 0x30
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fe:	f107 0320 	add.w	r3, r7, #32
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]
 800121a:	615a      	str	r2, [r3, #20]
 800121c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800121e:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <MX_TIM9_Init+0xbc>)
 8001220:	4a25      	ldr	r2, [pc, #148]	; (80012b8 <MX_TIM9_Init+0xc0>)
 8001222:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001224:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <MX_TIM9_Init+0xbc>)
 8001226:	2200      	movs	r2, #0
 8001228:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122a:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <MX_TIM9_Init+0xbc>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001230:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <MX_TIM9_Init+0xbc>)
 8001232:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001236:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001238:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <MX_TIM9_Init+0xbc>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123e:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <MX_TIM9_Init+0xbc>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001244:	481b      	ldr	r0, [pc, #108]	; (80012b4 <MX_TIM9_Init+0xbc>)
 8001246:	f006 fc1c 	bl	8007a82 <HAL_TIM_Base_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001250:	f000 f9d6 	bl	8001600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001258:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	4619      	mov	r1, r3
 8001260:	4814      	ldr	r0, [pc, #80]	; (80012b4 <MX_TIM9_Init+0xbc>)
 8001262:	f007 f98f 	bl	8008584 <HAL_TIM_ConfigClockSource>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 800126c:	f000 f9c8 	bl	8001600 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 8001270:	4810      	ldr	r0, [pc, #64]	; (80012b4 <MX_TIM9_Init+0xbc>)
 8001272:	f006 fc55 	bl	8007b20 <HAL_TIM_OC_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 800127c:	f000 f9c0 	bl	8001600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001280:	2300      	movs	r3, #0
 8001282:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	2200      	movs	r2, #0
 8001294:	4619      	mov	r1, r3
 8001296:	4807      	ldr	r0, [pc, #28]	; (80012b4 <MX_TIM9_Init+0xbc>)
 8001298:	f006 ffba 	bl	8008210 <HAL_TIM_OC_ConfigChannel>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 80012a2:	f000 f9ad 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80012a6:	4803      	ldr	r0, [pc, #12]	; (80012b4 <MX_TIM9_Init+0xbc>)
 80012a8:	f000 fbfe 	bl	8001aa8 <HAL_TIM_MspPostInit>

}
 80012ac:	bf00      	nop
 80012ae:	3730      	adds	r7, #48	; 0x30
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200002e8 	.word	0x200002e8
 80012b8:	40014000 	.word	0x40014000

080012bc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_UART4_Init+0x4c>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <MX_UART4_Init+0x50>)
 80012c4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <MX_UART4_Init+0x4c>)
 80012c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012cc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_UART4_Init+0x4c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <MX_UART4_Init+0x4c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <MX_UART4_Init+0x4c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <MX_UART4_Init+0x4c>)
 80012e2:	220c      	movs	r2, #12
 80012e4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <MX_UART4_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <MX_UART4_Init+0x4c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_UART4_Init+0x4c>)
 80012f4:	f007 ff22 	bl	800913c <HAL_UART_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80012fe:	f000 f97f 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000330 	.word	0x20000330
 800130c:	40004c00 	.word	0x40004c00

08001310 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_USART1_UART_Init+0x4c>)
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <MX_USART1_UART_Init+0x50>)
 8001318:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <MX_USART1_UART_Init+0x4c>)
 800131c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001320:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_USART1_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_USART1_UART_Init+0x4c>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <MX_USART1_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_USART1_UART_Init+0x4c>)
 8001336:	220c      	movs	r2, #12
 8001338:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <MX_USART1_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_USART1_UART_Init+0x4c>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_USART1_UART_Init+0x4c>)
 8001348:	f007 fef8 	bl	800913c <HAL_UART_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001352:	f000 f955 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000378 	.word	0x20000378
 8001360:	40011000 	.word	0x40011000

08001364 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 800136a:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <MX_USART2_UART_Init+0x50>)
 800136c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001370:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001374:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 800138a:	220c      	movs	r2, #12
 800138c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 800139c:	f007 fece 	bl	800913c <HAL_UART_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013a6:	f000 f92b 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200003c0 	.word	0x200003c0
 80013b4:	40004400 	.word	0x40004400

080013b8 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80013be:	4a16      	ldr	r2, [pc, #88]	; (8001418 <MX_USB_OTG_HS_PCD_Init+0x60>)
 80013c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80013c4:	2208      	movs	r2, #8
 80013c6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80013ca:	2202      	movs	r2, #2
 80013cc:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80013d6:	2202      	movs	r2, #2
 80013d8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001400:	f005 f86a 	bl	80064d8 <HAL_PCD_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 800140a:	f000 f8f9 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000408 	.word	0x20000408
 8001418:	40040000 	.word	0x40040000

0800141c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08c      	sub	sp, #48	; 0x30
 8001420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	61bb      	str	r3, [r7, #24]
 8001436:	4b6c      	ldr	r3, [pc, #432]	; (80015e8 <MX_GPIO_Init+0x1cc>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a6b      	ldr	r2, [pc, #428]	; (80015e8 <MX_GPIO_Init+0x1cc>)
 800143c:	f043 0310 	orr.w	r3, r3, #16
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b69      	ldr	r3, [pc, #420]	; (80015e8 <MX_GPIO_Init+0x1cc>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0310 	and.w	r3, r3, #16
 800144a:	61bb      	str	r3, [r7, #24]
 800144c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	4b65      	ldr	r3, [pc, #404]	; (80015e8 <MX_GPIO_Init+0x1cc>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a64      	ldr	r2, [pc, #400]	; (80015e8 <MX_GPIO_Init+0x1cc>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b62      	ldr	r3, [pc, #392]	; (80015e8 <MX_GPIO_Init+0x1cc>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	4b5e      	ldr	r3, [pc, #376]	; (80015e8 <MX_GPIO_Init+0x1cc>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a5d      	ldr	r2, [pc, #372]	; (80015e8 <MX_GPIO_Init+0x1cc>)
 8001474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b5b      	ldr	r3, [pc, #364]	; (80015e8 <MX_GPIO_Init+0x1cc>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b57      	ldr	r3, [pc, #348]	; (80015e8 <MX_GPIO_Init+0x1cc>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a56      	ldr	r2, [pc, #344]	; (80015e8 <MX_GPIO_Init+0x1cc>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b54      	ldr	r3, [pc, #336]	; (80015e8 <MX_GPIO_Init+0x1cc>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	4b50      	ldr	r3, [pc, #320]	; (80015e8 <MX_GPIO_Init+0x1cc>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a4f      	ldr	r2, [pc, #316]	; (80015e8 <MX_GPIO_Init+0x1cc>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b4d      	ldr	r3, [pc, #308]	; (80015e8 <MX_GPIO_Init+0x1cc>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	4b49      	ldr	r3, [pc, #292]	; (80015e8 <MX_GPIO_Init+0x1cc>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a48      	ldr	r2, [pc, #288]	; (80015e8 <MX_GPIO_Init+0x1cc>)
 80014c8:	f043 0308 	orr.w	r3, r3, #8
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b46      	ldr	r3, [pc, #280]	; (80015e8 <MX_GPIO_Init+0x1cc>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	2140      	movs	r1, #64	; 0x40
 80014de:	4843      	ldr	r0, [pc, #268]	; (80015ec <MX_GPIO_Init+0x1d0>)
 80014e0:	f001 fecc 	bl	800327c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MS2_3_Pin|RFID_RST_Pin, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2160      	movs	r1, #96	; 0x60
 80014e8:	4841      	ldr	r0, [pc, #260]	; (80015f0 <MX_GPIO_Init+0x1d4>)
 80014ea:	f001 fec7 	bl	800327c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MS1_3_Pin|ENABLE3_Pin|DIR3_Pin|ENABLE2_Pin
 80014ee:	2200      	movs	r2, #0
 80014f0:	f240 613f 	movw	r1, #1599	; 0x63f
 80014f4:	483f      	ldr	r0, [pc, #252]	; (80015f4 <MX_GPIO_Init+0x1d8>)
 80014f6:	f001 fec1 	bl	800327c <HAL_GPIO_WritePin>
                          |ENABLE1_Pin|MS1_1_Pin|MS2_1_Pin|DIR1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR2_Pin|MS2_2_Pin|MS1_2_Pin|BUZZER_Pin
 80014fa:	2200      	movs	r2, #0
 80014fc:	f24e 0103 	movw	r1, #57347	; 0xe003
 8001500:	483d      	ldr	r0, [pc, #244]	; (80015f8 <MX_GPIO_Init+0x1dc>)
 8001502:	f001 febb 	bl	800327c <HAL_GPIO_WritePin>
                          |HV_DISABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ESP_RST_Pin */
  GPIO_InitStruct.Pin = ESP_RST_Pin;
 8001506:	2340      	movs	r3, #64	; 0x40
 8001508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ESP_RST_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	4833      	ldr	r0, [pc, #204]	; (80015ec <MX_GPIO_Init+0x1d0>)
 800151e:	f001 fd01 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OPTO2_Pin */
  GPIO_InitStruct.Pin = OPTO2_Pin;
 8001522:	2380      	movs	r3, #128	; 0x80
 8001524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001526:	2300      	movs	r3, #0
 8001528:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OPTO2_GPIO_Port, &GPIO_InitStruct);
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	4619      	mov	r1, r3
 8001534:	482d      	ldr	r0, [pc, #180]	; (80015ec <MX_GPIO_Init+0x1d0>)
 8001536:	f001 fcf5 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : MS2_3_Pin RFID_RST_Pin */
  GPIO_InitStruct.Pin = MS2_3_Pin|RFID_RST_Pin;
 800153a:	2360      	movs	r3, #96	; 0x60
 800153c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153e:	2301      	movs	r3, #1
 8001540:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4619      	mov	r1, r3
 8001550:	4827      	ldr	r0, [pc, #156]	; (80015f0 <MX_GPIO_Init+0x1d4>)
 8001552:	f001 fce7 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : MS1_3_Pin ENABLE3_Pin DIR3_Pin ENABLE2_Pin
                           ENABLE1_Pin MS1_1_Pin MS2_1_Pin DIR1_Pin */
  GPIO_InitStruct.Pin = MS1_3_Pin|ENABLE3_Pin|DIR3_Pin|ENABLE2_Pin
 8001556:	f240 633f 	movw	r3, #1599	; 0x63f
 800155a:	61fb      	str	r3, [r7, #28]
                          |ENABLE1_Pin|MS1_1_Pin|MS2_1_Pin|DIR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155c:	2301      	movs	r3, #1
 800155e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	4821      	ldr	r0, [pc, #132]	; (80015f4 <MX_GPIO_Init+0x1d8>)
 8001570:	f001 fcd8 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OPTO1_Pin */
  GPIO_InitStruct.Pin = OPTO1_Pin;
 8001574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OPTO1_GPIO_Port, &GPIO_InitStruct);
 8001582:	f107 031c 	add.w	r3, r7, #28
 8001586:	4619      	mov	r1, r3
 8001588:	481b      	ldr	r0, [pc, #108]	; (80015f8 <MX_GPIO_Init+0x1dc>)
 800158a:	f001 fccb 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin MS2_2_Pin MS1_2_Pin BUZZER_Pin
                           HV_DISABLE_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|MS2_2_Pin|MS1_2_Pin|BUZZER_Pin
 800158e:	f24e 0303 	movw	r3, #57347	; 0xe003
 8001592:	61fb      	str	r3, [r7, #28]
                          |HV_DISABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	4619      	mov	r1, r3
 80015a6:	4814      	ldr	r0, [pc, #80]	; (80015f8 <MX_GPIO_Init+0x1dc>)
 80015a8:	f001 fcbc 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80015ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 031c 	add.w	r3, r7, #28
 80015be:	4619      	mov	r1, r3
 80015c0:	480b      	ldr	r0, [pc, #44]	; (80015f0 <MX_GPIO_Init+0x1d4>)
 80015c2:	f001 fcaf 	bl	8002f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : TUBE_SEN_Pin LIMIT_SW_1_Pin */
  GPIO_InitStruct.Pin = TUBE_SEN_Pin|LIMIT_SW_1_Pin;
 80015c6:	2303      	movs	r3, #3
 80015c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	4619      	mov	r1, r3
 80015d8:	4808      	ldr	r0, [pc, #32]	; (80015fc <MX_GPIO_Init+0x1e0>)
 80015da:	f001 fca3 	bl	8002f24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015de:	bf00      	nop
 80015e0:	3730      	adds	r7, #48	; 0x30
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020000 	.word	0x40020000
 80015f0:	40020800 	.word	0x40020800
 80015f4:	40020400 	.word	0x40020400
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40020c00 	.word	0x40020c00

08001600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001604:	b672      	cpsid	i
}
 8001606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001608:	e7fe      	b.n	8001608 <Error_Handler+0x8>
	...

0800160c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_MspInit+0x4c>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <HAL_MspInit+0x4c>)
 800161c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001620:	6453      	str	r3, [r2, #68]	; 0x44
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <HAL_MspInit+0x4c>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	603b      	str	r3, [r7, #0]
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_MspInit+0x4c>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	4a08      	ldr	r2, [pc, #32]	; (8001658 <HAL_MspInit+0x4c>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163c:	6413      	str	r3, [r2, #64]	; 0x40
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_MspInit+0x4c>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800

0800165c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <HAL_ADC_MspInit+0x7c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d127      	bne.n	80016ce <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b16      	ldr	r3, [pc, #88]	; (80016dc <HAL_ADC_MspInit+0x80>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a15      	ldr	r2, [pc, #84]	; (80016dc <HAL_ADC_MspInit+0x80>)
 8001688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b13      	ldr	r3, [pc, #76]	; (80016dc <HAL_ADC_MspInit+0x80>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <HAL_ADC_MspInit+0x80>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <HAL_ADC_MspInit+0x80>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <HAL_ADC_MspInit+0x80>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = NTC_Pin|HV_FB_Pin;
 80016b6:	2306      	movs	r3, #6
 80016b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ba:	2303      	movs	r3, #3
 80016bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	4805      	ldr	r0, [pc, #20]	; (80016e0 <HAL_ADC_MspInit+0x84>)
 80016ca:	f001 fc2b 	bl	8002f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016ce:	bf00      	nop
 80016d0:	3728      	adds	r7, #40	; 0x28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40012000 	.word	0x40012000
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020800 	.word	0x40020800

080016e4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	; 0x28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a17      	ldr	r2, [pc, #92]	; (8001760 <HAL_DAC_MspInit+0x7c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d127      	bne.n	8001756 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <HAL_DAC_MspInit+0x80>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	4a15      	ldr	r2, [pc, #84]	; (8001764 <HAL_DAC_MspInit+0x80>)
 8001710:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001714:	6413      	str	r3, [r2, #64]	; 0x40
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <HAL_DAC_MspInit+0x80>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <HAL_DAC_MspInit+0x80>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a0e      	ldr	r2, [pc, #56]	; (8001764 <HAL_DAC_MspInit+0x80>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <HAL_DAC_MspInit+0x80>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = REF1_Pin|REF2_Pin;
 800173e:	2330      	movs	r3, #48	; 0x30
 8001740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001742:	2303      	movs	r3, #3
 8001744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	4805      	ldr	r0, [pc, #20]	; (8001768 <HAL_DAC_MspInit+0x84>)
 8001752:	f001 fbe7 	bl	8002f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001756:	bf00      	nop
 8001758:	3728      	adds	r7, #40	; 0x28
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40007400 	.word	0x40007400
 8001764:	40023800 	.word	0x40023800
 8001768:	40020000 	.word	0x40020000

0800176c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a42      	ldr	r2, [pc, #264]	; (8001894 <HAL_I2C_MspInit+0x128>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d12c      	bne.n	80017e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
 8001792:	4b41      	ldr	r3, [pc, #260]	; (8001898 <HAL_I2C_MspInit+0x12c>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a40      	ldr	r2, [pc, #256]	; (8001898 <HAL_I2C_MspInit+0x12c>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b3e      	ldr	r3, [pc, #248]	; (8001898 <HAL_I2C_MspInit+0x12c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	61bb      	str	r3, [r7, #24]
 80017a8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80017aa:	23c0      	movs	r3, #192	; 0xc0
 80017ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ae:	2312      	movs	r3, #18
 80017b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017ba:	2304      	movs	r3, #4
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	4619      	mov	r1, r3
 80017c4:	4835      	ldr	r0, [pc, #212]	; (800189c <HAL_I2C_MspInit+0x130>)
 80017c6:	f001 fbad 	bl	8002f24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	4b32      	ldr	r3, [pc, #200]	; (8001898 <HAL_I2C_MspInit+0x12c>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	4a31      	ldr	r2, [pc, #196]	; (8001898 <HAL_I2C_MspInit+0x12c>)
 80017d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017d8:	6413      	str	r3, [r2, #64]	; 0x40
 80017da:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <HAL_I2C_MspInit+0x12c>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80017e6:	e050      	b.n	800188a <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a2c      	ldr	r2, [pc, #176]	; (80018a0 <HAL_I2C_MspInit+0x134>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d14b      	bne.n	800188a <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	4b28      	ldr	r3, [pc, #160]	; (8001898 <HAL_I2C_MspInit+0x12c>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a27      	ldr	r2, [pc, #156]	; (8001898 <HAL_I2C_MspInit+0x12c>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b25      	ldr	r3, [pc, #148]	; (8001898 <HAL_I2C_MspInit+0x12c>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	4b21      	ldr	r3, [pc, #132]	; (8001898 <HAL_I2C_MspInit+0x12c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a20      	ldr	r2, [pc, #128]	; (8001898 <HAL_I2C_MspInit+0x12c>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <HAL_I2C_MspInit+0x12c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SDA1_Pin;
 800182a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800182e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001830:	2312      	movs	r3, #18
 8001832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001838:	2303      	movs	r3, #3
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800183c:	2304      	movs	r3, #4
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SDA1_GPIO_Port, &GPIO_InitStruct);
 8001840:	f107 031c 	add.w	r3, r7, #28
 8001844:	4619      	mov	r1, r3
 8001846:	4817      	ldr	r0, [pc, #92]	; (80018a4 <HAL_I2C_MspInit+0x138>)
 8001848:	f001 fb6c 	bl	8002f24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCL1_Pin;
 800184c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001852:	2312      	movs	r3, #18
 8001854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185a:	2303      	movs	r3, #3
 800185c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800185e:	2304      	movs	r3, #4
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCL1_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 031c 	add.w	r3, r7, #28
 8001866:	4619      	mov	r1, r3
 8001868:	480f      	ldr	r0, [pc, #60]	; (80018a8 <HAL_I2C_MspInit+0x13c>)
 800186a:	f001 fb5b 	bl	8002f24 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_I2C_MspInit+0x12c>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	4a08      	ldr	r2, [pc, #32]	; (8001898 <HAL_I2C_MspInit+0x12c>)
 8001878:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800187c:	6413      	str	r3, [r2, #64]	; 0x40
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_I2C_MspInit+0x12c>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
}
 800188a:	bf00      	nop
 800188c:	3730      	adds	r7, #48	; 0x30
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40005400 	.word	0x40005400
 8001898:	40023800 	.word	0x40023800
 800189c:	40020400 	.word	0x40020400
 80018a0:	40005c00 	.word	0x40005c00
 80018a4:	40020800 	.word	0x40020800
 80018a8:	40020000 	.word	0x40020000

080018ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a29      	ldr	r2, [pc, #164]	; (8001970 <HAL_SPI_MspInit+0xc4>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d14b      	bne.n	8001966 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	4b28      	ldr	r3, [pc, #160]	; (8001974 <HAL_SPI_MspInit+0xc8>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	4a27      	ldr	r2, [pc, #156]	; (8001974 <HAL_SPI_MspInit+0xc8>)
 80018d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018dc:	6413      	str	r3, [r2, #64]	; 0x40
 80018de:	4b25      	ldr	r3, [pc, #148]	; (8001974 <HAL_SPI_MspInit+0xc8>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b21      	ldr	r3, [pc, #132]	; (8001974 <HAL_SPI_MspInit+0xc8>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a20      	ldr	r2, [pc, #128]	; (8001974 <HAL_SPI_MspInit+0xc8>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <HAL_SPI_MspInit+0xc8>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <HAL_SPI_MspInit+0xc8>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a19      	ldr	r2, [pc, #100]	; (8001974 <HAL_SPI_MspInit+0xc8>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b17      	ldr	r3, [pc, #92]	; (8001974 <HAL_SPI_MspInit+0xc8>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = SS_Pin;
 8001922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001934:	2306      	movs	r3, #6
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SS_GPIO_Port, &GPIO_InitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	480e      	ldr	r0, [pc, #56]	; (8001978 <HAL_SPI_MspInit+0xcc>)
 8001940:	f001 faf0 	bl	8002f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 8001944:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001952:	2303      	movs	r3, #3
 8001954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001956:	2306      	movs	r3, #6
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	4806      	ldr	r0, [pc, #24]	; (800197c <HAL_SPI_MspInit+0xd0>)
 8001962:	f001 fadf 	bl	8002f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001966:	bf00      	nop
 8001968:	3728      	adds	r7, #40	; 0x28
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40003c00 	.word	0x40003c00
 8001974:	40023800 	.word	0x40023800
 8001978:	40020000 	.word	0x40020000
 800197c:	40020800 	.word	0x40020800

08001980 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001980:	b480      	push	{r7}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a1f      	ldr	r2, [pc, #124]	; (8001a0c <HAL_TIM_Base_MspInit+0x8c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d10e      	bne.n	80019b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <HAL_TIM_Base_MspInit+0x90>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	4a1d      	ldr	r2, [pc, #116]	; (8001a10 <HAL_TIM_Base_MspInit+0x90>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6453      	str	r3, [r2, #68]	; 0x44
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <HAL_TIM_Base_MspInit+0x90>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80019ae:	e026      	b.n	80019fe <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a17      	ldr	r2, [pc, #92]	; (8001a14 <HAL_TIM_Base_MspInit+0x94>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d10e      	bne.n	80019d8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <HAL_TIM_Base_MspInit+0x90>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a13      	ldr	r2, [pc, #76]	; (8001a10 <HAL_TIM_Base_MspInit+0x90>)
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <HAL_TIM_Base_MspInit+0x90>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
}
 80019d6:	e012      	b.n	80019fe <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM9)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0e      	ldr	r2, [pc, #56]	; (8001a18 <HAL_TIM_Base_MspInit+0x98>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d10d      	bne.n	80019fe <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <HAL_TIM_Base_MspInit+0x90>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	4a09      	ldr	r2, [pc, #36]	; (8001a10 <HAL_TIM_Base_MspInit+0x90>)
 80019ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f0:	6453      	str	r3, [r2, #68]	; 0x44
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <HAL_TIM_Base_MspInit+0x90>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
}
 80019fe:	bf00      	nop
 8001a00:	371c      	adds	r7, #28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40010000 	.word	0x40010000
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40000800 	.word	0x40000800
 8001a18:	40014000 	.word	0x40014000

08001a1c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a3c:	d12c      	bne.n	8001a98 <HAL_TIM_IC_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <HAL_TIM_IC_MspInit+0x84>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	4a16      	ldr	r2, [pc, #88]	; (8001aa0 <HAL_TIM_IC_MspInit+0x84>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <HAL_TIM_IC_MspInit+0x84>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HAL_TIM_IC_MspInit+0x84>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a0f      	ldr	r2, [pc, #60]	; (8001aa0 <HAL_TIM_IC_MspInit+0x84>)
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <HAL_TIM_IC_MspInit+0x84>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PULSES_Pin;
 8001a76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PULSES_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <HAL_TIM_IC_MspInit+0x88>)
 8001a94:	f001 fa46 	bl	8002f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a98:	bf00      	nop
 8001a9a:	3728      	adds	r7, #40	; 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40020400 	.word	0x40020400

08001aa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a37      	ldr	r2, [pc, #220]	; (8001ba4 <HAL_TIM_MspPostInit+0xfc>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d11f      	bne.n	8001b0a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	4b36      	ldr	r3, [pc, #216]	; (8001ba8 <HAL_TIM_MspPostInit+0x100>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a35      	ldr	r2, [pc, #212]	; (8001ba8 <HAL_TIM_MspPostInit+0x100>)
 8001ad4:	f043 0310 	orr.w	r3, r3, #16
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b33      	ldr	r3, [pc, #204]	; (8001ba8 <HAL_TIM_MspPostInit+0x100>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = STEP3_Pin;
 8001ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001af8:	2301      	movs	r3, #1
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP3_GPIO_Port, &GPIO_InitStruct);
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	4619      	mov	r1, r3
 8001b02:	482a      	ldr	r0, [pc, #168]	; (8001bac <HAL_TIM_MspPostInit+0x104>)
 8001b04:	f001 fa0e 	bl	8002f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001b08:	e047      	b.n	8001b9a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a28      	ldr	r2, [pc, #160]	; (8001bb0 <HAL_TIM_MspPostInit+0x108>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d11f      	bne.n	8001b54 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	4b23      	ldr	r3, [pc, #140]	; (8001ba8 <HAL_TIM_MspPostInit+0x100>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	4a22      	ldr	r2, [pc, #136]	; (8001ba8 <HAL_TIM_MspPostInit+0x100>)
 8001b1e:	f043 0308 	orr.w	r3, r3, #8
 8001b22:	6313      	str	r3, [r2, #48]	; 0x30
 8001b24:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <HAL_TIM_MspPostInit+0x100>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP2_Pin;
 8001b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b42:	2302      	movs	r3, #2
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4819      	ldr	r0, [pc, #100]	; (8001bb4 <HAL_TIM_MspPostInit+0x10c>)
 8001b4e:	f001 f9e9 	bl	8002f24 <HAL_GPIO_Init>
}
 8001b52:	e022      	b.n	8001b9a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a17      	ldr	r2, [pc, #92]	; (8001bb8 <HAL_TIM_MspPostInit+0x110>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d11d      	bne.n	8001b9a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_TIM_MspPostInit+0x100>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a10      	ldr	r2, [pc, #64]	; (8001ba8 <HAL_TIM_MspPostInit+0x100>)
 8001b68:	f043 0310 	orr.w	r3, r3, #16
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_TIM_MspPostInit+0x100>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0310 	and.w	r3, r3, #16
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP1_Pin;
 8001b7a:	2320      	movs	r3, #32
 8001b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	4619      	mov	r1, r3
 8001b94:	4805      	ldr	r0, [pc, #20]	; (8001bac <HAL_TIM_MspPostInit+0x104>)
 8001b96:	f001 f9c5 	bl	8002f24 <HAL_GPIO_Init>
}
 8001b9a:	bf00      	nop
 8001b9c:	3728      	adds	r7, #40	; 0x28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40010000 	.word	0x40010000
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40000800 	.word	0x40000800
 8001bb4:	40020c00 	.word	0x40020c00
 8001bb8:	40014000 	.word	0x40014000

08001bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08e      	sub	sp, #56	; 0x38
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a4b      	ldr	r2, [pc, #300]	; (8001d08 <HAL_UART_MspInit+0x14c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d12c      	bne.n	8001c38 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	623b      	str	r3, [r7, #32]
 8001be2:	4b4a      	ldr	r3, [pc, #296]	; (8001d0c <HAL_UART_MspInit+0x150>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	4a49      	ldr	r2, [pc, #292]	; (8001d0c <HAL_UART_MspInit+0x150>)
 8001be8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40
 8001bee:	4b47      	ldr	r3, [pc, #284]	; (8001d0c <HAL_UART_MspInit+0x150>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bf6:	623b      	str	r3, [r7, #32]
 8001bf8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
 8001bfe:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <HAL_UART_MspInit+0x150>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a42      	ldr	r2, [pc, #264]	; (8001d0c <HAL_UART_MspInit+0x150>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b40      	ldr	r3, [pc, #256]	; (8001d0c <HAL_UART_MspInit+0x150>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	61fb      	str	r3, [r7, #28]
 8001c14:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX2_Pin|RX2_Pin;
 8001c16:	2303      	movs	r3, #3
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c22:	2303      	movs	r3, #3
 8001c24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c26:	2308      	movs	r3, #8
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4837      	ldr	r0, [pc, #220]	; (8001d10 <HAL_UART_MspInit+0x154>)
 8001c32:	f001 f977 	bl	8002f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c36:	e063      	b.n	8001d00 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a35      	ldr	r2, [pc, #212]	; (8001d14 <HAL_UART_MspInit+0x158>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d12d      	bne.n	8001c9e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	61bb      	str	r3, [r7, #24]
 8001c46:	4b31      	ldr	r3, [pc, #196]	; (8001d0c <HAL_UART_MspInit+0x150>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	4a30      	ldr	r2, [pc, #192]	; (8001d0c <HAL_UART_MspInit+0x150>)
 8001c4c:	f043 0310 	orr.w	r3, r3, #16
 8001c50:	6453      	str	r3, [r2, #68]	; 0x44
 8001c52:	4b2e      	ldr	r3, [pc, #184]	; (8001d0c <HAL_UART_MspInit+0x150>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	f003 0310 	and.w	r3, r3, #16
 8001c5a:	61bb      	str	r3, [r7, #24]
 8001c5c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <HAL_UART_MspInit+0x150>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a29      	ldr	r2, [pc, #164]	; (8001d0c <HAL_UART_MspInit+0x150>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b27      	ldr	r3, [pc, #156]	; (8001d0c <HAL_UART_MspInit+0x150>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 8001c7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c8c:	2307      	movs	r3, #7
 8001c8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c94:	4619      	mov	r1, r3
 8001c96:	481e      	ldr	r0, [pc, #120]	; (8001d10 <HAL_UART_MspInit+0x154>)
 8001c98:	f001 f944 	bl	8002f24 <HAL_GPIO_Init>
}
 8001c9c:	e030      	b.n	8001d00 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART2)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1d      	ldr	r2, [pc, #116]	; (8001d18 <HAL_UART_MspInit+0x15c>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d12b      	bne.n	8001d00 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ca8:	2300      	movs	r3, #0
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <HAL_UART_MspInit+0x150>)
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	4a16      	ldr	r2, [pc, #88]	; (8001d0c <HAL_UART_MspInit+0x150>)
 8001cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <HAL_UART_MspInit+0x150>)
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <HAL_UART_MspInit+0x150>)
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	4a0f      	ldr	r2, [pc, #60]	; (8001d0c <HAL_UART_MspInit+0x150>)
 8001cce:	f043 0308 	orr.w	r3, r3, #8
 8001cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd4:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <HAL_UART_MspInit+0x150>)
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001ce0:	2360      	movs	r3, #96	; 0x60
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cec:	2303      	movs	r3, #3
 8001cee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cf0:	2307      	movs	r3, #7
 8001cf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4808      	ldr	r0, [pc, #32]	; (8001d1c <HAL_UART_MspInit+0x160>)
 8001cfc:	f001 f912 	bl	8002f24 <HAL_GPIO_Init>
}
 8001d00:	bf00      	nop
 8001d02:	3738      	adds	r7, #56	; 0x38
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40004c00 	.word	0x40004c00
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020000 	.word	0x40020000
 8001d14:	40011000 	.word	0x40011000
 8001d18:	40004400 	.word	0x40004400
 8001d1c:	40020c00 	.word	0x40020c00

08001d20 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b0a0      	sub	sp, #128	; 0x80
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d38:	f107 0310 	add.w	r3, r7, #16
 8001d3c:	225c      	movs	r2, #92	; 0x5c
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4618      	mov	r0, r3
 8001d42:	f00e fbb9 	bl	80104b8 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a21      	ldr	r2, [pc, #132]	; (8001dd0 <HAL_PCD_MspInit+0xb0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d13b      	bne.n	8001dc8 <HAL_PCD_MspInit+0xa8>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001d50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d54:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001d56:	2300      	movs	r3, #0
 8001d58:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d5a:	f107 0310 	add.w	r3, r7, #16
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f004 fe0e 	bl	8006980 <HAL_RCCEx_PeriphCLKConfig>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8001d6a:	f7ff fc49 	bl	8001600 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <HAL_PCD_MspInit+0xb4>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <HAL_PCD_MspInit+0xb4>)
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <HAL_PCD_MspInit+0xb4>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d8a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d8e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001d9c:	230c      	movs	r3, #12
 8001d9e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001da4:	4619      	mov	r1, r3
 8001da6:	480c      	ldr	r0, [pc, #48]	; (8001dd8 <HAL_PCD_MspInit+0xb8>)
 8001da8:	f001 f8bc 	bl	8002f24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001dac:	2300      	movs	r3, #0
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <HAL_PCD_MspInit+0xb4>)
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	4a07      	ldr	r2, [pc, #28]	; (8001dd4 <HAL_PCD_MspInit+0xb4>)
 8001db6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001dba:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_PCD_MspInit+0xb4>)
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8001dc8:	bf00      	nop
 8001dca:	3780      	adds	r7, #128	; 0x80
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40040000 	.word	0x40040000
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020400 	.word	0x40020400

08001ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001de0:	e7fe      	b.n	8001de0 <NMI_Handler+0x4>

08001de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de6:	e7fe      	b.n	8001de6 <HardFault_Handler+0x4>

08001de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <MemManage_Handler+0x4>

08001dee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df2:	e7fe      	b.n	8001df2 <BusFault_Handler+0x4>

08001df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <UsageFault_Handler+0x4>

08001dfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e28:	f000 f8d0 	bl	8001fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <OTG_FS_IRQHandler+0x10>)
 8001e36:	f001 fd1b 	bl	8003870 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000d04 	.word	0x20000d04

08001e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e4c:	4a14      	ldr	r2, [pc, #80]	; (8001ea0 <_sbrk+0x5c>)
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <_sbrk+0x60>)
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <_sbrk+0x64>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d102      	bne.n	8001e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <_sbrk+0x64>)
 8001e62:	4a12      	ldr	r2, [pc, #72]	; (8001eac <_sbrk+0x68>)
 8001e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <_sbrk+0x64>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d207      	bcs.n	8001e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e74:	f00e fb38 	bl	80104e8 <__errno>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e82:	e009      	b.n	8001e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <_sbrk+0x64>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <_sbrk+0x64>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <_sbrk+0x64>)
 8001e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e96:	68fb      	ldr	r3, [r7, #12]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20020000 	.word	0x20020000
 8001ea4:	00000800 	.word	0x00000800
 8001ea8:	200008ec 	.word	0x200008ec
 8001eac:	20001240 	.word	0x20001240

08001eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <SystemInit+0x20>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eba:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <SystemInit+0x20>)
 8001ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ed8:	f7ff ffea 	bl	8001eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001edc:	480c      	ldr	r0, [pc, #48]	; (8001f10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ede:	490d      	ldr	r1, [pc, #52]	; (8001f14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ee0:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee4:	e002      	b.n	8001eec <LoopCopyDataInit>

08001ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eea:	3304      	adds	r3, #4

08001eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef0:	d3f9      	bcc.n	8001ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ef4:	4c0a      	ldr	r4, [pc, #40]	; (8001f20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef8:	e001      	b.n	8001efe <LoopFillZerobss>

08001efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001efc:	3204      	adds	r2, #4

08001efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f00:	d3fb      	bcc.n	8001efa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f02:	f00e faf7 	bl	80104f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f06:	f7fe fe5f 	bl	8000bc8 <main>
  bx  lr    
 8001f0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f14:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001f18:	08010eac 	.word	0x08010eac
  ldr r2, =_sbss
 8001f1c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001f20:	20001240 	.word	0x20001240

08001f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f24:	e7fe      	b.n	8001f24 <ADC_IRQHandler>
	...

08001f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f2c:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <HAL_Init+0x40>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0d      	ldr	r2, [pc, #52]	; (8001f68 <HAL_Init+0x40>)
 8001f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_Init+0x40>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <HAL_Init+0x40>)
 8001f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <HAL_Init+0x40>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a07      	ldr	r2, [pc, #28]	; (8001f68 <HAL_Init+0x40>)
 8001f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f50:	2003      	movs	r0, #3
 8001f52:	f000 fbc1 	bl	80026d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f56:	200f      	movs	r0, #15
 8001f58:	f000 f808 	bl	8001f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f5c:	f7ff fb56 	bl	800160c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40023c00 	.word	0x40023c00

08001f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_InitTick+0x54>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_InitTick+0x58>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 fbd9 	bl	8002742 <HAL_SYSTICK_Config>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00e      	b.n	8001fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b0f      	cmp	r3, #15
 8001f9e:	d80a      	bhi.n	8001fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	f000 fba1 	bl	80026ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fac:	4a06      	ldr	r2, [pc, #24]	; (8001fc8 <HAL_InitTick+0x5c>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e000      	b.n	8001fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	20000008 	.word	0x20000008
 8001fc8:	20000004 	.word	0x20000004

08001fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_IncTick+0x20>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_IncTick+0x24>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	4a04      	ldr	r2, [pc, #16]	; (8001ff0 <HAL_IncTick+0x24>)
 8001fde:	6013      	str	r3, [r2, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000008 	.word	0x20000008
 8001ff0:	200008f0 	.word	0x200008f0

08001ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff8:	4b03      	ldr	r3, [pc, #12]	; (8002008 <HAL_GetTick+0x14>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	200008f0 	.word	0x200008f0

0800200c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002014:	f7ff ffee 	bl	8001ff4 <HAL_GetTick>
 8002018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002024:	d005      	beq.n	8002032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <HAL_Delay+0x44>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4413      	add	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002032:	bf00      	nop
 8002034:	f7ff ffde 	bl	8001ff4 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	429a      	cmp	r2, r3
 8002042:	d8f7      	bhi.n	8002034 <HAL_Delay+0x28>
  {
  }
}
 8002044:	bf00      	nop
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000008 	.word	0x20000008

08002054 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e033      	b.n	80020d2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	2b00      	cmp	r3, #0
 8002070:	d109      	bne.n	8002086 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff faf2 	bl	800165c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f003 0310 	and.w	r3, r3, #16
 800208e:	2b00      	cmp	r3, #0
 8002090:	d118      	bne.n	80020c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800209a:	f023 0302 	bic.w	r3, r3, #2
 800209e:	f043 0202 	orr.w	r2, r3, #2
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f94a 	bl	8002340 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f023 0303 	bic.w	r3, r3, #3
 80020ba:	f043 0201 	orr.w	r2, r3, #1
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	641a      	str	r2, [r3, #64]	; 0x40
 80020c2:	e001      	b.n	80020c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x1c>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e113      	b.n	8002320 <HAL_ADC_ConfigChannel+0x244>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b09      	cmp	r3, #9
 8002106:	d925      	bls.n	8002154 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68d9      	ldr	r1, [r3, #12]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	b29b      	uxth	r3, r3
 8002114:	461a      	mov	r2, r3
 8002116:	4613      	mov	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	3b1e      	subs	r3, #30
 800211e:	2207      	movs	r2, #7
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43da      	mvns	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	400a      	ands	r2, r1
 800212c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68d9      	ldr	r1, [r3, #12]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	b29b      	uxth	r3, r3
 800213e:	4618      	mov	r0, r3
 8002140:	4603      	mov	r3, r0
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	4403      	add	r3, r0
 8002146:	3b1e      	subs	r3, #30
 8002148:	409a      	lsls	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	e022      	b.n	800219a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6919      	ldr	r1, [r3, #16]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	b29b      	uxth	r3, r3
 8002160:	461a      	mov	r2, r3
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	2207      	movs	r2, #7
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43da      	mvns	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	400a      	ands	r2, r1
 8002176:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6919      	ldr	r1, [r3, #16]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	b29b      	uxth	r3, r3
 8002188:	4618      	mov	r0, r3
 800218a:	4603      	mov	r3, r0
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	4403      	add	r3, r0
 8002190:	409a      	lsls	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b06      	cmp	r3, #6
 80021a0:	d824      	bhi.n	80021ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	3b05      	subs	r3, #5
 80021b4:	221f      	movs	r2, #31
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43da      	mvns	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	400a      	ands	r2, r1
 80021c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	4618      	mov	r0, r3
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	3b05      	subs	r3, #5
 80021de:	fa00 f203 	lsl.w	r2, r0, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	635a      	str	r2, [r3, #52]	; 0x34
 80021ea:	e04c      	b.n	8002286 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b0c      	cmp	r3, #12
 80021f2:	d824      	bhi.n	800223e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	3b23      	subs	r3, #35	; 0x23
 8002206:	221f      	movs	r2, #31
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43da      	mvns	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	400a      	ands	r2, r1
 8002214:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	b29b      	uxth	r3, r3
 8002222:	4618      	mov	r0, r3
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	3b23      	subs	r3, #35	; 0x23
 8002230:	fa00 f203 	lsl.w	r2, r0, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	631a      	str	r2, [r3, #48]	; 0x30
 800223c:	e023      	b.n	8002286 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	3b41      	subs	r3, #65	; 0x41
 8002250:	221f      	movs	r2, #31
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43da      	mvns	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	400a      	ands	r2, r1
 800225e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	b29b      	uxth	r3, r3
 800226c:	4618      	mov	r0, r3
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	3b41      	subs	r3, #65	; 0x41
 800227a:	fa00 f203 	lsl.w	r2, r0, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002286:	4b29      	ldr	r3, [pc, #164]	; (800232c <HAL_ADC_ConfigChannel+0x250>)
 8002288:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a28      	ldr	r2, [pc, #160]	; (8002330 <HAL_ADC_ConfigChannel+0x254>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d10f      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x1d8>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b12      	cmp	r3, #18
 800229a:	d10b      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a1d      	ldr	r2, [pc, #116]	; (8002330 <HAL_ADC_ConfigChannel+0x254>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d12b      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x23a>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a1c      	ldr	r2, [pc, #112]	; (8002334 <HAL_ADC_ConfigChannel+0x258>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d003      	beq.n	80022d0 <HAL_ADC_ConfigChannel+0x1f4>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b11      	cmp	r3, #17
 80022ce:	d122      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a11      	ldr	r2, [pc, #68]	; (8002334 <HAL_ADC_ConfigChannel+0x258>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d111      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_ADC_ConfigChannel+0x25c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a11      	ldr	r2, [pc, #68]	; (800233c <HAL_ADC_ConfigChannel+0x260>)
 80022f8:	fba2 2303 	umull	r2, r3, r2, r3
 80022fc:	0c9a      	lsrs	r2, r3, #18
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002308:	e002      	b.n	8002310 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	3b01      	subs	r3, #1
 800230e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f9      	bne.n	800230a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	40012300 	.word	0x40012300
 8002330:	40012000 	.word	0x40012000
 8002334:	10000012 	.word	0x10000012
 8002338:	20000000 	.word	0x20000000
 800233c:	431bde83 	.word	0x431bde83

08002340 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002348:	4b79      	ldr	r3, [pc, #484]	; (8002530 <ADC_Init+0x1f0>)
 800234a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	431a      	orrs	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002374:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	021a      	lsls	r2, r3, #8
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002398:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6859      	ldr	r1, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6899      	ldr	r1, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	4a58      	ldr	r2, [pc, #352]	; (8002534 <ADC_Init+0x1f4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d022      	beq.n	800241e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6899      	ldr	r1, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002408:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6899      	ldr	r1, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	e00f      	b.n	800243e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800242c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800243c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0202 	bic.w	r2, r2, #2
 800244c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6899      	ldr	r1, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	7e1b      	ldrb	r3, [r3, #24]
 8002458:	005a      	lsls	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01b      	beq.n	80024a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800247a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800248a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6859      	ldr	r1, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	3b01      	subs	r3, #1
 8002498:	035a      	lsls	r2, r3, #13
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	e007      	b.n	80024b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024b2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	051a      	lsls	r2, r3, #20
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6899      	ldr	r1, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024f6:	025a      	lsls	r2, r3, #9
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800250e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6899      	ldr	r1, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	029a      	lsls	r2, r3, #10
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	609a      	str	r2, [r3, #8]
}
 8002524:	bf00      	nop
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	40012300 	.word	0x40012300
 8002534:	0f000001 	.word	0x0f000001

08002538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <__NVIC_SetPriorityGrouping+0x44>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002554:	4013      	ands	r3, r2
 8002556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800256a:	4a04      	ldr	r2, [pc, #16]	; (800257c <__NVIC_SetPriorityGrouping+0x44>)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	60d3      	str	r3, [r2, #12]
}
 8002570:	bf00      	nop
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002584:	4b04      	ldr	r3, [pc, #16]	; (8002598 <__NVIC_GetPriorityGrouping+0x18>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	0a1b      	lsrs	r3, r3, #8
 800258a:	f003 0307 	and.w	r3, r3, #7
}
 800258e:	4618      	mov	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	db0b      	blt.n	80025c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	f003 021f 	and.w	r2, r3, #31
 80025b4:	4907      	ldr	r1, [pc, #28]	; (80025d4 <__NVIC_EnableIRQ+0x38>)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	2001      	movs	r0, #1
 80025be:	fa00 f202 	lsl.w	r2, r0, r2
 80025c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000e100 	.word	0xe000e100

080025d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	6039      	str	r1, [r7, #0]
 80025e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	db0a      	blt.n	8002602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	490c      	ldr	r1, [pc, #48]	; (8002624 <__NVIC_SetPriority+0x4c>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	0112      	lsls	r2, r2, #4
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	440b      	add	r3, r1
 80025fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002600:	e00a      	b.n	8002618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4908      	ldr	r1, [pc, #32]	; (8002628 <__NVIC_SetPriority+0x50>)
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	3b04      	subs	r3, #4
 8002610:	0112      	lsls	r2, r2, #4
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	440b      	add	r3, r1
 8002616:	761a      	strb	r2, [r3, #24]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000e100 	.word	0xe000e100
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800262c:	b480      	push	{r7}
 800262e:	b089      	sub	sp, #36	; 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f1c3 0307 	rsb	r3, r3, #7
 8002646:	2b04      	cmp	r3, #4
 8002648:	bf28      	it	cs
 800264a:	2304      	movcs	r3, #4
 800264c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3304      	adds	r3, #4
 8002652:	2b06      	cmp	r3, #6
 8002654:	d902      	bls.n	800265c <NVIC_EncodePriority+0x30>
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3b03      	subs	r3, #3
 800265a:	e000      	b.n	800265e <NVIC_EncodePriority+0x32>
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	f04f 32ff 	mov.w	r2, #4294967295
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43da      	mvns	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	401a      	ands	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002674:	f04f 31ff 	mov.w	r1, #4294967295
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	43d9      	mvns	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	4313      	orrs	r3, r2
         );
}
 8002686:	4618      	mov	r0, r3
 8002688:	3724      	adds	r7, #36	; 0x24
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a4:	d301      	bcc.n	80026aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026a6:	2301      	movs	r3, #1
 80026a8:	e00f      	b.n	80026ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <SysTick_Config+0x40>)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026b2:	210f      	movs	r1, #15
 80026b4:	f04f 30ff 	mov.w	r0, #4294967295
 80026b8:	f7ff ff8e 	bl	80025d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <SysTick_Config+0x40>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026c2:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <SysTick_Config+0x40>)
 80026c4:	2207      	movs	r2, #7
 80026c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	e000e010 	.word	0xe000e010

080026d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff ff29 	bl	8002538 <__NVIC_SetPriorityGrouping>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b086      	sub	sp, #24
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	4603      	mov	r3, r0
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002700:	f7ff ff3e 	bl	8002580 <__NVIC_GetPriorityGrouping>
 8002704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	68b9      	ldr	r1, [r7, #8]
 800270a:	6978      	ldr	r0, [r7, #20]
 800270c:	f7ff ff8e 	bl	800262c <NVIC_EncodePriority>
 8002710:	4602      	mov	r2, r0
 8002712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff ff5d 	bl	80025d8 <__NVIC_SetPriority>
}
 800271e:	bf00      	nop
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	4603      	mov	r3, r0
 800272e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff31 	bl	800259c <__NVIC_EnableIRQ>
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff ffa2 	bl	8002694 <SysTick_Config>
 8002750:	4603      	mov	r3, r0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e014      	b.n	8002796 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	791b      	ldrb	r3, [r3, #4]
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d105      	bne.n	8002782 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7fe ffb1 	bl	80016e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2202      	movs	r2, #2
 8002786:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e046      	b.n	8002840 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	795b      	ldrb	r3, [r3, #5]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <HAL_DAC_Start+0x20>
 80027ba:	2302      	movs	r3, #2
 80027bc:	e040      	b.n	8002840 <HAL_DAC_Start+0xa2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6819      	ldr	r1, [r3, #0]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2201      	movs	r2, #1
 80027d8:	409a      	lsls	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10f      	bne.n	8002808 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80027f2:	2b3c      	cmp	r3, #60	; 0x3c
 80027f4:	d11d      	bne.n	8002832 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0201 	orr.w	r2, r2, #1
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	e014      	b.n	8002832 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	213c      	movs	r1, #60	; 0x3c
 800281a:	fa01 f303 	lsl.w	r3, r1, r3
 800281e:	429a      	cmp	r2, r3
 8002820:	d107      	bne.n	8002832 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f042 0202 	orr.w	r2, r2, #2
 8002830:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e015      	b.n	8002894 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d105      	bne.n	8002880 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4413      	add	r3, r2
 800287a:	3308      	adds	r3, #8
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	e004      	b.n	800288a <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4413      	add	r3, r2
 8002886:	3314      	adds	r3, #20
 8002888:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	461a      	mov	r2, r3
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	371c      	adds	r7, #28
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b089      	sub	sp, #36	; 0x24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <HAL_DAC_ConfigChannel+0x1c>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e042      	b.n	8002946 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	795b      	ldrb	r3, [r3, #5]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_DAC_ConfigChannel+0x2c>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e03c      	b.n	8002946 <HAL_DAC_ConfigChannel+0xa6>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2201      	movs	r2, #1
 80028d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2202      	movs	r2, #2
 80028d6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80028ee:	43db      	mvns	r3, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4013      	ands	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	4313      	orrs	r3, r2
 8002900:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6819      	ldr	r1, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	22c0      	movs	r2, #192	; 0xc0
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43da      	mvns	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	400a      	ands	r2, r1
 8002936:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2201      	movs	r2, #1
 800293c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002944:	7ffb      	ldrb	r3, [r7, #31]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3724      	adds	r7, #36	; 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002966:	4b23      	ldr	r3, [pc, #140]	; (80029f4 <HAL_FLASH_Program+0xa0>)
 8002968:	7e1b      	ldrb	r3, [r3, #24]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_FLASH_Program+0x1e>
 800296e:	2302      	movs	r3, #2
 8002970:	e03b      	b.n	80029ea <HAL_FLASH_Program+0x96>
 8002972:	4b20      	ldr	r3, [pc, #128]	; (80029f4 <HAL_FLASH_Program+0xa0>)
 8002974:	2201      	movs	r2, #1
 8002976:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002978:	f24c 3050 	movw	r0, #50000	; 0xc350
 800297c:	f000 f870 	bl	8002a60 <FLASH_WaitForLastOperation>
 8002980:	4603      	mov	r3, r0
 8002982:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002984:	7dfb      	ldrb	r3, [r7, #23]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d12b      	bne.n	80029e2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d105      	bne.n	800299c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002990:	783b      	ldrb	r3, [r7, #0]
 8002992:	4619      	mov	r1, r3
 8002994:	68b8      	ldr	r0, [r7, #8]
 8002996:	f000 f91b 	bl	8002bd0 <FLASH_Program_Byte>
 800299a:	e016      	b.n	80029ca <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d105      	bne.n	80029ae <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80029a2:	883b      	ldrh	r3, [r7, #0]
 80029a4:	4619      	mov	r1, r3
 80029a6:	68b8      	ldr	r0, [r7, #8]
 80029a8:	f000 f8ee 	bl	8002b88 <FLASH_Program_HalfWord>
 80029ac:	e00d      	b.n	80029ca <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d105      	bne.n	80029c0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	4619      	mov	r1, r3
 80029b8:	68b8      	ldr	r0, [r7, #8]
 80029ba:	f000 f8c3 	bl	8002b44 <FLASH_Program_Word>
 80029be:	e004      	b.n	80029ca <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80029c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029c4:	68b8      	ldr	r0, [r7, #8]
 80029c6:	f000 f88b 	bl	8002ae0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029ce:	f000 f847 	bl	8002a60 <FLASH_WaitForLastOperation>
 80029d2:	4603      	mov	r3, r0
 80029d4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80029d6:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <HAL_FLASH_Program+0xa4>)
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	4a07      	ldr	r2, [pc, #28]	; (80029f8 <HAL_FLASH_Program+0xa4>)
 80029dc:	f023 0301 	bic.w	r3, r3, #1
 80029e0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80029e2:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <HAL_FLASH_Program+0xa0>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80029e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	200008f4 	.word	0x200008f4
 80029f8:	40023c00 	.word	0x40023c00

080029fc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002a06:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <HAL_FLASH_Unlock+0x38>)
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	da0b      	bge.n	8002a26 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002a0e:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <HAL_FLASH_Unlock+0x38>)
 8002a10:	4a09      	ldr	r2, [pc, #36]	; (8002a38 <HAL_FLASH_Unlock+0x3c>)
 8002a12:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002a14:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <HAL_FLASH_Unlock+0x38>)
 8002a16:	4a09      	ldr	r2, [pc, #36]	; (8002a3c <HAL_FLASH_Unlock+0x40>)
 8002a18:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_FLASH_Unlock+0x38>)
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	da01      	bge.n	8002a26 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002a26:	79fb      	ldrb	r3, [r7, #7]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40023c00 	.word	0x40023c00
 8002a38:	45670123 	.word	0x45670123
 8002a3c:	cdef89ab 	.word	0xcdef89ab

08002a40 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <HAL_FLASH_Lock+0x1c>)
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <HAL_FLASH_Lock+0x1c>)
 8002a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a4e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	40023c00 	.word	0x40023c00

08002a60 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a6c:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <FLASH_WaitForLastOperation+0x78>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002a72:	f7ff fabf 	bl	8001ff4 <HAL_GetTick>
 8002a76:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002a78:	e010      	b.n	8002a9c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a80:	d00c      	beq.n	8002a9c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d007      	beq.n	8002a98 <FLASH_WaitForLastOperation+0x38>
 8002a88:	f7ff fab4 	bl	8001ff4 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d201      	bcs.n	8002a9c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e019      	b.n	8002ad0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <FLASH_WaitForLastOperation+0x7c>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1e8      	bne.n	8002a7a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <FLASH_WaitForLastOperation+0x7c>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002ab4:	4b09      	ldr	r3, [pc, #36]	; (8002adc <FLASH_WaitForLastOperation+0x7c>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002aba:	4b08      	ldr	r3, [pc, #32]	; (8002adc <FLASH_WaitForLastOperation+0x7c>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002ac6:	f000 f8a5 	bl	8002c14 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
  
}  
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	200008f4 	.word	0x200008f4
 8002adc:	40023c00 	.word	0x40023c00

08002ae0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002aec:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <FLASH_Program_DoubleWord+0x60>)
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	4a13      	ldr	r2, [pc, #76]	; (8002b40 <FLASH_Program_DoubleWord+0x60>)
 8002af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002af8:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <FLASH_Program_DoubleWord+0x60>)
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	4a10      	ldr	r2, [pc, #64]	; (8002b40 <FLASH_Program_DoubleWord+0x60>)
 8002afe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002b02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002b04:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <FLASH_Program_DoubleWord+0x60>)
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	4a0d      	ldr	r2, [pc, #52]	; (8002b40 <FLASH_Program_DoubleWord+0x60>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002b16:	f3bf 8f6f 	isb	sy
}
 8002b1a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002b1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	000a      	movs	r2, r1
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	68f9      	ldr	r1, [r7, #12]
 8002b2e:	3104      	adds	r1, #4
 8002b30:	4613      	mov	r3, r2
 8002b32:	600b      	str	r3, [r1, #0]
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	40023c00 	.word	0x40023c00

08002b44 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <FLASH_Program_Word+0x40>)
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	4a0c      	ldr	r2, [pc, #48]	; (8002b84 <FLASH_Program_Word+0x40>)
 8002b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b58:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <FLASH_Program_Word+0x40>)
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	4a09      	ldr	r2, [pc, #36]	; (8002b84 <FLASH_Program_Word+0x40>)
 8002b60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b64:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002b66:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <FLASH_Program_Word+0x40>)
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	4a06      	ldr	r2, [pc, #24]	; (8002b84 <FLASH_Program_Word+0x40>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	601a      	str	r2, [r3, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	40023c00 	.word	0x40023c00

08002b88 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002b94:	4b0d      	ldr	r3, [pc, #52]	; (8002bcc <FLASH_Program_HalfWord+0x44>)
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	4a0c      	ldr	r2, [pc, #48]	; (8002bcc <FLASH_Program_HalfWord+0x44>)
 8002b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002ba0:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <FLASH_Program_HalfWord+0x44>)
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	4a09      	ldr	r2, [pc, #36]	; (8002bcc <FLASH_Program_HalfWord+0x44>)
 8002ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002baa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002bac:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <FLASH_Program_HalfWord+0x44>)
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	4a06      	ldr	r2, [pc, #24]	; (8002bcc <FLASH_Program_HalfWord+0x44>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	887a      	ldrh	r2, [r7, #2]
 8002bbc:	801a      	strh	r2, [r3, #0]
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40023c00 	.word	0x40023c00

08002bd0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <FLASH_Program_Byte+0x40>)
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	4a0b      	ldr	r2, [pc, #44]	; (8002c10 <FLASH_Program_Byte+0x40>)
 8002be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002be8:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <FLASH_Program_Byte+0x40>)
 8002bea:	4a09      	ldr	r2, [pc, #36]	; (8002c10 <FLASH_Program_Byte+0x40>)
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002bf0:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <FLASH_Program_Byte+0x40>)
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	4a06      	ldr	r2, [pc, #24]	; (8002c10 <FLASH_Program_Byte+0x40>)
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	701a      	strb	r2, [r3, #0]
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40023c00 	.word	0x40023c00

08002c14 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002c18:	4b2f      	ldr	r3, [pc, #188]	; (8002cd8 <FLASH_SetErrorCode+0xc4>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002c24:	4b2d      	ldr	r3, [pc, #180]	; (8002cdc <FLASH_SetErrorCode+0xc8>)
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	f043 0310 	orr.w	r3, r3, #16
 8002c2c:	4a2b      	ldr	r2, [pc, #172]	; (8002cdc <FLASH_SetErrorCode+0xc8>)
 8002c2e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002c30:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <FLASH_SetErrorCode+0xc4>)
 8002c32:	2210      	movs	r2, #16
 8002c34:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002c36:	4b28      	ldr	r3, [pc, #160]	; (8002cd8 <FLASH_SetErrorCode+0xc4>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d008      	beq.n	8002c54 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002c42:	4b26      	ldr	r3, [pc, #152]	; (8002cdc <FLASH_SetErrorCode+0xc8>)
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f043 0308 	orr.w	r3, r3, #8
 8002c4a:	4a24      	ldr	r2, [pc, #144]	; (8002cdc <FLASH_SetErrorCode+0xc8>)
 8002c4c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002c4e:	4b22      	ldr	r3, [pc, #136]	; (8002cd8 <FLASH_SetErrorCode+0xc4>)
 8002c50:	2220      	movs	r2, #32
 8002c52:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002c54:	4b20      	ldr	r3, [pc, #128]	; (8002cd8 <FLASH_SetErrorCode+0xc4>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002c60:	4b1e      	ldr	r3, [pc, #120]	; (8002cdc <FLASH_SetErrorCode+0xc8>)
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	f043 0304 	orr.w	r3, r3, #4
 8002c68:	4a1c      	ldr	r2, [pc, #112]	; (8002cdc <FLASH_SetErrorCode+0xc8>)
 8002c6a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002c6c:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <FLASH_SetErrorCode+0xc4>)
 8002c6e:	2240      	movs	r2, #64	; 0x40
 8002c70:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002c72:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <FLASH_SetErrorCode+0xc4>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d008      	beq.n	8002c90 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002c7e:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <FLASH_SetErrorCode+0xc8>)
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f043 0302 	orr.w	r3, r3, #2
 8002c86:	4a15      	ldr	r2, [pc, #84]	; (8002cdc <FLASH_SetErrorCode+0xc8>)
 8002c88:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002c8a:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <FLASH_SetErrorCode+0xc4>)
 8002c8c:	2280      	movs	r2, #128	; 0x80
 8002c8e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002c90:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <FLASH_SetErrorCode+0xc4>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d009      	beq.n	8002cb0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002c9c:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <FLASH_SetErrorCode+0xc8>)
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	4a0d      	ldr	r2, [pc, #52]	; (8002cdc <FLASH_SetErrorCode+0xc8>)
 8002ca6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <FLASH_SetErrorCode+0xc4>)
 8002caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cae:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002cb0:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <FLASH_SetErrorCode+0xc4>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002cbc:	4b07      	ldr	r3, [pc, #28]	; (8002cdc <FLASH_SetErrorCode+0xc8>)
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	f043 0320 	orr.w	r3, r3, #32
 8002cc4:	4a05      	ldr	r2, [pc, #20]	; (8002cdc <FLASH_SetErrorCode+0xc8>)
 8002cc6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <FLASH_SetErrorCode+0xc4>)
 8002cca:	2202      	movs	r2, #2
 8002ccc:	60da      	str	r2, [r3, #12]
  }
}
 8002cce:	bf00      	nop
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	40023c00 	.word	0x40023c00
 8002cdc:	200008f4 	.word	0x200008f4

08002ce0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002cf2:	4b31      	ldr	r3, [pc, #196]	; (8002db8 <HAL_FLASHEx_Erase+0xd8>)
 8002cf4:	7e1b      	ldrb	r3, [r3, #24]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <HAL_FLASHEx_Erase+0x1e>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e058      	b.n	8002db0 <HAL_FLASHEx_Erase+0xd0>
 8002cfe:	4b2e      	ldr	r3, [pc, #184]	; (8002db8 <HAL_FLASHEx_Erase+0xd8>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d08:	f7ff feaa 	bl	8002a60 <FLASH_WaitForLastOperation>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d148      	bne.n	8002da8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	f04f 32ff 	mov.w	r2, #4294967295
 8002d1c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d115      	bne.n	8002d52 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	4619      	mov	r1, r3
 8002d32:	4610      	mov	r0, r2
 8002d34:	f000 f844 	bl	8002dc0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d38:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d3c:	f7ff fe90 	bl	8002a60 <FLASH_WaitForLastOperation>
 8002d40:	4603      	mov	r3, r0
 8002d42:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002d44:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <HAL_FLASHEx_Erase+0xdc>)
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	4a1c      	ldr	r2, [pc, #112]	; (8002dbc <HAL_FLASHEx_Erase+0xdc>)
 8002d4a:	f023 0304 	bic.w	r3, r3, #4
 8002d4e:	6113      	str	r3, [r2, #16]
 8002d50:	e028      	b.n	8002da4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	e01c      	b.n	8002d94 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	4619      	mov	r1, r3
 8002d62:	68b8      	ldr	r0, [r7, #8]
 8002d64:	f000 f850 	bl	8002e08 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d6c:	f7ff fe78 	bl	8002a60 <FLASH_WaitForLastOperation>
 8002d70:	4603      	mov	r3, r0
 8002d72:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002d74:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <HAL_FLASHEx_Erase+0xdc>)
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	4a10      	ldr	r2, [pc, #64]	; (8002dbc <HAL_FLASHEx_Erase+0xdc>)
 8002d7a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002d7e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	601a      	str	r2, [r3, #0]
          break;
 8002d8c:	e00a      	b.n	8002da4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	3301      	adds	r3, #1
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d3da      	bcc.n	8002d5a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002da4:	f000 f878 	bl	8002e98 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002da8:	4b03      	ldr	r3, [pc, #12]	; (8002db8 <HAL_FLASHEx_Erase+0xd8>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	761a      	strb	r2, [r3, #24]

  return status;
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	200008f4 	.word	0x200008f4
 8002dbc:	40023c00 	.word	0x40023c00

08002dc0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	6039      	str	r1, [r7, #0]
 8002dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002dcc:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <FLASH_MassErase+0x44>)
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	4a0c      	ldr	r2, [pc, #48]	; (8002e04 <FLASH_MassErase+0x44>)
 8002dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002dd8:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <FLASH_MassErase+0x44>)
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	4a09      	ldr	r2, [pc, #36]	; (8002e04 <FLASH_MassErase+0x44>)
 8002dde:	f043 0304 	orr.w	r3, r3, #4
 8002de2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002de4:	4b07      	ldr	r3, [pc, #28]	; (8002e04 <FLASH_MassErase+0x44>)
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	79fb      	ldrb	r3, [r7, #7]
 8002dea:	021b      	lsls	r3, r3, #8
 8002dec:	4313      	orrs	r3, r2
 8002dee:	4a05      	ldr	r2, [pc, #20]	; (8002e04 <FLASH_MassErase+0x44>)
 8002df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df4:	6113      	str	r3, [r2, #16]
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40023c00 	.word	0x40023c00

08002e08 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d102      	bne.n	8002e24 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	e010      	b.n	8002e46 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d103      	bne.n	8002e32 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	e009      	b.n	8002e46 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002e32:	78fb      	ldrb	r3, [r7, #3]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d103      	bne.n	8002e40 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	e002      	b.n	8002e46 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002e40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e44:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002e46:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <FLASH_Erase_Sector+0x8c>)
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	4a12      	ldr	r2, [pc, #72]	; (8002e94 <FLASH_Erase_Sector+0x8c>)
 8002e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e50:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002e52:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <FLASH_Erase_Sector+0x8c>)
 8002e54:	691a      	ldr	r2, [r3, #16]
 8002e56:	490f      	ldr	r1, [pc, #60]	; (8002e94 <FLASH_Erase_Sector+0x8c>)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002e5e:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <FLASH_Erase_Sector+0x8c>)
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	4a0c      	ldr	r2, [pc, #48]	; (8002e94 <FLASH_Erase_Sector+0x8c>)
 8002e64:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002e68:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <FLASH_Erase_Sector+0x8c>)
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4313      	orrs	r3, r2
 8002e74:	4a07      	ldr	r2, [pc, #28]	; (8002e94 <FLASH_Erase_Sector+0x8c>)
 8002e76:	f043 0302 	orr.w	r3, r3, #2
 8002e7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002e7c:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <FLASH_Erase_Sector+0x8c>)
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	4a04      	ldr	r2, [pc, #16]	; (8002e94 <FLASH_Erase_Sector+0x8c>)
 8002e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e86:	6113      	str	r3, [r2, #16]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	40023c00 	.word	0x40023c00

08002e98 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002e9c:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <FLASH_FlushCaches+0x88>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d017      	beq.n	8002ed8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002ea8:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <FLASH_FlushCaches+0x88>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1c      	ldr	r2, [pc, #112]	; (8002f20 <FLASH_FlushCaches+0x88>)
 8002eae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002eb2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002eb4:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <FLASH_FlushCaches+0x88>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a19      	ldr	r2, [pc, #100]	; (8002f20 <FLASH_FlushCaches+0x88>)
 8002eba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	4b17      	ldr	r3, [pc, #92]	; (8002f20 <FLASH_FlushCaches+0x88>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a16      	ldr	r2, [pc, #88]	; (8002f20 <FLASH_FlushCaches+0x88>)
 8002ec6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002eca:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ecc:	4b14      	ldr	r3, [pc, #80]	; (8002f20 <FLASH_FlushCaches+0x88>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a13      	ldr	r2, [pc, #76]	; (8002f20 <FLASH_FlushCaches+0x88>)
 8002ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ed6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <FLASH_FlushCaches+0x88>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d017      	beq.n	8002f14 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <FLASH_FlushCaches+0x88>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a0d      	ldr	r2, [pc, #52]	; (8002f20 <FLASH_FlushCaches+0x88>)
 8002eea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eee:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <FLASH_FlushCaches+0x88>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0a      	ldr	r2, [pc, #40]	; (8002f20 <FLASH_FlushCaches+0x88>)
 8002ef6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <FLASH_FlushCaches+0x88>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a07      	ldr	r2, [pc, #28]	; (8002f20 <FLASH_FlushCaches+0x88>)
 8002f02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f06:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <FLASH_FlushCaches+0x88>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a04      	ldr	r2, [pc, #16]	; (8002f20 <FLASH_FlushCaches+0x88>)
 8002f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f12:	6013      	str	r3, [r2, #0]
  }
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40023c00 	.word	0x40023c00

08002f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b089      	sub	sp, #36	; 0x24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61fb      	str	r3, [r7, #28]
 8002f3e:	e165      	b.n	800320c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f40:	2201      	movs	r2, #1
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4013      	ands	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	f040 8154 	bne.w	8003206 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d005      	beq.n	8002f76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d130      	bne.n	8002fd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	2203      	movs	r2, #3
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fac:	2201      	movs	r2, #1
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 0201 	and.w	r2, r3, #1
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d017      	beq.n	8003014 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	2203      	movs	r2, #3
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d123      	bne.n	8003068 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	08da      	lsrs	r2, r3, #3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3208      	adds	r2, #8
 8003028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800302c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	220f      	movs	r2, #15
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	08da      	lsrs	r2, r3, #3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3208      	adds	r2, #8
 8003062:	69b9      	ldr	r1, [r7, #24]
 8003064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	2203      	movs	r2, #3
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 0203 	and.w	r2, r3, #3
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 80ae 	beq.w	8003206 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	4b5d      	ldr	r3, [pc, #372]	; (8003224 <HAL_GPIO_Init+0x300>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	4a5c      	ldr	r2, [pc, #368]	; (8003224 <HAL_GPIO_Init+0x300>)
 80030b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030b8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ba:	4b5a      	ldr	r3, [pc, #360]	; (8003224 <HAL_GPIO_Init+0x300>)
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030c6:	4a58      	ldr	r2, [pc, #352]	; (8003228 <HAL_GPIO_Init+0x304>)
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	089b      	lsrs	r3, r3, #2
 80030cc:	3302      	adds	r3, #2
 80030ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	220f      	movs	r2, #15
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43db      	mvns	r3, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4f      	ldr	r2, [pc, #316]	; (800322c <HAL_GPIO_Init+0x308>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d025      	beq.n	800313e <HAL_GPIO_Init+0x21a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4e      	ldr	r2, [pc, #312]	; (8003230 <HAL_GPIO_Init+0x30c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d01f      	beq.n	800313a <HAL_GPIO_Init+0x216>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a4d      	ldr	r2, [pc, #308]	; (8003234 <HAL_GPIO_Init+0x310>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d019      	beq.n	8003136 <HAL_GPIO_Init+0x212>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a4c      	ldr	r2, [pc, #304]	; (8003238 <HAL_GPIO_Init+0x314>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d013      	beq.n	8003132 <HAL_GPIO_Init+0x20e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a4b      	ldr	r2, [pc, #300]	; (800323c <HAL_GPIO_Init+0x318>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d00d      	beq.n	800312e <HAL_GPIO_Init+0x20a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a4a      	ldr	r2, [pc, #296]	; (8003240 <HAL_GPIO_Init+0x31c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d007      	beq.n	800312a <HAL_GPIO_Init+0x206>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a49      	ldr	r2, [pc, #292]	; (8003244 <HAL_GPIO_Init+0x320>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d101      	bne.n	8003126 <HAL_GPIO_Init+0x202>
 8003122:	2306      	movs	r3, #6
 8003124:	e00c      	b.n	8003140 <HAL_GPIO_Init+0x21c>
 8003126:	2307      	movs	r3, #7
 8003128:	e00a      	b.n	8003140 <HAL_GPIO_Init+0x21c>
 800312a:	2305      	movs	r3, #5
 800312c:	e008      	b.n	8003140 <HAL_GPIO_Init+0x21c>
 800312e:	2304      	movs	r3, #4
 8003130:	e006      	b.n	8003140 <HAL_GPIO_Init+0x21c>
 8003132:	2303      	movs	r3, #3
 8003134:	e004      	b.n	8003140 <HAL_GPIO_Init+0x21c>
 8003136:	2302      	movs	r3, #2
 8003138:	e002      	b.n	8003140 <HAL_GPIO_Init+0x21c>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <HAL_GPIO_Init+0x21c>
 800313e:	2300      	movs	r3, #0
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	f002 0203 	and.w	r2, r2, #3
 8003146:	0092      	lsls	r2, r2, #2
 8003148:	4093      	lsls	r3, r2
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4313      	orrs	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003150:	4935      	ldr	r1, [pc, #212]	; (8003228 <HAL_GPIO_Init+0x304>)
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	089b      	lsrs	r3, r3, #2
 8003156:	3302      	adds	r3, #2
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800315e:	4b3a      	ldr	r3, [pc, #232]	; (8003248 <HAL_GPIO_Init+0x324>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003182:	4a31      	ldr	r2, [pc, #196]	; (8003248 <HAL_GPIO_Init+0x324>)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003188:	4b2f      	ldr	r3, [pc, #188]	; (8003248 <HAL_GPIO_Init+0x324>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031ac:	4a26      	ldr	r2, [pc, #152]	; (8003248 <HAL_GPIO_Init+0x324>)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031b2:	4b25      	ldr	r3, [pc, #148]	; (8003248 <HAL_GPIO_Init+0x324>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	43db      	mvns	r3, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4013      	ands	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031d6:	4a1c      	ldr	r2, [pc, #112]	; (8003248 <HAL_GPIO_Init+0x324>)
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031dc:	4b1a      	ldr	r3, [pc, #104]	; (8003248 <HAL_GPIO_Init+0x324>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003200:	4a11      	ldr	r2, [pc, #68]	; (8003248 <HAL_GPIO_Init+0x324>)
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	3301      	adds	r3, #1
 800320a:	61fb      	str	r3, [r7, #28]
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	2b0f      	cmp	r3, #15
 8003210:	f67f ae96 	bls.w	8002f40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003214:	bf00      	nop
 8003216:	bf00      	nop
 8003218:	3724      	adds	r7, #36	; 0x24
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800
 8003228:	40013800 	.word	0x40013800
 800322c:	40020000 	.word	0x40020000
 8003230:	40020400 	.word	0x40020400
 8003234:	40020800 	.word	0x40020800
 8003238:	40020c00 	.word	0x40020c00
 800323c:	40021000 	.word	0x40021000
 8003240:	40021400 	.word	0x40021400
 8003244:	40021800 	.word	0x40021800
 8003248:	40013c00 	.word	0x40013c00

0800324c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	887b      	ldrh	r3, [r7, #2]
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
 8003268:	e001      	b.n	800326e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800326a:	2300      	movs	r3, #0
 800326c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800326e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	807b      	strh	r3, [r7, #2]
 8003288:	4613      	mov	r3, r2
 800328a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800328c:	787b      	ldrb	r3, [r7, #1]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003292:	887a      	ldrh	r2, [r7, #2]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003298:	e003      	b.n	80032a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800329a:	887b      	ldrh	r3, [r7, #2]
 800329c:	041a      	lsls	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	619a      	str	r2, [r3, #24]
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b086      	sub	sp, #24
 80032b2:	af02      	add	r7, sp, #8
 80032b4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e059      	b.n	8003374 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f00b f93e 	bl	800e55c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2203      	movs	r2, #3
 80032e4:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032ee:	d102      	bne.n	80032f6 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f006 fc35 	bl	8009b6a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	7c1a      	ldrb	r2, [r3, #16]
 8003308:	f88d 2000 	strb.w	r2, [sp]
 800330c:	3304      	adds	r3, #4
 800330e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003310:	f006 fbb6 	bl	8009a80 <USB_CoreInit>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2202      	movs	r2, #2
 800331e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e026      	b.n	8003374 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2101      	movs	r1, #1
 800332c:	4618      	mov	r0, r3
 800332e:	f006 fc2d 	bl	8009b8c <USB_SetCurrentMode>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e017      	b.n	8003374 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6818      	ldr	r0, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	7c1a      	ldrb	r2, [r3, #16]
 800334c:	f88d 2000 	strb.w	r2, [sp]
 8003350:	3304      	adds	r3, #4
 8003352:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003354:	f006 ff68 	bl	800a228 <USB_HostInit>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d005      	beq.n	800336a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2202      	movs	r2, #2
 8003362:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e004      	b.n	8003374 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800337c:	b590      	push	{r4, r7, lr}
 800337e:	b08b      	sub	sp, #44	; 0x2c
 8003380:	af04      	add	r7, sp, #16
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	4608      	mov	r0, r1
 8003386:	4611      	mov	r1, r2
 8003388:	461a      	mov	r2, r3
 800338a:	4603      	mov	r3, r0
 800338c:	70fb      	strb	r3, [r7, #3]
 800338e:	460b      	mov	r3, r1
 8003390:	70bb      	strb	r3, [r7, #2]
 8003392:	4613      	mov	r3, r2
 8003394:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003396:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003398:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_HCD_HC_Init+0x2c>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e09d      	b.n	80034e4 <HAL_HCD_HC_Init+0x168>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80033b0:	78fa      	ldrb	r2, [r7, #3]
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	3319      	adds	r3, #25
 80033c0:	2200      	movs	r2, #0
 80033c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	3314      	adds	r3, #20
 80033d4:	787a      	ldrb	r2, [r7, #1]
 80033d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80033d8:	78fa      	ldrb	r2, [r7, #3]
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	3315      	adds	r3, #21
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	3326      	adds	r3, #38	; 0x26
 80033fc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003400:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003402:	78fa      	ldrb	r2, [r7, #3]
 8003404:	78bb      	ldrb	r3, [r7, #2]
 8003406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800340a:	b2d8      	uxtb	r0, r3
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	3316      	adds	r3, #22
 800341a:	4602      	mov	r2, r0
 800341c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800341e:	78fb      	ldrb	r3, [r7, #3]
 8003420:	4619      	mov	r1, r3
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fbc8 	bl	8003bb8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003428:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800342c:	2b00      	cmp	r3, #0
 800342e:	da0a      	bge.n	8003446 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	3317      	adds	r3, #23
 8003440:	2201      	movs	r2, #1
 8003442:	701a      	strb	r2, [r3, #0]
 8003444:	e009      	b.n	800345a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	3317      	adds	r3, #23
 8003456:	2200      	movs	r2, #0
 8003458:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f007 f83a 	bl	800a4d8 <USB_GetHostSpeed>
 8003464:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003466:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800346a:	2b01      	cmp	r3, #1
 800346c:	d10b      	bne.n	8003486 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800346e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003472:	2b01      	cmp	r3, #1
 8003474:	d107      	bne.n	8003486 <HAL_HCD_HC_Init+0x10a>
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d104      	bne.n	8003486 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	2bbc      	cmp	r3, #188	; 0xbc
 8003480:	d901      	bls.n	8003486 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003482:	23bc      	movs	r3, #188	; 0xbc
 8003484:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003486:	78fa      	ldrb	r2, [r7, #3]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	3318      	adds	r3, #24
 8003496:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800349a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800349c:	78fa      	ldrb	r2, [r7, #3]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	b298      	uxth	r0, r3
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	3328      	adds	r3, #40	; 0x28
 80034b0:	4602      	mov	r2, r0
 80034b2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6818      	ldr	r0, [r3, #0]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	787c      	ldrb	r4, [r7, #1]
 80034be:	78ba      	ldrb	r2, [r7, #2]
 80034c0:	78f9      	ldrb	r1, [r7, #3]
 80034c2:	9302      	str	r3, [sp, #8]
 80034c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80034c8:	9301      	str	r3, [sp, #4]
 80034ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	4623      	mov	r3, r4
 80034d2:	f007 f829 	bl	800a528 <USB_HC_Init>
 80034d6:	4603      	mov	r3, r0
 80034d8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	371c      	adds	r7, #28
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd90      	pop	{r4, r7, pc}

080034ec <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_HCD_HC_Halt+0x1e>
 8003506:	2302      	movs	r3, #2
 8003508:	e00f      	b.n	800352a <HAL_HCD_HC_Halt+0x3e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f007 fbbb 	bl	800ac96 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8003528:	7bfb      	ldrb	r3, [r7, #15]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	4608      	mov	r0, r1
 800353e:	4611      	mov	r1, r2
 8003540:	461a      	mov	r2, r3
 8003542:	4603      	mov	r3, r0
 8003544:	70fb      	strb	r3, [r7, #3]
 8003546:	460b      	mov	r3, r1
 8003548:	70bb      	strb	r3, [r7, #2]
 800354a:	4613      	mov	r3, r2
 800354c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800354e:	78fa      	ldrb	r2, [r7, #3]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	3317      	adds	r3, #23
 800355e:	78ba      	ldrb	r2, [r7, #2]
 8003560:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003562:	78fa      	ldrb	r2, [r7, #3]
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	3326      	adds	r3, #38	; 0x26
 8003572:	787a      	ldrb	r2, [r7, #1]
 8003574:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003576:	7c3b      	ldrb	r3, [r7, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d114      	bne.n	80035a6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	332a      	adds	r3, #42	; 0x2a
 800358c:	2203      	movs	r2, #3
 800358e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003590:	78fa      	ldrb	r2, [r7, #3]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	3319      	adds	r3, #25
 80035a0:	7f3a      	ldrb	r2, [r7, #28]
 80035a2:	701a      	strb	r2, [r3, #0]
 80035a4:	e009      	b.n	80035ba <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035a6:	78fa      	ldrb	r2, [r7, #3]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	332a      	adds	r3, #42	; 0x2a
 80035b6:	2202      	movs	r2, #2
 80035b8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80035ba:	787b      	ldrb	r3, [r7, #1]
 80035bc:	2b03      	cmp	r3, #3
 80035be:	f200 8102 	bhi.w	80037c6 <HAL_HCD_HC_SubmitRequest+0x292>
 80035c2:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80035c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c8:	080035d9 	.word	0x080035d9
 80035cc:	080037b1 	.word	0x080037b1
 80035d0:	0800369d 	.word	0x0800369d
 80035d4:	08003727 	.word	0x08003727
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80035d8:	7c3b      	ldrb	r3, [r7, #16]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	f040 80f5 	bne.w	80037ca <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80035e0:	78bb      	ldrb	r3, [r7, #2]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d12d      	bne.n	8003642 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80035e6:	8b3b      	ldrh	r3, [r7, #24]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d109      	bne.n	8003600 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	333d      	adds	r3, #61	; 0x3d
 80035fc:	2201      	movs	r2, #1
 80035fe:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	333d      	adds	r3, #61	; 0x3d
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10a      	bne.n	800362c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	1a9b      	subs	r3, r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	332a      	adds	r3, #42	; 0x2a
 8003626:	2200      	movs	r2, #0
 8003628:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800362a:	e0ce      	b.n	80037ca <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800362c:	78fa      	ldrb	r2, [r7, #3]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	332a      	adds	r3, #42	; 0x2a
 800363c:	2202      	movs	r2, #2
 800363e:	701a      	strb	r2, [r3, #0]
      break;
 8003640:	e0c3      	b.n	80037ca <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	331a      	adds	r3, #26
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b01      	cmp	r3, #1
 8003656:	f040 80b8 	bne.w	80037ca <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	333c      	adds	r3, #60	; 0x3c
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003670:	78fa      	ldrb	r2, [r7, #3]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	332a      	adds	r3, #42	; 0x2a
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]
      break;
 8003684:	e0a1      	b.n	80037ca <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003686:	78fa      	ldrb	r2, [r7, #3]
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	1a9b      	subs	r3, r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	332a      	adds	r3, #42	; 0x2a
 8003696:	2202      	movs	r2, #2
 8003698:	701a      	strb	r2, [r3, #0]
      break;
 800369a:	e096      	b.n	80037ca <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800369c:	78bb      	ldrb	r3, [r7, #2]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d120      	bne.n	80036e4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	333d      	adds	r3, #61	; 0x3d
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10a      	bne.n	80036ce <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	332a      	adds	r3, #42	; 0x2a
 80036c8:	2200      	movs	r2, #0
 80036ca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80036cc:	e07e      	b.n	80037cc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036ce:	78fa      	ldrb	r2, [r7, #3]
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	1a9b      	subs	r3, r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	332a      	adds	r3, #42	; 0x2a
 80036de:	2202      	movs	r2, #2
 80036e0:	701a      	strb	r2, [r3, #0]
      break;
 80036e2:	e073      	b.n	80037cc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80036e4:	78fa      	ldrb	r2, [r7, #3]
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	333c      	adds	r3, #60	; 0x3c
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10a      	bne.n	8003710 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	332a      	adds	r3, #42	; 0x2a
 800370a:	2200      	movs	r2, #0
 800370c:	701a      	strb	r2, [r3, #0]
      break;
 800370e:	e05d      	b.n	80037cc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003710:	78fa      	ldrb	r2, [r7, #3]
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	332a      	adds	r3, #42	; 0x2a
 8003720:	2202      	movs	r2, #2
 8003722:	701a      	strb	r2, [r3, #0]
      break;
 8003724:	e052      	b.n	80037cc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003726:	78bb      	ldrb	r3, [r7, #2]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d120      	bne.n	800376e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800372c:	78fa      	ldrb	r2, [r7, #3]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	333d      	adds	r3, #61	; 0x3d
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10a      	bne.n	8003758 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003742:	78fa      	ldrb	r2, [r7, #3]
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	440b      	add	r3, r1
 8003750:	332a      	adds	r3, #42	; 0x2a
 8003752:	2200      	movs	r2, #0
 8003754:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003756:	e039      	b.n	80037cc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003758:	78fa      	ldrb	r2, [r7, #3]
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	332a      	adds	r3, #42	; 0x2a
 8003768:	2202      	movs	r2, #2
 800376a:	701a      	strb	r2, [r3, #0]
      break;
 800376c:	e02e      	b.n	80037cc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800376e:	78fa      	ldrb	r2, [r7, #3]
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	1a9b      	subs	r3, r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	333c      	adds	r3, #60	; 0x3c
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10a      	bne.n	800379a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003784:	78fa      	ldrb	r2, [r7, #3]
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	4613      	mov	r3, r2
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	332a      	adds	r3, #42	; 0x2a
 8003794:	2200      	movs	r2, #0
 8003796:	701a      	strb	r2, [r3, #0]
      break;
 8003798:	e018      	b.n	80037cc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800379a:	78fa      	ldrb	r2, [r7, #3]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	332a      	adds	r3, #42	; 0x2a
 80037aa:	2202      	movs	r2, #2
 80037ac:	701a      	strb	r2, [r3, #0]
      break;
 80037ae:	e00d      	b.n	80037cc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037b0:	78fa      	ldrb	r2, [r7, #3]
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	332a      	adds	r3, #42	; 0x2a
 80037c0:	2200      	movs	r2, #0
 80037c2:	701a      	strb	r2, [r3, #0]
      break;
 80037c4:	e002      	b.n	80037cc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80037c6:	bf00      	nop
 80037c8:	e000      	b.n	80037cc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80037ca:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80037cc:	78fa      	ldrb	r2, [r7, #3]
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	1a9b      	subs	r3, r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	332c      	adds	r3, #44	; 0x2c
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	8b39      	ldrh	r1, [r7, #24]
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4403      	add	r3, r0
 80037f0:	3334      	adds	r3, #52	; 0x34
 80037f2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80037f4:	78fa      	ldrb	r2, [r7, #3]
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	1a9b      	subs	r3, r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	334c      	adds	r3, #76	; 0x4c
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003808:	78fa      	ldrb	r2, [r7, #3]
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	1a9b      	subs	r3, r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	3338      	adds	r3, #56	; 0x38
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	3315      	adds	r3, #21
 800382c:	78fa      	ldrb	r2, [r7, #3]
 800382e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003830:	78fa      	ldrb	r2, [r7, #3]
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	334d      	adds	r3, #77	; 0x4d
 8003840:	2200      	movs	r2, #0
 8003842:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	78fa      	ldrb	r2, [r7, #3]
 800384a:	4613      	mov	r3, r2
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	3310      	adds	r3, #16
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	4413      	add	r3, r2
 8003858:	1d19      	adds	r1, r3, #4
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	799b      	ldrb	r3, [r3, #6]
 800385e:	461a      	mov	r2, r3
 8003860:	f006 ff8e 	bl	800a780 <USB_HC_StartXfer>
 8003864:	4603      	mov	r3, r0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop

08003870 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f006 fc8e 	bl	800a1a8 <USB_GetMode>
 800388c:	4603      	mov	r3, r0
 800388e:	2b01      	cmp	r3, #1
 8003890:	f040 80fb 	bne.w	8003a8a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f006 fc51 	bl	800a140 <USB_ReadInterrupts>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 80f1 	beq.w	8003a88 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f006 fc48 	bl	800a140 <USB_ReadInterrupts>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038ba:	d104      	bne.n	80038c6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80038c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f006 fc38 	bl	800a140 <USB_ReadInterrupts>
 80038d0:	4603      	mov	r3, r0
 80038d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038da:	d104      	bne.n	80038e6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80038e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f006 fc28 	bl	800a140 <USB_ReadInterrupts>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038fa:	d104      	bne.n	8003906 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003904:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f006 fc18 	bl	800a140 <USB_ReadInterrupts>
 8003910:	4603      	mov	r3, r0
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b02      	cmp	r3, #2
 8003918:	d103      	bne.n	8003922 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2202      	movs	r2, #2
 8003920:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f006 fc0a 	bl	800a140 <USB_ReadInterrupts>
 800392c:	4603      	mov	r3, r0
 800392e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003932:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003936:	d120      	bne.n	800397a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003940:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d113      	bne.n	800397a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003952:	2110      	movs	r1, #16
 8003954:	6938      	ldr	r0, [r7, #16]
 8003956:	f006 fac3 	bl	8009ee0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800395a:	6938      	ldr	r0, [r7, #16]
 800395c:	f006 faf2 	bl	8009f44 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	7a5b      	ldrb	r3, [r3, #9]
 8003964:	2b02      	cmp	r3, #2
 8003966:	d105      	bne.n	8003974 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2101      	movs	r1, #1
 800396e:	4618      	mov	r0, r3
 8003970:	f006 fd12 	bl	800a398 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f00a fe77 	bl	800e668 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f006 fbde 	bl	800a140 <USB_ReadInterrupts>
 8003984:	4603      	mov	r3, r0
 8003986:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800398a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800398e:	d102      	bne.n	8003996 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f001 fd33 	bl	80053fc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f006 fbd0 	bl	800a140 <USB_ReadInterrupts>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	d106      	bne.n	80039b8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f00a fe40 	bl	800e630 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2208      	movs	r2, #8
 80039b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f006 fbbf 	bl	800a140 <USB_ReadInterrupts>
 80039c2:	4603      	mov	r3, r0
 80039c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039cc:	d139      	bne.n	8003a42 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f007 f94e 	bl	800ac74 <USB_HC_ReadInterrupt>
 80039d8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	e025      	b.n	8003a2c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d018      	beq.n	8003a26 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a0a:	d106      	bne.n	8003a1a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	4619      	mov	r1, r3
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f905 	bl	8003c22 <HCD_HC_IN_IRQHandler>
 8003a18:	e005      	b.n	8003a26 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	4619      	mov	r1, r3
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 ff67 	bl	80048f4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	795b      	ldrb	r3, [r3, #5]
 8003a30:	461a      	mov	r2, r3
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d3d3      	bcc.n	80039e0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f006 fb7a 	bl	800a140 <USB_ReadInterrupts>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f003 0310 	and.w	r3, r3, #16
 8003a52:	2b10      	cmp	r3, #16
 8003a54:	d101      	bne.n	8003a5a <HAL_HCD_IRQHandler+0x1ea>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <HAL_HCD_IRQHandler+0x1ec>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d014      	beq.n	8003a8a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0210 	bic.w	r2, r2, #16
 8003a6e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f001 fbe4 	bl	800523e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	699a      	ldr	r2, [r3, #24]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f042 0210 	orr.w	r2, r2, #16
 8003a84:	619a      	str	r2, [r3, #24]
 8003a86:	e000      	b.n	8003a8a <HAL_HCD_IRQHandler+0x21a>
      return;
 8003a88:	bf00      	nop
    }
  }
}
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d101      	bne.n	8003aa6 <HAL_HCD_Start+0x16>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e013      	b.n	8003ace <HAL_HCD_Start+0x3e>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f006 fcd6 	bl	800a466 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f006 f842 	bl	8009b48 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_HCD_Stop+0x16>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e00d      	b.n	8003b08 <HAL_HCD_Stop+0x32>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f007 fa29 	bl	800af50 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f006 fc78 	bl	800a412 <USB_ResetPort>
 8003b22:	4603      	mov	r3, r0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003b38:	78fa      	ldrb	r2, [r7, #3]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	334c      	adds	r3, #76	; 0x4c
 8003b48:	781b      	ldrb	r3, [r3, #0]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003b62:	78fa      	ldrb	r2, [r7, #3]
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	4613      	mov	r3, r2
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	1a9b      	subs	r3, r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	440b      	add	r3, r1
 8003b70:	3338      	adds	r3, #56	; 0x38
 8003b72:	681b      	ldr	r3, [r3, #0]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f006 fcba 	bl	800a506 <USB_GetCurrentFrame>
 8003b92:	4603      	mov	r3, r0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f006 fc95 	bl	800a4d8 <USB_GetHostSpeed>
 8003bae:	4603      	mov	r3, r0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003bc4:	78fa      	ldrb	r2, [r7, #3]
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	1a9b      	subs	r3, r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	331a      	adds	r3, #26
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003bd8:	78fa      	ldrb	r2, [r7, #3]
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	1a9b      	subs	r3, r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	331b      	adds	r3, #27
 8003be8:	2200      	movs	r2, #0
 8003bea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003bec:	78fa      	ldrb	r2, [r7, #3]
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	1a9b      	subs	r3, r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	3325      	adds	r3, #37	; 0x25
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003c00:	78fa      	ldrb	r2, [r7, #3]
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	3324      	adds	r3, #36	; 0x24
 8003c10:	2200      	movs	r2, #0
 8003c12:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b086      	sub	sp, #24
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	78fa      	ldrb	r2, [r7, #3]
 8003c3e:	4611      	mov	r1, r2
 8003c40:	4618      	mov	r0, r3
 8003c42:	f006 fa90 	bl	800a166 <USB_ReadChInterrupts>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d11a      	bne.n	8003c86 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2304      	movs	r3, #4
 8003c60:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	334d      	adds	r3, #77	; 0x4d
 8003c72:	2207      	movs	r2, #7
 8003c74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	78fa      	ldrb	r2, [r7, #3]
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f007 f809 	bl	800ac96 <USB_HC_Halt>
 8003c84:	e09e      	b.n	8003dc4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f006 fa69 	bl	800a166 <USB_ReadChInterrupts>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c9e:	d11b      	bne.n	8003cd8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cac:	461a      	mov	r2, r3
 8003cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cb2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	334d      	adds	r3, #77	; 0x4d
 8003cc4:	2208      	movs	r2, #8
 8003cc6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	4611      	mov	r1, r2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f006 ffe0 	bl	800ac96 <USB_HC_Halt>
 8003cd6:	e075      	b.n	8003dc4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	4611      	mov	r1, r2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f006 fa40 	bl	800a166 <USB_ReadChInterrupts>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d11a      	bne.n	8003d26 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	2308      	movs	r3, #8
 8003d00:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	334d      	adds	r3, #77	; 0x4d
 8003d12:	2206      	movs	r2, #6
 8003d14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f006 ffb9 	bl	800ac96 <USB_HC_Halt>
 8003d24:	e04e      	b.n	8003dc4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	78fa      	ldrb	r2, [r7, #3]
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f006 fa19 	bl	800a166 <USB_ReadChInterrupts>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d3e:	d11b      	bne.n	8003d78 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003d40:	78fb      	ldrb	r3, [r7, #3]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d52:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003d54:	78fa      	ldrb	r2, [r7, #3]
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	1a9b      	subs	r3, r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	334d      	adds	r3, #77	; 0x4d
 8003d64:	2209      	movs	r2, #9
 8003d66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	78fa      	ldrb	r2, [r7, #3]
 8003d6e:	4611      	mov	r1, r2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f006 ff90 	bl	800ac96 <USB_HC_Halt>
 8003d76:	e025      	b.n	8003dc4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	78fa      	ldrb	r2, [r7, #3]
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f006 f9f0 	bl	800a166 <USB_ReadChInterrupts>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8c:	2b80      	cmp	r3, #128	; 0x80
 8003d8e:	d119      	bne.n	8003dc4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	2380      	movs	r3, #128	; 0x80
 8003da0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003da2:	78fa      	ldrb	r2, [r7, #3]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	1a9b      	subs	r3, r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	334d      	adds	r3, #77	; 0x4d
 8003db2:	2207      	movs	r2, #7
 8003db4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	78fa      	ldrb	r2, [r7, #3]
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f006 ff69 	bl	800ac96 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	78fa      	ldrb	r2, [r7, #3]
 8003dca:	4611      	mov	r1, r2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f006 f9ca 	bl	800a166 <USB_ReadChInterrupts>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ddc:	d112      	bne.n	8003e04 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	4611      	mov	r1, r2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f006 ff55 	bl	800ac96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df8:	461a      	mov	r2, r3
 8003dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003dfe:	6093      	str	r3, [r2, #8]
 8003e00:	f000 bd75 	b.w	80048ee <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	78fa      	ldrb	r2, [r7, #3]
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f006 f9aa 	bl	800a166 <USB_ReadChInterrupts>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	f040 8128 	bne.w	800406e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003e1e:	78fb      	ldrb	r3, [r7, #3]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2320      	movs	r3, #32
 8003e2e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003e30:	78fa      	ldrb	r2, [r7, #3]
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	4613      	mov	r3, r2
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	1a9b      	subs	r3, r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	331b      	adds	r3, #27
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d119      	bne.n	8003e7a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003e46:	78fa      	ldrb	r2, [r7, #3]
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	1a9b      	subs	r3, r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	440b      	add	r3, r1
 8003e54:	331b      	adds	r3, #27
 8003e56:	2200      	movs	r2, #0
 8003e58:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	015a      	lsls	r2, r3, #5
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	4413      	add	r3, r2
 8003e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	0151      	lsls	r1, r2, #5
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	440a      	add	r2, r1
 8003e70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e78:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	799b      	ldrb	r3, [r3, #6]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d01b      	beq.n	8003eba <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003e82:	78fa      	ldrb	r2, [r7, #3]
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	4613      	mov	r3, r2
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	3330      	adds	r3, #48	; 0x30
 8003e92:	6819      	ldr	r1, [r3, #0]
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	1ac9      	subs	r1, r1, r3
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4403      	add	r3, r0
 8003eb6:	3338      	adds	r3, #56	; 0x38
 8003eb8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003eba:	78fa      	ldrb	r2, [r7, #3]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	334d      	adds	r3, #77	; 0x4d
 8003eca:	2201      	movs	r2, #1
 8003ecc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003ece:	78fa      	ldrb	r2, [r7, #3]
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	1a9b      	subs	r3, r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	3344      	adds	r3, #68	; 0x44
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003ee2:	78fb      	ldrb	r3, [r7, #3]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eee:	461a      	mov	r2, r3
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	3326      	adds	r3, #38	; 0x26
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003f0a:	78fa      	ldrb	r2, [r7, #3]
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	3326      	adds	r3, #38	; 0x26
 8003f1a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d110      	bne.n	8003f42 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	78fa      	ldrb	r2, [r7, #3]
 8003f26:	4611      	mov	r1, r2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f006 feb4 	bl	800ac96 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003f2e:	78fb      	ldrb	r3, [r7, #3]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	2310      	movs	r3, #16
 8003f3e:	6093      	str	r3, [r2, #8]
 8003f40:	e03d      	b.n	8003fbe <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003f42:	78fa      	ldrb	r2, [r7, #3]
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	4613      	mov	r3, r2
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	3326      	adds	r3, #38	; 0x26
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d00a      	beq.n	8003f6e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003f58:	78fa      	ldrb	r2, [r7, #3]
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	3326      	adds	r3, #38	; 0x26
 8003f68:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d127      	bne.n	8003fbe <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	78fa      	ldrb	r2, [r7, #3]
 8003f7e:	0151      	lsls	r1, r2, #5
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	440a      	add	r2, r1
 8003f84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f8c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003f8e:	78fa      	ldrb	r2, [r7, #3]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	334c      	adds	r3, #76	; 0x4c
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003fa2:	78fa      	ldrb	r2, [r7, #3]
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	1a9b      	subs	r3, r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	440b      	add	r3, r1
 8003fb0:	334c      	adds	r3, #76	; 0x4c
 8003fb2:	781a      	ldrb	r2, [r3, #0]
 8003fb4:	78fb      	ldrb	r3, [r7, #3]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f00a fb63 	bl	800e684 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	799b      	ldrb	r3, [r3, #6]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d13b      	bne.n	800403e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003fc6:	78fa      	ldrb	r2, [r7, #3]
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	1a9b      	subs	r3, r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	3338      	adds	r3, #56	; 0x38
 8003fd6:	6819      	ldr	r1, [r3, #0]
 8003fd8:	78fa      	ldrb	r2, [r7, #3]
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4403      	add	r3, r0
 8003fe6:	3328      	adds	r3, #40	; 0x28
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	440b      	add	r3, r1
 8003fec:	1e59      	subs	r1, r3, #1
 8003fee:	78fa      	ldrb	r2, [r7, #3]
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	1a9b      	subs	r3, r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4403      	add	r3, r0
 8003ffc:	3328      	adds	r3, #40	; 0x28
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	fbb1 f3f3 	udiv	r3, r1, r3
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 8470 	beq.w	80048ee <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800400e:	78fa      	ldrb	r2, [r7, #3]
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	1a9b      	subs	r3, r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	333c      	adds	r3, #60	; 0x3c
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	78fa      	ldrb	r2, [r7, #3]
 8004022:	f083 0301 	eor.w	r3, r3, #1
 8004026:	b2d8      	uxtb	r0, r3
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	333c      	adds	r3, #60	; 0x3c
 8004036:	4602      	mov	r2, r0
 8004038:	701a      	strb	r2, [r3, #0]
 800403a:	f000 bc58 	b.w	80048ee <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800403e:	78fa      	ldrb	r2, [r7, #3]
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	1a9b      	subs	r3, r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	440b      	add	r3, r1
 800404c:	333c      	adds	r3, #60	; 0x3c
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	78fa      	ldrb	r2, [r7, #3]
 8004052:	f083 0301 	eor.w	r3, r3, #1
 8004056:	b2d8      	uxtb	r0, r3
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	4613      	mov	r3, r2
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	1a9b      	subs	r3, r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	440b      	add	r3, r1
 8004064:	333c      	adds	r3, #60	; 0x3c
 8004066:	4602      	mov	r2, r0
 8004068:	701a      	strb	r2, [r3, #0]
 800406a:	f000 bc40 	b.w	80048ee <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	78fa      	ldrb	r2, [r7, #3]
 8004074:	4611      	mov	r1, r2
 8004076:	4618      	mov	r0, r3
 8004078:	f006 f875 	bl	800a166 <USB_ReadChInterrupts>
 800407c:	4603      	mov	r3, r0
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b20      	cmp	r3, #32
 8004084:	d131      	bne.n	80040ea <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004086:	78fb      	ldrb	r3, [r7, #3]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4413      	add	r3, r2
 800408e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004092:	461a      	mov	r2, r3
 8004094:	2320      	movs	r3, #32
 8004096:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004098:	78fa      	ldrb	r2, [r7, #3]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	1a9b      	subs	r3, r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	331a      	adds	r3, #26
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	f040 841f 	bne.w	80048ee <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80040b0:	78fa      	ldrb	r2, [r7, #3]
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	4613      	mov	r3, r2
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	1a9b      	subs	r3, r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	331b      	adds	r3, #27
 80040c0:	2201      	movs	r2, #1
 80040c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80040c4:	78fa      	ldrb	r2, [r7, #3]
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	334d      	adds	r3, #77	; 0x4d
 80040d4:	2203      	movs	r2, #3
 80040d6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	78fa      	ldrb	r2, [r7, #3]
 80040de:	4611      	mov	r1, r2
 80040e0:	4618      	mov	r0, r3
 80040e2:	f006 fdd8 	bl	800ac96 <USB_HC_Halt>
 80040e6:	f000 bc02 	b.w	80048ee <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	78fa      	ldrb	r2, [r7, #3]
 80040f0:	4611      	mov	r1, r2
 80040f2:	4618      	mov	r0, r3
 80040f4:	f006 f837 	bl	800a166 <USB_ReadChInterrupts>
 80040f8:	4603      	mov	r3, r0
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b02      	cmp	r3, #2
 8004100:	f040 8305 	bne.w	800470e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4413      	add	r3, r2
 800410c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004110:	461a      	mov	r2, r3
 8004112:	2302      	movs	r3, #2
 8004114:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004116:	78fa      	ldrb	r2, [r7, #3]
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	4613      	mov	r3, r2
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	1a9b      	subs	r3, r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	440b      	add	r3, r1
 8004124:	334d      	adds	r3, #77	; 0x4d
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d114      	bne.n	8004156 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800412c:	78fa      	ldrb	r2, [r7, #3]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	334d      	adds	r3, #77	; 0x4d
 800413c:	2202      	movs	r2, #2
 800413e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004140:	78fa      	ldrb	r2, [r7, #3]
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	1a9b      	subs	r3, r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	334c      	adds	r3, #76	; 0x4c
 8004150:	2201      	movs	r2, #1
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	e2cc      	b.n	80046f0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004156:	78fa      	ldrb	r2, [r7, #3]
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	440b      	add	r3, r1
 8004164:	334d      	adds	r3, #77	; 0x4d
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b06      	cmp	r3, #6
 800416a:	d114      	bne.n	8004196 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800416c:	78fa      	ldrb	r2, [r7, #3]
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	4613      	mov	r3, r2
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	1a9b      	subs	r3, r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	334d      	adds	r3, #77	; 0x4d
 800417c:	2202      	movs	r2, #2
 800417e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004180:	78fa      	ldrb	r2, [r7, #3]
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	1a9b      	subs	r3, r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	334c      	adds	r3, #76	; 0x4c
 8004190:	2205      	movs	r2, #5
 8004192:	701a      	strb	r2, [r3, #0]
 8004194:	e2ac      	b.n	80046f0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004196:	78fa      	ldrb	r2, [r7, #3]
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	4613      	mov	r3, r2
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	1a9b      	subs	r3, r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	440b      	add	r3, r1
 80041a4:	334d      	adds	r3, #77	; 0x4d
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	2b07      	cmp	r3, #7
 80041aa:	d00b      	beq.n	80041c4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80041ac:	78fa      	ldrb	r2, [r7, #3]
 80041ae:	6879      	ldr	r1, [r7, #4]
 80041b0:	4613      	mov	r3, r2
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	1a9b      	subs	r3, r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	440b      	add	r3, r1
 80041ba:	334d      	adds	r3, #77	; 0x4d
 80041bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80041be:	2b09      	cmp	r3, #9
 80041c0:	f040 80a6 	bne.w	8004310 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041c4:	78fa      	ldrb	r2, [r7, #3]
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	4613      	mov	r3, r2
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	1a9b      	subs	r3, r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	334d      	adds	r3, #77	; 0x4d
 80041d4:	2202      	movs	r2, #2
 80041d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80041d8:	78fa      	ldrb	r2, [r7, #3]
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	3344      	adds	r3, #68	; 0x44
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	1c59      	adds	r1, r3, #1
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4403      	add	r3, r0
 80041f8:	3344      	adds	r3, #68	; 0x44
 80041fa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041fc:	78fa      	ldrb	r2, [r7, #3]
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	1a9b      	subs	r3, r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	3344      	adds	r3, #68	; 0x44
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b02      	cmp	r3, #2
 8004210:	d943      	bls.n	800429a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004212:	78fa      	ldrb	r2, [r7, #3]
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	4613      	mov	r3, r2
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	1a9b      	subs	r3, r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	440b      	add	r3, r1
 8004220:	3344      	adds	r3, #68	; 0x44
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004226:	78fa      	ldrb	r2, [r7, #3]
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	4613      	mov	r3, r2
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	1a9b      	subs	r3, r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	440b      	add	r3, r1
 8004234:	331a      	adds	r3, #26
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d123      	bne.n	8004284 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800423c:	78fa      	ldrb	r2, [r7, #3]
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	4613      	mov	r3, r2
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	1a9b      	subs	r3, r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	331b      	adds	r3, #27
 800424c:	2200      	movs	r2, #0
 800424e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004250:	78fa      	ldrb	r2, [r7, #3]
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	1a9b      	subs	r3, r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	331c      	adds	r3, #28
 8004260:	2200      	movs	r2, #0
 8004262:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4413      	add	r3, r2
 800426c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	78fa      	ldrb	r2, [r7, #3]
 8004274:	0151      	lsls	r1, r2, #5
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	440a      	add	r2, r1
 800427a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800427e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004282:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004284:	78fa      	ldrb	r2, [r7, #3]
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	4613      	mov	r3, r2
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	1a9b      	subs	r3, r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	334c      	adds	r3, #76	; 0x4c
 8004294:	2204      	movs	r2, #4
 8004296:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004298:	e229      	b.n	80046ee <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800429a:	78fa      	ldrb	r2, [r7, #3]
 800429c:	6879      	ldr	r1, [r7, #4]
 800429e:	4613      	mov	r3, r2
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	1a9b      	subs	r3, r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	440b      	add	r3, r1
 80042a8:	334c      	adds	r3, #76	; 0x4c
 80042aa:	2202      	movs	r2, #2
 80042ac:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80042ae:	78fa      	ldrb	r2, [r7, #3]
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	4613      	mov	r3, r2
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	3326      	adds	r3, #38	; 0x26
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00b      	beq.n	80042dc <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80042c4:	78fa      	ldrb	r2, [r7, #3]
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	1a9b      	subs	r3, r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	3326      	adds	r3, #38	; 0x26
 80042d4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	f040 8209 	bne.w	80046ee <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80042dc:	78fb      	ldrb	r3, [r7, #3]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80042f2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042fa:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80042fc:	78fb      	ldrb	r3, [r7, #3]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	4413      	add	r3, r2
 8004304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004308:	461a      	mov	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800430e:	e1ee      	b.n	80046ee <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004310:	78fa      	ldrb	r2, [r7, #3]
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	4613      	mov	r3, r2
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	1a9b      	subs	r3, r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	334d      	adds	r3, #77	; 0x4d
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b05      	cmp	r3, #5
 8004324:	f040 80c8 	bne.w	80044b8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004328:	78fa      	ldrb	r2, [r7, #3]
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	4613      	mov	r3, r2
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	1a9b      	subs	r3, r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	334d      	adds	r3, #77	; 0x4d
 8004338:	2202      	movs	r2, #2
 800433a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800433c:	78fa      	ldrb	r2, [r7, #3]
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	4613      	mov	r3, r2
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	331b      	adds	r3, #27
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b01      	cmp	r3, #1
 8004350:	f040 81ce 	bne.w	80046f0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004354:	78fa      	ldrb	r2, [r7, #3]
 8004356:	6879      	ldr	r1, [r7, #4]
 8004358:	4613      	mov	r3, r2
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	1a9b      	subs	r3, r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	440b      	add	r3, r1
 8004362:	3326      	adds	r3, #38	; 0x26
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	2b03      	cmp	r3, #3
 8004368:	d16b      	bne.n	8004442 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800436a:	78fa      	ldrb	r2, [r7, #3]
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	4613      	mov	r3, r2
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	1a9b      	subs	r3, r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	440b      	add	r3, r1
 8004378:	3348      	adds	r3, #72	; 0x48
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	1c59      	adds	r1, r3, #1
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	4613      	mov	r3, r2
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	1a9b      	subs	r3, r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4403      	add	r3, r0
 800438a:	3348      	adds	r3, #72	; 0x48
 800438c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800438e:	78fa      	ldrb	r2, [r7, #3]
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	4613      	mov	r3, r2
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	1a9b      	subs	r3, r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	3348      	adds	r3, #72	; 0x48
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d943      	bls.n	800442c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80043a4:	78fa      	ldrb	r2, [r7, #3]
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	1a9b      	subs	r3, r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	3348      	adds	r3, #72	; 0x48
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80043b8:	78fa      	ldrb	r2, [r7, #3]
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	4613      	mov	r3, r2
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	331b      	adds	r3, #27
 80043c8:	2200      	movs	r2, #0
 80043ca:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80043cc:	78fa      	ldrb	r2, [r7, #3]
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	4613      	mov	r3, r2
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	1a9b      	subs	r3, r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	3344      	adds	r3, #68	; 0x44
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d809      	bhi.n	80043f6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80043e2:	78fa      	ldrb	r2, [r7, #3]
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	4613      	mov	r3, r2
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	1a9b      	subs	r3, r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	440b      	add	r3, r1
 80043f0:	331c      	adds	r3, #28
 80043f2:	2201      	movs	r2, #1
 80043f4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	78fa      	ldrb	r2, [r7, #3]
 8004406:	0151      	lsls	r1, r2, #5
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	440a      	add	r2, r1
 800440c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004414:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004416:	78fa      	ldrb	r2, [r7, #3]
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	4613      	mov	r3, r2
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	1a9b      	subs	r3, r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	440b      	add	r3, r1
 8004424:	334c      	adds	r3, #76	; 0x4c
 8004426:	2204      	movs	r2, #4
 8004428:	701a      	strb	r2, [r3, #0]
 800442a:	e014      	b.n	8004456 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800442c:	78fa      	ldrb	r2, [r7, #3]
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	4613      	mov	r3, r2
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	1a9b      	subs	r3, r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	334c      	adds	r3, #76	; 0x4c
 800443c:	2202      	movs	r2, #2
 800443e:	701a      	strb	r2, [r3, #0]
 8004440:	e009      	b.n	8004456 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	334c      	adds	r3, #76	; 0x4c
 8004452:	2202      	movs	r2, #2
 8004454:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004456:	78fa      	ldrb	r2, [r7, #3]
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	4613      	mov	r3, r2
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	1a9b      	subs	r3, r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	3326      	adds	r3, #38	; 0x26
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00b      	beq.n	8004484 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800446c:	78fa      	ldrb	r2, [r7, #3]
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	3326      	adds	r3, #38	; 0x26
 800447c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800447e:	2b02      	cmp	r3, #2
 8004480:	f040 8136 	bne.w	80046f0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004484:	78fb      	ldrb	r3, [r7, #3]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4413      	add	r3, r2
 800448c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800449a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044a2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b0:	461a      	mov	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	e11b      	b.n	80046f0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80044b8:	78fa      	ldrb	r2, [r7, #3]
 80044ba:	6879      	ldr	r1, [r7, #4]
 80044bc:	4613      	mov	r3, r2
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	1a9b      	subs	r3, r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	440b      	add	r3, r1
 80044c6:	334d      	adds	r3, #77	; 0x4d
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	f040 8081 	bne.w	80045d2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	4613      	mov	r3, r2
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	334d      	adds	r3, #77	; 0x4d
 80044e0:	2202      	movs	r2, #2
 80044e2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80044e4:	78fa      	ldrb	r2, [r7, #3]
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	331b      	adds	r3, #27
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	f040 80fa 	bne.w	80046f0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044fc:	78fa      	ldrb	r2, [r7, #3]
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	4613      	mov	r3, r2
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	1a9b      	subs	r3, r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	440b      	add	r3, r1
 800450a:	334c      	adds	r3, #76	; 0x4c
 800450c:	2202      	movs	r2, #2
 800450e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	4413      	add	r3, r2
 8004518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	78fa      	ldrb	r2, [r7, #3]
 8004520:	0151      	lsls	r1, r2, #5
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	440a      	add	r2, r1
 8004526:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800452a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4413      	add	r3, r2
 8004538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	78fa      	ldrb	r2, [r7, #3]
 8004540:	0151      	lsls	r1, r2, #5
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	440a      	add	r2, r1
 8004546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800454a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800454e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004550:	78fb      	ldrb	r3, [r7, #3]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	4413      	add	r3, r2
 8004558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	78fa      	ldrb	r2, [r7, #3]
 8004560:	0151      	lsls	r1, r2, #5
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	440a      	add	r2, r1
 8004566:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800456a:	f023 0320 	bic.w	r3, r3, #32
 800456e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004570:	78fa      	ldrb	r2, [r7, #3]
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	4613      	mov	r3, r2
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	1a9b      	subs	r3, r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	3326      	adds	r3, #38	; 0x26
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00b      	beq.n	800459e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004586:	78fa      	ldrb	r2, [r7, #3]
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	4613      	mov	r3, r2
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	1a9b      	subs	r3, r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	440b      	add	r3, r1
 8004594:	3326      	adds	r3, #38	; 0x26
 8004596:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004598:	2b02      	cmp	r3, #2
 800459a:	f040 80a9 	bne.w	80046f0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800459e:	78fb      	ldrb	r3, [r7, #3]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045b4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045bc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80045be:	78fb      	ldrb	r3, [r7, #3]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ca:	461a      	mov	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6013      	str	r3, [r2, #0]
 80045d0:	e08e      	b.n	80046f0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80045d2:	78fa      	ldrb	r2, [r7, #3]
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	4613      	mov	r3, r2
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	1a9b      	subs	r3, r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	440b      	add	r3, r1
 80045e0:	334d      	adds	r3, #77	; 0x4d
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d143      	bne.n	8004670 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045e8:	78fa      	ldrb	r2, [r7, #3]
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	334d      	adds	r3, #77	; 0x4d
 80045f8:	2202      	movs	r2, #2
 80045fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80045fc:	78fa      	ldrb	r2, [r7, #3]
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	4613      	mov	r3, r2
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	334c      	adds	r3, #76	; 0x4c
 800460c:	2202      	movs	r2, #2
 800460e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004610:	78fa      	ldrb	r2, [r7, #3]
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	3326      	adds	r3, #38	; 0x26
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004626:	78fa      	ldrb	r2, [r7, #3]
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	4613      	mov	r3, r2
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	1a9b      	subs	r3, r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	440b      	add	r3, r1
 8004634:	3326      	adds	r3, #38	; 0x26
 8004636:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004638:	2b02      	cmp	r3, #2
 800463a:	d159      	bne.n	80046f0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	4413      	add	r3, r2
 8004644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004652:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800465a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800465c:	78fb      	ldrb	r3, [r7, #3]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	4413      	add	r3, r2
 8004664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004668:	461a      	mov	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	e03f      	b.n	80046f0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004670:	78fa      	ldrb	r2, [r7, #3]
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	4613      	mov	r3, r2
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	1a9b      	subs	r3, r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	334d      	adds	r3, #77	; 0x4d
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b08      	cmp	r3, #8
 8004684:	d126      	bne.n	80046d4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004686:	78fa      	ldrb	r2, [r7, #3]
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	4613      	mov	r3, r2
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	1a9b      	subs	r3, r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	440b      	add	r3, r1
 8004694:	334d      	adds	r3, #77	; 0x4d
 8004696:	2202      	movs	r2, #2
 8004698:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800469a:	78fa      	ldrb	r2, [r7, #3]
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	4613      	mov	r3, r2
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	1a9b      	subs	r3, r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	440b      	add	r3, r1
 80046a8:	3344      	adds	r3, #68	; 0x44
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	1c59      	adds	r1, r3, #1
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4403      	add	r3, r0
 80046ba:	3344      	adds	r3, #68	; 0x44
 80046bc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80046be:	78fa      	ldrb	r2, [r7, #3]
 80046c0:	6879      	ldr	r1, [r7, #4]
 80046c2:	4613      	mov	r3, r2
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	1a9b      	subs	r3, r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	440b      	add	r3, r1
 80046cc:	334c      	adds	r3, #76	; 0x4c
 80046ce:	2204      	movs	r2, #4
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	e00d      	b.n	80046f0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80046d4:	78fa      	ldrb	r2, [r7, #3]
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	4613      	mov	r3, r2
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	1a9b      	subs	r3, r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	334d      	adds	r3, #77	; 0x4d
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	f000 8100 	beq.w	80048ec <HCD_HC_IN_IRQHandler+0xcca>
 80046ec:	e000      	b.n	80046f0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046ee:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80046f0:	78fa      	ldrb	r2, [r7, #3]
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	4613      	mov	r3, r2
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	1a9b      	subs	r3, r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	334c      	adds	r3, #76	; 0x4c
 8004700:	781a      	ldrb	r2, [r3, #0]
 8004702:	78fb      	ldrb	r3, [r7, #3]
 8004704:	4619      	mov	r1, r3
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f009 ffbc 	bl	800e684 <HAL_HCD_HC_NotifyURBChange_Callback>
 800470c:	e0ef      	b.n	80048ee <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	78fa      	ldrb	r2, [r7, #3]
 8004714:	4611      	mov	r1, r2
 8004716:	4618      	mov	r0, r3
 8004718:	f005 fd25 	bl	800a166 <USB_ReadChInterrupts>
 800471c:	4603      	mov	r3, r0
 800471e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004722:	2b40      	cmp	r3, #64	; 0x40
 8004724:	d12f      	bne.n	8004786 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004726:	78fb      	ldrb	r3, [r7, #3]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	4413      	add	r3, r2
 800472e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004732:	461a      	mov	r2, r3
 8004734:	2340      	movs	r3, #64	; 0x40
 8004736:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004738:	78fa      	ldrb	r2, [r7, #3]
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	4613      	mov	r3, r2
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	1a9b      	subs	r3, r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	440b      	add	r3, r1
 8004746:	334d      	adds	r3, #77	; 0x4d
 8004748:	2205      	movs	r2, #5
 800474a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800474c:	78fa      	ldrb	r2, [r7, #3]
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	4613      	mov	r3, r2
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	1a9b      	subs	r3, r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	331a      	adds	r3, #26
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d109      	bne.n	8004776 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004762:	78fa      	ldrb	r2, [r7, #3]
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	1a9b      	subs	r3, r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	440b      	add	r3, r1
 8004770:	3344      	adds	r3, #68	; 0x44
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	78fa      	ldrb	r2, [r7, #3]
 800477c:	4611      	mov	r1, r2
 800477e:	4618      	mov	r0, r3
 8004780:	f006 fa89 	bl	800ac96 <USB_HC_Halt>
 8004784:	e0b3      	b.n	80048ee <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	78fa      	ldrb	r2, [r7, #3]
 800478c:	4611      	mov	r1, r2
 800478e:	4618      	mov	r0, r3
 8004790:	f005 fce9 	bl	800a166 <USB_ReadChInterrupts>
 8004794:	4603      	mov	r3, r0
 8004796:	f003 0310 	and.w	r3, r3, #16
 800479a:	2b10      	cmp	r3, #16
 800479c:	f040 80a7 	bne.w	80048ee <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80047a0:	78fa      	ldrb	r2, [r7, #3]
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	4613      	mov	r3, r2
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	1a9b      	subs	r3, r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	440b      	add	r3, r1
 80047ae:	3326      	adds	r3, #38	; 0x26
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d11b      	bne.n	80047ee <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80047b6:	78fa      	ldrb	r2, [r7, #3]
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	440b      	add	r3, r1
 80047c4:	3344      	adds	r3, #68	; 0x44
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80047ca:	78fa      	ldrb	r2, [r7, #3]
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	1a9b      	subs	r3, r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	440b      	add	r3, r1
 80047d8:	334d      	adds	r3, #77	; 0x4d
 80047da:	2204      	movs	r2, #4
 80047dc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	78fa      	ldrb	r2, [r7, #3]
 80047e4:	4611      	mov	r1, r2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f006 fa55 	bl	800ac96 <USB_HC_Halt>
 80047ec:	e03f      	b.n	800486e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047ee:	78fa      	ldrb	r2, [r7, #3]
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	4613      	mov	r3, r2
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	1a9b      	subs	r3, r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	440b      	add	r3, r1
 80047fc:	3326      	adds	r3, #38	; 0x26
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004804:	78fa      	ldrb	r2, [r7, #3]
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	4613      	mov	r3, r2
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	3326      	adds	r3, #38	; 0x26
 8004814:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004816:	2b02      	cmp	r3, #2
 8004818:	d129      	bne.n	800486e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800481a:	78fa      	ldrb	r2, [r7, #3]
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	4613      	mov	r3, r2
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	1a9b      	subs	r3, r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	440b      	add	r3, r1
 8004828:	3344      	adds	r3, #68	; 0x44
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	799b      	ldrb	r3, [r3, #6]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <HCD_HC_IN_IRQHandler+0xc2a>
 8004836:	78fa      	ldrb	r2, [r7, #3]
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	4613      	mov	r3, r2
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	1a9b      	subs	r3, r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	440b      	add	r3, r1
 8004844:	331b      	adds	r3, #27
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d110      	bne.n	800486e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800484c:	78fa      	ldrb	r2, [r7, #3]
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	4613      	mov	r3, r2
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	334d      	adds	r3, #77	; 0x4d
 800485c:	2204      	movs	r2, #4
 800485e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	78fa      	ldrb	r2, [r7, #3]
 8004866:	4611      	mov	r1, r2
 8004868:	4618      	mov	r0, r3
 800486a:	f006 fa14 	bl	800ac96 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800486e:	78fa      	ldrb	r2, [r7, #3]
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	1a9b      	subs	r3, r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	440b      	add	r3, r1
 800487c:	331b      	adds	r3, #27
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d129      	bne.n	80048d8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004884:	78fa      	ldrb	r2, [r7, #3]
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	4613      	mov	r3, r2
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	1a9b      	subs	r3, r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	331b      	adds	r3, #27
 8004894:	2200      	movs	r2, #0
 8004896:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004898:	78fb      	ldrb	r3, [r7, #3]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	78fa      	ldrb	r2, [r7, #3]
 80048a8:	0151      	lsls	r1, r2, #5
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	440a      	add	r2, r1
 80048ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048b6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	78fa      	ldrb	r2, [r7, #3]
 80048c8:	0151      	lsls	r1, r2, #5
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	440a      	add	r2, r1
 80048ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048d2:	f043 0320 	orr.w	r3, r3, #32
 80048d6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80048d8:	78fb      	ldrb	r3, [r7, #3]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e4:	461a      	mov	r2, r3
 80048e6:	2310      	movs	r3, #16
 80048e8:	6093      	str	r3, [r2, #8]
 80048ea:	e000      	b.n	80048ee <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80048ec:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	460b      	mov	r3, r1
 80048fe:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	78fa      	ldrb	r2, [r7, #3]
 8004910:	4611      	mov	r1, r2
 8004912:	4618      	mov	r0, r3
 8004914:	f005 fc27 	bl	800a166 <USB_ReadChInterrupts>
 8004918:	4603      	mov	r3, r0
 800491a:	f003 0304 	and.w	r3, r3, #4
 800491e:	2b04      	cmp	r3, #4
 8004920:	d11b      	bne.n	800495a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004922:	78fb      	ldrb	r3, [r7, #3]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4413      	add	r3, r2
 800492a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800492e:	461a      	mov	r2, r3
 8004930:	2304      	movs	r3, #4
 8004932:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004934:	78fa      	ldrb	r2, [r7, #3]
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	4613      	mov	r3, r2
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	1a9b      	subs	r3, r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	334d      	adds	r3, #77	; 0x4d
 8004944:	2207      	movs	r2, #7
 8004946:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	78fa      	ldrb	r2, [r7, #3]
 800494e:	4611      	mov	r1, r2
 8004950:	4618      	mov	r0, r3
 8004952:	f006 f9a0 	bl	800ac96 <USB_HC_Halt>
 8004956:	f000 bc6f 	b.w	8005238 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	78fa      	ldrb	r2, [r7, #3]
 8004960:	4611      	mov	r1, r2
 8004962:	4618      	mov	r0, r3
 8004964:	f005 fbff 	bl	800a166 <USB_ReadChInterrupts>
 8004968:	4603      	mov	r3, r0
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b20      	cmp	r3, #32
 8004970:	f040 8082 	bne.w	8004a78 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	4413      	add	r3, r2
 800497c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004980:	461a      	mov	r2, r3
 8004982:	2320      	movs	r3, #32
 8004984:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004986:	78fa      	ldrb	r2, [r7, #3]
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	4613      	mov	r3, r2
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	1a9b      	subs	r3, r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	440b      	add	r3, r1
 8004994:	3319      	adds	r3, #25
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d124      	bne.n	80049e6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800499c:	78fa      	ldrb	r2, [r7, #3]
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	4613      	mov	r3, r2
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	1a9b      	subs	r3, r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	3319      	adds	r3, #25
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049b0:	78fa      	ldrb	r2, [r7, #3]
 80049b2:	6879      	ldr	r1, [r7, #4]
 80049b4:	4613      	mov	r3, r2
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	334c      	adds	r3, #76	; 0x4c
 80049c0:	2202      	movs	r2, #2
 80049c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80049c4:	78fa      	ldrb	r2, [r7, #3]
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	4613      	mov	r3, r2
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	1a9b      	subs	r3, r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	334d      	adds	r3, #77	; 0x4d
 80049d4:	2203      	movs	r2, #3
 80049d6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	78fa      	ldrb	r2, [r7, #3]
 80049de:	4611      	mov	r1, r2
 80049e0:	4618      	mov	r0, r3
 80049e2:	f006 f958 	bl	800ac96 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80049e6:	78fa      	ldrb	r2, [r7, #3]
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	1a9b      	subs	r3, r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	440b      	add	r3, r1
 80049f4:	331a      	adds	r3, #26
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	f040 841d 	bne.w	8005238 <HCD_HC_OUT_IRQHandler+0x944>
 80049fe:	78fa      	ldrb	r2, [r7, #3]
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	011b      	lsls	r3, r3, #4
 8004a06:	1a9b      	subs	r3, r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	331b      	adds	r3, #27
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f040 8411 	bne.w	8005238 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004a16:	78fa      	ldrb	r2, [r7, #3]
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	1a9b      	subs	r3, r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	440b      	add	r3, r1
 8004a24:	3326      	adds	r3, #38	; 0x26
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d009      	beq.n	8004a40 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004a2c:	78fa      	ldrb	r2, [r7, #3]
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	4613      	mov	r3, r2
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	1a9b      	subs	r3, r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	440b      	add	r3, r1
 8004a3a:	331b      	adds	r3, #27
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004a40:	78fa      	ldrb	r2, [r7, #3]
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	4613      	mov	r3, r2
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	1a9b      	subs	r3, r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	334d      	adds	r3, #77	; 0x4d
 8004a50:	2203      	movs	r2, #3
 8004a52:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	78fa      	ldrb	r2, [r7, #3]
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f006 f91a 	bl	800ac96 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004a62:	78fa      	ldrb	r2, [r7, #3]
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	1a9b      	subs	r3, r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	440b      	add	r3, r1
 8004a70:	3344      	adds	r3, #68	; 0x44
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	e3df      	b.n	8005238 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	78fa      	ldrb	r2, [r7, #3]
 8004a7e:	4611      	mov	r1, r2
 8004a80:	4618      	mov	r0, r3
 8004a82:	f005 fb70 	bl	800a166 <USB_ReadChInterrupts>
 8004a86:	4603      	mov	r3, r0
 8004a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a90:	d111      	bne.n	8004ab6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004a92:	78fb      	ldrb	r3, [r7, #3]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004aa4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	78fa      	ldrb	r2, [r7, #3]
 8004aac:	4611      	mov	r1, r2
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f006 f8f1 	bl	800ac96 <USB_HC_Halt>
 8004ab4:	e3c0      	b.n	8005238 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	78fa      	ldrb	r2, [r7, #3]
 8004abc:	4611      	mov	r1, r2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f005 fb51 	bl	800a166 <USB_ReadChInterrupts>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d168      	bne.n	8004ba0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004ace:	78fa      	ldrb	r2, [r7, #3]
 8004ad0:	6879      	ldr	r1, [r7, #4]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	1a9b      	subs	r3, r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	440b      	add	r3, r1
 8004adc:	3344      	adds	r3, #68	; 0x44
 8004ade:	2200      	movs	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	78fa      	ldrb	r2, [r7, #3]
 8004ae8:	4611      	mov	r1, r2
 8004aea:	4618      	mov	r0, r3
 8004aec:	f005 fb3b 	bl	800a166 <USB_ReadChInterrupts>
 8004af0:	4603      	mov	r3, r0
 8004af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af6:	2b40      	cmp	r3, #64	; 0x40
 8004af8:	d112      	bne.n	8004b20 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004afa:	78fa      	ldrb	r2, [r7, #3]
 8004afc:	6879      	ldr	r1, [r7, #4]
 8004afe:	4613      	mov	r3, r2
 8004b00:	011b      	lsls	r3, r3, #4
 8004b02:	1a9b      	subs	r3, r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	440b      	add	r3, r1
 8004b08:	3319      	adds	r3, #25
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004b0e:	78fb      	ldrb	r3, [r7, #3]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	2340      	movs	r3, #64	; 0x40
 8004b1e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004b20:	78fa      	ldrb	r2, [r7, #3]
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	4613      	mov	r3, r2
 8004b26:	011b      	lsls	r3, r3, #4
 8004b28:	1a9b      	subs	r3, r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	331b      	adds	r3, #27
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d019      	beq.n	8004b6a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004b36:	78fa      	ldrb	r2, [r7, #3]
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	1a9b      	subs	r3, r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	440b      	add	r3, r1
 8004b44:	331b      	adds	r3, #27
 8004b46:	2200      	movs	r2, #0
 8004b48:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004b4a:	78fb      	ldrb	r3, [r7, #3]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	78fa      	ldrb	r2, [r7, #3]
 8004b5a:	0151      	lsls	r1, r2, #5
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	440a      	add	r2, r1
 8004b60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b68:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004b6a:	78fb      	ldrb	r3, [r7, #3]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b76:	461a      	mov	r2, r3
 8004b78:	2301      	movs	r3, #1
 8004b7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004b7c:	78fa      	ldrb	r2, [r7, #3]
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	4613      	mov	r3, r2
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	1a9b      	subs	r3, r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	334d      	adds	r3, #77	; 0x4d
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	78fa      	ldrb	r2, [r7, #3]
 8004b96:	4611      	mov	r1, r2
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f006 f87c 	bl	800ac96 <USB_HC_Halt>
 8004b9e:	e34b      	b.n	8005238 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	78fa      	ldrb	r2, [r7, #3]
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f005 fadc 	bl	800a166 <USB_ReadChInterrupts>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb4:	2b40      	cmp	r3, #64	; 0x40
 8004bb6:	d139      	bne.n	8004c2c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004bb8:	78fa      	ldrb	r2, [r7, #3]
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	1a9b      	subs	r3, r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	334d      	adds	r3, #77	; 0x4d
 8004bc8:	2205      	movs	r2, #5
 8004bca:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004bcc:	78fa      	ldrb	r2, [r7, #3]
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	1a9b      	subs	r3, r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	331a      	adds	r3, #26
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d109      	bne.n	8004bf6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004be2:	78fa      	ldrb	r2, [r7, #3]
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	4613      	mov	r3, r2
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	1a9b      	subs	r3, r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	440b      	add	r3, r1
 8004bf0:	3319      	adds	r3, #25
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004bf6:	78fa      	ldrb	r2, [r7, #3]
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	011b      	lsls	r3, r3, #4
 8004bfe:	1a9b      	subs	r3, r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	440b      	add	r3, r1
 8004c04:	3344      	adds	r3, #68	; 0x44
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	78fa      	ldrb	r2, [r7, #3]
 8004c10:	4611      	mov	r1, r2
 8004c12:	4618      	mov	r0, r3
 8004c14:	f006 f83f 	bl	800ac96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c24:	461a      	mov	r2, r3
 8004c26:	2340      	movs	r3, #64	; 0x40
 8004c28:	6093      	str	r3, [r2, #8]
 8004c2a:	e305      	b.n	8005238 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	78fa      	ldrb	r2, [r7, #3]
 8004c32:	4611      	mov	r1, r2
 8004c34:	4618      	mov	r0, r3
 8004c36:	f005 fa96 	bl	800a166 <USB_ReadChInterrupts>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d11a      	bne.n	8004c7a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004c44:	78fb      	ldrb	r3, [r7, #3]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c50:	461a      	mov	r2, r3
 8004c52:	2308      	movs	r3, #8
 8004c54:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004c56:	78fa      	ldrb	r2, [r7, #3]
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	011b      	lsls	r3, r3, #4
 8004c5e:	1a9b      	subs	r3, r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	440b      	add	r3, r1
 8004c64:	334d      	adds	r3, #77	; 0x4d
 8004c66:	2206      	movs	r2, #6
 8004c68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	78fa      	ldrb	r2, [r7, #3]
 8004c70:	4611      	mov	r1, r2
 8004c72:	4618      	mov	r0, r3
 8004c74:	f006 f80f 	bl	800ac96 <USB_HC_Halt>
 8004c78:	e2de      	b.n	8005238 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	78fa      	ldrb	r2, [r7, #3]
 8004c80:	4611      	mov	r1, r2
 8004c82:	4618      	mov	r0, r3
 8004c84:	f005 fa6f 	bl	800a166 <USB_ReadChInterrupts>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f003 0310 	and.w	r3, r3, #16
 8004c8e:	2b10      	cmp	r3, #16
 8004c90:	d144      	bne.n	8004d1c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004c92:	78fa      	ldrb	r2, [r7, #3]
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	4613      	mov	r3, r2
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	1a9b      	subs	r3, r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	3344      	adds	r3, #68	; 0x44
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004ca6:	78fa      	ldrb	r2, [r7, #3]
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	4613      	mov	r3, r2
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	1a9b      	subs	r3, r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	334d      	adds	r3, #77	; 0x4d
 8004cb6:	2204      	movs	r2, #4
 8004cb8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004cba:	78fa      	ldrb	r2, [r7, #3]
 8004cbc:	6879      	ldr	r1, [r7, #4]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	011b      	lsls	r3, r3, #4
 8004cc2:	1a9b      	subs	r3, r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	440b      	add	r3, r1
 8004cc8:	3319      	adds	r3, #25
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d114      	bne.n	8004cfa <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004cd0:	78fa      	ldrb	r2, [r7, #3]
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	1a9b      	subs	r3, r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	3318      	adds	r3, #24
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d109      	bne.n	8004cfa <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004ce6:	78fa      	ldrb	r2, [r7, #3]
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	011b      	lsls	r3, r3, #4
 8004cee:	1a9b      	subs	r3, r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	440b      	add	r3, r1
 8004cf4:	3319      	adds	r3, #25
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	78fa      	ldrb	r2, [r7, #3]
 8004d00:	4611      	mov	r1, r2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f005 ffc7 	bl	800ac96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d14:	461a      	mov	r2, r3
 8004d16:	2310      	movs	r3, #16
 8004d18:	6093      	str	r3, [r2, #8]
 8004d1a:	e28d      	b.n	8005238 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	78fa      	ldrb	r2, [r7, #3]
 8004d22:	4611      	mov	r1, r2
 8004d24:	4618      	mov	r0, r3
 8004d26:	f005 fa1e 	bl	800a166 <USB_ReadChInterrupts>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d30:	2b80      	cmp	r3, #128	; 0x80
 8004d32:	d169      	bne.n	8004e08 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	799b      	ldrb	r3, [r3, #6]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d111      	bne.n	8004d60 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004d3c:	78fa      	ldrb	r2, [r7, #3]
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	4613      	mov	r3, r2
 8004d42:	011b      	lsls	r3, r3, #4
 8004d44:	1a9b      	subs	r3, r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	334d      	adds	r3, #77	; 0x4d
 8004d4c:	2207      	movs	r2, #7
 8004d4e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	78fa      	ldrb	r2, [r7, #3]
 8004d56:	4611      	mov	r1, r2
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f005 ff9c 	bl	800ac96 <USB_HC_Halt>
 8004d5e:	e049      	b.n	8004df4 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004d60:	78fa      	ldrb	r2, [r7, #3]
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	4613      	mov	r3, r2
 8004d66:	011b      	lsls	r3, r3, #4
 8004d68:	1a9b      	subs	r3, r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	3344      	adds	r3, #68	; 0x44
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	1c59      	adds	r1, r3, #1
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	4613      	mov	r3, r2
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	1a9b      	subs	r3, r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4403      	add	r3, r0
 8004d80:	3344      	adds	r3, #68	; 0x44
 8004d82:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004d84:	78fa      	ldrb	r2, [r7, #3]
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	1a9b      	subs	r3, r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	3344      	adds	r3, #68	; 0x44
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d922      	bls.n	8004de0 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004d9a:	78fa      	ldrb	r2, [r7, #3]
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	1a9b      	subs	r3, r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	440b      	add	r3, r1
 8004da8:	3344      	adds	r3, #68	; 0x44
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004dae:	78fa      	ldrb	r2, [r7, #3]
 8004db0:	6879      	ldr	r1, [r7, #4]
 8004db2:	4613      	mov	r3, r2
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	1a9b      	subs	r3, r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	440b      	add	r3, r1
 8004dbc:	334c      	adds	r3, #76	; 0x4c
 8004dbe:	2204      	movs	r2, #4
 8004dc0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004dc2:	78fa      	ldrb	r2, [r7, #3]
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	1a9b      	subs	r3, r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	440b      	add	r3, r1
 8004dd0:	334c      	adds	r3, #76	; 0x4c
 8004dd2:	781a      	ldrb	r2, [r3, #0]
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f009 fc53 	bl	800e684 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004dde:	e009      	b.n	8004df4 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004de0:	78fa      	ldrb	r2, [r7, #3]
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	4613      	mov	r3, r2
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	1a9b      	subs	r3, r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	440b      	add	r3, r1
 8004dee:	334c      	adds	r3, #76	; 0x4c
 8004df0:	2202      	movs	r2, #2
 8004df2:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004df4:	78fb      	ldrb	r3, [r7, #3]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e00:	461a      	mov	r2, r3
 8004e02:	2380      	movs	r3, #128	; 0x80
 8004e04:	6093      	str	r3, [r2, #8]
 8004e06:	e217      	b.n	8005238 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	78fa      	ldrb	r2, [r7, #3]
 8004e0e:	4611      	mov	r1, r2
 8004e10:	4618      	mov	r0, r3
 8004e12:	f005 f9a8 	bl	800a166 <USB_ReadChInterrupts>
 8004e16:	4603      	mov	r3, r0
 8004e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e20:	d11b      	bne.n	8004e5a <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004e22:	78fa      	ldrb	r2, [r7, #3]
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	1a9b      	subs	r3, r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	334d      	adds	r3, #77	; 0x4d
 8004e32:	2209      	movs	r2, #9
 8004e34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	78fa      	ldrb	r2, [r7, #3]
 8004e3c:	4611      	mov	r1, r2
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f005 ff29 	bl	800ac96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004e44:	78fb      	ldrb	r3, [r7, #3]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e50:	461a      	mov	r2, r3
 8004e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e56:	6093      	str	r3, [r2, #8]
 8004e58:	e1ee      	b.n	8005238 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	78fa      	ldrb	r2, [r7, #3]
 8004e60:	4611      	mov	r1, r2
 8004e62:	4618      	mov	r0, r3
 8004e64:	f005 f97f 	bl	800a166 <USB_ReadChInterrupts>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	f040 81df 	bne.w	8005232 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004e74:	78fb      	ldrb	r3, [r7, #3]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e80:	461a      	mov	r2, r3
 8004e82:	2302      	movs	r3, #2
 8004e84:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004e86:	78fa      	ldrb	r2, [r7, #3]
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	1a9b      	subs	r3, r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	440b      	add	r3, r1
 8004e94:	334d      	adds	r3, #77	; 0x4d
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	f040 8093 	bne.w	8004fc4 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e9e:	78fa      	ldrb	r2, [r7, #3]
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	440b      	add	r3, r1
 8004eac:	334d      	adds	r3, #77	; 0x4d
 8004eae:	2202      	movs	r2, #2
 8004eb0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004eb2:	78fa      	ldrb	r2, [r7, #3]
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	1a9b      	subs	r3, r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	334c      	adds	r3, #76	; 0x4c
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004ec6:	78fa      	ldrb	r2, [r7, #3]
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	1a9b      	subs	r3, r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	3326      	adds	r3, #38	; 0x26
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d00b      	beq.n	8004ef4 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004edc:	78fa      	ldrb	r2, [r7, #3]
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	1a9b      	subs	r3, r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	3326      	adds	r3, #38	; 0x26
 8004eec:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	f040 8190 	bne.w	8005214 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	799b      	ldrb	r3, [r3, #6]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d115      	bne.n	8004f28 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004efc:	78fa      	ldrb	r2, [r7, #3]
 8004efe:	6879      	ldr	r1, [r7, #4]
 8004f00:	4613      	mov	r3, r2
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	1a9b      	subs	r3, r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	333d      	adds	r3, #61	; 0x3d
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	78fa      	ldrb	r2, [r7, #3]
 8004f10:	f083 0301 	eor.w	r3, r3, #1
 8004f14:	b2d8      	uxtb	r0, r3
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	1a9b      	subs	r3, r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	440b      	add	r3, r1
 8004f22:	333d      	adds	r3, #61	; 0x3d
 8004f24:	4602      	mov	r2, r0
 8004f26:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	799b      	ldrb	r3, [r3, #6]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	f040 8171 	bne.w	8005214 <HCD_HC_OUT_IRQHandler+0x920>
 8004f32:	78fa      	ldrb	r2, [r7, #3]
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	4613      	mov	r3, r2
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	1a9b      	subs	r3, r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	440b      	add	r3, r1
 8004f40:	3334      	adds	r3, #52	; 0x34
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 8165 	beq.w	8005214 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004f4a:	78fa      	ldrb	r2, [r7, #3]
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	1a9b      	subs	r3, r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	440b      	add	r3, r1
 8004f58:	3334      	adds	r3, #52	; 0x34
 8004f5a:	6819      	ldr	r1, [r3, #0]
 8004f5c:	78fa      	ldrb	r2, [r7, #3]
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	4613      	mov	r3, r2
 8004f62:	011b      	lsls	r3, r3, #4
 8004f64:	1a9b      	subs	r3, r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4403      	add	r3, r0
 8004f6a:	3328      	adds	r3, #40	; 0x28
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	440b      	add	r3, r1
 8004f70:	1e59      	subs	r1, r3, #1
 8004f72:	78fa      	ldrb	r2, [r7, #3]
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	1a9b      	subs	r3, r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4403      	add	r3, r0
 8004f80:	3328      	adds	r3, #40	; 0x28
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f88:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 813f 	beq.w	8005214 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004f96:	78fa      	ldrb	r2, [r7, #3]
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	1a9b      	subs	r3, r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	440b      	add	r3, r1
 8004fa4:	333d      	adds	r3, #61	; 0x3d
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	78fa      	ldrb	r2, [r7, #3]
 8004faa:	f083 0301 	eor.w	r3, r3, #1
 8004fae:	b2d8      	uxtb	r0, r3
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	1a9b      	subs	r3, r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	440b      	add	r3, r1
 8004fbc:	333d      	adds	r3, #61	; 0x3d
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	701a      	strb	r2, [r3, #0]
 8004fc2:	e127      	b.n	8005214 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004fc4:	78fa      	ldrb	r2, [r7, #3]
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	1a9b      	subs	r3, r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	334d      	adds	r3, #77	; 0x4d
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d120      	bne.n	800501c <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004fda:	78fa      	ldrb	r2, [r7, #3]
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	1a9b      	subs	r3, r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	334d      	adds	r3, #77	; 0x4d
 8004fea:	2202      	movs	r2, #2
 8004fec:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004fee:	78fa      	ldrb	r2, [r7, #3]
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	1a9b      	subs	r3, r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	331b      	adds	r3, #27
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b01      	cmp	r3, #1
 8005002:	f040 8107 	bne.w	8005214 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005006:	78fa      	ldrb	r2, [r7, #3]
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	4613      	mov	r3, r2
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	1a9b      	subs	r3, r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	440b      	add	r3, r1
 8005014:	334c      	adds	r3, #76	; 0x4c
 8005016:	2202      	movs	r2, #2
 8005018:	701a      	strb	r2, [r3, #0]
 800501a:	e0fb      	b.n	8005214 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800501c:	78fa      	ldrb	r2, [r7, #3]
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	4613      	mov	r3, r2
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	1a9b      	subs	r3, r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	334d      	adds	r3, #77	; 0x4d
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2b04      	cmp	r3, #4
 8005030:	d13a      	bne.n	80050a8 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005032:	78fa      	ldrb	r2, [r7, #3]
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	4613      	mov	r3, r2
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	1a9b      	subs	r3, r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	440b      	add	r3, r1
 8005040:	334d      	adds	r3, #77	; 0x4d
 8005042:	2202      	movs	r2, #2
 8005044:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005046:	78fa      	ldrb	r2, [r7, #3]
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	4613      	mov	r3, r2
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	440b      	add	r3, r1
 8005054:	334c      	adds	r3, #76	; 0x4c
 8005056:	2202      	movs	r2, #2
 8005058:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800505a:	78fa      	ldrb	r2, [r7, #3]
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	4613      	mov	r3, r2
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	1a9b      	subs	r3, r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	440b      	add	r3, r1
 8005068:	331b      	adds	r3, #27
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	2b01      	cmp	r3, #1
 800506e:	f040 80d1 	bne.w	8005214 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005072:	78fa      	ldrb	r2, [r7, #3]
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	4613      	mov	r3, r2
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	1a9b      	subs	r3, r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	440b      	add	r3, r1
 8005080:	331b      	adds	r3, #27
 8005082:	2200      	movs	r2, #0
 8005084:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005086:	78fb      	ldrb	r3, [r7, #3]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	4413      	add	r3, r2
 800508e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	78fa      	ldrb	r2, [r7, #3]
 8005096:	0151      	lsls	r1, r2, #5
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	440a      	add	r2, r1
 800509c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050a4:	6053      	str	r3, [r2, #4]
 80050a6:	e0b5      	b.n	8005214 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80050a8:	78fa      	ldrb	r2, [r7, #3]
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	4613      	mov	r3, r2
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	1a9b      	subs	r3, r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	440b      	add	r3, r1
 80050b6:	334d      	adds	r3, #77	; 0x4d
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2b05      	cmp	r3, #5
 80050bc:	d114      	bne.n	80050e8 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80050be:	78fa      	ldrb	r2, [r7, #3]
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	4613      	mov	r3, r2
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	1a9b      	subs	r3, r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	440b      	add	r3, r1
 80050cc:	334d      	adds	r3, #77	; 0x4d
 80050ce:	2202      	movs	r2, #2
 80050d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80050d2:	78fa      	ldrb	r2, [r7, #3]
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	4613      	mov	r3, r2
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	1a9b      	subs	r3, r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	440b      	add	r3, r1
 80050e0:	334c      	adds	r3, #76	; 0x4c
 80050e2:	2202      	movs	r2, #2
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	e095      	b.n	8005214 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80050e8:	78fa      	ldrb	r2, [r7, #3]
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	4613      	mov	r3, r2
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	1a9b      	subs	r3, r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	334d      	adds	r3, #77	; 0x4d
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b06      	cmp	r3, #6
 80050fc:	d114      	bne.n	8005128 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80050fe:	78fa      	ldrb	r2, [r7, #3]
 8005100:	6879      	ldr	r1, [r7, #4]
 8005102:	4613      	mov	r3, r2
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	1a9b      	subs	r3, r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	440b      	add	r3, r1
 800510c:	334d      	adds	r3, #77	; 0x4d
 800510e:	2202      	movs	r2, #2
 8005110:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005112:	78fa      	ldrb	r2, [r7, #3]
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	4613      	mov	r3, r2
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	1a9b      	subs	r3, r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	440b      	add	r3, r1
 8005120:	334c      	adds	r3, #76	; 0x4c
 8005122:	2205      	movs	r2, #5
 8005124:	701a      	strb	r2, [r3, #0]
 8005126:	e075      	b.n	8005214 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005128:	78fa      	ldrb	r2, [r7, #3]
 800512a:	6879      	ldr	r1, [r7, #4]
 800512c:	4613      	mov	r3, r2
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	1a9b      	subs	r3, r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	440b      	add	r3, r1
 8005136:	334d      	adds	r3, #77	; 0x4d
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b07      	cmp	r3, #7
 800513c:	d00a      	beq.n	8005154 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800513e:	78fa      	ldrb	r2, [r7, #3]
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	4613      	mov	r3, r2
 8005144:	011b      	lsls	r3, r3, #4
 8005146:	1a9b      	subs	r3, r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	440b      	add	r3, r1
 800514c:	334d      	adds	r3, #77	; 0x4d
 800514e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005150:	2b09      	cmp	r3, #9
 8005152:	d170      	bne.n	8005236 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005154:	78fa      	ldrb	r2, [r7, #3]
 8005156:	6879      	ldr	r1, [r7, #4]
 8005158:	4613      	mov	r3, r2
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	1a9b      	subs	r3, r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	334d      	adds	r3, #77	; 0x4d
 8005164:	2202      	movs	r2, #2
 8005166:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005168:	78fa      	ldrb	r2, [r7, #3]
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	4613      	mov	r3, r2
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	1a9b      	subs	r3, r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	440b      	add	r3, r1
 8005176:	3344      	adds	r3, #68	; 0x44
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	1c59      	adds	r1, r3, #1
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	4613      	mov	r3, r2
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	1a9b      	subs	r3, r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4403      	add	r3, r0
 8005188:	3344      	adds	r3, #68	; 0x44
 800518a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800518c:	78fa      	ldrb	r2, [r7, #3]
 800518e:	6879      	ldr	r1, [r7, #4]
 8005190:	4613      	mov	r3, r2
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	1a9b      	subs	r3, r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	440b      	add	r3, r1
 800519a:	3344      	adds	r3, #68	; 0x44
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d914      	bls.n	80051cc <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80051a2:	78fa      	ldrb	r2, [r7, #3]
 80051a4:	6879      	ldr	r1, [r7, #4]
 80051a6:	4613      	mov	r3, r2
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	1a9b      	subs	r3, r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	440b      	add	r3, r1
 80051b0:	3344      	adds	r3, #68	; 0x44
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80051b6:	78fa      	ldrb	r2, [r7, #3]
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	4613      	mov	r3, r2
 80051bc:	011b      	lsls	r3, r3, #4
 80051be:	1a9b      	subs	r3, r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	440b      	add	r3, r1
 80051c4:	334c      	adds	r3, #76	; 0x4c
 80051c6:	2204      	movs	r2, #4
 80051c8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80051ca:	e022      	b.n	8005212 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80051cc:	78fa      	ldrb	r2, [r7, #3]
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	4613      	mov	r3, r2
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	1a9b      	subs	r3, r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	440b      	add	r3, r1
 80051da:	334c      	adds	r3, #76	; 0x4c
 80051dc:	2202      	movs	r2, #2
 80051de:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051f6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051fe:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005200:	78fb      	ldrb	r3, [r7, #3]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	4413      	add	r3, r2
 8005208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520c:	461a      	mov	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005212:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005214:	78fa      	ldrb	r2, [r7, #3]
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	4613      	mov	r3, r2
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	1a9b      	subs	r3, r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	440b      	add	r3, r1
 8005222:	334c      	adds	r3, #76	; 0x4c
 8005224:	781a      	ldrb	r2, [r3, #0]
 8005226:	78fb      	ldrb	r3, [r7, #3]
 8005228:	4619      	mov	r1, r3
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f009 fa2a 	bl	800e684 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005230:	e002      	b.n	8005238 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005232:	bf00      	nop
 8005234:	e000      	b.n	8005238 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8005236:	bf00      	nop
  }
}
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b08a      	sub	sp, #40	; 0x28
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	0c5b      	lsrs	r3, r3, #17
 8005264:	f003 030f 	and.w	r3, r3, #15
 8005268:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	091b      	lsrs	r3, r3, #4
 800526e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005272:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	2b02      	cmp	r3, #2
 8005278:	d004      	beq.n	8005284 <HCD_RXQLVL_IRQHandler+0x46>
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2b05      	cmp	r3, #5
 800527e:	f000 80b6 	beq.w	80053ee <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005282:	e0b7      	b.n	80053f4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 80b3 	beq.w	80053f2 <HCD_RXQLVL_IRQHandler+0x1b4>
 800528c:	6879      	ldr	r1, [r7, #4]
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	4613      	mov	r3, r2
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	332c      	adds	r3, #44	; 0x2c
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 80a7 	beq.w	80053f2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	4613      	mov	r3, r2
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	1a9b      	subs	r3, r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	3338      	adds	r3, #56	; 0x38
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	18d1      	adds	r1, r2, r3
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	4613      	mov	r3, r2
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	1a9b      	subs	r3, r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4403      	add	r3, r0
 80052c8:	3334      	adds	r3, #52	; 0x34
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4299      	cmp	r1, r3
 80052ce:	f200 8083 	bhi.w	80053d8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	4613      	mov	r3, r2
 80052dc:	011b      	lsls	r3, r3, #4
 80052de:	1a9b      	subs	r3, r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	440b      	add	r3, r1
 80052e4:	332c      	adds	r3, #44	; 0x2c
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	b292      	uxth	r2, r2
 80052ec:	4619      	mov	r1, r3
 80052ee:	f004 feae 	bl	800a04e <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	4613      	mov	r3, r2
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	440b      	add	r3, r1
 8005300:	332c      	adds	r3, #44	; 0x2c
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	18d1      	adds	r1, r2, r3
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	4613      	mov	r3, r2
 800530e:	011b      	lsls	r3, r3, #4
 8005310:	1a9b      	subs	r3, r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4403      	add	r3, r0
 8005316:	332c      	adds	r3, #44	; 0x2c
 8005318:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	4613      	mov	r3, r2
 8005320:	011b      	lsls	r3, r3, #4
 8005322:	1a9b      	subs	r3, r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	440b      	add	r3, r1
 8005328:	3338      	adds	r3, #56	; 0x38
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	18d1      	adds	r1, r2, r3
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	4613      	mov	r3, r2
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	1a9b      	subs	r3, r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4403      	add	r3, r0
 800533e:	3338      	adds	r3, #56	; 0x38
 8005340:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	4413      	add	r3, r2
 800534a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	0cdb      	lsrs	r3, r3, #19
 8005352:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005356:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005358:	6879      	ldr	r1, [r7, #4]
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	4613      	mov	r3, r2
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	1a9b      	subs	r3, r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	440b      	add	r3, r1
 8005366:	3328      	adds	r3, #40	; 0x28
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	4293      	cmp	r3, r2
 8005370:	d13f      	bne.n	80053f2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d03c      	beq.n	80053f2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	4413      	add	r3, r2
 8005380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800538e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005396:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a4:	461a      	mov	r2, r3
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	4613      	mov	r3, r2
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	1a9b      	subs	r3, r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	440b      	add	r3, r1
 80053b8:	333c      	adds	r3, #60	; 0x3c
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	f083 0301 	eor.w	r3, r3, #1
 80053c0:	b2d8      	uxtb	r0, r3
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	4613      	mov	r3, r2
 80053c8:	011b      	lsls	r3, r3, #4
 80053ca:	1a9b      	subs	r3, r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	440b      	add	r3, r1
 80053d0:	333c      	adds	r3, #60	; 0x3c
 80053d2:	4602      	mov	r2, r0
 80053d4:	701a      	strb	r2, [r3, #0]
      break;
 80053d6:	e00c      	b.n	80053f2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80053d8:	6879      	ldr	r1, [r7, #4]
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	4613      	mov	r3, r2
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	334c      	adds	r3, #76	; 0x4c
 80053e8:	2204      	movs	r2, #4
 80053ea:	701a      	strb	r2, [r3, #0]
      break;
 80053ec:	e001      	b.n	80053f2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80053ee:	bf00      	nop
 80053f0:	e000      	b.n	80053f4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80053f2:	bf00      	nop
  }
}
 80053f4:	bf00      	nop
 80053f6:	3728      	adds	r7, #40	; 0x28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005428:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b02      	cmp	r3, #2
 8005432:	d10b      	bne.n	800544c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b01      	cmp	r3, #1
 800543c:	d102      	bne.n	8005444 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f009 f904 	bl	800e64c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f043 0302 	orr.w	r3, r3, #2
 800544a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b08      	cmp	r3, #8
 8005454:	d132      	bne.n	80054bc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f043 0308 	orr.w	r3, r3, #8
 800545c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b04      	cmp	r3, #4
 8005466:	d126      	bne.n	80054b6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	7a5b      	ldrb	r3, [r3, #9]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d113      	bne.n	8005498 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005476:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800547a:	d106      	bne.n	800548a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2102      	movs	r1, #2
 8005482:	4618      	mov	r0, r3
 8005484:	f004 ff88 	bl	800a398 <USB_InitFSLSPClkSel>
 8005488:	e011      	b.n	80054ae <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2101      	movs	r1, #1
 8005490:	4618      	mov	r0, r3
 8005492:	f004 ff81 	bl	800a398 <USB_InitFSLSPClkSel>
 8005496:	e00a      	b.n	80054ae <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	79db      	ldrb	r3, [r3, #7]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d106      	bne.n	80054ae <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054a6:	461a      	mov	r2, r3
 80054a8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80054ac:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f009 f8f6 	bl	800e6a0 <HAL_HCD_PortEnabled_Callback>
 80054b4:	e002      	b.n	80054bc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f009 f900 	bl	800e6bc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f003 0320 	and.w	r3, r3, #32
 80054c2:	2b20      	cmp	r3, #32
 80054c4:	d103      	bne.n	80054ce <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f043 0320 	orr.w	r3, r3, #32
 80054cc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054d4:	461a      	mov	r2, r3
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	6013      	str	r3, [r2, #0]
}
 80054da:	bf00      	nop
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
	...

080054e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e12b      	b.n	800574e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fc f92e 	bl	800176c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2224      	movs	r2, #36	; 0x24
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0201 	bic.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005536:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005546:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005548:	f001 f9f2 	bl	8006930 <HAL_RCC_GetPCLK1Freq>
 800554c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	4a81      	ldr	r2, [pc, #516]	; (8005758 <HAL_I2C_Init+0x274>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d807      	bhi.n	8005568 <HAL_I2C_Init+0x84>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4a80      	ldr	r2, [pc, #512]	; (800575c <HAL_I2C_Init+0x278>)
 800555c:	4293      	cmp	r3, r2
 800555e:	bf94      	ite	ls
 8005560:	2301      	movls	r3, #1
 8005562:	2300      	movhi	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	e006      	b.n	8005576 <HAL_I2C_Init+0x92>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4a7d      	ldr	r2, [pc, #500]	; (8005760 <HAL_I2C_Init+0x27c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	bf94      	ite	ls
 8005570:	2301      	movls	r3, #1
 8005572:	2300      	movhi	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e0e7      	b.n	800574e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4a78      	ldr	r2, [pc, #480]	; (8005764 <HAL_I2C_Init+0x280>)
 8005582:	fba2 2303 	umull	r2, r3, r2, r3
 8005586:	0c9b      	lsrs	r3, r3, #18
 8005588:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	430a      	orrs	r2, r1
 800559c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	4a6a      	ldr	r2, [pc, #424]	; (8005758 <HAL_I2C_Init+0x274>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d802      	bhi.n	80055b8 <HAL_I2C_Init+0xd4>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	3301      	adds	r3, #1
 80055b6:	e009      	b.n	80055cc <HAL_I2C_Init+0xe8>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80055be:	fb02 f303 	mul.w	r3, r2, r3
 80055c2:	4a69      	ldr	r2, [pc, #420]	; (8005768 <HAL_I2C_Init+0x284>)
 80055c4:	fba2 2303 	umull	r2, r3, r2, r3
 80055c8:	099b      	lsrs	r3, r3, #6
 80055ca:	3301      	adds	r3, #1
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6812      	ldr	r2, [r2, #0]
 80055d0:	430b      	orrs	r3, r1
 80055d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80055de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	495c      	ldr	r1, [pc, #368]	; (8005758 <HAL_I2C_Init+0x274>)
 80055e8:	428b      	cmp	r3, r1
 80055ea:	d819      	bhi.n	8005620 <HAL_I2C_Init+0x13c>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	1e59      	subs	r1, r3, #1
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80055fa:	1c59      	adds	r1, r3, #1
 80055fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005600:	400b      	ands	r3, r1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <HAL_I2C_Init+0x138>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1e59      	subs	r1, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	fbb1 f3f3 	udiv	r3, r1, r3
 8005614:	3301      	adds	r3, #1
 8005616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800561a:	e051      	b.n	80056c0 <HAL_I2C_Init+0x1dc>
 800561c:	2304      	movs	r3, #4
 800561e:	e04f      	b.n	80056c0 <HAL_I2C_Init+0x1dc>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d111      	bne.n	800564c <HAL_I2C_Init+0x168>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	1e58      	subs	r0, r3, #1
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6859      	ldr	r1, [r3, #4]
 8005630:	460b      	mov	r3, r1
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	440b      	add	r3, r1
 8005636:	fbb0 f3f3 	udiv	r3, r0, r3
 800563a:	3301      	adds	r3, #1
 800563c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005640:	2b00      	cmp	r3, #0
 8005642:	bf0c      	ite	eq
 8005644:	2301      	moveq	r3, #1
 8005646:	2300      	movne	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	e012      	b.n	8005672 <HAL_I2C_Init+0x18e>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	1e58      	subs	r0, r3, #1
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6859      	ldr	r1, [r3, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	0099      	lsls	r1, r3, #2
 800565c:	440b      	add	r3, r1
 800565e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005662:	3301      	adds	r3, #1
 8005664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005668:	2b00      	cmp	r3, #0
 800566a:	bf0c      	ite	eq
 800566c:	2301      	moveq	r3, #1
 800566e:	2300      	movne	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <HAL_I2C_Init+0x196>
 8005676:	2301      	movs	r3, #1
 8005678:	e022      	b.n	80056c0 <HAL_I2C_Init+0x1dc>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10e      	bne.n	80056a0 <HAL_I2C_Init+0x1bc>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	1e58      	subs	r0, r3, #1
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6859      	ldr	r1, [r3, #4]
 800568a:	460b      	mov	r3, r1
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	440b      	add	r3, r1
 8005690:	fbb0 f3f3 	udiv	r3, r0, r3
 8005694:	3301      	adds	r3, #1
 8005696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800569a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800569e:	e00f      	b.n	80056c0 <HAL_I2C_Init+0x1dc>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	1e58      	subs	r0, r3, #1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6859      	ldr	r1, [r3, #4]
 80056a8:	460b      	mov	r3, r1
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	0099      	lsls	r1, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80056b6:	3301      	adds	r3, #1
 80056b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	6809      	ldr	r1, [r1, #0]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69da      	ldr	r2, [r3, #28]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	431a      	orrs	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80056ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6911      	ldr	r1, [r2, #16]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	68d2      	ldr	r2, [r2, #12]
 80056fa:	4311      	orrs	r1, r2
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6812      	ldr	r2, [r2, #0]
 8005700:	430b      	orrs	r3, r1
 8005702:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	695a      	ldr	r2, [r3, #20]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0201 	orr.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2220      	movs	r2, #32
 800573a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	000186a0 	.word	0x000186a0
 800575c:	001e847f 	.word	0x001e847f
 8005760:	003d08ff 	.word	0x003d08ff
 8005764:	431bde83 	.word	0x431bde83
 8005768:	10624dd3 	.word	0x10624dd3

0800576c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af02      	add	r7, sp, #8
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	607a      	str	r2, [r7, #4]
 8005776:	461a      	mov	r2, r3
 8005778:	460b      	mov	r3, r1
 800577a:	817b      	strh	r3, [r7, #10]
 800577c:	4613      	mov	r3, r2
 800577e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005780:	f7fc fc38 	bl	8001ff4 <HAL_GetTick>
 8005784:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b20      	cmp	r3, #32
 8005790:	f040 80e0 	bne.w	8005954 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	2319      	movs	r3, #25
 800579a:	2201      	movs	r2, #1
 800579c:	4970      	ldr	r1, [pc, #448]	; (8005960 <HAL_I2C_Master_Transmit+0x1f4>)
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 fc64 	bl	800606c <I2C_WaitOnFlagUntilTimeout>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80057aa:	2302      	movs	r3, #2
 80057ac:	e0d3      	b.n	8005956 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d101      	bne.n	80057bc <HAL_I2C_Master_Transmit+0x50>
 80057b8:	2302      	movs	r3, #2
 80057ba:	e0cc      	b.n	8005956 <HAL_I2C_Master_Transmit+0x1ea>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d007      	beq.n	80057e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f042 0201 	orr.w	r2, r2, #1
 80057e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2221      	movs	r2, #33	; 0x21
 80057f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2210      	movs	r2, #16
 80057fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	893a      	ldrh	r2, [r7, #8]
 8005812:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005818:	b29a      	uxth	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4a50      	ldr	r2, [pc, #320]	; (8005964 <HAL_I2C_Master_Transmit+0x1f8>)
 8005822:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005824:	8979      	ldrh	r1, [r7, #10]
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	6a3a      	ldr	r2, [r7, #32]
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 face 	bl	8005dcc <I2C_MasterRequestWrite>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e08d      	b.n	8005956 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800583a:	2300      	movs	r3, #0
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	613b      	str	r3, [r7, #16]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	613b      	str	r3, [r7, #16]
 800584e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005850:	e066      	b.n	8005920 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	6a39      	ldr	r1, [r7, #32]
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 fd22 	bl	80062a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00d      	beq.n	800587e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	2b04      	cmp	r3, #4
 8005868:	d107      	bne.n	800587a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005878:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e06b      	b.n	8005956 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	781a      	ldrb	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005898:	b29b      	uxth	r3, r3
 800589a:	3b01      	subs	r3, #1
 800589c:	b29a      	uxth	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d11b      	bne.n	80058f4 <HAL_I2C_Master_Transmit+0x188>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d017      	beq.n	80058f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	781a      	ldrb	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	6a39      	ldr	r1, [r7, #32]
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 fd19 	bl	8006330 <I2C_WaitOnBTFFlagUntilTimeout>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00d      	beq.n	8005920 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005908:	2b04      	cmp	r3, #4
 800590a:	d107      	bne.n	800591c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800591a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e01a      	b.n	8005956 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005924:	2b00      	cmp	r3, #0
 8005926:	d194      	bne.n	8005852 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2220      	movs	r2, #32
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	e000      	b.n	8005956 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005954:	2302      	movs	r3, #2
  }
}
 8005956:	4618      	mov	r0, r3
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	00100002 	.word	0x00100002
 8005964:	ffff0000 	.word	0xffff0000

08005968 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08c      	sub	sp, #48	; 0x30
 800596c:	af02      	add	r7, sp, #8
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	607a      	str	r2, [r7, #4]
 8005972:	461a      	mov	r2, r3
 8005974:	460b      	mov	r3, r1
 8005976:	817b      	strh	r3, [r7, #10]
 8005978:	4613      	mov	r3, r2
 800597a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800597c:	f7fc fb3a 	bl	8001ff4 <HAL_GetTick>
 8005980:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b20      	cmp	r3, #32
 800598c:	f040 8217 	bne.w	8005dbe <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	2319      	movs	r3, #25
 8005996:	2201      	movs	r2, #1
 8005998:	497c      	ldr	r1, [pc, #496]	; (8005b8c <HAL_I2C_Master_Receive+0x224>)
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 fb66 	bl	800606c <I2C_WaitOnFlagUntilTimeout>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80059a6:	2302      	movs	r3, #2
 80059a8:	e20a      	b.n	8005dc0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_I2C_Master_Receive+0x50>
 80059b4:	2302      	movs	r3, #2
 80059b6:	e203      	b.n	8005dc0 <HAL_I2C_Master_Receive+0x458>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d007      	beq.n	80059de <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f042 0201 	orr.w	r2, r2, #1
 80059dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2222      	movs	r2, #34	; 0x22
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2210      	movs	r2, #16
 80059fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	893a      	ldrh	r2, [r7, #8]
 8005a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4a5c      	ldr	r2, [pc, #368]	; (8005b90 <HAL_I2C_Master_Receive+0x228>)
 8005a1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005a20:	8979      	ldrh	r1, [r7, #10]
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 fa52 	bl	8005ed0 <I2C_MasterRequestRead>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e1c4      	b.n	8005dc0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d113      	bne.n	8005a66 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a3e:	2300      	movs	r3, #0
 8005a40:	623b      	str	r3, [r7, #32]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	623b      	str	r3, [r7, #32]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	623b      	str	r3, [r7, #32]
 8005a52:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	e198      	b.n	8005d98 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d11b      	bne.n	8005aa6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a7e:	2300      	movs	r3, #0
 8005a80:	61fb      	str	r3, [r7, #28]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	61fb      	str	r3, [r7, #28]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	61fb      	str	r3, [r7, #28]
 8005a92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	e178      	b.n	8005d98 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d11b      	bne.n	8005ae6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005abc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005acc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61bb      	str	r3, [r7, #24]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	61bb      	str	r3, [r7, #24]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	61bb      	str	r3, [r7, #24]
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	e158      	b.n	8005d98 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005af4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005af6:	2300      	movs	r3, #0
 8005af8:	617b      	str	r3, [r7, #20]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	617b      	str	r3, [r7, #20]
 8005b0a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005b0c:	e144      	b.n	8005d98 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b12:	2b03      	cmp	r3, #3
 8005b14:	f200 80f1 	bhi.w	8005cfa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d123      	bne.n	8005b68 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 fc4b 	bl	80063c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e145      	b.n	8005dc0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	691a      	ldr	r2, [r3, #16]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	b2d2      	uxtb	r2, r2
 8005b40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b50:	3b01      	subs	r3, #1
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b66:	e117      	b.n	8005d98 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d14e      	bne.n	8005c0e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b76:	2200      	movs	r2, #0
 8005b78:	4906      	ldr	r1, [pc, #24]	; (8005b94 <HAL_I2C_Master_Receive+0x22c>)
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 fa76 	bl	800606c <I2C_WaitOnFlagUntilTimeout>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d008      	beq.n	8005b98 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e11a      	b.n	8005dc0 <HAL_I2C_Master_Receive+0x458>
 8005b8a:	bf00      	nop
 8005b8c:	00100002 	.word	0x00100002
 8005b90:	ffff0000 	.word	0xffff0000
 8005b94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ba6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	691a      	ldr	r2, [r3, #16]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	691a      	ldr	r2, [r3, #16]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	b2d2      	uxtb	r2, r2
 8005be6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c0c:	e0c4      	b.n	8005d98 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c14:	2200      	movs	r2, #0
 8005c16:	496c      	ldr	r1, [pc, #432]	; (8005dc8 <HAL_I2C_Master_Receive+0x460>)
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 fa27 	bl	800606c <I2C_WaitOnFlagUntilTimeout>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e0cb      	b.n	8005dc0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	691a      	ldr	r2, [r3, #16]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c54:	3b01      	subs	r3, #1
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	2200      	movs	r2, #0
 8005c72:	4955      	ldr	r1, [pc, #340]	; (8005dc8 <HAL_I2C_Master_Receive+0x460>)
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f9f9 	bl	800606c <I2C_WaitOnFlagUntilTimeout>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e09d      	b.n	8005dc0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691a      	ldr	r2, [r3, #16]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	b2d2      	uxtb	r2, r2
 8005ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	691a      	ldr	r2, [r3, #16]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	b2d2      	uxtb	r2, r2
 8005cd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	1c5a      	adds	r2, r3, #1
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005cf8:	e04e      	b.n	8005d98 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 fb5e 	bl	80063c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e058      	b.n	8005dc0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	691a      	ldr	r2, [r3, #16]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	b2d2      	uxtb	r2, r2
 8005d1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	f003 0304 	and.w	r3, r3, #4
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d124      	bne.n	8005d98 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d107      	bne.n	8005d66 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d64:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691a      	ldr	r2, [r3, #16]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f47f aeb6 	bne.w	8005b0e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e000      	b.n	8005dc0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005dbe:	2302      	movs	r3, #2
  }
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3728      	adds	r7, #40	; 0x28
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	00010004 	.word	0x00010004

08005dcc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b088      	sub	sp, #32
 8005dd0:	af02      	add	r7, sp, #8
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	607a      	str	r2, [r7, #4]
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d006      	beq.n	8005df6 <I2C_MasterRequestWrite+0x2a>
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d003      	beq.n	8005df6 <I2C_MasterRequestWrite+0x2a>
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005df4:	d108      	bne.n	8005e08 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	e00b      	b.n	8005e20 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0c:	2b12      	cmp	r3, #18
 8005e0e:	d107      	bne.n	8005e20 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 f91d 	bl	800606c <I2C_WaitOnFlagUntilTimeout>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00d      	beq.n	8005e54 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e46:	d103      	bne.n	8005e50 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e035      	b.n	8005ec0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e5c:	d108      	bne.n	8005e70 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e5e:	897b      	ldrh	r3, [r7, #10]
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	461a      	mov	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e6c:	611a      	str	r2, [r3, #16]
 8005e6e:	e01b      	b.n	8005ea8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005e70:	897b      	ldrh	r3, [r7, #10]
 8005e72:	11db      	asrs	r3, r3, #7
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	f003 0306 	and.w	r3, r3, #6
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	f063 030f 	orn	r3, r3, #15
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	490e      	ldr	r1, [pc, #56]	; (8005ec8 <I2C_MasterRequestWrite+0xfc>)
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 f966 	bl	8006160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e010      	b.n	8005ec0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e9e:	897b      	ldrh	r3, [r7, #10]
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	4907      	ldr	r1, [pc, #28]	; (8005ecc <I2C_MasterRequestWrite+0x100>)
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f000 f956 	bl	8006160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e000      	b.n	8005ec0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3718      	adds	r7, #24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	00010008 	.word	0x00010008
 8005ecc:	00010002 	.word	0x00010002

08005ed0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af02      	add	r7, sp, #8
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	607a      	str	r2, [r7, #4]
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	460b      	mov	r3, r1
 8005ede:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ef4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d006      	beq.n	8005f0a <I2C_MasterRequestRead+0x3a>
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d003      	beq.n	8005f0a <I2C_MasterRequestRead+0x3a>
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f08:	d108      	bne.n	8005f1c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	e00b      	b.n	8005f34 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f20:	2b11      	cmp	r3, #17
 8005f22:	d107      	bne.n	8005f34 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f000 f893 	bl	800606c <I2C_WaitOnFlagUntilTimeout>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00d      	beq.n	8005f68 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f5a:	d103      	bne.n	8005f64 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e079      	b.n	800605c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f70:	d108      	bne.n	8005f84 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f72:	897b      	ldrh	r3, [r7, #10]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	f043 0301 	orr.w	r3, r3, #1
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	611a      	str	r2, [r3, #16]
 8005f82:	e05f      	b.n	8006044 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005f84:	897b      	ldrh	r3, [r7, #10]
 8005f86:	11db      	asrs	r3, r3, #7
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	f003 0306 	and.w	r3, r3, #6
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	f063 030f 	orn	r3, r3, #15
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	4930      	ldr	r1, [pc, #192]	; (8006064 <I2C_MasterRequestRead+0x194>)
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 f8dc 	bl	8006160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e054      	b.n	800605c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005fb2:	897b      	ldrh	r3, [r7, #10]
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	4929      	ldr	r1, [pc, #164]	; (8006068 <I2C_MasterRequestRead+0x198>)
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f000 f8cc 	bl	8006160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e044      	b.n	800605c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	613b      	str	r3, [r7, #16]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	613b      	str	r3, [r7, #16]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	613b      	str	r3, [r7, #16]
 8005fe6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ff6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 f831 	bl	800606c <I2C_WaitOnFlagUntilTimeout>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00d      	beq.n	800602c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800601e:	d103      	bne.n	8006028 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006026:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e017      	b.n	800605c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800602c:	897b      	ldrh	r3, [r7, #10]
 800602e:	11db      	asrs	r3, r3, #7
 8006030:	b2db      	uxtb	r3, r3
 8006032:	f003 0306 	and.w	r3, r3, #6
 8006036:	b2db      	uxtb	r3, r3
 8006038:	f063 030e 	orn	r3, r3, #14
 800603c:	b2da      	uxtb	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	4907      	ldr	r1, [pc, #28]	; (8006068 <I2C_MasterRequestRead+0x198>)
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 f888 	bl	8006160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e000      	b.n	800605c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3718      	adds	r7, #24
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	00010008 	.word	0x00010008
 8006068:	00010002 	.word	0x00010002

0800606c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	603b      	str	r3, [r7, #0]
 8006078:	4613      	mov	r3, r2
 800607a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800607c:	e048      	b.n	8006110 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006084:	d044      	beq.n	8006110 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006086:	f7fb ffb5 	bl	8001ff4 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	429a      	cmp	r2, r3
 8006094:	d302      	bcc.n	800609c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d139      	bne.n	8006110 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	0c1b      	lsrs	r3, r3, #16
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d10d      	bne.n	80060c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	43da      	mvns	r2, r3
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	4013      	ands	r3, r2
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	bf0c      	ite	eq
 80060b8:	2301      	moveq	r3, #1
 80060ba:	2300      	movne	r3, #0
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	461a      	mov	r2, r3
 80060c0:	e00c      	b.n	80060dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	43da      	mvns	r2, r3
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	4013      	ands	r3, r2
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	bf0c      	ite	eq
 80060d4:	2301      	moveq	r3, #1
 80060d6:	2300      	movne	r3, #0
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	461a      	mov	r2, r3
 80060dc:	79fb      	ldrb	r3, [r7, #7]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d116      	bne.n	8006110 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2220      	movs	r2, #32
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fc:	f043 0220 	orr.w	r2, r3, #32
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e023      	b.n	8006158 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	0c1b      	lsrs	r3, r3, #16
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b01      	cmp	r3, #1
 8006118:	d10d      	bne.n	8006136 <I2C_WaitOnFlagUntilTimeout+0xca>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	43da      	mvns	r2, r3
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	4013      	ands	r3, r2
 8006126:	b29b      	uxth	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	bf0c      	ite	eq
 800612c:	2301      	moveq	r3, #1
 800612e:	2300      	movne	r3, #0
 8006130:	b2db      	uxtb	r3, r3
 8006132:	461a      	mov	r2, r3
 8006134:	e00c      	b.n	8006150 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	43da      	mvns	r2, r3
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	4013      	ands	r3, r2
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	bf0c      	ite	eq
 8006148:	2301      	moveq	r3, #1
 800614a:	2300      	movne	r3, #0
 800614c:	b2db      	uxtb	r3, r3
 800614e:	461a      	mov	r2, r3
 8006150:	79fb      	ldrb	r3, [r7, #7]
 8006152:	429a      	cmp	r2, r3
 8006154:	d093      	beq.n	800607e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800616e:	e071      	b.n	8006254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800617a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800617e:	d123      	bne.n	80061c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800618e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006198:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2220      	movs	r2, #32
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b4:	f043 0204 	orr.w	r2, r3, #4
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e067      	b.n	8006298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ce:	d041      	beq.n	8006254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d0:	f7fb ff10 	bl	8001ff4 <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d302      	bcc.n	80061e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d136      	bne.n	8006254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	0c1b      	lsrs	r3, r3, #16
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d10c      	bne.n	800620a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	43da      	mvns	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	4013      	ands	r3, r2
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	bf14      	ite	ne
 8006202:	2301      	movne	r3, #1
 8006204:	2300      	moveq	r3, #0
 8006206:	b2db      	uxtb	r3, r3
 8006208:	e00b      	b.n	8006222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	43da      	mvns	r2, r3
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	4013      	ands	r3, r2
 8006216:	b29b      	uxth	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	bf14      	ite	ne
 800621c:	2301      	movne	r3, #1
 800621e:	2300      	moveq	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d016      	beq.n	8006254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2220      	movs	r2, #32
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006240:	f043 0220 	orr.w	r2, r3, #32
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e021      	b.n	8006298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	0c1b      	lsrs	r3, r3, #16
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b01      	cmp	r3, #1
 800625c:	d10c      	bne.n	8006278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	43da      	mvns	r2, r3
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	4013      	ands	r3, r2
 800626a:	b29b      	uxth	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	bf14      	ite	ne
 8006270:	2301      	movne	r3, #1
 8006272:	2300      	moveq	r3, #0
 8006274:	b2db      	uxtb	r3, r3
 8006276:	e00b      	b.n	8006290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	43da      	mvns	r2, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	4013      	ands	r3, r2
 8006284:	b29b      	uxth	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	bf14      	ite	ne
 800628a:	2301      	movne	r3, #1
 800628c:	2300      	moveq	r3, #0
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b00      	cmp	r3, #0
 8006292:	f47f af6d 	bne.w	8006170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062ac:	e034      	b.n	8006318 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 f8e3 	bl	800647a <I2C_IsAcknowledgeFailed>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e034      	b.n	8006328 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c4:	d028      	beq.n	8006318 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062c6:	f7fb fe95 	bl	8001ff4 <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d302      	bcc.n	80062dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d11d      	bne.n	8006318 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e6:	2b80      	cmp	r3, #128	; 0x80
 80062e8:	d016      	beq.n	8006318 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006304:	f043 0220 	orr.w	r2, r3, #32
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e007      	b.n	8006328 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006322:	2b80      	cmp	r3, #128	; 0x80
 8006324:	d1c3      	bne.n	80062ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800633c:	e034      	b.n	80063a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 f89b 	bl	800647a <I2C_IsAcknowledgeFailed>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e034      	b.n	80063b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006354:	d028      	beq.n	80063a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006356:	f7fb fe4d 	bl	8001ff4 <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	429a      	cmp	r2, r3
 8006364:	d302      	bcc.n	800636c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d11d      	bne.n	80063a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	f003 0304 	and.w	r3, r3, #4
 8006376:	2b04      	cmp	r3, #4
 8006378:	d016      	beq.n	80063a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2220      	movs	r2, #32
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006394:	f043 0220 	orr.w	r2, r3, #32
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e007      	b.n	80063b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	f003 0304 	and.w	r3, r3, #4
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	d1c3      	bne.n	800633e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063cc:	e049      	b.n	8006462 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	f003 0310 	and.w	r3, r3, #16
 80063d8:	2b10      	cmp	r3, #16
 80063da:	d119      	bne.n	8006410 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f06f 0210 	mvn.w	r2, #16
 80063e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2220      	movs	r2, #32
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e030      	b.n	8006472 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006410:	f7fb fdf0 	bl	8001ff4 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	429a      	cmp	r2, r3
 800641e:	d302      	bcc.n	8006426 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d11d      	bne.n	8006462 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006430:	2b40      	cmp	r3, #64	; 0x40
 8006432:	d016      	beq.n	8006462 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2220      	movs	r2, #32
 800643e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	f043 0220 	orr.w	r2, r3, #32
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e007      	b.n	8006472 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646c:	2b40      	cmp	r3, #64	; 0x40
 800646e:	d1ae      	bne.n	80063ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800648c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006490:	d11b      	bne.n	80064ca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800649a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2220      	movs	r2, #32
 80064a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	f043 0204 	orr.w	r2, r3, #4
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e000      	b.n	80064cc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af02      	add	r7, sp, #8
 80064de:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e108      	b.n	80066fc <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d106      	bne.n	800650a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7fb fc0b 	bl	8001d20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2203      	movs	r2, #3
 800650e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006518:	d102      	bne.n	8006520 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4618      	mov	r0, r3
 8006526:	f003 fb20 	bl	8009b6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6818      	ldr	r0, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	7c1a      	ldrb	r2, [r3, #16]
 8006532:	f88d 2000 	strb.w	r2, [sp]
 8006536:	3304      	adds	r3, #4
 8006538:	cb0e      	ldmia	r3, {r1, r2, r3}
 800653a:	f003 faa1 	bl	8009a80 <USB_CoreInit>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2202      	movs	r2, #2
 8006548:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e0d5      	b.n	80066fc <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2100      	movs	r1, #0
 8006556:	4618      	mov	r0, r3
 8006558:	f003 fb18 	bl	8009b8c <USB_SetCurrentMode>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d005      	beq.n	800656e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2202      	movs	r2, #2
 8006566:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e0c6      	b.n	80066fc <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800656e:	2300      	movs	r3, #0
 8006570:	73fb      	strb	r3, [r7, #15]
 8006572:	e04a      	b.n	800660a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006574:	7bfa      	ldrb	r2, [r7, #15]
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	4613      	mov	r3, r2
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	4413      	add	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	440b      	add	r3, r1
 8006582:	3315      	adds	r3, #21
 8006584:	2201      	movs	r2, #1
 8006586:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006588:	7bfa      	ldrb	r2, [r7, #15]
 800658a:	6879      	ldr	r1, [r7, #4]
 800658c:	4613      	mov	r3, r2
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	4413      	add	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	440b      	add	r3, r1
 8006596:	3314      	adds	r3, #20
 8006598:	7bfa      	ldrb	r2, [r7, #15]
 800659a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800659c:	7bfa      	ldrb	r2, [r7, #15]
 800659e:	7bfb      	ldrb	r3, [r7, #15]
 80065a0:	b298      	uxth	r0, r3
 80065a2:	6879      	ldr	r1, [r7, #4]
 80065a4:	4613      	mov	r3, r2
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	4413      	add	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	440b      	add	r3, r1
 80065ae:	332e      	adds	r3, #46	; 0x2e
 80065b0:	4602      	mov	r2, r0
 80065b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80065b4:	7bfa      	ldrb	r2, [r7, #15]
 80065b6:	6879      	ldr	r1, [r7, #4]
 80065b8:	4613      	mov	r3, r2
 80065ba:	00db      	lsls	r3, r3, #3
 80065bc:	4413      	add	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	440b      	add	r3, r1
 80065c2:	3318      	adds	r3, #24
 80065c4:	2200      	movs	r2, #0
 80065c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80065c8:	7bfa      	ldrb	r2, [r7, #15]
 80065ca:	6879      	ldr	r1, [r7, #4]
 80065cc:	4613      	mov	r3, r2
 80065ce:	00db      	lsls	r3, r3, #3
 80065d0:	4413      	add	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	440b      	add	r3, r1
 80065d6:	331c      	adds	r3, #28
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80065dc:	7bfa      	ldrb	r2, [r7, #15]
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	4613      	mov	r3, r2
 80065e2:	00db      	lsls	r3, r3, #3
 80065e4:	4413      	add	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	440b      	add	r3, r1
 80065ea:	3320      	adds	r3, #32
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80065f0:	7bfa      	ldrb	r2, [r7, #15]
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	4613      	mov	r3, r2
 80065f6:	00db      	lsls	r3, r3, #3
 80065f8:	4413      	add	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	440b      	add	r3, r1
 80065fe:	3324      	adds	r3, #36	; 0x24
 8006600:	2200      	movs	r2, #0
 8006602:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006604:	7bfb      	ldrb	r3, [r7, #15]
 8006606:	3301      	adds	r3, #1
 8006608:	73fb      	strb	r3, [r7, #15]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	791b      	ldrb	r3, [r3, #4]
 800660e:	7bfa      	ldrb	r2, [r7, #15]
 8006610:	429a      	cmp	r2, r3
 8006612:	d3af      	bcc.n	8006574 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006614:	2300      	movs	r3, #0
 8006616:	73fb      	strb	r3, [r7, #15]
 8006618:	e044      	b.n	80066a4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800661a:	7bfa      	ldrb	r2, [r7, #15]
 800661c:	6879      	ldr	r1, [r7, #4]
 800661e:	4613      	mov	r3, r2
 8006620:	00db      	lsls	r3, r3, #3
 8006622:	4413      	add	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	440b      	add	r3, r1
 8006628:	f203 2355 	addw	r3, r3, #597	; 0x255
 800662c:	2200      	movs	r2, #0
 800662e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006630:	7bfa      	ldrb	r2, [r7, #15]
 8006632:	6879      	ldr	r1, [r7, #4]
 8006634:	4613      	mov	r3, r2
 8006636:	00db      	lsls	r3, r3, #3
 8006638:	4413      	add	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	440b      	add	r3, r1
 800663e:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8006642:	7bfa      	ldrb	r2, [r7, #15]
 8006644:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006646:	7bfa      	ldrb	r2, [r7, #15]
 8006648:	6879      	ldr	r1, [r7, #4]
 800664a:	4613      	mov	r3, r2
 800664c:	00db      	lsls	r3, r3, #3
 800664e:	4413      	add	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	440b      	add	r3, r1
 8006654:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006658:	2200      	movs	r2, #0
 800665a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800665c:	7bfa      	ldrb	r2, [r7, #15]
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	4613      	mov	r3, r2
 8006662:	00db      	lsls	r3, r3, #3
 8006664:	4413      	add	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	440b      	add	r3, r1
 800666a:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800666e:	2200      	movs	r2, #0
 8006670:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006672:	7bfa      	ldrb	r2, [r7, #15]
 8006674:	6879      	ldr	r1, [r7, #4]
 8006676:	4613      	mov	r3, r2
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	4413      	add	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	440b      	add	r3, r1
 8006680:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006684:	2200      	movs	r2, #0
 8006686:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006688:	7bfa      	ldrb	r2, [r7, #15]
 800668a:	6879      	ldr	r1, [r7, #4]
 800668c:	4613      	mov	r3, r2
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	4413      	add	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	440b      	add	r3, r1
 8006696:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800669a:	2200      	movs	r2, #0
 800669c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800669e:	7bfb      	ldrb	r3, [r7, #15]
 80066a0:	3301      	adds	r3, #1
 80066a2:	73fb      	strb	r3, [r7, #15]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	791b      	ldrb	r3, [r3, #4]
 80066a8:	7bfa      	ldrb	r2, [r7, #15]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d3b5      	bcc.n	800661a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6818      	ldr	r0, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	7c1a      	ldrb	r2, [r3, #16]
 80066b6:	f88d 2000 	strb.w	r2, [sp]
 80066ba:	3304      	adds	r3, #4
 80066bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066be:	f003 fab1 	bl	8009c24 <USB_DevInit>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d005      	beq.n	80066d4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2202      	movs	r2, #2
 80066cc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e013      	b.n	80066fc <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	7b1b      	ldrb	r3, [r3, #12]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d102      	bne.n	80066f0 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f80a 	bl	8006704 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f003 fd02 	bl	800a0fe <USB_DevDisconnect>

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006736:	f043 0303 	orr.w	r3, r3, #3
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e0cc      	b.n	80068fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006760:	4b68      	ldr	r3, [pc, #416]	; (8006904 <HAL_RCC_ClockConfig+0x1b8>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 030f 	and.w	r3, r3, #15
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	429a      	cmp	r2, r3
 800676c:	d90c      	bls.n	8006788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800676e:	4b65      	ldr	r3, [pc, #404]	; (8006904 <HAL_RCC_ClockConfig+0x1b8>)
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	b2d2      	uxtb	r2, r2
 8006774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006776:	4b63      	ldr	r3, [pc, #396]	; (8006904 <HAL_RCC_ClockConfig+0x1b8>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 030f 	and.w	r3, r3, #15
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	429a      	cmp	r2, r3
 8006782:	d001      	beq.n	8006788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e0b8      	b.n	80068fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	2b00      	cmp	r3, #0
 8006792:	d020      	beq.n	80067d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067a0:	4b59      	ldr	r3, [pc, #356]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	4a58      	ldr	r2, [pc, #352]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 80067a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80067aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0308 	and.w	r3, r3, #8
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d005      	beq.n	80067c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067b8:	4b53      	ldr	r3, [pc, #332]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	4a52      	ldr	r2, [pc, #328]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 80067be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80067c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067c4:	4b50      	ldr	r3, [pc, #320]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	494d      	ldr	r1, [pc, #308]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d044      	beq.n	800686c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d107      	bne.n	80067fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067ea:	4b47      	ldr	r3, [pc, #284]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d119      	bne.n	800682a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e07f      	b.n	80068fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d003      	beq.n	800680a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006806:	2b03      	cmp	r3, #3
 8006808:	d107      	bne.n	800681a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800680a:	4b3f      	ldr	r3, [pc, #252]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d109      	bne.n	800682a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e06f      	b.n	80068fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800681a:	4b3b      	ldr	r3, [pc, #236]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0302 	and.w	r3, r3, #2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e067      	b.n	80068fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800682a:	4b37      	ldr	r3, [pc, #220]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f023 0203 	bic.w	r2, r3, #3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	4934      	ldr	r1, [pc, #208]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 8006838:	4313      	orrs	r3, r2
 800683a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800683c:	f7fb fbda 	bl	8001ff4 <HAL_GetTick>
 8006840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006842:	e00a      	b.n	800685a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006844:	f7fb fbd6 	bl	8001ff4 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006852:	4293      	cmp	r3, r2
 8006854:	d901      	bls.n	800685a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e04f      	b.n	80068fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800685a:	4b2b      	ldr	r3, [pc, #172]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f003 020c 	and.w	r2, r3, #12
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	429a      	cmp	r2, r3
 800686a:	d1eb      	bne.n	8006844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800686c:	4b25      	ldr	r3, [pc, #148]	; (8006904 <HAL_RCC_ClockConfig+0x1b8>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 030f 	and.w	r3, r3, #15
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	429a      	cmp	r2, r3
 8006878:	d20c      	bcs.n	8006894 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800687a:	4b22      	ldr	r3, [pc, #136]	; (8006904 <HAL_RCC_ClockConfig+0x1b8>)
 800687c:	683a      	ldr	r2, [r7, #0]
 800687e:	b2d2      	uxtb	r2, r2
 8006880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006882:	4b20      	ldr	r3, [pc, #128]	; (8006904 <HAL_RCC_ClockConfig+0x1b8>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 030f 	and.w	r3, r3, #15
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	429a      	cmp	r2, r3
 800688e:	d001      	beq.n	8006894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e032      	b.n	80068fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0304 	and.w	r3, r3, #4
 800689c:	2b00      	cmp	r3, #0
 800689e:	d008      	beq.n	80068b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068a0:	4b19      	ldr	r3, [pc, #100]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	4916      	ldr	r1, [pc, #88]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0308 	and.w	r3, r3, #8
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d009      	beq.n	80068d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068be:	4b12      	ldr	r3, [pc, #72]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	00db      	lsls	r3, r3, #3
 80068cc:	490e      	ldr	r1, [pc, #56]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068d2:	f000 fb7f 	bl	8006fd4 <HAL_RCC_GetSysClockFreq>
 80068d6:	4602      	mov	r2, r0
 80068d8:	4b0b      	ldr	r3, [pc, #44]	; (8006908 <HAL_RCC_ClockConfig+0x1bc>)
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	091b      	lsrs	r3, r3, #4
 80068de:	f003 030f 	and.w	r3, r3, #15
 80068e2:	490a      	ldr	r1, [pc, #40]	; (800690c <HAL_RCC_ClockConfig+0x1c0>)
 80068e4:	5ccb      	ldrb	r3, [r1, r3]
 80068e6:	fa22 f303 	lsr.w	r3, r2, r3
 80068ea:	4a09      	ldr	r2, [pc, #36]	; (8006910 <HAL_RCC_ClockConfig+0x1c4>)
 80068ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068ee:	4b09      	ldr	r3, [pc, #36]	; (8006914 <HAL_RCC_ClockConfig+0x1c8>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fb fb3a 	bl	8001f6c <HAL_InitTick>

  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	40023c00 	.word	0x40023c00
 8006908:	40023800 	.word	0x40023800
 800690c:	08010dd0 	.word	0x08010dd0
 8006910:	20000000 	.word	0x20000000
 8006914:	20000004 	.word	0x20000004

08006918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800691c:	4b03      	ldr	r3, [pc, #12]	; (800692c <HAL_RCC_GetHCLKFreq+0x14>)
 800691e:	681b      	ldr	r3, [r3, #0]
}
 8006920:	4618      	mov	r0, r3
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	20000000 	.word	0x20000000

08006930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006934:	f7ff fff0 	bl	8006918 <HAL_RCC_GetHCLKFreq>
 8006938:	4602      	mov	r2, r0
 800693a:	4b05      	ldr	r3, [pc, #20]	; (8006950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	0a9b      	lsrs	r3, r3, #10
 8006940:	f003 0307 	and.w	r3, r3, #7
 8006944:	4903      	ldr	r1, [pc, #12]	; (8006954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006946:	5ccb      	ldrb	r3, [r1, r3]
 8006948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800694c:	4618      	mov	r0, r3
 800694e:	bd80      	pop	{r7, pc}
 8006950:	40023800 	.word	0x40023800
 8006954:	08010de0 	.word	0x08010de0

08006958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800695c:	f7ff ffdc 	bl	8006918 <HAL_RCC_GetHCLKFreq>
 8006960:	4602      	mov	r2, r0
 8006962:	4b05      	ldr	r3, [pc, #20]	; (8006978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	0b5b      	lsrs	r3, r3, #13
 8006968:	f003 0307 	and.w	r3, r3, #7
 800696c:	4903      	ldr	r1, [pc, #12]	; (800697c <HAL_RCC_GetPCLK2Freq+0x24>)
 800696e:	5ccb      	ldrb	r3, [r1, r3]
 8006970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006974:	4618      	mov	r0, r3
 8006976:	bd80      	pop	{r7, pc}
 8006978:	40023800 	.word	0x40023800
 800697c:	08010de0 	.word	0x08010de0

08006980 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b08c      	sub	sp, #48	; 0x30
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006988:	2300      	movs	r3, #0
 800698a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800698c:	2300      	movs	r3, #0
 800698e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8006998:	2300      	movs	r3, #0
 800699a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800699c:	2300      	movs	r3, #0
 800699e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d010      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80069b8:	4b6f      	ldr	r3, [pc, #444]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80069ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069be:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c6:	496c      	ldr	r1, [pc, #432]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80069d6:	2301      	movs	r3, #1
 80069d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d010      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80069e6:	4b64      	ldr	r3, [pc, #400]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80069e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069ec:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f4:	4960      	ldr	r1, [pc, #384]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006a04:	2301      	movs	r3, #1
 8006a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0304 	and.w	r3, r3, #4
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d017      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a14:	4b58      	ldr	r3, [pc, #352]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a22:	4955      	ldr	r1, [pc, #340]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a32:	d101      	bne.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006a34:	2301      	movs	r3, #1
 8006a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8006a40:	2301      	movs	r3, #1
 8006a42:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0308 	and.w	r3, r3, #8
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d017      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006a50:	4b49      	ldr	r3, [pc, #292]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a5e:	4946      	ldr	r1, [pc, #280]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a6e:	d101      	bne.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006a70:	2301      	movs	r3, #1
 8006a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0320 	and.w	r3, r3, #32
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 808a 	beq.w	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60bb      	str	r3, [r7, #8]
 8006a92:	4b39      	ldr	r3, [pc, #228]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a96:	4a38      	ldr	r2, [pc, #224]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8006a9e:	4b36      	ldr	r3, [pc, #216]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aa6:	60bb      	str	r3, [r7, #8]
 8006aa8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006aaa:	4b34      	ldr	r3, [pc, #208]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a33      	ldr	r2, [pc, #204]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ab4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ab6:	f7fb fa9d 	bl	8001ff4 <HAL_GetTick>
 8006aba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006abc:	e008      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006abe:	f7fb fa99 	bl	8001ff4 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d901      	bls.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e278      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006ad0:	4b2a      	ldr	r3, [pc, #168]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0f0      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006adc:	4b26      	ldr	r3, [pc, #152]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ae4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d02f      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006af4:	6a3a      	ldr	r2, [r7, #32]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d028      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006afa:	4b1f      	ldr	r3, [pc, #124]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b02:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b04:	4b1e      	ldr	r3, [pc, #120]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006b06:	2201      	movs	r2, #1
 8006b08:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b0a:	4b1d      	ldr	r3, [pc, #116]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006b10:	4a19      	ldr	r2, [pc, #100]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b16:	4b18      	ldr	r3, [pc, #96]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d114      	bne.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006b22:	f7fb fa67 	bl	8001ff4 <HAL_GetTick>
 8006b26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b28:	e00a      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b2a:	f7fb fa63 	bl	8001ff4 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d901      	bls.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e240      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b40:	4b0d      	ldr	r3, [pc, #52]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b44:	f003 0302 	and.w	r3, r3, #2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d0ee      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b58:	d114      	bne.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8006b5a:	4b07      	ldr	r3, [pc, #28]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b6e:	4902      	ldr	r1, [pc, #8]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	608b      	str	r3, [r1, #8]
 8006b74:	e00c      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006b76:	bf00      	nop
 8006b78:	40023800 	.word	0x40023800
 8006b7c:	40007000 	.word	0x40007000
 8006b80:	42470e40 	.word	0x42470e40
 8006b84:	4b4a      	ldr	r3, [pc, #296]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	4a49      	ldr	r2, [pc, #292]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006b8a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006b8e:	6093      	str	r3, [r2, #8]
 8006b90:	4b47      	ldr	r3, [pc, #284]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006b92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b9c:	4944      	ldr	r1, [pc, #272]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0310 	and.w	r3, r3, #16
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d004      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006bb4:	4b3f      	ldr	r3, [pc, #252]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006bb6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00a      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006bc4:	4b3a      	ldr	r3, [pc, #232]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bd2:	4937      	ldr	r1, [pc, #220]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00a      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006be6:	4b32      	ldr	r3, [pc, #200]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bec:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bf4:	492e      	ldr	r1, [pc, #184]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d011      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006c08:	4b29      	ldr	r3, [pc, #164]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c0e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c16:	4926      	ldr	r1, [pc, #152]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c26:	d101      	bne.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00a      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006c38:	4b1d      	ldr	r3, [pc, #116]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c46:	491a      	ldr	r1, [pc, #104]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d011      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8006c5a:	4b15      	ldr	r3, [pc, #84]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c60:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c68:	4911      	ldr	r1, [pc, #68]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c78:	d101      	bne.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d005      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c8c:	f040 80ff 	bne.w	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006c90:	4b09      	ldr	r3, [pc, #36]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c96:	f7fb f9ad 	bl	8001ff4 <HAL_GetTick>
 8006c9a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c9c:	e00e      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c9e:	f7fb f9a9 	bl	8001ff4 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d907      	bls.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e188      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006cb0:	40023800 	.word	0x40023800
 8006cb4:	424711e0 	.word	0x424711e0
 8006cb8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cbc:	4b7e      	ldr	r3, [pc, #504]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1ea      	bne.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d009      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d028      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d124      	bne.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006cf0:	4b71      	ldr	r3, [pc, #452]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cf6:	0c1b      	lsrs	r3, r3, #16
 8006cf8:	f003 0303 	and.w	r3, r3, #3
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	005b      	lsls	r3, r3, #1
 8006d00:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006d02:	4b6d      	ldr	r3, [pc, #436]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d08:	0e1b      	lsrs	r3, r3, #24
 8006d0a:	f003 030f 	and.w	r3, r3, #15
 8006d0e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	019b      	lsls	r3, r3, #6
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	085b      	lsrs	r3, r3, #1
 8006d20:	3b01      	subs	r3, #1
 8006d22:	041b      	lsls	r3, r3, #16
 8006d24:	431a      	orrs	r2, r3
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	061b      	lsls	r3, r3, #24
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	071b      	lsls	r3, r3, #28
 8006d32:	4961      	ldr	r1, [pc, #388]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0304 	and.w	r3, r3, #4
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d004      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d4e:	d00a      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d035      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d64:	d130      	bne.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006d66:	4b54      	ldr	r3, [pc, #336]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d6c:	0c1b      	lsrs	r3, r3, #16
 8006d6e:	f003 0303 	and.w	r3, r3, #3
 8006d72:	3301      	adds	r3, #1
 8006d74:	005b      	lsls	r3, r3, #1
 8006d76:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006d78:	4b4f      	ldr	r3, [pc, #316]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d7e:	0f1b      	lsrs	r3, r3, #28
 8006d80:	f003 0307 	and.w	r3, r3, #7
 8006d84:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	019b      	lsls	r3, r3, #6
 8006d90:	431a      	orrs	r2, r3
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	085b      	lsrs	r3, r3, #1
 8006d96:	3b01      	subs	r3, #1
 8006d98:	041b      	lsls	r3, r3, #16
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	061b      	lsls	r3, r3, #24
 8006da2:	431a      	orrs	r2, r3
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	071b      	lsls	r3, r3, #28
 8006da8:	4943      	ldr	r1, [pc, #268]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006db0:	4b41      	ldr	r3, [pc, #260]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006db6:	f023 021f 	bic.w	r2, r3, #31
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	493d      	ldr	r1, [pc, #244]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d029      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ddc:	d124      	bne.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006dde:	4b36      	ldr	r3, [pc, #216]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006de4:	0c1b      	lsrs	r3, r3, #16
 8006de6:	f003 0303 	and.w	r3, r3, #3
 8006dea:	3301      	adds	r3, #1
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006df0:	4b31      	ldr	r3, [pc, #196]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006df6:	0f1b      	lsrs	r3, r3, #28
 8006df8:	f003 0307 	and.w	r3, r3, #7
 8006dfc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685a      	ldr	r2, [r3, #4]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	019b      	lsls	r3, r3, #6
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	085b      	lsrs	r3, r3, #1
 8006e10:	3b01      	subs	r3, #1
 8006e12:	041b      	lsls	r3, r3, #16
 8006e14:	431a      	orrs	r2, r3
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	061b      	lsls	r3, r3, #24
 8006e1a:	431a      	orrs	r2, r3
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	071b      	lsls	r3, r3, #28
 8006e20:	4925      	ldr	r1, [pc, #148]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d016      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	019b      	lsls	r3, r3, #6
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	085b      	lsrs	r3, r3, #1
 8006e46:	3b01      	subs	r3, #1
 8006e48:	041b      	lsls	r3, r3, #16
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	061b      	lsls	r3, r3, #24
 8006e52:	431a      	orrs	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	071b      	lsls	r3, r3, #28
 8006e5a:	4917      	ldr	r1, [pc, #92]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006e62:	4b16      	ldr	r3, [pc, #88]	; (8006ebc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006e64:	2201      	movs	r2, #1
 8006e66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e68:	f7fb f8c4 	bl	8001ff4 <HAL_GetTick>
 8006e6c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e6e:	e008      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006e70:	f7fb f8c0 	bl	8001ff4 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e09f      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e82:	4b0d      	ldr	r3, [pc, #52]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d0f0      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	f040 8095 	bne.w	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006e96:	4b0a      	ldr	r3, [pc, #40]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e9c:	f7fb f8aa 	bl	8001ff4 <HAL_GetTick>
 8006ea0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ea2:	e00f      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006ea4:	f7fb f8a6 	bl	8001ff4 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d908      	bls.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e085      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006eb6:	bf00      	nop
 8006eb8:	40023800 	.word	0x40023800
 8006ebc:	42470068 	.word	0x42470068
 8006ec0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ec4:	4b41      	ldr	r3, [pc, #260]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ed0:	d0e8      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0304 	and.w	r3, r3, #4
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d009      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d02b      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d127      	bne.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006efa:	4b34      	ldr	r3, [pc, #208]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f00:	0c1b      	lsrs	r3, r3, #16
 8006f02:	f003 0303 	and.w	r3, r3, #3
 8006f06:	3301      	adds	r3, #1
 8006f08:	005b      	lsls	r3, r3, #1
 8006f0a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	699a      	ldr	r2, [r3, #24]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	019b      	lsls	r3, r3, #6
 8006f16:	431a      	orrs	r2, r3
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	085b      	lsrs	r3, r3, #1
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	041b      	lsls	r3, r3, #16
 8006f20:	431a      	orrs	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	061b      	lsls	r3, r3, #24
 8006f28:	4928      	ldr	r1, [pc, #160]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006f30:	4b26      	ldr	r3, [pc, #152]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f36:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	021b      	lsls	r3, r3, #8
 8006f42:	4922      	ldr	r1, [pc, #136]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d01d      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f5e:	d118      	bne.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006f60:	4b1a      	ldr	r3, [pc, #104]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f66:	0e1b      	lsrs	r3, r3, #24
 8006f68:	f003 030f 	and.w	r3, r3, #15
 8006f6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	699a      	ldr	r2, [r3, #24]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	019b      	lsls	r3, r3, #6
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	085b      	lsrs	r3, r3, #1
 8006f80:	3b01      	subs	r3, #1
 8006f82:	041b      	lsls	r3, r3, #16
 8006f84:	431a      	orrs	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	061b      	lsls	r3, r3, #24
 8006f8a:	4910      	ldr	r1, [pc, #64]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006f92:	4b0f      	ldr	r3, [pc, #60]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006f94:	2201      	movs	r2, #1
 8006f96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f98:	f7fb f82c 	bl	8001ff4 <HAL_GetTick>
 8006f9c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006f9e:	e008      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006fa0:	f7fb f828 	bl	8001ff4 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d901      	bls.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e007      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006fb2:	4b06      	ldr	r3, [pc, #24]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fbe:	d1ef      	bne.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3730      	adds	r7, #48	; 0x30
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	40023800 	.word	0x40023800
 8006fd0:	42470070 	.word	0x42470070

08006fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fd8:	b0ae      	sub	sp, #184	; 0xb8
 8006fda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ffa:	4bcb      	ldr	r3, [pc, #812]	; (8007328 <HAL_RCC_GetSysClockFreq+0x354>)
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f003 030c 	and.w	r3, r3, #12
 8007002:	2b0c      	cmp	r3, #12
 8007004:	f200 8206 	bhi.w	8007414 <HAL_RCC_GetSysClockFreq+0x440>
 8007008:	a201      	add	r2, pc, #4	; (adr r2, 8007010 <HAL_RCC_GetSysClockFreq+0x3c>)
 800700a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700e:	bf00      	nop
 8007010:	08007045 	.word	0x08007045
 8007014:	08007415 	.word	0x08007415
 8007018:	08007415 	.word	0x08007415
 800701c:	08007415 	.word	0x08007415
 8007020:	0800704d 	.word	0x0800704d
 8007024:	08007415 	.word	0x08007415
 8007028:	08007415 	.word	0x08007415
 800702c:	08007415 	.word	0x08007415
 8007030:	08007055 	.word	0x08007055
 8007034:	08007415 	.word	0x08007415
 8007038:	08007415 	.word	0x08007415
 800703c:	08007415 	.word	0x08007415
 8007040:	08007245 	.word	0x08007245
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007044:	4bb9      	ldr	r3, [pc, #740]	; (800732c <HAL_RCC_GetSysClockFreq+0x358>)
 8007046:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800704a:	e1e7      	b.n	800741c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800704c:	4bb8      	ldr	r3, [pc, #736]	; (8007330 <HAL_RCC_GetSysClockFreq+0x35c>)
 800704e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007052:	e1e3      	b.n	800741c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007054:	4bb4      	ldr	r3, [pc, #720]	; (8007328 <HAL_RCC_GetSysClockFreq+0x354>)
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800705c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007060:	4bb1      	ldr	r3, [pc, #708]	; (8007328 <HAL_RCC_GetSysClockFreq+0x354>)
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d071      	beq.n	8007150 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800706c:	4bae      	ldr	r3, [pc, #696]	; (8007328 <HAL_RCC_GetSysClockFreq+0x354>)
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	099b      	lsrs	r3, r3, #6
 8007072:	2200      	movs	r2, #0
 8007074:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007078:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800707c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007084:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007088:	2300      	movs	r3, #0
 800708a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800708e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007092:	4622      	mov	r2, r4
 8007094:	462b      	mov	r3, r5
 8007096:	f04f 0000 	mov.w	r0, #0
 800709a:	f04f 0100 	mov.w	r1, #0
 800709e:	0159      	lsls	r1, r3, #5
 80070a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070a4:	0150      	lsls	r0, r2, #5
 80070a6:	4602      	mov	r2, r0
 80070a8:	460b      	mov	r3, r1
 80070aa:	4621      	mov	r1, r4
 80070ac:	1a51      	subs	r1, r2, r1
 80070ae:	6439      	str	r1, [r7, #64]	; 0x40
 80070b0:	4629      	mov	r1, r5
 80070b2:	eb63 0301 	sbc.w	r3, r3, r1
 80070b6:	647b      	str	r3, [r7, #68]	; 0x44
 80070b8:	f04f 0200 	mov.w	r2, #0
 80070bc:	f04f 0300 	mov.w	r3, #0
 80070c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80070c4:	4649      	mov	r1, r9
 80070c6:	018b      	lsls	r3, r1, #6
 80070c8:	4641      	mov	r1, r8
 80070ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80070ce:	4641      	mov	r1, r8
 80070d0:	018a      	lsls	r2, r1, #6
 80070d2:	4641      	mov	r1, r8
 80070d4:	1a51      	subs	r1, r2, r1
 80070d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80070d8:	4649      	mov	r1, r9
 80070da:	eb63 0301 	sbc.w	r3, r3, r1
 80070de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070e0:	f04f 0200 	mov.w	r2, #0
 80070e4:	f04f 0300 	mov.w	r3, #0
 80070e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80070ec:	4649      	mov	r1, r9
 80070ee:	00cb      	lsls	r3, r1, #3
 80070f0:	4641      	mov	r1, r8
 80070f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070f6:	4641      	mov	r1, r8
 80070f8:	00ca      	lsls	r2, r1, #3
 80070fa:	4610      	mov	r0, r2
 80070fc:	4619      	mov	r1, r3
 80070fe:	4603      	mov	r3, r0
 8007100:	4622      	mov	r2, r4
 8007102:	189b      	adds	r3, r3, r2
 8007104:	633b      	str	r3, [r7, #48]	; 0x30
 8007106:	462b      	mov	r3, r5
 8007108:	460a      	mov	r2, r1
 800710a:	eb42 0303 	adc.w	r3, r2, r3
 800710e:	637b      	str	r3, [r7, #52]	; 0x34
 8007110:	f04f 0200 	mov.w	r2, #0
 8007114:	f04f 0300 	mov.w	r3, #0
 8007118:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800711c:	4629      	mov	r1, r5
 800711e:	024b      	lsls	r3, r1, #9
 8007120:	4621      	mov	r1, r4
 8007122:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007126:	4621      	mov	r1, r4
 8007128:	024a      	lsls	r2, r1, #9
 800712a:	4610      	mov	r0, r2
 800712c:	4619      	mov	r1, r3
 800712e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007132:	2200      	movs	r2, #0
 8007134:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007138:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800713c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007140:	f7f9 fbc4 	bl	80008cc <__aeabi_uldivmod>
 8007144:	4602      	mov	r2, r0
 8007146:	460b      	mov	r3, r1
 8007148:	4613      	mov	r3, r2
 800714a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800714e:	e067      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007150:	4b75      	ldr	r3, [pc, #468]	; (8007328 <HAL_RCC_GetSysClockFreq+0x354>)
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	099b      	lsrs	r3, r3, #6
 8007156:	2200      	movs	r2, #0
 8007158:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800715c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007160:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007168:	67bb      	str	r3, [r7, #120]	; 0x78
 800716a:	2300      	movs	r3, #0
 800716c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800716e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8007172:	4622      	mov	r2, r4
 8007174:	462b      	mov	r3, r5
 8007176:	f04f 0000 	mov.w	r0, #0
 800717a:	f04f 0100 	mov.w	r1, #0
 800717e:	0159      	lsls	r1, r3, #5
 8007180:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007184:	0150      	lsls	r0, r2, #5
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	4621      	mov	r1, r4
 800718c:	1a51      	subs	r1, r2, r1
 800718e:	62b9      	str	r1, [r7, #40]	; 0x28
 8007190:	4629      	mov	r1, r5
 8007192:	eb63 0301 	sbc.w	r3, r3, r1
 8007196:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007198:	f04f 0200 	mov.w	r2, #0
 800719c:	f04f 0300 	mov.w	r3, #0
 80071a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80071a4:	4649      	mov	r1, r9
 80071a6:	018b      	lsls	r3, r1, #6
 80071a8:	4641      	mov	r1, r8
 80071aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071ae:	4641      	mov	r1, r8
 80071b0:	018a      	lsls	r2, r1, #6
 80071b2:	4641      	mov	r1, r8
 80071b4:	ebb2 0a01 	subs.w	sl, r2, r1
 80071b8:	4649      	mov	r1, r9
 80071ba:	eb63 0b01 	sbc.w	fp, r3, r1
 80071be:	f04f 0200 	mov.w	r2, #0
 80071c2:	f04f 0300 	mov.w	r3, #0
 80071c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80071ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80071ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071d2:	4692      	mov	sl, r2
 80071d4:	469b      	mov	fp, r3
 80071d6:	4623      	mov	r3, r4
 80071d8:	eb1a 0303 	adds.w	r3, sl, r3
 80071dc:	623b      	str	r3, [r7, #32]
 80071de:	462b      	mov	r3, r5
 80071e0:	eb4b 0303 	adc.w	r3, fp, r3
 80071e4:	627b      	str	r3, [r7, #36]	; 0x24
 80071e6:	f04f 0200 	mov.w	r2, #0
 80071ea:	f04f 0300 	mov.w	r3, #0
 80071ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80071f2:	4629      	mov	r1, r5
 80071f4:	028b      	lsls	r3, r1, #10
 80071f6:	4621      	mov	r1, r4
 80071f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071fc:	4621      	mov	r1, r4
 80071fe:	028a      	lsls	r2, r1, #10
 8007200:	4610      	mov	r0, r2
 8007202:	4619      	mov	r1, r3
 8007204:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007208:	2200      	movs	r2, #0
 800720a:	673b      	str	r3, [r7, #112]	; 0x70
 800720c:	677a      	str	r2, [r7, #116]	; 0x74
 800720e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007212:	f7f9 fb5b 	bl	80008cc <__aeabi_uldivmod>
 8007216:	4602      	mov	r2, r0
 8007218:	460b      	mov	r3, r1
 800721a:	4613      	mov	r3, r2
 800721c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007220:	4b41      	ldr	r3, [pc, #260]	; (8007328 <HAL_RCC_GetSysClockFreq+0x354>)
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	0c1b      	lsrs	r3, r3, #16
 8007226:	f003 0303 	and.w	r3, r3, #3
 800722a:	3301      	adds	r3, #1
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007232:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007236:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800723a:	fbb2 f3f3 	udiv	r3, r2, r3
 800723e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007242:	e0eb      	b.n	800741c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007244:	4b38      	ldr	r3, [pc, #224]	; (8007328 <HAL_RCC_GetSysClockFreq+0x354>)
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800724c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007250:	4b35      	ldr	r3, [pc, #212]	; (8007328 <HAL_RCC_GetSysClockFreq+0x354>)
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d06b      	beq.n	8007334 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800725c:	4b32      	ldr	r3, [pc, #200]	; (8007328 <HAL_RCC_GetSysClockFreq+0x354>)
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	099b      	lsrs	r3, r3, #6
 8007262:	2200      	movs	r2, #0
 8007264:	66bb      	str	r3, [r7, #104]	; 0x68
 8007266:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007268:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800726a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726e:	663b      	str	r3, [r7, #96]	; 0x60
 8007270:	2300      	movs	r3, #0
 8007272:	667b      	str	r3, [r7, #100]	; 0x64
 8007274:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007278:	4622      	mov	r2, r4
 800727a:	462b      	mov	r3, r5
 800727c:	f04f 0000 	mov.w	r0, #0
 8007280:	f04f 0100 	mov.w	r1, #0
 8007284:	0159      	lsls	r1, r3, #5
 8007286:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800728a:	0150      	lsls	r0, r2, #5
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	4621      	mov	r1, r4
 8007292:	1a51      	subs	r1, r2, r1
 8007294:	61b9      	str	r1, [r7, #24]
 8007296:	4629      	mov	r1, r5
 8007298:	eb63 0301 	sbc.w	r3, r3, r1
 800729c:	61fb      	str	r3, [r7, #28]
 800729e:	f04f 0200 	mov.w	r2, #0
 80072a2:	f04f 0300 	mov.w	r3, #0
 80072a6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80072aa:	4659      	mov	r1, fp
 80072ac:	018b      	lsls	r3, r1, #6
 80072ae:	4651      	mov	r1, sl
 80072b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80072b4:	4651      	mov	r1, sl
 80072b6:	018a      	lsls	r2, r1, #6
 80072b8:	4651      	mov	r1, sl
 80072ba:	ebb2 0801 	subs.w	r8, r2, r1
 80072be:	4659      	mov	r1, fp
 80072c0:	eb63 0901 	sbc.w	r9, r3, r1
 80072c4:	f04f 0200 	mov.w	r2, #0
 80072c8:	f04f 0300 	mov.w	r3, #0
 80072cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072d8:	4690      	mov	r8, r2
 80072da:	4699      	mov	r9, r3
 80072dc:	4623      	mov	r3, r4
 80072de:	eb18 0303 	adds.w	r3, r8, r3
 80072e2:	613b      	str	r3, [r7, #16]
 80072e4:	462b      	mov	r3, r5
 80072e6:	eb49 0303 	adc.w	r3, r9, r3
 80072ea:	617b      	str	r3, [r7, #20]
 80072ec:	f04f 0200 	mov.w	r2, #0
 80072f0:	f04f 0300 	mov.w	r3, #0
 80072f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80072f8:	4629      	mov	r1, r5
 80072fa:	024b      	lsls	r3, r1, #9
 80072fc:	4621      	mov	r1, r4
 80072fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007302:	4621      	mov	r1, r4
 8007304:	024a      	lsls	r2, r1, #9
 8007306:	4610      	mov	r0, r2
 8007308:	4619      	mov	r1, r3
 800730a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800730e:	2200      	movs	r2, #0
 8007310:	65bb      	str	r3, [r7, #88]	; 0x58
 8007312:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007314:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007318:	f7f9 fad8 	bl	80008cc <__aeabi_uldivmod>
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	4613      	mov	r3, r2
 8007322:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007326:	e065      	b.n	80073f4 <HAL_RCC_GetSysClockFreq+0x420>
 8007328:	40023800 	.word	0x40023800
 800732c:	00f42400 	.word	0x00f42400
 8007330:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007334:	4b3d      	ldr	r3, [pc, #244]	; (800742c <HAL_RCC_GetSysClockFreq+0x458>)
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	099b      	lsrs	r3, r3, #6
 800733a:	2200      	movs	r2, #0
 800733c:	4618      	mov	r0, r3
 800733e:	4611      	mov	r1, r2
 8007340:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007344:	653b      	str	r3, [r7, #80]	; 0x50
 8007346:	2300      	movs	r3, #0
 8007348:	657b      	str	r3, [r7, #84]	; 0x54
 800734a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800734e:	4642      	mov	r2, r8
 8007350:	464b      	mov	r3, r9
 8007352:	f04f 0000 	mov.w	r0, #0
 8007356:	f04f 0100 	mov.w	r1, #0
 800735a:	0159      	lsls	r1, r3, #5
 800735c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007360:	0150      	lsls	r0, r2, #5
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	4641      	mov	r1, r8
 8007368:	1a51      	subs	r1, r2, r1
 800736a:	60b9      	str	r1, [r7, #8]
 800736c:	4649      	mov	r1, r9
 800736e:	eb63 0301 	sbc.w	r3, r3, r1
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	f04f 0200 	mov.w	r2, #0
 8007378:	f04f 0300 	mov.w	r3, #0
 800737c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007380:	4659      	mov	r1, fp
 8007382:	018b      	lsls	r3, r1, #6
 8007384:	4651      	mov	r1, sl
 8007386:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800738a:	4651      	mov	r1, sl
 800738c:	018a      	lsls	r2, r1, #6
 800738e:	4651      	mov	r1, sl
 8007390:	1a54      	subs	r4, r2, r1
 8007392:	4659      	mov	r1, fp
 8007394:	eb63 0501 	sbc.w	r5, r3, r1
 8007398:	f04f 0200 	mov.w	r2, #0
 800739c:	f04f 0300 	mov.w	r3, #0
 80073a0:	00eb      	lsls	r3, r5, #3
 80073a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073a6:	00e2      	lsls	r2, r4, #3
 80073a8:	4614      	mov	r4, r2
 80073aa:	461d      	mov	r5, r3
 80073ac:	4643      	mov	r3, r8
 80073ae:	18e3      	adds	r3, r4, r3
 80073b0:	603b      	str	r3, [r7, #0]
 80073b2:	464b      	mov	r3, r9
 80073b4:	eb45 0303 	adc.w	r3, r5, r3
 80073b8:	607b      	str	r3, [r7, #4]
 80073ba:	f04f 0200 	mov.w	r2, #0
 80073be:	f04f 0300 	mov.w	r3, #0
 80073c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073c6:	4629      	mov	r1, r5
 80073c8:	028b      	lsls	r3, r1, #10
 80073ca:	4621      	mov	r1, r4
 80073cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073d0:	4621      	mov	r1, r4
 80073d2:	028a      	lsls	r2, r1, #10
 80073d4:	4610      	mov	r0, r2
 80073d6:	4619      	mov	r1, r3
 80073d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073dc:	2200      	movs	r2, #0
 80073de:	64bb      	str	r3, [r7, #72]	; 0x48
 80073e0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80073e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80073e6:	f7f9 fa71 	bl	80008cc <__aeabi_uldivmod>
 80073ea:	4602      	mov	r2, r0
 80073ec:	460b      	mov	r3, r1
 80073ee:	4613      	mov	r3, r2
 80073f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80073f4:	4b0d      	ldr	r3, [pc, #52]	; (800742c <HAL_RCC_GetSysClockFreq+0x458>)
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	0f1b      	lsrs	r3, r3, #28
 80073fa:	f003 0307 	and.w	r3, r3, #7
 80073fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8007402:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007406:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800740a:	fbb2 f3f3 	udiv	r3, r2, r3
 800740e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007412:	e003      	b.n	800741c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007414:	4b06      	ldr	r3, [pc, #24]	; (8007430 <HAL_RCC_GetSysClockFreq+0x45c>)
 8007416:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800741a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800741c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007420:	4618      	mov	r0, r3
 8007422:	37b8      	adds	r7, #184	; 0xb8
 8007424:	46bd      	mov	sp, r7
 8007426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800742a:	bf00      	nop
 800742c:	40023800 	.word	0x40023800
 8007430:	00f42400 	.word	0x00f42400

08007434 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e28d      	b.n	8007962 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 8083 	beq.w	800755a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007454:	4b94      	ldr	r3, [pc, #592]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f003 030c 	and.w	r3, r3, #12
 800745c:	2b04      	cmp	r3, #4
 800745e:	d019      	beq.n	8007494 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007460:	4b91      	ldr	r3, [pc, #580]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007468:	2b08      	cmp	r3, #8
 800746a:	d106      	bne.n	800747a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800746c:	4b8e      	ldr	r3, [pc, #568]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007474:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007478:	d00c      	beq.n	8007494 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800747a:	4b8b      	ldr	r3, [pc, #556]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007482:	2b0c      	cmp	r3, #12
 8007484:	d112      	bne.n	80074ac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007486:	4b88      	ldr	r3, [pc, #544]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800748e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007492:	d10b      	bne.n	80074ac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007494:	4b84      	ldr	r3, [pc, #528]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d05b      	beq.n	8007558 <HAL_RCC_OscConfig+0x124>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d157      	bne.n	8007558 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e25a      	b.n	8007962 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074b4:	d106      	bne.n	80074c4 <HAL_RCC_OscConfig+0x90>
 80074b6:	4b7c      	ldr	r3, [pc, #496]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a7b      	ldr	r2, [pc, #492]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 80074bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074c0:	6013      	str	r3, [r2, #0]
 80074c2:	e01d      	b.n	8007500 <HAL_RCC_OscConfig+0xcc>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074cc:	d10c      	bne.n	80074e8 <HAL_RCC_OscConfig+0xb4>
 80074ce:	4b76      	ldr	r3, [pc, #472]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a75      	ldr	r2, [pc, #468]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 80074d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074d8:	6013      	str	r3, [r2, #0]
 80074da:	4b73      	ldr	r3, [pc, #460]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a72      	ldr	r2, [pc, #456]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 80074e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074e4:	6013      	str	r3, [r2, #0]
 80074e6:	e00b      	b.n	8007500 <HAL_RCC_OscConfig+0xcc>
 80074e8:	4b6f      	ldr	r3, [pc, #444]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a6e      	ldr	r2, [pc, #440]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 80074ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074f2:	6013      	str	r3, [r2, #0]
 80074f4:	4b6c      	ldr	r3, [pc, #432]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a6b      	ldr	r2, [pc, #428]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 80074fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d013      	beq.n	8007530 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007508:	f7fa fd74 	bl	8001ff4 <HAL_GetTick>
 800750c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800750e:	e008      	b.n	8007522 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007510:	f7fa fd70 	bl	8001ff4 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	2b64      	cmp	r3, #100	; 0x64
 800751c:	d901      	bls.n	8007522 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e21f      	b.n	8007962 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007522:	4b61      	ldr	r3, [pc, #388]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0f0      	beq.n	8007510 <HAL_RCC_OscConfig+0xdc>
 800752e:	e014      	b.n	800755a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007530:	f7fa fd60 	bl	8001ff4 <HAL_GetTick>
 8007534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007536:	e008      	b.n	800754a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007538:	f7fa fd5c 	bl	8001ff4 <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	2b64      	cmp	r3, #100	; 0x64
 8007544:	d901      	bls.n	800754a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e20b      	b.n	8007962 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800754a:	4b57      	ldr	r3, [pc, #348]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1f0      	bne.n	8007538 <HAL_RCC_OscConfig+0x104>
 8007556:	e000      	b.n	800755a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0302 	and.w	r3, r3, #2
 8007562:	2b00      	cmp	r3, #0
 8007564:	d06f      	beq.n	8007646 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007566:	4b50      	ldr	r3, [pc, #320]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f003 030c 	and.w	r3, r3, #12
 800756e:	2b00      	cmp	r3, #0
 8007570:	d017      	beq.n	80075a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007572:	4b4d      	ldr	r3, [pc, #308]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800757a:	2b08      	cmp	r3, #8
 800757c:	d105      	bne.n	800758a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800757e:	4b4a      	ldr	r3, [pc, #296]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00b      	beq.n	80075a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800758a:	4b47      	ldr	r3, [pc, #284]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007592:	2b0c      	cmp	r3, #12
 8007594:	d11c      	bne.n	80075d0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007596:	4b44      	ldr	r3, [pc, #272]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d116      	bne.n	80075d0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075a2:	4b41      	ldr	r3, [pc, #260]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d005      	beq.n	80075ba <HAL_RCC_OscConfig+0x186>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d001      	beq.n	80075ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e1d3      	b.n	8007962 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075ba:	4b3b      	ldr	r3, [pc, #236]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	4937      	ldr	r1, [pc, #220]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075ce:	e03a      	b.n	8007646 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d020      	beq.n	800761a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075d8:	4b34      	ldr	r3, [pc, #208]	; (80076ac <HAL_RCC_OscConfig+0x278>)
 80075da:	2201      	movs	r2, #1
 80075dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075de:	f7fa fd09 	bl	8001ff4 <HAL_GetTick>
 80075e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075e4:	e008      	b.n	80075f8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075e6:	f7fa fd05 	bl	8001ff4 <HAL_GetTick>
 80075ea:	4602      	mov	r2, r0
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d901      	bls.n	80075f8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e1b4      	b.n	8007962 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075f8:	4b2b      	ldr	r3, [pc, #172]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d0f0      	beq.n	80075e6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007604:	4b28      	ldr	r3, [pc, #160]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	00db      	lsls	r3, r3, #3
 8007612:	4925      	ldr	r1, [pc, #148]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 8007614:	4313      	orrs	r3, r2
 8007616:	600b      	str	r3, [r1, #0]
 8007618:	e015      	b.n	8007646 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800761a:	4b24      	ldr	r3, [pc, #144]	; (80076ac <HAL_RCC_OscConfig+0x278>)
 800761c:	2200      	movs	r2, #0
 800761e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007620:	f7fa fce8 	bl	8001ff4 <HAL_GetTick>
 8007624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007626:	e008      	b.n	800763a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007628:	f7fa fce4 	bl	8001ff4 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	2b02      	cmp	r3, #2
 8007634:	d901      	bls.n	800763a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e193      	b.n	8007962 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800763a:	4b1b      	ldr	r3, [pc, #108]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1f0      	bne.n	8007628 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0308 	and.w	r3, r3, #8
 800764e:	2b00      	cmp	r3, #0
 8007650:	d036      	beq.n	80076c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d016      	beq.n	8007688 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800765a:	4b15      	ldr	r3, [pc, #84]	; (80076b0 <HAL_RCC_OscConfig+0x27c>)
 800765c:	2201      	movs	r2, #1
 800765e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007660:	f7fa fcc8 	bl	8001ff4 <HAL_GetTick>
 8007664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007666:	e008      	b.n	800767a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007668:	f7fa fcc4 	bl	8001ff4 <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	2b02      	cmp	r3, #2
 8007674:	d901      	bls.n	800767a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e173      	b.n	8007962 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800767a:	4b0b      	ldr	r3, [pc, #44]	; (80076a8 <HAL_RCC_OscConfig+0x274>)
 800767c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d0f0      	beq.n	8007668 <HAL_RCC_OscConfig+0x234>
 8007686:	e01b      	b.n	80076c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007688:	4b09      	ldr	r3, [pc, #36]	; (80076b0 <HAL_RCC_OscConfig+0x27c>)
 800768a:	2200      	movs	r2, #0
 800768c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800768e:	f7fa fcb1 	bl	8001ff4 <HAL_GetTick>
 8007692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007694:	e00e      	b.n	80076b4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007696:	f7fa fcad 	bl	8001ff4 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d907      	bls.n	80076b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e15c      	b.n	8007962 <HAL_RCC_OscConfig+0x52e>
 80076a8:	40023800 	.word	0x40023800
 80076ac:	42470000 	.word	0x42470000
 80076b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076b4:	4b8a      	ldr	r3, [pc, #552]	; (80078e0 <HAL_RCC_OscConfig+0x4ac>)
 80076b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1ea      	bne.n	8007696 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0304 	and.w	r3, r3, #4
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 8097 	beq.w	80077fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076ce:	2300      	movs	r3, #0
 80076d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076d2:	4b83      	ldr	r3, [pc, #524]	; (80078e0 <HAL_RCC_OscConfig+0x4ac>)
 80076d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10f      	bne.n	80076fe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076de:	2300      	movs	r3, #0
 80076e0:	60bb      	str	r3, [r7, #8]
 80076e2:	4b7f      	ldr	r3, [pc, #508]	; (80078e0 <HAL_RCC_OscConfig+0x4ac>)
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	4a7e      	ldr	r2, [pc, #504]	; (80078e0 <HAL_RCC_OscConfig+0x4ac>)
 80076e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076ec:	6413      	str	r3, [r2, #64]	; 0x40
 80076ee:	4b7c      	ldr	r3, [pc, #496]	; (80078e0 <HAL_RCC_OscConfig+0x4ac>)
 80076f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076f6:	60bb      	str	r3, [r7, #8]
 80076f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076fa:	2301      	movs	r3, #1
 80076fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076fe:	4b79      	ldr	r3, [pc, #484]	; (80078e4 <HAL_RCC_OscConfig+0x4b0>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007706:	2b00      	cmp	r3, #0
 8007708:	d118      	bne.n	800773c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800770a:	4b76      	ldr	r3, [pc, #472]	; (80078e4 <HAL_RCC_OscConfig+0x4b0>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a75      	ldr	r2, [pc, #468]	; (80078e4 <HAL_RCC_OscConfig+0x4b0>)
 8007710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007716:	f7fa fc6d 	bl	8001ff4 <HAL_GetTick>
 800771a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800771c:	e008      	b.n	8007730 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800771e:	f7fa fc69 	bl	8001ff4 <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	2b02      	cmp	r3, #2
 800772a:	d901      	bls.n	8007730 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	e118      	b.n	8007962 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007730:	4b6c      	ldr	r3, [pc, #432]	; (80078e4 <HAL_RCC_OscConfig+0x4b0>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0f0      	beq.n	800771e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d106      	bne.n	8007752 <HAL_RCC_OscConfig+0x31e>
 8007744:	4b66      	ldr	r3, [pc, #408]	; (80078e0 <HAL_RCC_OscConfig+0x4ac>)
 8007746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007748:	4a65      	ldr	r2, [pc, #404]	; (80078e0 <HAL_RCC_OscConfig+0x4ac>)
 800774a:	f043 0301 	orr.w	r3, r3, #1
 800774e:	6713      	str	r3, [r2, #112]	; 0x70
 8007750:	e01c      	b.n	800778c <HAL_RCC_OscConfig+0x358>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	2b05      	cmp	r3, #5
 8007758:	d10c      	bne.n	8007774 <HAL_RCC_OscConfig+0x340>
 800775a:	4b61      	ldr	r3, [pc, #388]	; (80078e0 <HAL_RCC_OscConfig+0x4ac>)
 800775c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800775e:	4a60      	ldr	r2, [pc, #384]	; (80078e0 <HAL_RCC_OscConfig+0x4ac>)
 8007760:	f043 0304 	orr.w	r3, r3, #4
 8007764:	6713      	str	r3, [r2, #112]	; 0x70
 8007766:	4b5e      	ldr	r3, [pc, #376]	; (80078e0 <HAL_RCC_OscConfig+0x4ac>)
 8007768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800776a:	4a5d      	ldr	r2, [pc, #372]	; (80078e0 <HAL_RCC_OscConfig+0x4ac>)
 800776c:	f043 0301 	orr.w	r3, r3, #1
 8007770:	6713      	str	r3, [r2, #112]	; 0x70
 8007772:	e00b      	b.n	800778c <HAL_RCC_OscConfig+0x358>
 8007774:	4b5a      	ldr	r3, [pc, #360]	; (80078e0 <HAL_RCC_OscConfig+0x4ac>)
 8007776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007778:	4a59      	ldr	r2, [pc, #356]	; (80078e0 <HAL_RCC_OscConfig+0x4ac>)
 800777a:	f023 0301 	bic.w	r3, r3, #1
 800777e:	6713      	str	r3, [r2, #112]	; 0x70
 8007780:	4b57      	ldr	r3, [pc, #348]	; (80078e0 <HAL_RCC_OscConfig+0x4ac>)
 8007782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007784:	4a56      	ldr	r2, [pc, #344]	; (80078e0 <HAL_RCC_OscConfig+0x4ac>)
 8007786:	f023 0304 	bic.w	r3, r3, #4
 800778a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d015      	beq.n	80077c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007794:	f7fa fc2e 	bl	8001ff4 <HAL_GetTick>
 8007798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800779a:	e00a      	b.n	80077b2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800779c:	f7fa fc2a 	bl	8001ff4 <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d901      	bls.n	80077b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e0d7      	b.n	8007962 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077b2:	4b4b      	ldr	r3, [pc, #300]	; (80078e0 <HAL_RCC_OscConfig+0x4ac>)
 80077b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b6:	f003 0302 	and.w	r3, r3, #2
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d0ee      	beq.n	800779c <HAL_RCC_OscConfig+0x368>
 80077be:	e014      	b.n	80077ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077c0:	f7fa fc18 	bl	8001ff4 <HAL_GetTick>
 80077c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077c6:	e00a      	b.n	80077de <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077c8:	f7fa fc14 	bl	8001ff4 <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d901      	bls.n	80077de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e0c1      	b.n	8007962 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077de:	4b40      	ldr	r3, [pc, #256]	; (80078e0 <HAL_RCC_OscConfig+0x4ac>)
 80077e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e2:	f003 0302 	and.w	r3, r3, #2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1ee      	bne.n	80077c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80077ea:	7dfb      	ldrb	r3, [r7, #23]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d105      	bne.n	80077fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077f0:	4b3b      	ldr	r3, [pc, #236]	; (80078e0 <HAL_RCC_OscConfig+0x4ac>)
 80077f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f4:	4a3a      	ldr	r2, [pc, #232]	; (80078e0 <HAL_RCC_OscConfig+0x4ac>)
 80077f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 80ad 	beq.w	8007960 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007806:	4b36      	ldr	r3, [pc, #216]	; (80078e0 <HAL_RCC_OscConfig+0x4ac>)
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 030c 	and.w	r3, r3, #12
 800780e:	2b08      	cmp	r3, #8
 8007810:	d060      	beq.n	80078d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	2b02      	cmp	r3, #2
 8007818:	d145      	bne.n	80078a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800781a:	4b33      	ldr	r3, [pc, #204]	; (80078e8 <HAL_RCC_OscConfig+0x4b4>)
 800781c:	2200      	movs	r2, #0
 800781e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007820:	f7fa fbe8 	bl	8001ff4 <HAL_GetTick>
 8007824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007826:	e008      	b.n	800783a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007828:	f7fa fbe4 	bl	8001ff4 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b02      	cmp	r3, #2
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e093      	b.n	8007962 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800783a:	4b29      	ldr	r3, [pc, #164]	; (80078e0 <HAL_RCC_OscConfig+0x4ac>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1f0      	bne.n	8007828 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	69da      	ldr	r2, [r3, #28]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	431a      	orrs	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007854:	019b      	lsls	r3, r3, #6
 8007856:	431a      	orrs	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785c:	085b      	lsrs	r3, r3, #1
 800785e:	3b01      	subs	r3, #1
 8007860:	041b      	lsls	r3, r3, #16
 8007862:	431a      	orrs	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007868:	061b      	lsls	r3, r3, #24
 800786a:	431a      	orrs	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007870:	071b      	lsls	r3, r3, #28
 8007872:	491b      	ldr	r1, [pc, #108]	; (80078e0 <HAL_RCC_OscConfig+0x4ac>)
 8007874:	4313      	orrs	r3, r2
 8007876:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007878:	4b1b      	ldr	r3, [pc, #108]	; (80078e8 <HAL_RCC_OscConfig+0x4b4>)
 800787a:	2201      	movs	r2, #1
 800787c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800787e:	f7fa fbb9 	bl	8001ff4 <HAL_GetTick>
 8007882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007884:	e008      	b.n	8007898 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007886:	f7fa fbb5 	bl	8001ff4 <HAL_GetTick>
 800788a:	4602      	mov	r2, r0
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	2b02      	cmp	r3, #2
 8007892:	d901      	bls.n	8007898 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	e064      	b.n	8007962 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007898:	4b11      	ldr	r3, [pc, #68]	; (80078e0 <HAL_RCC_OscConfig+0x4ac>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d0f0      	beq.n	8007886 <HAL_RCC_OscConfig+0x452>
 80078a4:	e05c      	b.n	8007960 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078a6:	4b10      	ldr	r3, [pc, #64]	; (80078e8 <HAL_RCC_OscConfig+0x4b4>)
 80078a8:	2200      	movs	r2, #0
 80078aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ac:	f7fa fba2 	bl	8001ff4 <HAL_GetTick>
 80078b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078b2:	e008      	b.n	80078c6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078b4:	f7fa fb9e 	bl	8001ff4 <HAL_GetTick>
 80078b8:	4602      	mov	r2, r0
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d901      	bls.n	80078c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e04d      	b.n	8007962 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078c6:	4b06      	ldr	r3, [pc, #24]	; (80078e0 <HAL_RCC_OscConfig+0x4ac>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1f0      	bne.n	80078b4 <HAL_RCC_OscConfig+0x480>
 80078d2:	e045      	b.n	8007960 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d107      	bne.n	80078ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e040      	b.n	8007962 <HAL_RCC_OscConfig+0x52e>
 80078e0:	40023800 	.word	0x40023800
 80078e4:	40007000 	.word	0x40007000
 80078e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80078ec:	4b1f      	ldr	r3, [pc, #124]	; (800796c <HAL_RCC_OscConfig+0x538>)
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d030      	beq.n	800795c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007904:	429a      	cmp	r2, r3
 8007906:	d129      	bne.n	800795c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007912:	429a      	cmp	r2, r3
 8007914:	d122      	bne.n	800795c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800791c:	4013      	ands	r3, r2
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007922:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007924:	4293      	cmp	r3, r2
 8007926:	d119      	bne.n	800795c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007932:	085b      	lsrs	r3, r3, #1
 8007934:	3b01      	subs	r3, #1
 8007936:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007938:	429a      	cmp	r2, r3
 800793a:	d10f      	bne.n	800795c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007946:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007948:	429a      	cmp	r2, r3
 800794a:	d107      	bne.n	800795c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007956:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007958:	429a      	cmp	r2, r3
 800795a:	d001      	beq.n	8007960 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e000      	b.n	8007962 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	40023800 	.word	0x40023800

08007970 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d101      	bne.n	8007982 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e07b      	b.n	8007a7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007986:	2b00      	cmp	r3, #0
 8007988:	d108      	bne.n	800799c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007992:	d009      	beq.n	80079a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	61da      	str	r2, [r3, #28]
 800799a:	e005      	b.n	80079a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d106      	bne.n	80079c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7f9 ff72 	bl	80018ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2202      	movs	r2, #2
 80079cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80079f0:	431a      	orrs	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079fa:	431a      	orrs	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	f003 0302 	and.w	r3, r3, #2
 8007a04:	431a      	orrs	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	431a      	orrs	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a18:	431a      	orrs	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a22:	431a      	orrs	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a1b      	ldr	r3, [r3, #32]
 8007a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2c:	ea42 0103 	orr.w	r1, r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	0c1b      	lsrs	r3, r3, #16
 8007a46:	f003 0104 	and.w	r1, r3, #4
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4e:	f003 0210 	and.w	r2, r3, #16
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	69da      	ldr	r2, [r3, #28]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b082      	sub	sp, #8
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e041      	b.n	8007b18 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d106      	bne.n	8007aae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f7f9 ff69 	bl	8001980 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2202      	movs	r2, #2
 8007ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	3304      	adds	r3, #4
 8007abe:	4619      	mov	r1, r3
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	f000 fe27 	bl	8008714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d101      	bne.n	8007b32 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e041      	b.n	8007bb6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d106      	bne.n	8007b4c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f839 	bl	8007bbe <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	3304      	adds	r3, #4
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	4610      	mov	r0, r2
 8007b60:	f000 fdd8 	bl	8008714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b083      	sub	sp, #12
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b082      	sub	sp, #8
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e041      	b.n	8007c68 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d106      	bne.n	8007bfe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f839 	bl	8007c70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2202      	movs	r2, #2
 8007c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	4619      	mov	r1, r3
 8007c10:	4610      	mov	r0, r2
 8007c12:	f000 fd7f 	bl	8008714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d109      	bne.n	8007ca8 <HAL_TIM_PWM_Start+0x24>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	bf14      	ite	ne
 8007ca0:	2301      	movne	r3, #1
 8007ca2:	2300      	moveq	r3, #0
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	e022      	b.n	8007cee <HAL_TIM_PWM_Start+0x6a>
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	2b04      	cmp	r3, #4
 8007cac:	d109      	bne.n	8007cc2 <HAL_TIM_PWM_Start+0x3e>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	bf14      	ite	ne
 8007cba:	2301      	movne	r3, #1
 8007cbc:	2300      	moveq	r3, #0
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	e015      	b.n	8007cee <HAL_TIM_PWM_Start+0x6a>
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	2b08      	cmp	r3, #8
 8007cc6:	d109      	bne.n	8007cdc <HAL_TIM_PWM_Start+0x58>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	bf14      	ite	ne
 8007cd4:	2301      	movne	r3, #1
 8007cd6:	2300      	moveq	r3, #0
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	e008      	b.n	8007cee <HAL_TIM_PWM_Start+0x6a>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	bf14      	ite	ne
 8007ce8:	2301      	movne	r3, #1
 8007cea:	2300      	moveq	r3, #0
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d001      	beq.n	8007cf6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e07c      	b.n	8007df0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d104      	bne.n	8007d06 <HAL_TIM_PWM_Start+0x82>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2202      	movs	r2, #2
 8007d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d04:	e013      	b.n	8007d2e <HAL_TIM_PWM_Start+0xaa>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	d104      	bne.n	8007d16 <HAL_TIM_PWM_Start+0x92>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d14:	e00b      	b.n	8007d2e <HAL_TIM_PWM_Start+0xaa>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b08      	cmp	r3, #8
 8007d1a:	d104      	bne.n	8007d26 <HAL_TIM_PWM_Start+0xa2>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d24:	e003      	b.n	8007d2e <HAL_TIM_PWM_Start+0xaa>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2202      	movs	r2, #2
 8007d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2201      	movs	r2, #1
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f001 f90c 	bl	8008f54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a2d      	ldr	r2, [pc, #180]	; (8007df8 <HAL_TIM_PWM_Start+0x174>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d004      	beq.n	8007d50 <HAL_TIM_PWM_Start+0xcc>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a2c      	ldr	r2, [pc, #176]	; (8007dfc <HAL_TIM_PWM_Start+0x178>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d101      	bne.n	8007d54 <HAL_TIM_PWM_Start+0xd0>
 8007d50:	2301      	movs	r3, #1
 8007d52:	e000      	b.n	8007d56 <HAL_TIM_PWM_Start+0xd2>
 8007d54:	2300      	movs	r3, #0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d007      	beq.n	8007d6a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a22      	ldr	r2, [pc, #136]	; (8007df8 <HAL_TIM_PWM_Start+0x174>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d022      	beq.n	8007dba <HAL_TIM_PWM_Start+0x136>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d7c:	d01d      	beq.n	8007dba <HAL_TIM_PWM_Start+0x136>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a1f      	ldr	r2, [pc, #124]	; (8007e00 <HAL_TIM_PWM_Start+0x17c>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d018      	beq.n	8007dba <HAL_TIM_PWM_Start+0x136>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a1d      	ldr	r2, [pc, #116]	; (8007e04 <HAL_TIM_PWM_Start+0x180>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d013      	beq.n	8007dba <HAL_TIM_PWM_Start+0x136>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a1c      	ldr	r2, [pc, #112]	; (8007e08 <HAL_TIM_PWM_Start+0x184>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d00e      	beq.n	8007dba <HAL_TIM_PWM_Start+0x136>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a16      	ldr	r2, [pc, #88]	; (8007dfc <HAL_TIM_PWM_Start+0x178>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d009      	beq.n	8007dba <HAL_TIM_PWM_Start+0x136>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a18      	ldr	r2, [pc, #96]	; (8007e0c <HAL_TIM_PWM_Start+0x188>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d004      	beq.n	8007dba <HAL_TIM_PWM_Start+0x136>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a16      	ldr	r2, [pc, #88]	; (8007e10 <HAL_TIM_PWM_Start+0x18c>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d111      	bne.n	8007dde <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f003 0307 	and.w	r3, r3, #7
 8007dc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2b06      	cmp	r3, #6
 8007dca:	d010      	beq.n	8007dee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f042 0201 	orr.w	r2, r2, #1
 8007dda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ddc:	e007      	b.n	8007dee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f042 0201 	orr.w	r2, r2, #1
 8007dec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	40010000 	.word	0x40010000
 8007dfc:	40010400 	.word	0x40010400
 8007e00:	40000400 	.word	0x40000400
 8007e04:	40000800 	.word	0x40000800
 8007e08:	40000c00 	.word	0x40000c00
 8007e0c:	40014000 	.word	0x40014000
 8007e10:	40001800 	.word	0x40001800

08007e14 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2200      	movs	r2, #0
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f001 f894 	bl	8008f54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a2e      	ldr	r2, [pc, #184]	; (8007eec <HAL_TIM_PWM_Stop+0xd8>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d004      	beq.n	8007e40 <HAL_TIM_PWM_Stop+0x2c>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a2d      	ldr	r2, [pc, #180]	; (8007ef0 <HAL_TIM_PWM_Stop+0xdc>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d101      	bne.n	8007e44 <HAL_TIM_PWM_Stop+0x30>
 8007e40:	2301      	movs	r3, #1
 8007e42:	e000      	b.n	8007e46 <HAL_TIM_PWM_Stop+0x32>
 8007e44:	2300      	movs	r3, #0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d017      	beq.n	8007e7a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	6a1a      	ldr	r2, [r3, #32]
 8007e50:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e54:	4013      	ands	r3, r2
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d10f      	bne.n	8007e7a <HAL_TIM_PWM_Stop+0x66>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	6a1a      	ldr	r2, [r3, #32]
 8007e60:	f240 4344 	movw	r3, #1092	; 0x444
 8007e64:	4013      	ands	r3, r2
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d107      	bne.n	8007e7a <HAL_TIM_PWM_Stop+0x66>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	6a1a      	ldr	r2, [r3, #32]
 8007e80:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e84:	4013      	ands	r3, r2
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10f      	bne.n	8007eaa <HAL_TIM_PWM_Stop+0x96>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6a1a      	ldr	r2, [r3, #32]
 8007e90:	f240 4344 	movw	r3, #1092	; 0x444
 8007e94:	4013      	ands	r3, r2
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d107      	bne.n	8007eaa <HAL_TIM_PWM_Stop+0x96>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f022 0201 	bic.w	r2, r2, #1
 8007ea8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d104      	bne.n	8007eba <HAL_TIM_PWM_Stop+0xa6>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007eb8:	e013      	b.n	8007ee2 <HAL_TIM_PWM_Stop+0xce>
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	2b04      	cmp	r3, #4
 8007ebe:	d104      	bne.n	8007eca <HAL_TIM_PWM_Stop+0xb6>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ec8:	e00b      	b.n	8007ee2 <HAL_TIM_PWM_Stop+0xce>
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b08      	cmp	r3, #8
 8007ece:	d104      	bne.n	8007eda <HAL_TIM_PWM_Stop+0xc6>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ed8:	e003      	b.n	8007ee2 <HAL_TIM_PWM_Stop+0xce>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	40010000 	.word	0x40010000
 8007ef0:	40010400 	.word	0x40010400

08007ef4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e041      	b.n	8007f8a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d106      	bne.n	8007f20 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7f9 fd7e 	bl	8001a1c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2202      	movs	r2, #2
 8007f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3304      	adds	r3, #4
 8007f30:	4619      	mov	r1, r3
 8007f32:	4610      	mov	r0, r2
 8007f34:	f000 fbee 	bl	8008714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
	...

08007f94 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d104      	bne.n	8007fae <HAL_TIM_IC_Start+0x1a>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	e013      	b.n	8007fd6 <HAL_TIM_IC_Start+0x42>
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b04      	cmp	r3, #4
 8007fb2:	d104      	bne.n	8007fbe <HAL_TIM_IC_Start+0x2a>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	e00b      	b.n	8007fd6 <HAL_TIM_IC_Start+0x42>
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	2b08      	cmp	r3, #8
 8007fc2:	d104      	bne.n	8007fce <HAL_TIM_IC_Start+0x3a>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	e003      	b.n	8007fd6 <HAL_TIM_IC_Start+0x42>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d104      	bne.n	8007fe8 <HAL_TIM_IC_Start+0x54>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	e013      	b.n	8008010 <HAL_TIM_IC_Start+0x7c>
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	d104      	bne.n	8007ff8 <HAL_TIM_IC_Start+0x64>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	e00b      	b.n	8008010 <HAL_TIM_IC_Start+0x7c>
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	2b08      	cmp	r3, #8
 8007ffc:	d104      	bne.n	8008008 <HAL_TIM_IC_Start+0x74>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008004:	b2db      	uxtb	r3, r3
 8008006:	e003      	b.n	8008010 <HAL_TIM_IC_Start+0x7c>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800800e:	b2db      	uxtb	r3, r3
 8008010:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008012:	7bfb      	ldrb	r3, [r7, #15]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d102      	bne.n	800801e <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008018:	7bbb      	ldrb	r3, [r7, #14]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d001      	beq.n	8008022 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e081      	b.n	8008126 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d104      	bne.n	8008032 <HAL_TIM_IC_Start+0x9e>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2202      	movs	r2, #2
 800802c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008030:	e013      	b.n	800805a <HAL_TIM_IC_Start+0xc6>
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	2b04      	cmp	r3, #4
 8008036:	d104      	bne.n	8008042 <HAL_TIM_IC_Start+0xae>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2202      	movs	r2, #2
 800803c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008040:	e00b      	b.n	800805a <HAL_TIM_IC_Start+0xc6>
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2b08      	cmp	r3, #8
 8008046:	d104      	bne.n	8008052 <HAL_TIM_IC_Start+0xbe>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2202      	movs	r2, #2
 800804c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008050:	e003      	b.n	800805a <HAL_TIM_IC_Start+0xc6>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2202      	movs	r2, #2
 8008056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d104      	bne.n	800806a <HAL_TIM_IC_Start+0xd6>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2202      	movs	r2, #2
 8008064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008068:	e013      	b.n	8008092 <HAL_TIM_IC_Start+0xfe>
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	2b04      	cmp	r3, #4
 800806e:	d104      	bne.n	800807a <HAL_TIM_IC_Start+0xe6>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2202      	movs	r2, #2
 8008074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008078:	e00b      	b.n	8008092 <HAL_TIM_IC_Start+0xfe>
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	2b08      	cmp	r3, #8
 800807e:	d104      	bne.n	800808a <HAL_TIM_IC_Start+0xf6>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2202      	movs	r2, #2
 8008084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008088:	e003      	b.n	8008092 <HAL_TIM_IC_Start+0xfe>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2202      	movs	r2, #2
 800808e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2201      	movs	r2, #1
 8008098:	6839      	ldr	r1, [r7, #0]
 800809a:	4618      	mov	r0, r3
 800809c:	f000 ff5a 	bl	8008f54 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a22      	ldr	r2, [pc, #136]	; (8008130 <HAL_TIM_IC_Start+0x19c>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d022      	beq.n	80080f0 <HAL_TIM_IC_Start+0x15c>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080b2:	d01d      	beq.n	80080f0 <HAL_TIM_IC_Start+0x15c>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a1e      	ldr	r2, [pc, #120]	; (8008134 <HAL_TIM_IC_Start+0x1a0>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d018      	beq.n	80080f0 <HAL_TIM_IC_Start+0x15c>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a1d      	ldr	r2, [pc, #116]	; (8008138 <HAL_TIM_IC_Start+0x1a4>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d013      	beq.n	80080f0 <HAL_TIM_IC_Start+0x15c>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a1b      	ldr	r2, [pc, #108]	; (800813c <HAL_TIM_IC_Start+0x1a8>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d00e      	beq.n	80080f0 <HAL_TIM_IC_Start+0x15c>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a1a      	ldr	r2, [pc, #104]	; (8008140 <HAL_TIM_IC_Start+0x1ac>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d009      	beq.n	80080f0 <HAL_TIM_IC_Start+0x15c>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a18      	ldr	r2, [pc, #96]	; (8008144 <HAL_TIM_IC_Start+0x1b0>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d004      	beq.n	80080f0 <HAL_TIM_IC_Start+0x15c>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a17      	ldr	r2, [pc, #92]	; (8008148 <HAL_TIM_IC_Start+0x1b4>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d111      	bne.n	8008114 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f003 0307 	and.w	r3, r3, #7
 80080fa:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2b06      	cmp	r3, #6
 8008100:	d010      	beq.n	8008124 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f042 0201 	orr.w	r2, r2, #1
 8008110:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008112:	e007      	b.n	8008124 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f042 0201 	orr.w	r2, r2, #1
 8008122:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	40010000 	.word	0x40010000
 8008134:	40000400 	.word	0x40000400
 8008138:	40000800 	.word	0x40000800
 800813c:	40000c00 	.word	0x40000c00
 8008140:	40010400 	.word	0x40010400
 8008144:	40014000 	.word	0x40014000
 8008148:	40001800 	.word	0x40001800

0800814c <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2200      	movs	r2, #0
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	4618      	mov	r0, r3
 8008160:	f000 fef8 	bl	8008f54 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6a1a      	ldr	r2, [r3, #32]
 800816a:	f241 1311 	movw	r3, #4369	; 0x1111
 800816e:	4013      	ands	r3, r2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10f      	bne.n	8008194 <HAL_TIM_IC_Stop+0x48>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6a1a      	ldr	r2, [r3, #32]
 800817a:	f240 4344 	movw	r3, #1092	; 0x444
 800817e:	4013      	ands	r3, r2
 8008180:	2b00      	cmp	r3, #0
 8008182:	d107      	bne.n	8008194 <HAL_TIM_IC_Stop+0x48>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f022 0201 	bic.w	r2, r2, #1
 8008192:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d104      	bne.n	80081a4 <HAL_TIM_IC_Stop+0x58>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081a2:	e013      	b.n	80081cc <HAL_TIM_IC_Stop+0x80>
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	2b04      	cmp	r3, #4
 80081a8:	d104      	bne.n	80081b4 <HAL_TIM_IC_Stop+0x68>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081b2:	e00b      	b.n	80081cc <HAL_TIM_IC_Stop+0x80>
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	2b08      	cmp	r3, #8
 80081b8:	d104      	bne.n	80081c4 <HAL_TIM_IC_Stop+0x78>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081c2:	e003      	b.n	80081cc <HAL_TIM_IC_Stop+0x80>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d104      	bne.n	80081dc <HAL_TIM_IC_Stop+0x90>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081da:	e013      	b.n	8008204 <HAL_TIM_IC_Stop+0xb8>
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	2b04      	cmp	r3, #4
 80081e0:	d104      	bne.n	80081ec <HAL_TIM_IC_Stop+0xa0>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081ea:	e00b      	b.n	8008204 <HAL_TIM_IC_Stop+0xb8>
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	2b08      	cmp	r3, #8
 80081f0:	d104      	bne.n	80081fc <HAL_TIM_IC_Stop+0xb0>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081fa:	e003      	b.n	8008204 <HAL_TIM_IC_Stop+0xb8>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008226:	2b01      	cmp	r3, #1
 8008228:	d101      	bne.n	800822e <HAL_TIM_OC_ConfigChannel+0x1e>
 800822a:	2302      	movs	r3, #2
 800822c:	e048      	b.n	80082c0 <HAL_TIM_OC_ConfigChannel+0xb0>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b0c      	cmp	r3, #12
 800823a:	d839      	bhi.n	80082b0 <HAL_TIM_OC_ConfigChannel+0xa0>
 800823c:	a201      	add	r2, pc, #4	; (adr r2, 8008244 <HAL_TIM_OC_ConfigChannel+0x34>)
 800823e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008242:	bf00      	nop
 8008244:	08008279 	.word	0x08008279
 8008248:	080082b1 	.word	0x080082b1
 800824c:	080082b1 	.word	0x080082b1
 8008250:	080082b1 	.word	0x080082b1
 8008254:	08008287 	.word	0x08008287
 8008258:	080082b1 	.word	0x080082b1
 800825c:	080082b1 	.word	0x080082b1
 8008260:	080082b1 	.word	0x080082b1
 8008264:	08008295 	.word	0x08008295
 8008268:	080082b1 	.word	0x080082b1
 800826c:	080082b1 	.word	0x080082b1
 8008270:	080082b1 	.word	0x080082b1
 8008274:	080082a3 	.word	0x080082a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68b9      	ldr	r1, [r7, #8]
 800827e:	4618      	mov	r0, r3
 8008280:	f000 faf4 	bl	800886c <TIM_OC1_SetConfig>
      break;
 8008284:	e017      	b.n	80082b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68b9      	ldr	r1, [r7, #8]
 800828c:	4618      	mov	r0, r3
 800828e:	f000 fb5d 	bl	800894c <TIM_OC2_SetConfig>
      break;
 8008292:	e010      	b.n	80082b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68b9      	ldr	r1, [r7, #8]
 800829a:	4618      	mov	r0, r3
 800829c:	f000 fbcc 	bl	8008a38 <TIM_OC3_SetConfig>
      break;
 80082a0:	e009      	b.n	80082b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68b9      	ldr	r1, [r7, #8]
 80082a8:	4618      	mov	r0, r3
 80082aa:	f000 fc39 	bl	8008b20 <TIM_OC4_SetConfig>
      break;
 80082ae:	e002      	b.n	80082b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	75fb      	strb	r3, [r7, #23]
      break;
 80082b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082be:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3718      	adds	r7, #24
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082d4:	2300      	movs	r3, #0
 80082d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d101      	bne.n	80082e6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80082e2:	2302      	movs	r3, #2
 80082e4:	e088      	b.n	80083f8 <HAL_TIM_IC_ConfigChannel+0x130>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d11b      	bne.n	800832c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008304:	f000 fc62 	bl	8008bcc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	699a      	ldr	r2, [r3, #24]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f022 020c 	bic.w	r2, r2, #12
 8008316:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6999      	ldr	r1, [r3, #24]
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	689a      	ldr	r2, [r3, #8]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	430a      	orrs	r2, r1
 8008328:	619a      	str	r2, [r3, #24]
 800832a:	e060      	b.n	80083ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b04      	cmp	r3, #4
 8008330:	d11c      	bne.n	800836c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008342:	f000 fce6 	bl	8008d12 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	699a      	ldr	r2, [r3, #24]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008354:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6999      	ldr	r1, [r3, #24]
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	021a      	lsls	r2, r3, #8
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	619a      	str	r2, [r3, #24]
 800836a:	e040      	b.n	80083ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b08      	cmp	r3, #8
 8008370:	d11b      	bne.n	80083aa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008382:	f000 fd33 	bl	8008dec <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	69da      	ldr	r2, [r3, #28]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f022 020c 	bic.w	r2, r2, #12
 8008394:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	69d9      	ldr	r1, [r3, #28]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	689a      	ldr	r2, [r3, #8]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	430a      	orrs	r2, r1
 80083a6:	61da      	str	r2, [r3, #28]
 80083a8:	e021      	b.n	80083ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2b0c      	cmp	r3, #12
 80083ae:	d11c      	bne.n	80083ea <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80083c0:	f000 fd50 	bl	8008e64 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	69da      	ldr	r2, [r3, #28]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80083d2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	69d9      	ldr	r1, [r3, #28]
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	021a      	lsls	r2, r3, #8
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	430a      	orrs	r2, r1
 80083e6:	61da      	str	r2, [r3, #28]
 80083e8:	e001      	b.n	80083ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80083f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3718      	adds	r7, #24
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800840c:	2300      	movs	r3, #0
 800840e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008416:	2b01      	cmp	r3, #1
 8008418:	d101      	bne.n	800841e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800841a:	2302      	movs	r3, #2
 800841c:	e0ae      	b.n	800857c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2b0c      	cmp	r3, #12
 800842a:	f200 809f 	bhi.w	800856c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800842e:	a201      	add	r2, pc, #4	; (adr r2, 8008434 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008434:	08008469 	.word	0x08008469
 8008438:	0800856d 	.word	0x0800856d
 800843c:	0800856d 	.word	0x0800856d
 8008440:	0800856d 	.word	0x0800856d
 8008444:	080084a9 	.word	0x080084a9
 8008448:	0800856d 	.word	0x0800856d
 800844c:	0800856d 	.word	0x0800856d
 8008450:	0800856d 	.word	0x0800856d
 8008454:	080084eb 	.word	0x080084eb
 8008458:	0800856d 	.word	0x0800856d
 800845c:	0800856d 	.word	0x0800856d
 8008460:	0800856d 	.word	0x0800856d
 8008464:	0800852b 	.word	0x0800852b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68b9      	ldr	r1, [r7, #8]
 800846e:	4618      	mov	r0, r3
 8008470:	f000 f9fc 	bl	800886c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	699a      	ldr	r2, [r3, #24]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f042 0208 	orr.w	r2, r2, #8
 8008482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	699a      	ldr	r2, [r3, #24]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f022 0204 	bic.w	r2, r2, #4
 8008492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6999      	ldr	r1, [r3, #24]
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	691a      	ldr	r2, [r3, #16]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	430a      	orrs	r2, r1
 80084a4:	619a      	str	r2, [r3, #24]
      break;
 80084a6:	e064      	b.n	8008572 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68b9      	ldr	r1, [r7, #8]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 fa4c 	bl	800894c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	699a      	ldr	r2, [r3, #24]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	699a      	ldr	r2, [r3, #24]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	6999      	ldr	r1, [r3, #24]
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	021a      	lsls	r2, r3, #8
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	430a      	orrs	r2, r1
 80084e6:	619a      	str	r2, [r3, #24]
      break;
 80084e8:	e043      	b.n	8008572 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68b9      	ldr	r1, [r7, #8]
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 faa1 	bl	8008a38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	69da      	ldr	r2, [r3, #28]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f042 0208 	orr.w	r2, r2, #8
 8008504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	69da      	ldr	r2, [r3, #28]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f022 0204 	bic.w	r2, r2, #4
 8008514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	69d9      	ldr	r1, [r3, #28]
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	691a      	ldr	r2, [r3, #16]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	430a      	orrs	r2, r1
 8008526:	61da      	str	r2, [r3, #28]
      break;
 8008528:	e023      	b.n	8008572 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68b9      	ldr	r1, [r7, #8]
 8008530:	4618      	mov	r0, r3
 8008532:	f000 faf5 	bl	8008b20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	69da      	ldr	r2, [r3, #28]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	69da      	ldr	r2, [r3, #28]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	69d9      	ldr	r1, [r3, #28]
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	021a      	lsls	r2, r3, #8
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	430a      	orrs	r2, r1
 8008568:	61da      	str	r2, [r3, #28]
      break;
 800856a:	e002      	b.n	8008572 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	75fb      	strb	r3, [r7, #23]
      break;
 8008570:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800857a:	7dfb      	ldrb	r3, [r7, #23]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3718      	adds	r7, #24
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008598:	2b01      	cmp	r3, #1
 800859a:	d101      	bne.n	80085a0 <HAL_TIM_ConfigClockSource+0x1c>
 800859c:	2302      	movs	r3, #2
 800859e:	e0b4      	b.n	800870a <HAL_TIM_ConfigClockSource+0x186>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2202      	movs	r2, #2
 80085ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80085be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68ba      	ldr	r2, [r7, #8]
 80085ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085d8:	d03e      	beq.n	8008658 <HAL_TIM_ConfigClockSource+0xd4>
 80085da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085de:	f200 8087 	bhi.w	80086f0 <HAL_TIM_ConfigClockSource+0x16c>
 80085e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085e6:	f000 8086 	beq.w	80086f6 <HAL_TIM_ConfigClockSource+0x172>
 80085ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ee:	d87f      	bhi.n	80086f0 <HAL_TIM_ConfigClockSource+0x16c>
 80085f0:	2b70      	cmp	r3, #112	; 0x70
 80085f2:	d01a      	beq.n	800862a <HAL_TIM_ConfigClockSource+0xa6>
 80085f4:	2b70      	cmp	r3, #112	; 0x70
 80085f6:	d87b      	bhi.n	80086f0 <HAL_TIM_ConfigClockSource+0x16c>
 80085f8:	2b60      	cmp	r3, #96	; 0x60
 80085fa:	d050      	beq.n	800869e <HAL_TIM_ConfigClockSource+0x11a>
 80085fc:	2b60      	cmp	r3, #96	; 0x60
 80085fe:	d877      	bhi.n	80086f0 <HAL_TIM_ConfigClockSource+0x16c>
 8008600:	2b50      	cmp	r3, #80	; 0x50
 8008602:	d03c      	beq.n	800867e <HAL_TIM_ConfigClockSource+0xfa>
 8008604:	2b50      	cmp	r3, #80	; 0x50
 8008606:	d873      	bhi.n	80086f0 <HAL_TIM_ConfigClockSource+0x16c>
 8008608:	2b40      	cmp	r3, #64	; 0x40
 800860a:	d058      	beq.n	80086be <HAL_TIM_ConfigClockSource+0x13a>
 800860c:	2b40      	cmp	r3, #64	; 0x40
 800860e:	d86f      	bhi.n	80086f0 <HAL_TIM_ConfigClockSource+0x16c>
 8008610:	2b30      	cmp	r3, #48	; 0x30
 8008612:	d064      	beq.n	80086de <HAL_TIM_ConfigClockSource+0x15a>
 8008614:	2b30      	cmp	r3, #48	; 0x30
 8008616:	d86b      	bhi.n	80086f0 <HAL_TIM_ConfigClockSource+0x16c>
 8008618:	2b20      	cmp	r3, #32
 800861a:	d060      	beq.n	80086de <HAL_TIM_ConfigClockSource+0x15a>
 800861c:	2b20      	cmp	r3, #32
 800861e:	d867      	bhi.n	80086f0 <HAL_TIM_ConfigClockSource+0x16c>
 8008620:	2b00      	cmp	r3, #0
 8008622:	d05c      	beq.n	80086de <HAL_TIM_ConfigClockSource+0x15a>
 8008624:	2b10      	cmp	r3, #16
 8008626:	d05a      	beq.n	80086de <HAL_TIM_ConfigClockSource+0x15a>
 8008628:	e062      	b.n	80086f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800863a:	f000 fc6b 	bl	8008f14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800864c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	609a      	str	r2, [r3, #8]
      break;
 8008656:	e04f      	b.n	80086f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008668:	f000 fc54 	bl	8008f14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	689a      	ldr	r2, [r3, #8]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800867a:	609a      	str	r2, [r3, #8]
      break;
 800867c:	e03c      	b.n	80086f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800868a:	461a      	mov	r2, r3
 800868c:	f000 fb12 	bl	8008cb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2150      	movs	r1, #80	; 0x50
 8008696:	4618      	mov	r0, r3
 8008698:	f000 fc21 	bl	8008ede <TIM_ITRx_SetConfig>
      break;
 800869c:	e02c      	b.n	80086f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80086aa:	461a      	mov	r2, r3
 80086ac:	f000 fb6e 	bl	8008d8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2160      	movs	r1, #96	; 0x60
 80086b6:	4618      	mov	r0, r3
 80086b8:	f000 fc11 	bl	8008ede <TIM_ITRx_SetConfig>
      break;
 80086bc:	e01c      	b.n	80086f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086ca:	461a      	mov	r2, r3
 80086cc:	f000 faf2 	bl	8008cb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2140      	movs	r1, #64	; 0x40
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 fc01 	bl	8008ede <TIM_ITRx_SetConfig>
      break;
 80086dc:	e00c      	b.n	80086f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4619      	mov	r1, r3
 80086e8:	4610      	mov	r0, r2
 80086ea:	f000 fbf8 	bl	8008ede <TIM_ITRx_SetConfig>
      break;
 80086ee:	e003      	b.n	80086f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	73fb      	strb	r3, [r7, #15]
      break;
 80086f4:	e000      	b.n	80086f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80086f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008708:	7bfb      	ldrb	r3, [r7, #15]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
	...

08008714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a46      	ldr	r2, [pc, #280]	; (8008840 <TIM_Base_SetConfig+0x12c>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d013      	beq.n	8008754 <TIM_Base_SetConfig+0x40>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008732:	d00f      	beq.n	8008754 <TIM_Base_SetConfig+0x40>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a43      	ldr	r2, [pc, #268]	; (8008844 <TIM_Base_SetConfig+0x130>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d00b      	beq.n	8008754 <TIM_Base_SetConfig+0x40>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a42      	ldr	r2, [pc, #264]	; (8008848 <TIM_Base_SetConfig+0x134>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d007      	beq.n	8008754 <TIM_Base_SetConfig+0x40>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a41      	ldr	r2, [pc, #260]	; (800884c <TIM_Base_SetConfig+0x138>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d003      	beq.n	8008754 <TIM_Base_SetConfig+0x40>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a40      	ldr	r2, [pc, #256]	; (8008850 <TIM_Base_SetConfig+0x13c>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d108      	bne.n	8008766 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800875a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	4313      	orrs	r3, r2
 8008764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a35      	ldr	r2, [pc, #212]	; (8008840 <TIM_Base_SetConfig+0x12c>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d02b      	beq.n	80087c6 <TIM_Base_SetConfig+0xb2>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008774:	d027      	beq.n	80087c6 <TIM_Base_SetConfig+0xb2>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a32      	ldr	r2, [pc, #200]	; (8008844 <TIM_Base_SetConfig+0x130>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d023      	beq.n	80087c6 <TIM_Base_SetConfig+0xb2>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a31      	ldr	r2, [pc, #196]	; (8008848 <TIM_Base_SetConfig+0x134>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d01f      	beq.n	80087c6 <TIM_Base_SetConfig+0xb2>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a30      	ldr	r2, [pc, #192]	; (800884c <TIM_Base_SetConfig+0x138>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d01b      	beq.n	80087c6 <TIM_Base_SetConfig+0xb2>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a2f      	ldr	r2, [pc, #188]	; (8008850 <TIM_Base_SetConfig+0x13c>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d017      	beq.n	80087c6 <TIM_Base_SetConfig+0xb2>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a2e      	ldr	r2, [pc, #184]	; (8008854 <TIM_Base_SetConfig+0x140>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d013      	beq.n	80087c6 <TIM_Base_SetConfig+0xb2>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a2d      	ldr	r2, [pc, #180]	; (8008858 <TIM_Base_SetConfig+0x144>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d00f      	beq.n	80087c6 <TIM_Base_SetConfig+0xb2>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a2c      	ldr	r2, [pc, #176]	; (800885c <TIM_Base_SetConfig+0x148>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d00b      	beq.n	80087c6 <TIM_Base_SetConfig+0xb2>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a2b      	ldr	r2, [pc, #172]	; (8008860 <TIM_Base_SetConfig+0x14c>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d007      	beq.n	80087c6 <TIM_Base_SetConfig+0xb2>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a2a      	ldr	r2, [pc, #168]	; (8008864 <TIM_Base_SetConfig+0x150>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d003      	beq.n	80087c6 <TIM_Base_SetConfig+0xb2>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a29      	ldr	r2, [pc, #164]	; (8008868 <TIM_Base_SetConfig+0x154>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d108      	bne.n	80087d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	695b      	ldr	r3, [r3, #20]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	689a      	ldr	r2, [r3, #8]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a10      	ldr	r2, [pc, #64]	; (8008840 <TIM_Base_SetConfig+0x12c>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d003      	beq.n	800880c <TIM_Base_SetConfig+0xf8>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a12      	ldr	r2, [pc, #72]	; (8008850 <TIM_Base_SetConfig+0x13c>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d103      	bne.n	8008814 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	691a      	ldr	r2, [r3, #16]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b01      	cmp	r3, #1
 8008824:	d105      	bne.n	8008832 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	f023 0201 	bic.w	r2, r3, #1
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	611a      	str	r2, [r3, #16]
  }
}
 8008832:	bf00      	nop
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	40010000 	.word	0x40010000
 8008844:	40000400 	.word	0x40000400
 8008848:	40000800 	.word	0x40000800
 800884c:	40000c00 	.word	0x40000c00
 8008850:	40010400 	.word	0x40010400
 8008854:	40014000 	.word	0x40014000
 8008858:	40014400 	.word	0x40014400
 800885c:	40014800 	.word	0x40014800
 8008860:	40001800 	.word	0x40001800
 8008864:	40001c00 	.word	0x40001c00
 8008868:	40002000 	.word	0x40002000

0800886c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800886c:	b480      	push	{r7}
 800886e:	b087      	sub	sp, #28
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a1b      	ldr	r3, [r3, #32]
 800887a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a1b      	ldr	r3, [r3, #32]
 8008880:	f023 0201 	bic.w	r2, r3, #1
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800889a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f023 0303 	bic.w	r3, r3, #3
 80088a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	f023 0302 	bic.w	r3, r3, #2
 80088b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	697a      	ldr	r2, [r7, #20]
 80088bc:	4313      	orrs	r3, r2
 80088be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a20      	ldr	r2, [pc, #128]	; (8008944 <TIM_OC1_SetConfig+0xd8>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d003      	beq.n	80088d0 <TIM_OC1_SetConfig+0x64>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a1f      	ldr	r2, [pc, #124]	; (8008948 <TIM_OC1_SetConfig+0xdc>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d10c      	bne.n	80088ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	f023 0308 	bic.w	r3, r3, #8
 80088d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	697a      	ldr	r2, [r7, #20]
 80088de:	4313      	orrs	r3, r2
 80088e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	f023 0304 	bic.w	r3, r3, #4
 80088e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a15      	ldr	r2, [pc, #84]	; (8008944 <TIM_OC1_SetConfig+0xd8>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d003      	beq.n	80088fa <TIM_OC1_SetConfig+0x8e>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a14      	ldr	r2, [pc, #80]	; (8008948 <TIM_OC1_SetConfig+0xdc>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d111      	bne.n	800891e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	693a      	ldr	r2, [r7, #16]
 8008910:	4313      	orrs	r3, r2
 8008912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	699b      	ldr	r3, [r3, #24]
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	4313      	orrs	r3, r2
 800891c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	685a      	ldr	r2, [r3, #4]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	621a      	str	r2, [r3, #32]
}
 8008938:	bf00      	nop
 800893a:	371c      	adds	r7, #28
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr
 8008944:	40010000 	.word	0x40010000
 8008948:	40010400 	.word	0x40010400

0800894c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800894c:	b480      	push	{r7}
 800894e:	b087      	sub	sp, #28
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6a1b      	ldr	r3, [r3, #32]
 8008960:	f023 0210 	bic.w	r2, r3, #16
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	699b      	ldr	r3, [r3, #24]
 8008972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800897a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	021b      	lsls	r3, r3, #8
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	4313      	orrs	r3, r2
 800898e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	f023 0320 	bic.w	r3, r3, #32
 8008996:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	011b      	lsls	r3, r3, #4
 800899e:	697a      	ldr	r2, [r7, #20]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a22      	ldr	r2, [pc, #136]	; (8008a30 <TIM_OC2_SetConfig+0xe4>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d003      	beq.n	80089b4 <TIM_OC2_SetConfig+0x68>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a21      	ldr	r2, [pc, #132]	; (8008a34 <TIM_OC2_SetConfig+0xe8>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d10d      	bne.n	80089d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	011b      	lsls	r3, r3, #4
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a17      	ldr	r2, [pc, #92]	; (8008a30 <TIM_OC2_SetConfig+0xe4>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d003      	beq.n	80089e0 <TIM_OC2_SetConfig+0x94>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a16      	ldr	r2, [pc, #88]	; (8008a34 <TIM_OC2_SetConfig+0xe8>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d113      	bne.n	8008a08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	695b      	ldr	r3, [r3, #20]
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	693a      	ldr	r2, [r7, #16]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	699b      	ldr	r3, [r3, #24]
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	693a      	ldr	r2, [r7, #16]
 8008a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	621a      	str	r2, [r3, #32]
}
 8008a22:	bf00      	nop
 8008a24:	371c      	adds	r7, #28
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	40010000 	.word	0x40010000
 8008a34:	40010400 	.word	0x40010400

08008a38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b087      	sub	sp, #28
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a1b      	ldr	r3, [r3, #32]
 8008a4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	69db      	ldr	r3, [r3, #28]
 8008a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f023 0303 	bic.w	r3, r3, #3
 8008a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	021b      	lsls	r3, r3, #8
 8008a88:	697a      	ldr	r2, [r7, #20]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a21      	ldr	r2, [pc, #132]	; (8008b18 <TIM_OC3_SetConfig+0xe0>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d003      	beq.n	8008a9e <TIM_OC3_SetConfig+0x66>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a20      	ldr	r2, [pc, #128]	; (8008b1c <TIM_OC3_SetConfig+0xe4>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d10d      	bne.n	8008aba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	021b      	lsls	r3, r3, #8
 8008aac:	697a      	ldr	r2, [r7, #20]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a16      	ldr	r2, [pc, #88]	; (8008b18 <TIM_OC3_SetConfig+0xe0>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d003      	beq.n	8008aca <TIM_OC3_SetConfig+0x92>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a15      	ldr	r2, [pc, #84]	; (8008b1c <TIM_OC3_SetConfig+0xe4>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d113      	bne.n	8008af2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	011b      	lsls	r3, r3, #4
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	011b      	lsls	r3, r3, #4
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	685a      	ldr	r2, [r3, #4]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	621a      	str	r2, [r3, #32]
}
 8008b0c:	bf00      	nop
 8008b0e:	371c      	adds	r7, #28
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr
 8008b18:	40010000 	.word	0x40010000
 8008b1c:	40010400 	.word	0x40010400

08008b20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b087      	sub	sp, #28
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a1b      	ldr	r3, [r3, #32]
 8008b34:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	69db      	ldr	r3, [r3, #28]
 8008b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	021b      	lsls	r3, r3, #8
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	031b      	lsls	r3, r3, #12
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a12      	ldr	r2, [pc, #72]	; (8008bc4 <TIM_OC4_SetConfig+0xa4>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d003      	beq.n	8008b88 <TIM_OC4_SetConfig+0x68>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a11      	ldr	r2, [pc, #68]	; (8008bc8 <TIM_OC4_SetConfig+0xa8>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d109      	bne.n	8008b9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	695b      	ldr	r3, [r3, #20]
 8008b94:	019b      	lsls	r3, r3, #6
 8008b96:	697a      	ldr	r2, [r7, #20]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	697a      	ldr	r2, [r7, #20]
 8008ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	685a      	ldr	r2, [r3, #4]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	693a      	ldr	r2, [r7, #16]
 8008bb4:	621a      	str	r2, [r3, #32]
}
 8008bb6:	bf00      	nop
 8008bb8:	371c      	adds	r7, #28
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr
 8008bc2:	bf00      	nop
 8008bc4:	40010000 	.word	0x40010000
 8008bc8:	40010400 	.word	0x40010400

08008bcc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b087      	sub	sp, #28
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
 8008bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6a1b      	ldr	r3, [r3, #32]
 8008bde:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6a1b      	ldr	r3, [r3, #32]
 8008be4:	f023 0201 	bic.w	r2, r3, #1
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	699b      	ldr	r3, [r3, #24]
 8008bf0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	4a28      	ldr	r2, [pc, #160]	; (8008c98 <TIM_TI1_SetConfig+0xcc>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d01b      	beq.n	8008c32 <TIM_TI1_SetConfig+0x66>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c00:	d017      	beq.n	8008c32 <TIM_TI1_SetConfig+0x66>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	4a25      	ldr	r2, [pc, #148]	; (8008c9c <TIM_TI1_SetConfig+0xd0>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d013      	beq.n	8008c32 <TIM_TI1_SetConfig+0x66>
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	4a24      	ldr	r2, [pc, #144]	; (8008ca0 <TIM_TI1_SetConfig+0xd4>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d00f      	beq.n	8008c32 <TIM_TI1_SetConfig+0x66>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	4a23      	ldr	r2, [pc, #140]	; (8008ca4 <TIM_TI1_SetConfig+0xd8>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d00b      	beq.n	8008c32 <TIM_TI1_SetConfig+0x66>
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	4a22      	ldr	r2, [pc, #136]	; (8008ca8 <TIM_TI1_SetConfig+0xdc>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d007      	beq.n	8008c32 <TIM_TI1_SetConfig+0x66>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	4a21      	ldr	r2, [pc, #132]	; (8008cac <TIM_TI1_SetConfig+0xe0>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d003      	beq.n	8008c32 <TIM_TI1_SetConfig+0x66>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	4a20      	ldr	r2, [pc, #128]	; (8008cb0 <TIM_TI1_SetConfig+0xe4>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d101      	bne.n	8008c36 <TIM_TI1_SetConfig+0x6a>
 8008c32:	2301      	movs	r3, #1
 8008c34:	e000      	b.n	8008c38 <TIM_TI1_SetConfig+0x6c>
 8008c36:	2300      	movs	r3, #0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d008      	beq.n	8008c4e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	f023 0303 	bic.w	r3, r3, #3
 8008c42:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008c44:	697a      	ldr	r2, [r7, #20]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	617b      	str	r3, [r7, #20]
 8008c4c:	e003      	b.n	8008c56 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f043 0301 	orr.w	r3, r3, #1
 8008c54:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	011b      	lsls	r3, r3, #4
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	f023 030a 	bic.w	r3, r3, #10
 8008c70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	f003 030a 	and.w	r3, r3, #10
 8008c78:	693a      	ldr	r2, [r7, #16]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	697a      	ldr	r2, [r7, #20]
 8008c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	621a      	str	r2, [r3, #32]
}
 8008c8a:	bf00      	nop
 8008c8c:	371c      	adds	r7, #28
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	40010000 	.word	0x40010000
 8008c9c:	40000400 	.word	0x40000400
 8008ca0:	40000800 	.word	0x40000800
 8008ca4:	40000c00 	.word	0x40000c00
 8008ca8:	40010400 	.word	0x40010400
 8008cac:	40014000 	.word	0x40014000
 8008cb0:	40001800 	.word	0x40001800

08008cb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b087      	sub	sp, #28
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6a1b      	ldr	r3, [r3, #32]
 8008cc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	f023 0201 	bic.w	r2, r3, #1
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	011b      	lsls	r3, r3, #4
 8008ce4:	693a      	ldr	r2, [r7, #16]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	f023 030a 	bic.w	r3, r3, #10
 8008cf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	621a      	str	r2, [r3, #32]
}
 8008d06:	bf00      	nop
 8008d08:	371c      	adds	r7, #28
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b087      	sub	sp, #28
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	60f8      	str	r0, [r7, #12]
 8008d1a:	60b9      	str	r1, [r7, #8]
 8008d1c:	607a      	str	r2, [r7, #4]
 8008d1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6a1b      	ldr	r3, [r3, #32]
 8008d24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6a1b      	ldr	r3, [r3, #32]
 8008d2a:	f023 0210 	bic.w	r2, r3, #16
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	021b      	lsls	r3, r3, #8
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	031b      	lsls	r3, r3, #12
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d64:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	011b      	lsls	r3, r3, #4
 8008d6a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008d6e:	697a      	ldr	r2, [r7, #20]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	697a      	ldr	r2, [r7, #20]
 8008d7e:	621a      	str	r2, [r3, #32]
}
 8008d80:	bf00      	nop
 8008d82:	371c      	adds	r7, #28
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b087      	sub	sp, #28
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6a1b      	ldr	r3, [r3, #32]
 8008d9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	f023 0210 	bic.w	r2, r3, #16
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008db6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	031b      	lsls	r3, r3, #12
 8008dbc:	693a      	ldr	r2, [r7, #16]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008dc8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	011b      	lsls	r3, r3, #4
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	693a      	ldr	r2, [r7, #16]
 8008dd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	697a      	ldr	r2, [r7, #20]
 8008dde:	621a      	str	r2, [r3, #32]
}
 8008de0:	bf00      	nop
 8008de2:	371c      	adds	r7, #28
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b087      	sub	sp, #28
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]
 8008df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6a1b      	ldr	r3, [r3, #32]
 8008dfe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6a1b      	ldr	r3, [r3, #32]
 8008e04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	69db      	ldr	r3, [r3, #28]
 8008e10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	f023 0303 	bic.w	r3, r3, #3
 8008e18:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008e1a:	693a      	ldr	r2, [r7, #16]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e28:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	011b      	lsls	r3, r3, #4
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008e3c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	021b      	lsls	r3, r3, #8
 8008e42:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008e46:	697a      	ldr	r2, [r7, #20]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	697a      	ldr	r2, [r7, #20]
 8008e56:	621a      	str	r2, [r3, #32]
}
 8008e58:	bf00      	nop
 8008e5a:	371c      	adds	r7, #28
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b087      	sub	sp, #28
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
 8008e70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6a1b      	ldr	r3, [r3, #32]
 8008e76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6a1b      	ldr	r3, [r3, #32]
 8008e7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	69db      	ldr	r3, [r3, #28]
 8008e88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e90:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	021b      	lsls	r3, r3, #8
 8008e96:	693a      	ldr	r2, [r7, #16]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ea2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	031b      	lsls	r3, r3, #12
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	693a      	ldr	r2, [r7, #16]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008eb6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	031b      	lsls	r3, r3, #12
 8008ebc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008ec0:	697a      	ldr	r2, [r7, #20]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	693a      	ldr	r2, [r7, #16]
 8008eca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	697a      	ldr	r2, [r7, #20]
 8008ed0:	621a      	str	r2, [r3, #32]
}
 8008ed2:	bf00      	nop
 8008ed4:	371c      	adds	r7, #28
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr

08008ede <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ede:	b480      	push	{r7}
 8008ee0:	b085      	sub	sp, #20
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
 8008ee6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ef4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ef6:	683a      	ldr	r2, [r7, #0]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	f043 0307 	orr.w	r3, r3, #7
 8008f00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	609a      	str	r2, [r3, #8]
}
 8008f08:	bf00      	nop
 8008f0a:	3714      	adds	r7, #20
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b087      	sub	sp, #28
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	607a      	str	r2, [r7, #4]
 8008f20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	021a      	lsls	r2, r3, #8
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	431a      	orrs	r2, r3
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	697a      	ldr	r2, [r7, #20]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	697a      	ldr	r2, [r7, #20]
 8008f46:	609a      	str	r2, [r3, #8]
}
 8008f48:	bf00      	nop
 8008f4a:	371c      	adds	r7, #28
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b087      	sub	sp, #28
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	f003 031f 	and.w	r3, r3, #31
 8008f66:	2201      	movs	r2, #1
 8008f68:	fa02 f303 	lsl.w	r3, r2, r3
 8008f6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6a1a      	ldr	r2, [r3, #32]
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	43db      	mvns	r3, r3
 8008f76:	401a      	ands	r2, r3
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6a1a      	ldr	r2, [r3, #32]
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	f003 031f 	and.w	r3, r3, #31
 8008f86:	6879      	ldr	r1, [r7, #4]
 8008f88:	fa01 f303 	lsl.w	r3, r1, r3
 8008f8c:	431a      	orrs	r2, r3
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	621a      	str	r2, [r3, #32]
}
 8008f92:	bf00      	nop
 8008f94:	371c      	adds	r7, #28
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
	...

08008fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d101      	bne.n	8008fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fb4:	2302      	movs	r3, #2
 8008fb6:	e05a      	b.n	800906e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2202      	movs	r2, #2
 8008fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a21      	ldr	r2, [pc, #132]	; (800907c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d022      	beq.n	8009042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009004:	d01d      	beq.n	8009042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a1d      	ldr	r2, [pc, #116]	; (8009080 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d018      	beq.n	8009042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a1b      	ldr	r2, [pc, #108]	; (8009084 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d013      	beq.n	8009042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a1a      	ldr	r2, [pc, #104]	; (8009088 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d00e      	beq.n	8009042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a18      	ldr	r2, [pc, #96]	; (800908c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d009      	beq.n	8009042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a17      	ldr	r2, [pc, #92]	; (8009090 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d004      	beq.n	8009042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a15      	ldr	r2, [pc, #84]	; (8009094 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d10c      	bne.n	800905c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009048:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	4313      	orrs	r3, r2
 8009052:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3714      	adds	r7, #20
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop
 800907c:	40010000 	.word	0x40010000
 8009080:	40000400 	.word	0x40000400
 8009084:	40000800 	.word	0x40000800
 8009088:	40000c00 	.word	0x40000c00
 800908c:	40010400 	.word	0x40010400
 8009090:	40014000 	.word	0x40014000
 8009094:	40001800 	.word	0x40001800

08009098 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80090a2:	2300      	movs	r3, #0
 80090a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d101      	bne.n	80090b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80090b0:	2302      	movs	r3, #2
 80090b2:	e03d      	b.n	8009130 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	4313      	orrs	r3, r2
 8009100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	695b      	ldr	r3, [r3, #20]
 800910c:	4313      	orrs	r3, r2
 800910e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	69db      	ldr	r3, [r3, #28]
 800911a:	4313      	orrs	r3, r2
 800911c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3714      	adds	r7, #20
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d101      	bne.n	800914e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	e042      	b.n	80091d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009154:	b2db      	uxtb	r3, r3
 8009156:	2b00      	cmp	r3, #0
 8009158:	d106      	bne.n	8009168 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7f8 fd2a 	bl	8001bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2224      	movs	r2, #36	; 0x24
 800916c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68da      	ldr	r2, [r3, #12]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800917e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 fa09 	bl	8009598 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	691a      	ldr	r2, [r3, #16]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009194:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	695a      	ldr	r2, [r3, #20]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68da      	ldr	r2, [r3, #12]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2220      	movs	r2, #32
 80091c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2220      	movs	r2, #32
 80091c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3708      	adds	r7, #8
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b08a      	sub	sp, #40	; 0x28
 80091e0:	af02      	add	r7, sp, #8
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	603b      	str	r3, [r7, #0]
 80091e8:	4613      	mov	r3, r2
 80091ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80091ec:	2300      	movs	r3, #0
 80091ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	2b20      	cmp	r3, #32
 80091fa:	d175      	bne.n	80092e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d002      	beq.n	8009208 <HAL_UART_Transmit+0x2c>
 8009202:	88fb      	ldrh	r3, [r7, #6]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d101      	bne.n	800920c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	e06e      	b.n	80092ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2221      	movs	r2, #33	; 0x21
 8009216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800921a:	f7f8 feeb 	bl	8001ff4 <HAL_GetTick>
 800921e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	88fa      	ldrh	r2, [r7, #6]
 8009224:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	88fa      	ldrh	r2, [r7, #6]
 800922a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009234:	d108      	bne.n	8009248 <HAL_UART_Transmit+0x6c>
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d104      	bne.n	8009248 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800923e:	2300      	movs	r3, #0
 8009240:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	61bb      	str	r3, [r7, #24]
 8009246:	e003      	b.n	8009250 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800924c:	2300      	movs	r3, #0
 800924e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009250:	e02e      	b.n	80092b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	2200      	movs	r2, #0
 800925a:	2180      	movs	r1, #128	; 0x80
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f000 f8df 	bl	8009420 <UART_WaitOnFlagUntilTimeout>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d005      	beq.n	8009274 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2220      	movs	r2, #32
 800926c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8009270:	2303      	movs	r3, #3
 8009272:	e03a      	b.n	80092ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10b      	bne.n	8009292 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	881b      	ldrh	r3, [r3, #0]
 800927e:	461a      	mov	r2, r3
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009288:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	3302      	adds	r3, #2
 800928e:	61bb      	str	r3, [r7, #24]
 8009290:	e007      	b.n	80092a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	781a      	ldrb	r2, [r3, #0]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	3301      	adds	r3, #1
 80092a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	3b01      	subs	r3, #1
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d1cb      	bne.n	8009252 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	9300      	str	r3, [sp, #0]
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	2200      	movs	r2, #0
 80092c2:	2140      	movs	r1, #64	; 0x40
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 f8ab 	bl	8009420 <UART_WaitOnFlagUntilTimeout>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d005      	beq.n	80092dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2220      	movs	r2, #32
 80092d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80092d8:	2303      	movs	r3, #3
 80092da:	e006      	b.n	80092ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2220      	movs	r2, #32
 80092e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	e000      	b.n	80092ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80092e8:	2302      	movs	r3, #2
  }
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3720      	adds	r7, #32
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b08a      	sub	sp, #40	; 0x28
 80092f6:	af02      	add	r7, sp, #8
 80092f8:	60f8      	str	r0, [r7, #12]
 80092fa:	60b9      	str	r1, [r7, #8]
 80092fc:	603b      	str	r3, [r7, #0]
 80092fe:	4613      	mov	r3, r2
 8009300:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009302:	2300      	movs	r3, #0
 8009304:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800930c:	b2db      	uxtb	r3, r3
 800930e:	2b20      	cmp	r3, #32
 8009310:	f040 8081 	bne.w	8009416 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d002      	beq.n	8009320 <HAL_UART_Receive+0x2e>
 800931a:	88fb      	ldrh	r3, [r7, #6]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d101      	bne.n	8009324 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	e079      	b.n	8009418 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2200      	movs	r2, #0
 8009328:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2222      	movs	r2, #34	; 0x22
 800932e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2200      	movs	r2, #0
 8009336:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009338:	f7f8 fe5c 	bl	8001ff4 <HAL_GetTick>
 800933c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	88fa      	ldrh	r2, [r7, #6]
 8009342:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	88fa      	ldrh	r2, [r7, #6]
 8009348:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009352:	d108      	bne.n	8009366 <HAL_UART_Receive+0x74>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d104      	bne.n	8009366 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800935c:	2300      	movs	r3, #0
 800935e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	61bb      	str	r3, [r7, #24]
 8009364:	e003      	b.n	800936e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800936a:	2300      	movs	r3, #0
 800936c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800936e:	e047      	b.n	8009400 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	2200      	movs	r2, #0
 8009378:	2120      	movs	r1, #32
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f000 f850 	bl	8009420 <UART_WaitOnFlagUntilTimeout>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d005      	beq.n	8009392 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2220      	movs	r2, #32
 800938a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 800938e:	2303      	movs	r3, #3
 8009390:	e042      	b.n	8009418 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d10c      	bne.n	80093b2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	b29b      	uxth	r3, r3
 80093a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	3302      	adds	r3, #2
 80093ae:	61bb      	str	r3, [r7, #24]
 80093b0:	e01f      	b.n	80093f2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093ba:	d007      	beq.n	80093cc <HAL_UART_Receive+0xda>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d10a      	bne.n	80093da <HAL_UART_Receive+0xe8>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	691b      	ldr	r3, [r3, #16]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d106      	bne.n	80093da <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	b2da      	uxtb	r2, r3
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	701a      	strb	r2, [r3, #0]
 80093d8:	e008      	b.n	80093ec <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	3301      	adds	r3, #1
 80093f0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	3b01      	subs	r3, #1
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009404:	b29b      	uxth	r3, r3
 8009406:	2b00      	cmp	r3, #0
 8009408:	d1b2      	bne.n	8009370 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2220      	movs	r2, #32
 800940e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8009412:	2300      	movs	r3, #0
 8009414:	e000      	b.n	8009418 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009416:	2302      	movs	r3, #2
  }
}
 8009418:	4618      	mov	r0, r3
 800941a:	3720      	adds	r7, #32
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	603b      	str	r3, [r7, #0]
 800942c:	4613      	mov	r3, r2
 800942e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009430:	e03b      	b.n	80094aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009432:	6a3b      	ldr	r3, [r7, #32]
 8009434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009438:	d037      	beq.n	80094aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800943a:	f7f8 fddb 	bl	8001ff4 <HAL_GetTick>
 800943e:	4602      	mov	r2, r0
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	1ad3      	subs	r3, r2, r3
 8009444:	6a3a      	ldr	r2, [r7, #32]
 8009446:	429a      	cmp	r2, r3
 8009448:	d302      	bcc.n	8009450 <UART_WaitOnFlagUntilTimeout+0x30>
 800944a:	6a3b      	ldr	r3, [r7, #32]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d101      	bne.n	8009454 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009450:	2303      	movs	r3, #3
 8009452:	e03a      	b.n	80094ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	f003 0304 	and.w	r3, r3, #4
 800945e:	2b00      	cmp	r3, #0
 8009460:	d023      	beq.n	80094aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	2b80      	cmp	r3, #128	; 0x80
 8009466:	d020      	beq.n	80094aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	2b40      	cmp	r3, #64	; 0x40
 800946c:	d01d      	beq.n	80094aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 0308 	and.w	r3, r3, #8
 8009478:	2b08      	cmp	r3, #8
 800947a:	d116      	bne.n	80094aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800947c:	2300      	movs	r3, #0
 800947e:	617b      	str	r3, [r7, #20]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	617b      	str	r3, [r7, #20]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	617b      	str	r3, [r7, #20]
 8009490:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	f000 f81d 	bl	80094d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2208      	movs	r2, #8
 800949c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e00f      	b.n	80094ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	4013      	ands	r3, r2
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	bf0c      	ite	eq
 80094ba:	2301      	moveq	r3, #1
 80094bc:	2300      	movne	r3, #0
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	461a      	mov	r2, r3
 80094c2:	79fb      	ldrb	r3, [r7, #7]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d0b4      	beq.n	8009432 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3718      	adds	r7, #24
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094d2:	b480      	push	{r7}
 80094d4:	b095      	sub	sp, #84	; 0x54
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	330c      	adds	r3, #12
 80094e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094e4:	e853 3f00 	ldrex	r3, [r3]
 80094e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80094ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	330c      	adds	r3, #12
 80094f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094fa:	643a      	str	r2, [r7, #64]	; 0x40
 80094fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009500:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009502:	e841 2300 	strex	r3, r2, [r1]
 8009506:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950a:	2b00      	cmp	r3, #0
 800950c:	d1e5      	bne.n	80094da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	3314      	adds	r3, #20
 8009514:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009516:	6a3b      	ldr	r3, [r7, #32]
 8009518:	e853 3f00 	ldrex	r3, [r3]
 800951c:	61fb      	str	r3, [r7, #28]
   return(result);
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	f023 0301 	bic.w	r3, r3, #1
 8009524:	64bb      	str	r3, [r7, #72]	; 0x48
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	3314      	adds	r3, #20
 800952c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800952e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009530:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009532:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009536:	e841 2300 	strex	r3, r2, [r1]
 800953a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800953c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1e5      	bne.n	800950e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009546:	2b01      	cmp	r3, #1
 8009548:	d119      	bne.n	800957e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	330c      	adds	r3, #12
 8009550:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	e853 3f00 	ldrex	r3, [r3]
 8009558:	60bb      	str	r3, [r7, #8]
   return(result);
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	f023 0310 	bic.w	r3, r3, #16
 8009560:	647b      	str	r3, [r7, #68]	; 0x44
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	330c      	adds	r3, #12
 8009568:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800956a:	61ba      	str	r2, [r7, #24]
 800956c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956e:	6979      	ldr	r1, [r7, #20]
 8009570:	69ba      	ldr	r2, [r7, #24]
 8009572:	e841 2300 	strex	r3, r2, [r1]
 8009576:	613b      	str	r3, [r7, #16]
   return(result);
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d1e5      	bne.n	800954a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2220      	movs	r2, #32
 8009582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800958c:	bf00      	nop
 800958e:	3754      	adds	r7, #84	; 0x54
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800959c:	b0c0      	sub	sp, #256	; 0x100
 800959e:	af00      	add	r7, sp, #0
 80095a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80095b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095b4:	68d9      	ldr	r1, [r3, #12]
 80095b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	ea40 0301 	orr.w	r3, r0, r1
 80095c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80095c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095c6:	689a      	ldr	r2, [r3, #8]
 80095c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	431a      	orrs	r2, r3
 80095d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	431a      	orrs	r2, r3
 80095d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095dc:	69db      	ldr	r3, [r3, #28]
 80095de:	4313      	orrs	r3, r2
 80095e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80095e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80095f0:	f021 010c 	bic.w	r1, r1, #12
 80095f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80095fe:	430b      	orrs	r3, r1
 8009600:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800960e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009612:	6999      	ldr	r1, [r3, #24]
 8009614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	ea40 0301 	orr.w	r3, r0, r1
 800961e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	4b8f      	ldr	r3, [pc, #572]	; (8009864 <UART_SetConfig+0x2cc>)
 8009628:	429a      	cmp	r2, r3
 800962a:	d005      	beq.n	8009638 <UART_SetConfig+0xa0>
 800962c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	4b8d      	ldr	r3, [pc, #564]	; (8009868 <UART_SetConfig+0x2d0>)
 8009634:	429a      	cmp	r2, r3
 8009636:	d104      	bne.n	8009642 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009638:	f7fd f98e 	bl	8006958 <HAL_RCC_GetPCLK2Freq>
 800963c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009640:	e003      	b.n	800964a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009642:	f7fd f975 	bl	8006930 <HAL_RCC_GetPCLK1Freq>
 8009646:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800964a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800964e:	69db      	ldr	r3, [r3, #28]
 8009650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009654:	f040 810c 	bne.w	8009870 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800965c:	2200      	movs	r2, #0
 800965e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009662:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009666:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800966a:	4622      	mov	r2, r4
 800966c:	462b      	mov	r3, r5
 800966e:	1891      	adds	r1, r2, r2
 8009670:	65b9      	str	r1, [r7, #88]	; 0x58
 8009672:	415b      	adcs	r3, r3
 8009674:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009676:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800967a:	4621      	mov	r1, r4
 800967c:	eb12 0801 	adds.w	r8, r2, r1
 8009680:	4629      	mov	r1, r5
 8009682:	eb43 0901 	adc.w	r9, r3, r1
 8009686:	f04f 0200 	mov.w	r2, #0
 800968a:	f04f 0300 	mov.w	r3, #0
 800968e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009692:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009696:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800969a:	4690      	mov	r8, r2
 800969c:	4699      	mov	r9, r3
 800969e:	4623      	mov	r3, r4
 80096a0:	eb18 0303 	adds.w	r3, r8, r3
 80096a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80096a8:	462b      	mov	r3, r5
 80096aa:	eb49 0303 	adc.w	r3, r9, r3
 80096ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80096b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80096be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80096c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80096c6:	460b      	mov	r3, r1
 80096c8:	18db      	adds	r3, r3, r3
 80096ca:	653b      	str	r3, [r7, #80]	; 0x50
 80096cc:	4613      	mov	r3, r2
 80096ce:	eb42 0303 	adc.w	r3, r2, r3
 80096d2:	657b      	str	r3, [r7, #84]	; 0x54
 80096d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80096d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80096dc:	f7f7 f8f6 	bl	80008cc <__aeabi_uldivmod>
 80096e0:	4602      	mov	r2, r0
 80096e2:	460b      	mov	r3, r1
 80096e4:	4b61      	ldr	r3, [pc, #388]	; (800986c <UART_SetConfig+0x2d4>)
 80096e6:	fba3 2302 	umull	r2, r3, r3, r2
 80096ea:	095b      	lsrs	r3, r3, #5
 80096ec:	011c      	lsls	r4, r3, #4
 80096ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096f2:	2200      	movs	r2, #0
 80096f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80096fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009700:	4642      	mov	r2, r8
 8009702:	464b      	mov	r3, r9
 8009704:	1891      	adds	r1, r2, r2
 8009706:	64b9      	str	r1, [r7, #72]	; 0x48
 8009708:	415b      	adcs	r3, r3
 800970a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800970c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009710:	4641      	mov	r1, r8
 8009712:	eb12 0a01 	adds.w	sl, r2, r1
 8009716:	4649      	mov	r1, r9
 8009718:	eb43 0b01 	adc.w	fp, r3, r1
 800971c:	f04f 0200 	mov.w	r2, #0
 8009720:	f04f 0300 	mov.w	r3, #0
 8009724:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009728:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800972c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009730:	4692      	mov	sl, r2
 8009732:	469b      	mov	fp, r3
 8009734:	4643      	mov	r3, r8
 8009736:	eb1a 0303 	adds.w	r3, sl, r3
 800973a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800973e:	464b      	mov	r3, r9
 8009740:	eb4b 0303 	adc.w	r3, fp, r3
 8009744:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009754:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009758:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800975c:	460b      	mov	r3, r1
 800975e:	18db      	adds	r3, r3, r3
 8009760:	643b      	str	r3, [r7, #64]	; 0x40
 8009762:	4613      	mov	r3, r2
 8009764:	eb42 0303 	adc.w	r3, r2, r3
 8009768:	647b      	str	r3, [r7, #68]	; 0x44
 800976a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800976e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009772:	f7f7 f8ab 	bl	80008cc <__aeabi_uldivmod>
 8009776:	4602      	mov	r2, r0
 8009778:	460b      	mov	r3, r1
 800977a:	4611      	mov	r1, r2
 800977c:	4b3b      	ldr	r3, [pc, #236]	; (800986c <UART_SetConfig+0x2d4>)
 800977e:	fba3 2301 	umull	r2, r3, r3, r1
 8009782:	095b      	lsrs	r3, r3, #5
 8009784:	2264      	movs	r2, #100	; 0x64
 8009786:	fb02 f303 	mul.w	r3, r2, r3
 800978a:	1acb      	subs	r3, r1, r3
 800978c:	00db      	lsls	r3, r3, #3
 800978e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009792:	4b36      	ldr	r3, [pc, #216]	; (800986c <UART_SetConfig+0x2d4>)
 8009794:	fba3 2302 	umull	r2, r3, r3, r2
 8009798:	095b      	lsrs	r3, r3, #5
 800979a:	005b      	lsls	r3, r3, #1
 800979c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80097a0:	441c      	add	r4, r3
 80097a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097a6:	2200      	movs	r2, #0
 80097a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80097b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80097b4:	4642      	mov	r2, r8
 80097b6:	464b      	mov	r3, r9
 80097b8:	1891      	adds	r1, r2, r2
 80097ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80097bc:	415b      	adcs	r3, r3
 80097be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80097c4:	4641      	mov	r1, r8
 80097c6:	1851      	adds	r1, r2, r1
 80097c8:	6339      	str	r1, [r7, #48]	; 0x30
 80097ca:	4649      	mov	r1, r9
 80097cc:	414b      	adcs	r3, r1
 80097ce:	637b      	str	r3, [r7, #52]	; 0x34
 80097d0:	f04f 0200 	mov.w	r2, #0
 80097d4:	f04f 0300 	mov.w	r3, #0
 80097d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80097dc:	4659      	mov	r1, fp
 80097de:	00cb      	lsls	r3, r1, #3
 80097e0:	4651      	mov	r1, sl
 80097e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097e6:	4651      	mov	r1, sl
 80097e8:	00ca      	lsls	r2, r1, #3
 80097ea:	4610      	mov	r0, r2
 80097ec:	4619      	mov	r1, r3
 80097ee:	4603      	mov	r3, r0
 80097f0:	4642      	mov	r2, r8
 80097f2:	189b      	adds	r3, r3, r2
 80097f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80097f8:	464b      	mov	r3, r9
 80097fa:	460a      	mov	r2, r1
 80097fc:	eb42 0303 	adc.w	r3, r2, r3
 8009800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009810:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009814:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009818:	460b      	mov	r3, r1
 800981a:	18db      	adds	r3, r3, r3
 800981c:	62bb      	str	r3, [r7, #40]	; 0x28
 800981e:	4613      	mov	r3, r2
 8009820:	eb42 0303 	adc.w	r3, r2, r3
 8009824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009826:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800982a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800982e:	f7f7 f84d 	bl	80008cc <__aeabi_uldivmod>
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	4b0d      	ldr	r3, [pc, #52]	; (800986c <UART_SetConfig+0x2d4>)
 8009838:	fba3 1302 	umull	r1, r3, r3, r2
 800983c:	095b      	lsrs	r3, r3, #5
 800983e:	2164      	movs	r1, #100	; 0x64
 8009840:	fb01 f303 	mul.w	r3, r1, r3
 8009844:	1ad3      	subs	r3, r2, r3
 8009846:	00db      	lsls	r3, r3, #3
 8009848:	3332      	adds	r3, #50	; 0x32
 800984a:	4a08      	ldr	r2, [pc, #32]	; (800986c <UART_SetConfig+0x2d4>)
 800984c:	fba2 2303 	umull	r2, r3, r2, r3
 8009850:	095b      	lsrs	r3, r3, #5
 8009852:	f003 0207 	and.w	r2, r3, #7
 8009856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4422      	add	r2, r4
 800985e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009860:	e106      	b.n	8009a70 <UART_SetConfig+0x4d8>
 8009862:	bf00      	nop
 8009864:	40011000 	.word	0x40011000
 8009868:	40011400 	.word	0x40011400
 800986c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009874:	2200      	movs	r2, #0
 8009876:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800987a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800987e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009882:	4642      	mov	r2, r8
 8009884:	464b      	mov	r3, r9
 8009886:	1891      	adds	r1, r2, r2
 8009888:	6239      	str	r1, [r7, #32]
 800988a:	415b      	adcs	r3, r3
 800988c:	627b      	str	r3, [r7, #36]	; 0x24
 800988e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009892:	4641      	mov	r1, r8
 8009894:	1854      	adds	r4, r2, r1
 8009896:	4649      	mov	r1, r9
 8009898:	eb43 0501 	adc.w	r5, r3, r1
 800989c:	f04f 0200 	mov.w	r2, #0
 80098a0:	f04f 0300 	mov.w	r3, #0
 80098a4:	00eb      	lsls	r3, r5, #3
 80098a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80098aa:	00e2      	lsls	r2, r4, #3
 80098ac:	4614      	mov	r4, r2
 80098ae:	461d      	mov	r5, r3
 80098b0:	4643      	mov	r3, r8
 80098b2:	18e3      	adds	r3, r4, r3
 80098b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80098b8:	464b      	mov	r3, r9
 80098ba:	eb45 0303 	adc.w	r3, r5, r3
 80098be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80098c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80098ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80098d2:	f04f 0200 	mov.w	r2, #0
 80098d6:	f04f 0300 	mov.w	r3, #0
 80098da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80098de:	4629      	mov	r1, r5
 80098e0:	008b      	lsls	r3, r1, #2
 80098e2:	4621      	mov	r1, r4
 80098e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098e8:	4621      	mov	r1, r4
 80098ea:	008a      	lsls	r2, r1, #2
 80098ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80098f0:	f7f6 ffec 	bl	80008cc <__aeabi_uldivmod>
 80098f4:	4602      	mov	r2, r0
 80098f6:	460b      	mov	r3, r1
 80098f8:	4b60      	ldr	r3, [pc, #384]	; (8009a7c <UART_SetConfig+0x4e4>)
 80098fa:	fba3 2302 	umull	r2, r3, r3, r2
 80098fe:	095b      	lsrs	r3, r3, #5
 8009900:	011c      	lsls	r4, r3, #4
 8009902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009906:	2200      	movs	r2, #0
 8009908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800990c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009910:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009914:	4642      	mov	r2, r8
 8009916:	464b      	mov	r3, r9
 8009918:	1891      	adds	r1, r2, r2
 800991a:	61b9      	str	r1, [r7, #24]
 800991c:	415b      	adcs	r3, r3
 800991e:	61fb      	str	r3, [r7, #28]
 8009920:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009924:	4641      	mov	r1, r8
 8009926:	1851      	adds	r1, r2, r1
 8009928:	6139      	str	r1, [r7, #16]
 800992a:	4649      	mov	r1, r9
 800992c:	414b      	adcs	r3, r1
 800992e:	617b      	str	r3, [r7, #20]
 8009930:	f04f 0200 	mov.w	r2, #0
 8009934:	f04f 0300 	mov.w	r3, #0
 8009938:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800993c:	4659      	mov	r1, fp
 800993e:	00cb      	lsls	r3, r1, #3
 8009940:	4651      	mov	r1, sl
 8009942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009946:	4651      	mov	r1, sl
 8009948:	00ca      	lsls	r2, r1, #3
 800994a:	4610      	mov	r0, r2
 800994c:	4619      	mov	r1, r3
 800994e:	4603      	mov	r3, r0
 8009950:	4642      	mov	r2, r8
 8009952:	189b      	adds	r3, r3, r2
 8009954:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009958:	464b      	mov	r3, r9
 800995a:	460a      	mov	r2, r1
 800995c:	eb42 0303 	adc.w	r3, r2, r3
 8009960:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	67bb      	str	r3, [r7, #120]	; 0x78
 800996e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009970:	f04f 0200 	mov.w	r2, #0
 8009974:	f04f 0300 	mov.w	r3, #0
 8009978:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800997c:	4649      	mov	r1, r9
 800997e:	008b      	lsls	r3, r1, #2
 8009980:	4641      	mov	r1, r8
 8009982:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009986:	4641      	mov	r1, r8
 8009988:	008a      	lsls	r2, r1, #2
 800998a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800998e:	f7f6 ff9d 	bl	80008cc <__aeabi_uldivmod>
 8009992:	4602      	mov	r2, r0
 8009994:	460b      	mov	r3, r1
 8009996:	4611      	mov	r1, r2
 8009998:	4b38      	ldr	r3, [pc, #224]	; (8009a7c <UART_SetConfig+0x4e4>)
 800999a:	fba3 2301 	umull	r2, r3, r3, r1
 800999e:	095b      	lsrs	r3, r3, #5
 80099a0:	2264      	movs	r2, #100	; 0x64
 80099a2:	fb02 f303 	mul.w	r3, r2, r3
 80099a6:	1acb      	subs	r3, r1, r3
 80099a8:	011b      	lsls	r3, r3, #4
 80099aa:	3332      	adds	r3, #50	; 0x32
 80099ac:	4a33      	ldr	r2, [pc, #204]	; (8009a7c <UART_SetConfig+0x4e4>)
 80099ae:	fba2 2303 	umull	r2, r3, r2, r3
 80099b2:	095b      	lsrs	r3, r3, #5
 80099b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099b8:	441c      	add	r4, r3
 80099ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099be:	2200      	movs	r2, #0
 80099c0:	673b      	str	r3, [r7, #112]	; 0x70
 80099c2:	677a      	str	r2, [r7, #116]	; 0x74
 80099c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80099c8:	4642      	mov	r2, r8
 80099ca:	464b      	mov	r3, r9
 80099cc:	1891      	adds	r1, r2, r2
 80099ce:	60b9      	str	r1, [r7, #8]
 80099d0:	415b      	adcs	r3, r3
 80099d2:	60fb      	str	r3, [r7, #12]
 80099d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80099d8:	4641      	mov	r1, r8
 80099da:	1851      	adds	r1, r2, r1
 80099dc:	6039      	str	r1, [r7, #0]
 80099de:	4649      	mov	r1, r9
 80099e0:	414b      	adcs	r3, r1
 80099e2:	607b      	str	r3, [r7, #4]
 80099e4:	f04f 0200 	mov.w	r2, #0
 80099e8:	f04f 0300 	mov.w	r3, #0
 80099ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80099f0:	4659      	mov	r1, fp
 80099f2:	00cb      	lsls	r3, r1, #3
 80099f4:	4651      	mov	r1, sl
 80099f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099fa:	4651      	mov	r1, sl
 80099fc:	00ca      	lsls	r2, r1, #3
 80099fe:	4610      	mov	r0, r2
 8009a00:	4619      	mov	r1, r3
 8009a02:	4603      	mov	r3, r0
 8009a04:	4642      	mov	r2, r8
 8009a06:	189b      	adds	r3, r3, r2
 8009a08:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a0a:	464b      	mov	r3, r9
 8009a0c:	460a      	mov	r2, r1
 8009a0e:	eb42 0303 	adc.w	r3, r2, r3
 8009a12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	663b      	str	r3, [r7, #96]	; 0x60
 8009a1e:	667a      	str	r2, [r7, #100]	; 0x64
 8009a20:	f04f 0200 	mov.w	r2, #0
 8009a24:	f04f 0300 	mov.w	r3, #0
 8009a28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009a2c:	4649      	mov	r1, r9
 8009a2e:	008b      	lsls	r3, r1, #2
 8009a30:	4641      	mov	r1, r8
 8009a32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a36:	4641      	mov	r1, r8
 8009a38:	008a      	lsls	r2, r1, #2
 8009a3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009a3e:	f7f6 ff45 	bl	80008cc <__aeabi_uldivmod>
 8009a42:	4602      	mov	r2, r0
 8009a44:	460b      	mov	r3, r1
 8009a46:	4b0d      	ldr	r3, [pc, #52]	; (8009a7c <UART_SetConfig+0x4e4>)
 8009a48:	fba3 1302 	umull	r1, r3, r3, r2
 8009a4c:	095b      	lsrs	r3, r3, #5
 8009a4e:	2164      	movs	r1, #100	; 0x64
 8009a50:	fb01 f303 	mul.w	r3, r1, r3
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	011b      	lsls	r3, r3, #4
 8009a58:	3332      	adds	r3, #50	; 0x32
 8009a5a:	4a08      	ldr	r2, [pc, #32]	; (8009a7c <UART_SetConfig+0x4e4>)
 8009a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8009a60:	095b      	lsrs	r3, r3, #5
 8009a62:	f003 020f 	and.w	r2, r3, #15
 8009a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4422      	add	r2, r4
 8009a6e:	609a      	str	r2, [r3, #8]
}
 8009a70:	bf00      	nop
 8009a72:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009a76:	46bd      	mov	sp, r7
 8009a78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a7c:	51eb851f 	.word	0x51eb851f

08009a80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a80:	b084      	sub	sp, #16
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b084      	sub	sp, #16
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	f107 001c 	add.w	r0, r7, #28
 8009a8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009a92:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d123      	bne.n	8009ae2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009ac2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d105      	bne.n	8009ad6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 fb74 	bl	800a1c4 <USB_CoreReset>
 8009adc:	4603      	mov	r3, r0
 8009ade:	73fb      	strb	r3, [r7, #15]
 8009ae0:	e01b      	b.n	8009b1a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	68db      	ldr	r3, [r3, #12]
 8009ae6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 fb68 	bl	800a1c4 <USB_CoreReset>
 8009af4:	4603      	mov	r3, r0
 8009af6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009af8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d106      	bne.n	8009b0e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	639a      	str	r2, [r3, #56]	; 0x38
 8009b0c:	e005      	b.n	8009b1a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009b1a:	7fbb      	ldrb	r3, [r7, #30]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d10b      	bne.n	8009b38 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	f043 0206 	orr.w	r2, r3, #6
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	f043 0220 	orr.w	r2, r3, #32
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b44:	b004      	add	sp, #16
 8009b46:	4770      	bx	lr

08009b48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	f043 0201 	orr.w	r2, r3, #1
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	370c      	adds	r7, #12
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr

08009b6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b6a:	b480      	push	{r7}
 8009b6c:	b083      	sub	sp, #12
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	f023 0201 	bic.w	r2, r3, #1
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	460b      	mov	r3, r1
 8009b96:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009ba8:	78fb      	ldrb	r3, [r7, #3]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d115      	bne.n	8009bda <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009bba:	200a      	movs	r0, #10
 8009bbc:	f7f8 fa26 	bl	800200c <HAL_Delay>
      ms += 10U;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	330a      	adds	r3, #10
 8009bc4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 faee 	bl	800a1a8 <USB_GetMode>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d01e      	beq.n	8009c10 <USB_SetCurrentMode+0x84>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2bc7      	cmp	r3, #199	; 0xc7
 8009bd6:	d9f0      	bls.n	8009bba <USB_SetCurrentMode+0x2e>
 8009bd8:	e01a      	b.n	8009c10 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009bda:	78fb      	ldrb	r3, [r7, #3]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d115      	bne.n	8009c0c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009bec:	200a      	movs	r0, #10
 8009bee:	f7f8 fa0d 	bl	800200c <HAL_Delay>
      ms += 10U;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	330a      	adds	r3, #10
 8009bf6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 fad5 	bl	800a1a8 <USB_GetMode>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d005      	beq.n	8009c10 <USB_SetCurrentMode+0x84>
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2bc7      	cmp	r3, #199	; 0xc7
 8009c08:	d9f0      	bls.n	8009bec <USB_SetCurrentMode+0x60>
 8009c0a:	e001      	b.n	8009c10 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e005      	b.n	8009c1c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2bc8      	cmp	r3, #200	; 0xc8
 8009c14:	d101      	bne.n	8009c1a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	e000      	b.n	8009c1c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c24:	b084      	sub	sp, #16
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b086      	sub	sp, #24
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009c32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009c36:	2300      	movs	r3, #0
 8009c38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009c3e:	2300      	movs	r3, #0
 8009c40:	613b      	str	r3, [r7, #16]
 8009c42:	e009      	b.n	8009c58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	3340      	adds	r3, #64	; 0x40
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	4413      	add	r3, r2
 8009c4e:	2200      	movs	r2, #0
 8009c50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	3301      	adds	r3, #1
 8009c56:	613b      	str	r3, [r7, #16]
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	2b0e      	cmp	r3, #14
 8009c5c:	d9f2      	bls.n	8009c44 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009c5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d11c      	bne.n	8009ca0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	68fa      	ldr	r2, [r7, #12]
 8009c70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c74:	f043 0302 	orr.w	r3, r3, #2
 8009c78:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c7e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	601a      	str	r2, [r3, #0]
 8009c9e:	e005      	b.n	8009cac <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009cb8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d10d      	bne.n	8009cdc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d104      	bne.n	8009cd2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009cc8:	2100      	movs	r1, #0
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f968 	bl	8009fa0 <USB_SetDevSpeed>
 8009cd0:	e008      	b.n	8009ce4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009cd2:	2101      	movs	r1, #1
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f963 	bl	8009fa0 <USB_SetDevSpeed>
 8009cda:	e003      	b.n	8009ce4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009cdc:	2103      	movs	r1, #3
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f95e 	bl	8009fa0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009ce4:	2110      	movs	r1, #16
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 f8fa 	bl	8009ee0 <USB_FlushTxFifo>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d001      	beq.n	8009cf6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 f924 	bl	8009f44 <USB_FlushRxFifo>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d001      	beq.n	8009d06 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	2300      	movs	r3, #0
 8009d10:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d18:	461a      	mov	r2, r3
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d24:	461a      	mov	r2, r3
 8009d26:	2300      	movs	r3, #0
 8009d28:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	613b      	str	r3, [r7, #16]
 8009d2e:	e043      	b.n	8009db8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	015a      	lsls	r2, r3, #5
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	4413      	add	r3, r2
 8009d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d46:	d118      	bne.n	8009d7a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d10a      	bne.n	8009d64 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	015a      	lsls	r2, r3, #5
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	4413      	add	r3, r2
 8009d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009d60:	6013      	str	r3, [r2, #0]
 8009d62:	e013      	b.n	8009d8c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	015a      	lsls	r2, r3, #5
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d70:	461a      	mov	r2, r3
 8009d72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009d76:	6013      	str	r3, [r2, #0]
 8009d78:	e008      	b.n	8009d8c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	015a      	lsls	r2, r3, #5
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	4413      	add	r3, r2
 8009d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d86:	461a      	mov	r2, r3
 8009d88:	2300      	movs	r3, #0
 8009d8a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	015a      	lsls	r2, r3, #5
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	4413      	add	r3, r2
 8009d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d98:	461a      	mov	r2, r3
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	015a      	lsls	r2, r3, #5
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	4413      	add	r3, r2
 8009da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009daa:	461a      	mov	r2, r3
 8009dac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009db0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	3301      	adds	r3, #1
 8009db6:	613b      	str	r3, [r7, #16]
 8009db8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d3b5      	bcc.n	8009d30 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	613b      	str	r3, [r7, #16]
 8009dc8:	e043      	b.n	8009e52 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	015a      	lsls	r2, r3, #5
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009de0:	d118      	bne.n	8009e14 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10a      	bne.n	8009dfe <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	015a      	lsls	r2, r3, #5
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	4413      	add	r3, r2
 8009df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009df4:	461a      	mov	r2, r3
 8009df6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009dfa:	6013      	str	r3, [r2, #0]
 8009dfc:	e013      	b.n	8009e26 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	015a      	lsls	r2, r3, #5
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	4413      	add	r3, r2
 8009e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009e10:	6013      	str	r3, [r2, #0]
 8009e12:	e008      	b.n	8009e26 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	015a      	lsls	r2, r3, #5
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e20:	461a      	mov	r2, r3
 8009e22:	2300      	movs	r3, #0
 8009e24:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	015a      	lsls	r2, r3, #5
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e32:	461a      	mov	r2, r3
 8009e34:	2300      	movs	r3, #0
 8009e36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	015a      	lsls	r2, r3, #5
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	4413      	add	r3, r2
 8009e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e44:	461a      	mov	r2, r3
 8009e46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009e4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	613b      	str	r3, [r7, #16]
 8009e52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009e56:	461a      	mov	r2, r3
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d3b5      	bcc.n	8009dca <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e70:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009e7e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009e80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d105      	bne.n	8009e94 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	699b      	ldr	r3, [r3, #24]
 8009e8c:	f043 0210 	orr.w	r2, r3, #16
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	699a      	ldr	r2, [r3, #24]
 8009e98:	4b10      	ldr	r3, [pc, #64]	; (8009edc <USB_DevInit+0x2b8>)
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009ea0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d005      	beq.n	8009eb4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	699b      	ldr	r3, [r3, #24]
 8009eac:	f043 0208 	orr.w	r2, r3, #8
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009eb4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d107      	bne.n	8009ecc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	699b      	ldr	r3, [r3, #24]
 8009ec0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ec4:	f043 0304 	orr.w	r3, r3, #4
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3718      	adds	r7, #24
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ed8:	b004      	add	sp, #16
 8009eda:	4770      	bx	lr
 8009edc:	803c3800 	.word	0x803c3800

08009ee0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009eea:	2300      	movs	r3, #0
 8009eec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009efa:	d901      	bls.n	8009f00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009efc:	2303      	movs	r3, #3
 8009efe:	e01b      	b.n	8009f38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	daf2      	bge.n	8009eee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	019b      	lsls	r3, r3, #6
 8009f10:	f043 0220 	orr.w	r2, r3, #32
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009f24:	d901      	bls.n	8009f2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009f26:	2303      	movs	r3, #3
 8009f28:	e006      	b.n	8009f38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	691b      	ldr	r3, [r3, #16]
 8009f2e:	f003 0320 	and.w	r3, r3, #32
 8009f32:	2b20      	cmp	r3, #32
 8009f34:	d0f0      	beq.n	8009f18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009f36:	2300      	movs	r3, #0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3714      	adds	r7, #20
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	3301      	adds	r3, #1
 8009f54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009f5c:	d901      	bls.n	8009f62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	e018      	b.n	8009f94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	691b      	ldr	r3, [r3, #16]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	daf2      	bge.n	8009f50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2210      	movs	r2, #16
 8009f72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	3301      	adds	r3, #1
 8009f78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009f80:	d901      	bls.n	8009f86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009f82:	2303      	movs	r3, #3
 8009f84:	e006      	b.n	8009f94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	691b      	ldr	r3, [r3, #16]
 8009f8a:	f003 0310 	and.w	r3, r3, #16
 8009f8e:	2b10      	cmp	r3, #16
 8009f90:	d0f0      	beq.n	8009f74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3714      	adds	r7, #20
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	460b      	mov	r3, r1
 8009faa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	78fb      	ldrb	r3, [r7, #3]
 8009fba:	68f9      	ldr	r1, [r7, #12]
 8009fbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3714      	adds	r7, #20
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr

08009fd2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009fd2:	b480      	push	{r7}
 8009fd4:	b089      	sub	sp, #36	; 0x24
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	60f8      	str	r0, [r7, #12]
 8009fda:	60b9      	str	r1, [r7, #8]
 8009fdc:	4611      	mov	r1, r2
 8009fde:	461a      	mov	r2, r3
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	71fb      	strb	r3, [r7, #7]
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009ff0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d123      	bne.n	800a040 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009ff8:	88bb      	ldrh	r3, [r7, #4]
 8009ffa:	3303      	adds	r3, #3
 8009ffc:	089b      	lsrs	r3, r3, #2
 8009ffe:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a000:	2300      	movs	r3, #0
 800a002:	61bb      	str	r3, [r7, #24]
 800a004:	e018      	b.n	800a038 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a006:	79fb      	ldrb	r3, [r7, #7]
 800a008:	031a      	lsls	r2, r3, #12
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	4413      	add	r3, r2
 800a00e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a012:	461a      	mov	r2, r3
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a01a:	69fb      	ldr	r3, [r7, #28]
 800a01c:	3301      	adds	r3, #1
 800a01e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	3301      	adds	r3, #1
 800a024:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	3301      	adds	r3, #1
 800a02a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	3301      	adds	r3, #1
 800a030:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	3301      	adds	r3, #1
 800a036:	61bb      	str	r3, [r7, #24]
 800a038:	69ba      	ldr	r2, [r7, #24]
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d3e2      	bcc.n	800a006 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3724      	adds	r7, #36	; 0x24
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr

0800a04e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a04e:	b480      	push	{r7}
 800a050:	b08b      	sub	sp, #44	; 0x2c
 800a052:	af00      	add	r7, sp, #0
 800a054:	60f8      	str	r0, [r7, #12]
 800a056:	60b9      	str	r1, [r7, #8]
 800a058:	4613      	mov	r3, r2
 800a05a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a064:	88fb      	ldrh	r3, [r7, #6]
 800a066:	089b      	lsrs	r3, r3, #2
 800a068:	b29b      	uxth	r3, r3
 800a06a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a06c:	88fb      	ldrh	r3, [r7, #6]
 800a06e:	f003 0303 	and.w	r3, r3, #3
 800a072:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a074:	2300      	movs	r3, #0
 800a076:	623b      	str	r3, [r7, #32]
 800a078:	e014      	b.n	800a0a4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a084:	601a      	str	r2, [r3, #0]
    pDest++;
 800a086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a088:	3301      	adds	r3, #1
 800a08a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08e:	3301      	adds	r3, #1
 800a090:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a094:	3301      	adds	r3, #1
 800a096:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09a:	3301      	adds	r3, #1
 800a09c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a09e:	6a3b      	ldr	r3, [r7, #32]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	623b      	str	r3, [r7, #32]
 800a0a4:	6a3a      	ldr	r2, [r7, #32]
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d3e6      	bcc.n	800a07a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a0ac:	8bfb      	ldrh	r3, [r7, #30]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d01e      	beq.n	800a0f0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0bc:	461a      	mov	r2, r3
 800a0be:	f107 0310 	add.w	r3, r7, #16
 800a0c2:	6812      	ldr	r2, [r2, #0]
 800a0c4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a0c6:	693a      	ldr	r2, [r7, #16]
 800a0c8:	6a3b      	ldr	r3, [r7, #32]
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	00db      	lsls	r3, r3, #3
 800a0ce:	fa22 f303 	lsr.w	r3, r2, r3
 800a0d2:	b2da      	uxtb	r2, r3
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d6:	701a      	strb	r2, [r3, #0]
      i++;
 800a0d8:	6a3b      	ldr	r3, [r7, #32]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	623b      	str	r3, [r7, #32]
      pDest++;
 800a0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a0e4:	8bfb      	ldrh	r3, [r7, #30]
 800a0e6:	3b01      	subs	r3, #1
 800a0e8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a0ea:	8bfb      	ldrh	r3, [r7, #30]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d1ea      	bne.n	800a0c6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	372c      	adds	r7, #44	; 0x2c
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr

0800a0fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a0fe:	b480      	push	{r7}
 800a100:	b085      	sub	sp, #20
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a118:	f023 0303 	bic.w	r3, r3, #3
 800a11c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	68fa      	ldr	r2, [r7, #12]
 800a128:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a12c:	f043 0302 	orr.w	r3, r3, #2
 800a130:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a132:	2300      	movs	r3, #0
}
 800a134:	4618      	mov	r0, r3
 800a136:	3714      	adds	r7, #20
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a140:	b480      	push	{r7}
 800a142:	b085      	sub	sp, #20
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	695b      	ldr	r3, [r3, #20]
 800a14c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	699b      	ldr	r3, [r3, #24]
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	4013      	ands	r3, r2
 800a156:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a158:	68fb      	ldr	r3, [r7, #12]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3714      	adds	r7, #20
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr

0800a166 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800a166:	b480      	push	{r7}
 800a168:	b085      	sub	sp, #20
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
 800a16e:	460b      	mov	r3, r1
 800a170:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800a176:	78fb      	ldrb	r3, [r7, #3]
 800a178:	015a      	lsls	r2, r3, #5
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	4413      	add	r3, r2
 800a17e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800a186:	78fb      	ldrb	r3, [r7, #3]
 800a188:	015a      	lsls	r2, r3, #5
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	4413      	add	r3, r2
 800a18e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	68ba      	ldr	r2, [r7, #8]
 800a196:	4013      	ands	r3, r2
 800a198:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a19a:	68bb      	ldr	r3, [r7, #8]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3714      	adds	r7, #20
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	695b      	ldr	r3, [r3, #20]
 800a1b4:	f003 0301 	and.w	r3, r3, #1
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b085      	sub	sp, #20
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800a1dc:	d901      	bls.n	800a1e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a1de:	2303      	movs	r3, #3
 800a1e0:	e01b      	b.n	800a21a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	daf2      	bge.n	800a1d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	f043 0201 	orr.w	r2, r3, #1
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800a206:	d901      	bls.n	800a20c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a208:	2303      	movs	r3, #3
 800a20a:	e006      	b.n	800a21a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	691b      	ldr	r3, [r3, #16]
 800a210:	f003 0301 	and.w	r3, r3, #1
 800a214:	2b01      	cmp	r3, #1
 800a216:	d0f0      	beq.n	800a1fa <USB_CoreReset+0x36>

  return HAL_OK;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3714      	adds	r7, #20
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr
	...

0800a228 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a228:	b084      	sub	sp, #16
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b086      	sub	sp, #24
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a236:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a23a:	2300      	movs	r3, #0
 800a23c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a248:	461a      	mov	r2, r3
 800a24a:	2300      	movs	r3, #0
 800a24c:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a252:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a262:	2b00      	cmp	r3, #0
 800a264:	d119      	bne.n	800a29a <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d10a      	bne.n	800a284 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a27c:	f043 0304 	orr.w	r3, r3, #4
 800a280:	6013      	str	r3, [r2, #0]
 800a282:	e014      	b.n	800a2ae <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a292:	f023 0304 	bic.w	r3, r3, #4
 800a296:	6013      	str	r3, [r2, #0]
 800a298:	e009      	b.n	800a2ae <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a2a8:	f023 0304 	bic.w	r3, r3, #4
 800a2ac:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a2ae:	2110      	movs	r1, #16
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f7ff fe15 	bl	8009ee0 <USB_FlushTxFifo>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d001      	beq.n	800a2c0 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f7ff fe3f 	bl	8009f44 <USB_FlushRxFifo>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d001      	beq.n	800a2d0 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	613b      	str	r3, [r7, #16]
 800a2d4:	e015      	b.n	800a302 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	015a      	lsls	r2, r3, #5
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	4413      	add	r3, r2
 800a2de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a2e8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	015a      	lsls	r2, r3, #5
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	3301      	adds	r3, #1
 800a300:	613b      	str	r3, [r7, #16]
 800a302:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a306:	461a      	mov	r2, r3
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d3e3      	bcc.n	800a2d6 <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f04f 32ff 	mov.w	r2, #4294967295
 800a31a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4a18      	ldr	r2, [pc, #96]	; (800a380 <USB_HostInit+0x158>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d10b      	bne.n	800a33c <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a32a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a15      	ldr	r2, [pc, #84]	; (800a384 <USB_HostInit+0x15c>)
 800a330:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4a14      	ldr	r2, [pc, #80]	; (800a388 <USB_HostInit+0x160>)
 800a336:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a33a:	e009      	b.n	800a350 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2280      	movs	r2, #128	; 0x80
 800a340:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a11      	ldr	r2, [pc, #68]	; (800a38c <USB_HostInit+0x164>)
 800a346:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	4a11      	ldr	r2, [pc, #68]	; (800a390 <USB_HostInit+0x168>)
 800a34c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a350:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a354:	2b00      	cmp	r3, #0
 800a356:	d105      	bne.n	800a364 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	699b      	ldr	r3, [r3, #24]
 800a35c:	f043 0210 	orr.w	r2, r3, #16
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	699a      	ldr	r2, [r3, #24]
 800a368:	4b0a      	ldr	r3, [pc, #40]	; (800a394 <USB_HostInit+0x16c>)
 800a36a:	4313      	orrs	r3, r2
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a370:	7dfb      	ldrb	r3, [r7, #23]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3718      	adds	r7, #24
 800a376:	46bd      	mov	sp, r7
 800a378:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a37c:	b004      	add	sp, #16
 800a37e:	4770      	bx	lr
 800a380:	40040000 	.word	0x40040000
 800a384:	01000200 	.word	0x01000200
 800a388:	00e00300 	.word	0x00e00300
 800a38c:	00600080 	.word	0x00600080
 800a390:	004000e0 	.word	0x004000e0
 800a394:	a3200008 	.word	0xa3200008

0800a398 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a3b6:	f023 0303 	bic.w	r3, r3, #3
 800a3ba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	78fb      	ldrb	r3, [r7, #3]
 800a3c6:	f003 0303 	and.w	r3, r3, #3
 800a3ca:	68f9      	ldr	r1, [r7, #12]
 800a3cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a3d4:	78fb      	ldrb	r3, [r7, #3]
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d107      	bne.n	800a3ea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a3e6:	6053      	str	r3, [r2, #4]
 800a3e8:	e00c      	b.n	800a404 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800a3ea:	78fb      	ldrb	r3, [r7, #3]
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d107      	bne.n	800a400 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	f241 7370 	movw	r3, #6000	; 0x1770
 800a3fc:	6053      	str	r3, [r2, #4]
 800a3fe:	e001      	b.n	800a404 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	e000      	b.n	800a406 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3714      	adds	r7, #20
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr

0800a412 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b084      	sub	sp, #16
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a41e:	2300      	movs	r3, #0
 800a420:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a432:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a43c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a440:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a442:	2064      	movs	r0, #100	; 0x64
 800a444:	f7f7 fde2 	bl	800200c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	68fa      	ldr	r2, [r7, #12]
 800a44c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a454:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a456:	200a      	movs	r0, #10
 800a458:	f7f7 fdd8 	bl	800200c <HAL_Delay>

  return HAL_OK;
 800a45c:	2300      	movs	r3, #0
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a466:	b480      	push	{r7}
 800a468:	b085      	sub	sp, #20
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
 800a46e:	460b      	mov	r3, r1
 800a470:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a476:	2300      	movs	r3, #0
 800a478:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a48a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a492:	2b00      	cmp	r3, #0
 800a494:	d109      	bne.n	800a4aa <USB_DriveVbus+0x44>
 800a496:	78fb      	ldrb	r3, [r7, #3]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d106      	bne.n	800a4aa <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a4a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a4a8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a4b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4b4:	d109      	bne.n	800a4ca <USB_DriveVbus+0x64>
 800a4b6:	78fb      	ldrb	r3, [r7, #3]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d106      	bne.n	800a4ca <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	68fa      	ldr	r2, [r7, #12]
 800a4c0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a4c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4c8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3714      	adds	r7, #20
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	0c5b      	lsrs	r3, r3, #17
 800a4f6:	f003 0303 	and.w	r3, r3, #3
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3714      	adds	r7, #20
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr

0800a506 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800a506:	b480      	push	{r7}
 800a508:	b085      	sub	sp, #20
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	b29b      	uxth	r3, r3
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3714      	adds	r7, #20
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b088      	sub	sp, #32
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	4608      	mov	r0, r1
 800a532:	4611      	mov	r1, r2
 800a534:	461a      	mov	r2, r3
 800a536:	4603      	mov	r3, r0
 800a538:	70fb      	strb	r3, [r7, #3]
 800a53a:	460b      	mov	r3, r1
 800a53c:	70bb      	strb	r3, [r7, #2]
 800a53e:	4613      	mov	r3, r2
 800a540:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a542:	2300      	movs	r3, #0
 800a544:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800a54a:	78fb      	ldrb	r3, [r7, #3]
 800a54c:	015a      	lsls	r2, r3, #5
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	4413      	add	r3, r2
 800a552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a556:	461a      	mov	r2, r3
 800a558:	f04f 33ff 	mov.w	r3, #4294967295
 800a55c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a55e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a562:	2b03      	cmp	r3, #3
 800a564:	d87c      	bhi.n	800a660 <USB_HC_Init+0x138>
 800a566:	a201      	add	r2, pc, #4	; (adr r2, 800a56c <USB_HC_Init+0x44>)
 800a568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a56c:	0800a57d 	.word	0x0800a57d
 800a570:	0800a623 	.word	0x0800a623
 800a574:	0800a57d 	.word	0x0800a57d
 800a578:	0800a5e5 	.word	0x0800a5e5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a57c:	78fb      	ldrb	r3, [r7, #3]
 800a57e:	015a      	lsls	r2, r3, #5
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	4413      	add	r3, r2
 800a584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a588:	461a      	mov	r2, r3
 800a58a:	f240 439d 	movw	r3, #1181	; 0x49d
 800a58e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a590:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a594:	2b00      	cmp	r3, #0
 800a596:	da10      	bge.n	800a5ba <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a598:	78fb      	ldrb	r3, [r7, #3]
 800a59a:	015a      	lsls	r2, r3, #5
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	4413      	add	r3, r2
 800a5a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	78fa      	ldrb	r2, [r7, #3]
 800a5a8:	0151      	lsls	r1, r2, #5
 800a5aa:	693a      	ldr	r2, [r7, #16]
 800a5ac:	440a      	add	r2, r1
 800a5ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5b6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800a5b8:	e055      	b.n	800a666 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4a6f      	ldr	r2, [pc, #444]	; (800a77c <USB_HC_Init+0x254>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d151      	bne.n	800a666 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a5c2:	78fb      	ldrb	r3, [r7, #3]
 800a5c4:	015a      	lsls	r2, r3, #5
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	78fa      	ldrb	r2, [r7, #3]
 800a5d2:	0151      	lsls	r1, r2, #5
 800a5d4:	693a      	ldr	r2, [r7, #16]
 800a5d6:	440a      	add	r2, r1
 800a5d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a5e0:	60d3      	str	r3, [r2, #12]
      break;
 800a5e2:	e040      	b.n	800a666 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a5e4:	78fb      	ldrb	r3, [r7, #3]
 800a5e6:	015a      	lsls	r2, r3, #5
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	f240 639d 	movw	r3, #1693	; 0x69d
 800a5f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a5f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	da34      	bge.n	800a66a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a600:	78fb      	ldrb	r3, [r7, #3]
 800a602:	015a      	lsls	r2, r3, #5
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	4413      	add	r3, r2
 800a608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	78fa      	ldrb	r2, [r7, #3]
 800a610:	0151      	lsls	r1, r2, #5
 800a612:	693a      	ldr	r2, [r7, #16]
 800a614:	440a      	add	r2, r1
 800a616:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a61a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a61e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a620:	e023      	b.n	800a66a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a622:	78fb      	ldrb	r3, [r7, #3]
 800a624:	015a      	lsls	r2, r3, #5
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	4413      	add	r3, r2
 800a62a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a62e:	461a      	mov	r2, r3
 800a630:	f240 2325 	movw	r3, #549	; 0x225
 800a634:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a636:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	da17      	bge.n	800a66e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a63e:	78fb      	ldrb	r3, [r7, #3]
 800a640:	015a      	lsls	r2, r3, #5
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	4413      	add	r3, r2
 800a646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	78fa      	ldrb	r2, [r7, #3]
 800a64e:	0151      	lsls	r1, r2, #5
 800a650:	693a      	ldr	r2, [r7, #16]
 800a652:	440a      	add	r2, r1
 800a654:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a658:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a65c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a65e:	e006      	b.n	800a66e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	77fb      	strb	r3, [r7, #31]
      break;
 800a664:	e004      	b.n	800a670 <USB_HC_Init+0x148>
      break;
 800a666:	bf00      	nop
 800a668:	e002      	b.n	800a670 <USB_HC_Init+0x148>
      break;
 800a66a:	bf00      	nop
 800a66c:	e000      	b.n	800a670 <USB_HC_Init+0x148>
      break;
 800a66e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a670:	78fb      	ldrb	r3, [r7, #3]
 800a672:	015a      	lsls	r2, r3, #5
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	4413      	add	r3, r2
 800a678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a67c:	461a      	mov	r2, r3
 800a67e:	2300      	movs	r3, #0
 800a680:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a682:	78fb      	ldrb	r3, [r7, #3]
 800a684:	015a      	lsls	r2, r3, #5
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	4413      	add	r3, r2
 800a68a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	78fa      	ldrb	r2, [r7, #3]
 800a692:	0151      	lsls	r1, r2, #5
 800a694:	693a      	ldr	r2, [r7, #16]
 800a696:	440a      	add	r2, r1
 800a698:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a69c:	f043 0302 	orr.w	r3, r3, #2
 800a6a0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6a8:	699a      	ldr	r2, [r3, #24]
 800a6aa:	78fb      	ldrb	r3, [r7, #3]
 800a6ac:	f003 030f 	and.w	r3, r3, #15
 800a6b0:	2101      	movs	r1, #1
 800a6b2:	fa01 f303 	lsl.w	r3, r1, r3
 800a6b6:	6939      	ldr	r1, [r7, #16]
 800a6b8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	699b      	ldr	r3, [r3, #24]
 800a6c4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a6cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	da03      	bge.n	800a6dc <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a6d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6d8:	61bb      	str	r3, [r7, #24]
 800a6da:	e001      	b.n	800a6e0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f7ff fef9 	bl	800a4d8 <USB_GetHostSpeed>
 800a6e6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a6e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a6ec:	2b02      	cmp	r3, #2
 800a6ee:	d106      	bne.n	800a6fe <USB_HC_Init+0x1d6>
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	d003      	beq.n	800a6fe <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a6f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a6fa:	617b      	str	r3, [r7, #20]
 800a6fc:	e001      	b.n	800a702 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a6fe:	2300      	movs	r3, #0
 800a700:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a702:	787b      	ldrb	r3, [r7, #1]
 800a704:	059b      	lsls	r3, r3, #22
 800a706:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a70a:	78bb      	ldrb	r3, [r7, #2]
 800a70c:	02db      	lsls	r3, r3, #11
 800a70e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a712:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a714:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a718:	049b      	lsls	r3, r3, #18
 800a71a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a71e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800a720:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a722:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a726:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a728:	69bb      	ldr	r3, [r7, #24]
 800a72a:	431a      	orrs	r2, r3
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a730:	78fa      	ldrb	r2, [r7, #3]
 800a732:	0151      	lsls	r1, r2, #5
 800a734:	693a      	ldr	r2, [r7, #16]
 800a736:	440a      	add	r2, r1
 800a738:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a73c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a740:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a742:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a746:	2b03      	cmp	r3, #3
 800a748:	d003      	beq.n	800a752 <USB_HC_Init+0x22a>
 800a74a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d10f      	bne.n	800a772 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a752:	78fb      	ldrb	r3, [r7, #3]
 800a754:	015a      	lsls	r2, r3, #5
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	4413      	add	r3, r2
 800a75a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	78fa      	ldrb	r2, [r7, #3]
 800a762:	0151      	lsls	r1, r2, #5
 800a764:	693a      	ldr	r2, [r7, #16]
 800a766:	440a      	add	r2, r1
 800a768:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a76c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a770:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a772:	7ffb      	ldrb	r3, [r7, #31]
}
 800a774:	4618      	mov	r0, r3
 800a776:	3720      	adds	r7, #32
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	40040000 	.word	0x40040000

0800a780 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b08c      	sub	sp, #48	; 0x30
 800a784:	af02      	add	r7, sp, #8
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	4613      	mov	r3, r2
 800a78c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	785b      	ldrb	r3, [r3, #1]
 800a796:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800a798:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a79c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	4a5d      	ldr	r2, [pc, #372]	; (800a918 <USB_HC_StartXfer+0x198>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d12f      	bne.n	800a806 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800a7a6:	79fb      	ldrb	r3, [r7, #7]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d11c      	bne.n	800a7e6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	7c9b      	ldrb	r3, [r3, #18]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d003      	beq.n	800a7bc <USB_HC_StartXfer+0x3c>
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	7c9b      	ldrb	r3, [r3, #18]
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d124      	bne.n	800a806 <USB_HC_StartXfer+0x86>
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	799b      	ldrb	r3, [r3, #6]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d120      	bne.n	800a806 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	015a      	lsls	r2, r3, #5
 800a7c8:	6a3b      	ldr	r3, [r7, #32]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	69fa      	ldr	r2, [r7, #28]
 800a7d4:	0151      	lsls	r1, r2, #5
 800a7d6:	6a3a      	ldr	r2, [r7, #32]
 800a7d8:	440a      	add	r2, r1
 800a7da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7e2:	60d3      	str	r3, [r2, #12]
 800a7e4:	e00f      	b.n	800a806 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	791b      	ldrb	r3, [r3, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d10b      	bne.n	800a806 <USB_HC_StartXfer+0x86>
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	795b      	ldrb	r3, [r3, #5]
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d107      	bne.n	800a806 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	785b      	ldrb	r3, [r3, #1]
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f000 fb6b 	bl	800aed8 <USB_DoPing>
        return HAL_OK;
 800a802:	2300      	movs	r3, #0
 800a804:	e232      	b.n	800ac6c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	799b      	ldrb	r3, [r3, #6]
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d158      	bne.n	800a8c0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800a80e:	2301      	movs	r3, #1
 800a810:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	78db      	ldrb	r3, [r3, #3]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d007      	beq.n	800a82a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a81a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a81c:	68ba      	ldr	r2, [r7, #8]
 800a81e:	8a92      	ldrh	r2, [r2, #20]
 800a820:	fb03 f202 	mul.w	r2, r3, r2
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	61da      	str	r2, [r3, #28]
 800a828:	e07c      	b.n	800a924 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	7c9b      	ldrb	r3, [r3, #18]
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d130      	bne.n	800a894 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	6a1b      	ldr	r3, [r3, #32]
 800a836:	2bbc      	cmp	r3, #188	; 0xbc
 800a838:	d918      	bls.n	800a86c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	8a9b      	ldrh	r3, [r3, #20]
 800a83e:	461a      	mov	r2, r3
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	69da      	ldr	r2, [r3, #28]
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	2b01      	cmp	r3, #1
 800a852:	d003      	beq.n	800a85c <USB_HC_StartXfer+0xdc>
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	2b02      	cmp	r3, #2
 800a85a:	d103      	bne.n	800a864 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	2202      	movs	r2, #2
 800a860:	60da      	str	r2, [r3, #12]
 800a862:	e05f      	b.n	800a924 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	2201      	movs	r2, #1
 800a868:	60da      	str	r2, [r3, #12]
 800a86a:	e05b      	b.n	800a924 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	6a1a      	ldr	r2, [r3, #32]
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d007      	beq.n	800a88c <USB_HC_StartXfer+0x10c>
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	2b02      	cmp	r3, #2
 800a882:	d003      	beq.n	800a88c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	2204      	movs	r2, #4
 800a888:	60da      	str	r2, [r3, #12]
 800a88a:	e04b      	b.n	800a924 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	2203      	movs	r2, #3
 800a890:	60da      	str	r2, [r3, #12]
 800a892:	e047      	b.n	800a924 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800a894:	79fb      	ldrb	r3, [r7, #7]
 800a896:	2b01      	cmp	r3, #1
 800a898:	d10d      	bne.n	800a8b6 <USB_HC_StartXfer+0x136>
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	6a1b      	ldr	r3, [r3, #32]
 800a89e:	68ba      	ldr	r2, [r7, #8]
 800a8a0:	8a92      	ldrh	r2, [r2, #20]
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d907      	bls.n	800a8b6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a8a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a8a8:	68ba      	ldr	r2, [r7, #8]
 800a8aa:	8a92      	ldrh	r2, [r2, #20]
 800a8ac:	fb03 f202 	mul.w	r2, r3, r2
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	61da      	str	r2, [r3, #28]
 800a8b4:	e036      	b.n	800a924 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	6a1a      	ldr	r2, [r3, #32]
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	61da      	str	r2, [r3, #28]
 800a8be:	e031      	b.n	800a924 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	6a1b      	ldr	r3, [r3, #32]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d018      	beq.n	800a8fa <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	6a1b      	ldr	r3, [r3, #32]
 800a8cc:	68ba      	ldr	r2, [r7, #8]
 800a8ce:	8a92      	ldrh	r2, [r2, #20]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	68ba      	ldr	r2, [r7, #8]
 800a8d6:	8a92      	ldrh	r2, [r2, #20]
 800a8d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8dc:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 800a8de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a8e0:	8b7b      	ldrh	r3, [r7, #26]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d90b      	bls.n	800a8fe <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800a8e6:	8b7b      	ldrh	r3, [r7, #26]
 800a8e8:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a8ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a8ec:	68ba      	ldr	r2, [r7, #8]
 800a8ee:	8a92      	ldrh	r2, [r2, #20]
 800a8f0:	fb03 f202 	mul.w	r2, r3, r2
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	61da      	str	r2, [r3, #28]
 800a8f8:	e001      	b.n	800a8fe <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	78db      	ldrb	r3, [r3, #3]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00a      	beq.n	800a91c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a906:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a908:	68ba      	ldr	r2, [r7, #8]
 800a90a:	8a92      	ldrh	r2, [r2, #20]
 800a90c:	fb03 f202 	mul.w	r2, r3, r2
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	61da      	str	r2, [r3, #28]
 800a914:	e006      	b.n	800a924 <USB_HC_StartXfer+0x1a4>
 800a916:	bf00      	nop
 800a918:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	6a1a      	ldr	r2, [r3, #32]
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	69db      	ldr	r3, [r3, #28]
 800a928:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a92c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a92e:	04d9      	lsls	r1, r3, #19
 800a930:	4ba3      	ldr	r3, [pc, #652]	; (800abc0 <USB_HC_StartXfer+0x440>)
 800a932:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a934:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	7d9b      	ldrb	r3, [r3, #22]
 800a93a:	075b      	lsls	r3, r3, #29
 800a93c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a940:	69f9      	ldr	r1, [r7, #28]
 800a942:	0148      	lsls	r0, r1, #5
 800a944:	6a39      	ldr	r1, [r7, #32]
 800a946:	4401      	add	r1, r0
 800a948:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a94c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a94e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a950:	79fb      	ldrb	r3, [r7, #7]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d009      	beq.n	800a96a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	6999      	ldr	r1, [r3, #24]
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	015a      	lsls	r2, r3, #5
 800a95e:	6a3b      	ldr	r3, [r7, #32]
 800a960:	4413      	add	r3, r2
 800a962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a966:	460a      	mov	r2, r1
 800a968:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a96a:	6a3b      	ldr	r3, [r7, #32]
 800a96c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	f003 0301 	and.w	r3, r3, #1
 800a976:	2b00      	cmp	r3, #0
 800a978:	bf0c      	ite	eq
 800a97a:	2301      	moveq	r3, #1
 800a97c:	2300      	movne	r3, #0
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a982:	69fb      	ldr	r3, [r7, #28]
 800a984:	015a      	lsls	r2, r3, #5
 800a986:	6a3b      	ldr	r3, [r7, #32]
 800a988:	4413      	add	r3, r2
 800a98a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	69fa      	ldr	r2, [r7, #28]
 800a992:	0151      	lsls	r1, r2, #5
 800a994:	6a3a      	ldr	r2, [r7, #32]
 800a996:	440a      	add	r2, r1
 800a998:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a99c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a9a0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	015a      	lsls	r2, r3, #5
 800a9a6:	6a3b      	ldr	r3, [r7, #32]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	7e7b      	ldrb	r3, [r7, #25]
 800a9b2:	075b      	lsls	r3, r3, #29
 800a9b4:	69f9      	ldr	r1, [r7, #28]
 800a9b6:	0148      	lsls	r0, r1, #5
 800a9b8:	6a39      	ldr	r1, [r7, #32]
 800a9ba:	4401      	add	r1, r0
 800a9bc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	799b      	ldrb	r3, [r3, #6]
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	f040 80c3 	bne.w	800ab54 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	7c5b      	ldrb	r3, [r3, #17]
 800a9d2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a9d4:	68ba      	ldr	r2, [r7, #8]
 800a9d6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	69fa      	ldr	r2, [r7, #28]
 800a9dc:	0151      	lsls	r1, r2, #5
 800a9de:	6a3a      	ldr	r2, [r7, #32]
 800a9e0:	440a      	add	r2, r1
 800a9e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a9e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a9ea:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800a9ec:	69fb      	ldr	r3, [r7, #28]
 800a9ee:	015a      	lsls	r2, r3, #5
 800a9f0:	6a3b      	ldr	r3, [r7, #32]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	69fa      	ldr	r2, [r7, #28]
 800a9fc:	0151      	lsls	r1, r2, #5
 800a9fe:	6a3a      	ldr	r2, [r7, #32]
 800aa00:	440a      	add	r2, r1
 800aa02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa06:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800aa0a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	79db      	ldrb	r3, [r3, #7]
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d123      	bne.n	800aa5c <USB_HC_StartXfer+0x2dc>
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	78db      	ldrb	r3, [r3, #3]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d11f      	bne.n	800aa5c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800aa1c:	69fb      	ldr	r3, [r7, #28]
 800aa1e:	015a      	lsls	r2, r3, #5
 800aa20:	6a3b      	ldr	r3, [r7, #32]
 800aa22:	4413      	add	r3, r2
 800aa24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	69fa      	ldr	r2, [r7, #28]
 800aa2c:	0151      	lsls	r1, r2, #5
 800aa2e:	6a3a      	ldr	r2, [r7, #32]
 800aa30:	440a      	add	r2, r1
 800aa32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa3a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	015a      	lsls	r2, r3, #5
 800aa40:	6a3b      	ldr	r3, [r7, #32]
 800aa42:	4413      	add	r3, r2
 800aa44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	69fa      	ldr	r2, [r7, #28]
 800aa4c:	0151      	lsls	r1, r2, #5
 800aa4e:	6a3a      	ldr	r2, [r7, #32]
 800aa50:	440a      	add	r2, r1
 800aa52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa5a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	7c9b      	ldrb	r3, [r3, #18]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d003      	beq.n	800aa6c <USB_HC_StartXfer+0x2ec>
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	7c9b      	ldrb	r3, [r3, #18]
 800aa68:	2b03      	cmp	r3, #3
 800aa6a:	d117      	bne.n	800aa9c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d113      	bne.n	800aa9c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	78db      	ldrb	r3, [r3, #3]
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d10f      	bne.n	800aa9c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	015a      	lsls	r2, r3, #5
 800aa80:	6a3b      	ldr	r3, [r7, #32]
 800aa82:	4413      	add	r3, r2
 800aa84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	69fa      	ldr	r2, [r7, #28]
 800aa8c:	0151      	lsls	r1, r2, #5
 800aa8e:	6a3a      	ldr	r2, [r7, #32]
 800aa90:	440a      	add	r2, r1
 800aa92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa9a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	7c9b      	ldrb	r3, [r3, #18]
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d162      	bne.n	800ab6a <USB_HC_StartXfer+0x3ea>
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	78db      	ldrb	r3, [r3, #3]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d15e      	bne.n	800ab6a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	68db      	ldr	r3, [r3, #12]
 800aab0:	3b01      	subs	r3, #1
 800aab2:	2b03      	cmp	r3, #3
 800aab4:	d858      	bhi.n	800ab68 <USB_HC_StartXfer+0x3e8>
 800aab6:	a201      	add	r2, pc, #4	; (adr r2, 800aabc <USB_HC_StartXfer+0x33c>)
 800aab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aabc:	0800aacd 	.word	0x0800aacd
 800aac0:	0800aaef 	.word	0x0800aaef
 800aac4:	0800ab11 	.word	0x0800ab11
 800aac8:	0800ab33 	.word	0x0800ab33
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	015a      	lsls	r2, r3, #5
 800aad0:	6a3b      	ldr	r3, [r7, #32]
 800aad2:	4413      	add	r3, r2
 800aad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	69fa      	ldr	r2, [r7, #28]
 800aadc:	0151      	lsls	r1, r2, #5
 800aade:	6a3a      	ldr	r2, [r7, #32]
 800aae0:	440a      	add	r2, r1
 800aae2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaea:	6053      	str	r3, [r2, #4]
          break;
 800aaec:	e03d      	b.n	800ab6a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	015a      	lsls	r2, r3, #5
 800aaf2:	6a3b      	ldr	r3, [r7, #32]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	69fa      	ldr	r2, [r7, #28]
 800aafe:	0151      	lsls	r1, r2, #5
 800ab00:	6a3a      	ldr	r2, [r7, #32]
 800ab02:	440a      	add	r2, r1
 800ab04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab08:	f043 030e 	orr.w	r3, r3, #14
 800ab0c:	6053      	str	r3, [r2, #4]
          break;
 800ab0e:	e02c      	b.n	800ab6a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800ab10:	69fb      	ldr	r3, [r7, #28]
 800ab12:	015a      	lsls	r2, r3, #5
 800ab14:	6a3b      	ldr	r3, [r7, #32]
 800ab16:	4413      	add	r3, r2
 800ab18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	69fa      	ldr	r2, [r7, #28]
 800ab20:	0151      	lsls	r1, r2, #5
 800ab22:	6a3a      	ldr	r2, [r7, #32]
 800ab24:	440a      	add	r2, r1
 800ab26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab2e:	6053      	str	r3, [r2, #4]
          break;
 800ab30:	e01b      	b.n	800ab6a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	015a      	lsls	r2, r3, #5
 800ab36:	6a3b      	ldr	r3, [r7, #32]
 800ab38:	4413      	add	r3, r2
 800ab3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	69fa      	ldr	r2, [r7, #28]
 800ab42:	0151      	lsls	r1, r2, #5
 800ab44:	6a3a      	ldr	r2, [r7, #32]
 800ab46:	440a      	add	r2, r1
 800ab48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab50:	6053      	str	r3, [r2, #4]
          break;
 800ab52:	e00a      	b.n	800ab6a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	015a      	lsls	r2, r3, #5
 800ab58:	6a3b      	ldr	r3, [r7, #32]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab60:	461a      	mov	r2, r3
 800ab62:	2300      	movs	r3, #0
 800ab64:	6053      	str	r3, [r2, #4]
 800ab66:	e000      	b.n	800ab6a <USB_HC_StartXfer+0x3ea>
          break;
 800ab68:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ab6a:	69fb      	ldr	r3, [r7, #28]
 800ab6c:	015a      	lsls	r2, r3, #5
 800ab6e:	6a3b      	ldr	r3, [r7, #32]
 800ab70:	4413      	add	r3, r2
 800ab72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ab80:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	78db      	ldrb	r3, [r3, #3]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d004      	beq.n	800ab94 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab90:	613b      	str	r3, [r7, #16]
 800ab92:	e003      	b.n	800ab9c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ab9a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aba2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	015a      	lsls	r2, r3, #5
 800aba8:	6a3b      	ldr	r3, [r7, #32]
 800abaa:	4413      	add	r3, r2
 800abac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abb0:	461a      	mov	r2, r3
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800abb6:	79fb      	ldrb	r3, [r7, #7]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d003      	beq.n	800abc4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800abbc:	2300      	movs	r3, #0
 800abbe:	e055      	b.n	800ac6c <USB_HC_StartXfer+0x4ec>
 800abc0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	78db      	ldrb	r3, [r3, #3]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d14e      	bne.n	800ac6a <USB_HC_StartXfer+0x4ea>
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	6a1b      	ldr	r3, [r3, #32]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d04a      	beq.n	800ac6a <USB_HC_StartXfer+0x4ea>
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	79db      	ldrb	r3, [r3, #7]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d146      	bne.n	800ac6a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	7c9b      	ldrb	r3, [r3, #18]
 800abe0:	2b03      	cmp	r3, #3
 800abe2:	d831      	bhi.n	800ac48 <USB_HC_StartXfer+0x4c8>
 800abe4:	a201      	add	r2, pc, #4	; (adr r2, 800abec <USB_HC_StartXfer+0x46c>)
 800abe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abea:	bf00      	nop
 800abec:	0800abfd 	.word	0x0800abfd
 800abf0:	0800ac21 	.word	0x0800ac21
 800abf4:	0800abfd 	.word	0x0800abfd
 800abf8:	0800ac21 	.word	0x0800ac21
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	6a1b      	ldr	r3, [r3, #32]
 800ac00:	3303      	adds	r3, #3
 800ac02:	089b      	lsrs	r3, r3, #2
 800ac04:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800ac06:	8afa      	ldrh	r2, [r7, #22]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d91c      	bls.n	800ac4c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	699b      	ldr	r3, [r3, #24]
 800ac16:	f043 0220 	orr.w	r2, r3, #32
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	619a      	str	r2, [r3, #24]
        }
        break;
 800ac1e:	e015      	b.n	800ac4c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	6a1b      	ldr	r3, [r3, #32]
 800ac24:	3303      	adds	r3, #3
 800ac26:	089b      	lsrs	r3, r3, #2
 800ac28:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ac2a:	8afa      	ldrh	r2, [r7, #22]
 800ac2c:	6a3b      	ldr	r3, [r7, #32]
 800ac2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac32:	691b      	ldr	r3, [r3, #16]
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d90a      	bls.n	800ac50 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	699b      	ldr	r3, [r3, #24]
 800ac3e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	619a      	str	r2, [r3, #24]
        }
        break;
 800ac46:	e003      	b.n	800ac50 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800ac48:	bf00      	nop
 800ac4a:	e002      	b.n	800ac52 <USB_HC_StartXfer+0x4d2>
        break;
 800ac4c:	bf00      	nop
 800ac4e:	e000      	b.n	800ac52 <USB_HC_StartXfer+0x4d2>
        break;
 800ac50:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	6999      	ldr	r1, [r3, #24]
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	785a      	ldrb	r2, [r3, #1]
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	6a1b      	ldr	r3, [r3, #32]
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	2000      	movs	r0, #0
 800ac62:	9000      	str	r0, [sp, #0]
 800ac64:	68f8      	ldr	r0, [r7, #12]
 800ac66:	f7ff f9b4 	bl	8009fd2 <USB_WritePacket>
  }

  return HAL_OK;
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3728      	adds	r7, #40	; 0x28
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b085      	sub	sp, #20
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac86:	695b      	ldr	r3, [r3, #20]
 800ac88:	b29b      	uxth	r3, r3
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b089      	sub	sp, #36	; 0x24
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
 800ac9e:	460b      	mov	r3, r1
 800aca0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800aca6:	78fb      	ldrb	r3, [r7, #3]
 800aca8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800acaa:	2300      	movs	r3, #0
 800acac:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	015a      	lsls	r2, r3, #5
 800acb2:	69fb      	ldr	r3, [r7, #28]
 800acb4:	4413      	add	r3, r2
 800acb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	0c9b      	lsrs	r3, r3, #18
 800acbe:	f003 0303 	and.w	r3, r3, #3
 800acc2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	015a      	lsls	r2, r3, #5
 800acc8:	69fb      	ldr	r3, [r7, #28]
 800acca:	4413      	add	r3, r2
 800accc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	0fdb      	lsrs	r3, r3, #31
 800acd4:	f003 0301 	and.w	r3, r3, #1
 800acd8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	015a      	lsls	r2, r3, #5
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	4413      	add	r3, r2
 800ace2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	0fdb      	lsrs	r3, r3, #31
 800acea:	f003 0301 	and.w	r3, r3, #1
 800acee:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	f003 0320 	and.w	r3, r3, #32
 800acf8:	2b20      	cmp	r3, #32
 800acfa:	d10d      	bne.n	800ad18 <USB_HC_Halt+0x82>
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d10a      	bne.n	800ad18 <USB_HC_Halt+0x82>
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d005      	beq.n	800ad14 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d002      	beq.n	800ad14 <USB_HC_Halt+0x7e>
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	2b03      	cmp	r3, #3
 800ad12:	d101      	bne.n	800ad18 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800ad14:	2300      	movs	r3, #0
 800ad16:	e0d8      	b.n	800aeca <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d002      	beq.n	800ad24 <USB_HC_Halt+0x8e>
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	d173      	bne.n	800ae0c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ad24:	69bb      	ldr	r3, [r7, #24]
 800ad26:	015a      	lsls	r2, r3, #5
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	4413      	add	r3, r2
 800ad2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	69ba      	ldr	r2, [r7, #24]
 800ad34:	0151      	lsls	r1, r2, #5
 800ad36:	69fa      	ldr	r2, [r7, #28]
 800ad38:	440a      	add	r2, r1
 800ad3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad42:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	f003 0320 	and.w	r3, r3, #32
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d14a      	bne.n	800ade6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d133      	bne.n	800adc4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ad5c:	69bb      	ldr	r3, [r7, #24]
 800ad5e:	015a      	lsls	r2, r3, #5
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	4413      	add	r3, r2
 800ad64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	69ba      	ldr	r2, [r7, #24]
 800ad6c:	0151      	lsls	r1, r2, #5
 800ad6e:	69fa      	ldr	r2, [r7, #28]
 800ad70:	440a      	add	r2, r1
 800ad72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad7a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ad7c:	69bb      	ldr	r3, [r7, #24]
 800ad7e:	015a      	lsls	r2, r3, #5
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	4413      	add	r3, r2
 800ad84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	69ba      	ldr	r2, [r7, #24]
 800ad8c:	0151      	lsls	r1, r2, #5
 800ad8e:	69fa      	ldr	r2, [r7, #28]
 800ad90:	440a      	add	r2, r1
 800ad92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad9a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ada8:	d82e      	bhi.n	800ae08 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	015a      	lsls	r2, r3, #5
 800adae:	69fb      	ldr	r3, [r7, #28]
 800adb0:	4413      	add	r3, r2
 800adb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800adbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800adc0:	d0ec      	beq.n	800ad9c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800adc2:	e081      	b.n	800aec8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	015a      	lsls	r2, r3, #5
 800adc8:	69fb      	ldr	r3, [r7, #28]
 800adca:	4413      	add	r3, r2
 800adcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	69ba      	ldr	r2, [r7, #24]
 800add4:	0151      	lsls	r1, r2, #5
 800add6:	69fa      	ldr	r2, [r7, #28]
 800add8:	440a      	add	r2, r1
 800adda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800adde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ade2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ade4:	e070      	b.n	800aec8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	015a      	lsls	r2, r3, #5
 800adea:	69fb      	ldr	r3, [r7, #28]
 800adec:	4413      	add	r3, r2
 800adee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	69ba      	ldr	r2, [r7, #24]
 800adf6:	0151      	lsls	r1, r2, #5
 800adf8:	69fa      	ldr	r2, [r7, #28]
 800adfa:	440a      	add	r2, r1
 800adfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae04:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae06:	e05f      	b.n	800aec8 <USB_HC_Halt+0x232>
            break;
 800ae08:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae0a:	e05d      	b.n	800aec8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	015a      	lsls	r2, r3, #5
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	4413      	add	r3, r2
 800ae14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	69ba      	ldr	r2, [r7, #24]
 800ae1c:	0151      	lsls	r1, r2, #5
 800ae1e:	69fa      	ldr	r2, [r7, #28]
 800ae20:	440a      	add	r2, r1
 800ae22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae2a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae32:	691b      	ldr	r3, [r3, #16]
 800ae34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d133      	bne.n	800aea4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ae3c:	69bb      	ldr	r3, [r7, #24]
 800ae3e:	015a      	lsls	r2, r3, #5
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	4413      	add	r3, r2
 800ae44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	69ba      	ldr	r2, [r7, #24]
 800ae4c:	0151      	lsls	r1, r2, #5
 800ae4e:	69fa      	ldr	r2, [r7, #28]
 800ae50:	440a      	add	r2, r1
 800ae52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae5a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ae5c:	69bb      	ldr	r3, [r7, #24]
 800ae5e:	015a      	lsls	r2, r3, #5
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	4413      	add	r3, r2
 800ae64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	69ba      	ldr	r2, [r7, #24]
 800ae6c:	0151      	lsls	r1, r2, #5
 800ae6e:	69fa      	ldr	r2, [r7, #28]
 800ae70:	440a      	add	r2, r1
 800ae72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae7a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae88:	d81d      	bhi.n	800aec6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ae8a:	69bb      	ldr	r3, [r7, #24]
 800ae8c:	015a      	lsls	r2, r3, #5
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	4413      	add	r3, r2
 800ae92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aea0:	d0ec      	beq.n	800ae7c <USB_HC_Halt+0x1e6>
 800aea2:	e011      	b.n	800aec8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aea4:	69bb      	ldr	r3, [r7, #24]
 800aea6:	015a      	lsls	r2, r3, #5
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	4413      	add	r3, r2
 800aeac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	69ba      	ldr	r2, [r7, #24]
 800aeb4:	0151      	lsls	r1, r2, #5
 800aeb6:	69fa      	ldr	r2, [r7, #28]
 800aeb8:	440a      	add	r2, r1
 800aeba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aebe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aec2:	6013      	str	r3, [r2, #0]
 800aec4:	e000      	b.n	800aec8 <USB_HC_Halt+0x232>
          break;
 800aec6:	bf00      	nop
    }
  }

  return HAL_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3724      	adds	r7, #36	; 0x24
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
	...

0800aed8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b087      	sub	sp, #28
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	460b      	mov	r3, r1
 800aee2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800aee8:	78fb      	ldrb	r3, [r7, #3]
 800aeea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800aeec:	2301      	movs	r3, #1
 800aeee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	04da      	lsls	r2, r3, #19
 800aef4:	4b15      	ldr	r3, [pc, #84]	; (800af4c <USB_DoPing+0x74>)
 800aef6:	4013      	ands	r3, r2
 800aef8:	693a      	ldr	r2, [r7, #16]
 800aefa:	0151      	lsls	r1, r2, #5
 800aefc:	697a      	ldr	r2, [r7, #20]
 800aefe:	440a      	add	r2, r1
 800af00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af08:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	015a      	lsls	r2, r3, #5
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	4413      	add	r3, r2
 800af12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800af20:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af28:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	015a      	lsls	r2, r3, #5
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	4413      	add	r3, r2
 800af32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af36:	461a      	mov	r2, r3
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800af3c:	2300      	movs	r3, #0
}
 800af3e:	4618      	mov	r0, r3
 800af40:	371c      	adds	r7, #28
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr
 800af4a:	bf00      	nop
 800af4c:	1ff80000 	.word	0x1ff80000

0800af50 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b088      	sub	sp, #32
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800af58:	2300      	movs	r3, #0
 800af5a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800af60:	2300      	movs	r3, #0
 800af62:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f7fe fe00 	bl	8009b6a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800af6a:	2110      	movs	r1, #16
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f7fe ffb7 	bl	8009ee0 <USB_FlushTxFifo>
 800af72:	4603      	mov	r3, r0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d001      	beq.n	800af7c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800af78:	2301      	movs	r3, #1
 800af7a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f7fe ffe1 	bl	8009f44 <USB_FlushRxFifo>
 800af82:	4603      	mov	r3, r0
 800af84:	2b00      	cmp	r3, #0
 800af86:	d001      	beq.n	800af8c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800af88:	2301      	movs	r3, #1
 800af8a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800af8c:	2300      	movs	r3, #0
 800af8e:	61bb      	str	r3, [r7, #24]
 800af90:	e01f      	b.n	800afd2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	015a      	lsls	r2, r3, #5
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	4413      	add	r3, r2
 800af9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800afa8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800afb0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800afb8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	015a      	lsls	r2, r3, #5
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	4413      	add	r3, r2
 800afc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afc6:	461a      	mov	r2, r3
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	3301      	adds	r3, #1
 800afd0:	61bb      	str	r3, [r7, #24]
 800afd2:	69bb      	ldr	r3, [r7, #24]
 800afd4:	2b0f      	cmp	r3, #15
 800afd6:	d9dc      	bls.n	800af92 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800afd8:	2300      	movs	r3, #0
 800afda:	61bb      	str	r3, [r7, #24]
 800afdc:	e034      	b.n	800b048 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800afde:	69bb      	ldr	r3, [r7, #24]
 800afe0:	015a      	lsls	r2, r3, #5
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	4413      	add	r3, r2
 800afe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aff4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800affc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b004:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	015a      	lsls	r2, r3, #5
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	4413      	add	r3, r2
 800b00e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b012:	461a      	mov	r2, r3
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	3301      	adds	r3, #1
 800b01c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b024:	d80c      	bhi.n	800b040 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	015a      	lsls	r2, r3, #5
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	4413      	add	r3, r2
 800b02e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b038:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b03c:	d0ec      	beq.n	800b018 <USB_StopHost+0xc8>
 800b03e:	e000      	b.n	800b042 <USB_StopHost+0xf2>
        break;
 800b040:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b042:	69bb      	ldr	r3, [r7, #24]
 800b044:	3301      	adds	r3, #1
 800b046:	61bb      	str	r3, [r7, #24]
 800b048:	69bb      	ldr	r3, [r7, #24]
 800b04a:	2b0f      	cmp	r3, #15
 800b04c:	d9c7      	bls.n	800afde <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b054:	461a      	mov	r2, r3
 800b056:	f04f 33ff 	mov.w	r3, #4294967295
 800b05a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f04f 32ff 	mov.w	r2, #4294967295
 800b062:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f7fe fd6f 	bl	8009b48 <USB_EnableGlobalInt>

  return ret;
 800b06a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3720      	adds	r7, #32
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800b078:	4904      	ldr	r1, [pc, #16]	; (800b08c <MX_FATFS_Init+0x18>)
 800b07a:	4805      	ldr	r0, [pc, #20]	; (800b090 <MX_FATFS_Init+0x1c>)
 800b07c:	f003 fa00 	bl	800e480 <FATFS_LinkDriver>
 800b080:	4603      	mov	r3, r0
 800b082:	461a      	mov	r2, r3
 800b084:	4b03      	ldr	r3, [pc, #12]	; (800b094 <MX_FATFS_Init+0x20>)
 800b086:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b088:	bf00      	nop
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	20000918 	.word	0x20000918
 800b090:	08010de8 	.word	0x08010de8
 800b094:	20000914 	.word	0x20000914

0800b098 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	4603      	mov	r3, r0
 800b0a0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800b0a2:	2300      	movs	r3, #0
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	370c      	adds	r7, #12
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800b0be:	79fb      	ldrb	r3, [r7, #7]
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	4808      	ldr	r0, [pc, #32]	; (800b0e4 <USBH_status+0x34>)
 800b0c4:	f000 fe32 	bl	800bd2c <USBH_MSC_UnitIsReady>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d002      	beq.n	800b0d4 <USBH_status+0x24>
  {
    res = RES_OK;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	73fb      	strb	r3, [r7, #15]
 800b0d2:	e001      	b.n	800b0d8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800b0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3710      	adds	r7, #16
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	20000928 	.word	0x20000928

0800b0e8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b094      	sub	sp, #80	; 0x50
 800b0ec:	af02      	add	r7, sp, #8
 800b0ee:	60b9      	str	r1, [r7, #8]
 800b0f0:	607a      	str	r2, [r7, #4]
 800b0f2:	603b      	str	r3, [r7, #0]
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800b0fe:	7bf9      	ldrb	r1, [r7, #15]
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	4813      	ldr	r0, [pc, #76]	; (800b158 <USBH_read+0x70>)
 800b10a:	f000 fe59 	bl	800bdc0 <USBH_MSC_Read>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d103      	bne.n	800b11c <USBH_read+0x34>
  {
    res = RES_OK;
 800b114:	2300      	movs	r3, #0
 800b116:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b11a:	e017      	b.n	800b14c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800b11c:	f107 0210 	add.w	r2, r7, #16
 800b120:	7bfb      	ldrb	r3, [r7, #15]
 800b122:	4619      	mov	r1, r3
 800b124:	480c      	ldr	r0, [pc, #48]	; (800b158 <USBH_read+0x70>)
 800b126:	f000 fe27 	bl	800bd78 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800b12a:	7f7b      	ldrb	r3, [r7, #29]
 800b12c:	2b3a      	cmp	r3, #58	; 0x3a
 800b12e:	d005      	beq.n	800b13c <USBH_read+0x54>
 800b130:	2b3a      	cmp	r3, #58	; 0x3a
 800b132:	dc07      	bgt.n	800b144 <USBH_read+0x5c>
 800b134:	2b04      	cmp	r3, #4
 800b136:	d001      	beq.n	800b13c <USBH_read+0x54>
 800b138:	2b28      	cmp	r3, #40	; 0x28
 800b13a:	d103      	bne.n	800b144 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800b13c:	2303      	movs	r3, #3
 800b13e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b142:	e003      	b.n	800b14c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800b144:	2301      	movs	r3, #1
 800b146:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b14a:	bf00      	nop
    }
  }

  return res;
 800b14c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b150:	4618      	mov	r0, r3
 800b152:	3748      	adds	r7, #72	; 0x48
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}
 800b158:	20000928 	.word	0x20000928

0800b15c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b094      	sub	sp, #80	; 0x50
 800b160:	af02      	add	r7, sp, #8
 800b162:	60b9      	str	r1, [r7, #8]
 800b164:	607a      	str	r2, [r7, #4]
 800b166:	603b      	str	r3, [r7, #0]
 800b168:	4603      	mov	r3, r0
 800b16a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b16c:	2301      	movs	r3, #1
 800b16e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800b172:	7bf9      	ldrb	r1, [r7, #15]
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	9300      	str	r3, [sp, #0]
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	4817      	ldr	r0, [pc, #92]	; (800b1dc <USBH_write+0x80>)
 800b17e:	f000 fe88 	bl	800be92 <USBH_MSC_Write>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	d103      	bne.n	800b190 <USBH_write+0x34>
  {
    res = RES_OK;
 800b188:	2300      	movs	r3, #0
 800b18a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b18e:	e01f      	b.n	800b1d0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800b190:	f107 0210 	add.w	r2, r7, #16
 800b194:	7bfb      	ldrb	r3, [r7, #15]
 800b196:	4619      	mov	r1, r3
 800b198:	4810      	ldr	r0, [pc, #64]	; (800b1dc <USBH_write+0x80>)
 800b19a:	f000 fded 	bl	800bd78 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800b19e:	7f7b      	ldrb	r3, [r7, #29]
 800b1a0:	2b3a      	cmp	r3, #58	; 0x3a
 800b1a2:	d00d      	beq.n	800b1c0 <USBH_write+0x64>
 800b1a4:	2b3a      	cmp	r3, #58	; 0x3a
 800b1a6:	dc0f      	bgt.n	800b1c8 <USBH_write+0x6c>
 800b1a8:	2b28      	cmp	r3, #40	; 0x28
 800b1aa:	d009      	beq.n	800b1c0 <USBH_write+0x64>
 800b1ac:	2b28      	cmp	r3, #40	; 0x28
 800b1ae:	dc0b      	bgt.n	800b1c8 <USBH_write+0x6c>
 800b1b0:	2b04      	cmp	r3, #4
 800b1b2:	d005      	beq.n	800b1c0 <USBH_write+0x64>
 800b1b4:	2b27      	cmp	r3, #39	; 0x27
 800b1b6:	d107      	bne.n	800b1c8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800b1b8:	2302      	movs	r3, #2
 800b1ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b1be:	e007      	b.n	800b1d0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800b1c0:	2303      	movs	r3, #3
 800b1c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b1c6:	e003      	b.n	800b1d0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b1ce:	bf00      	nop
    }
  }

  return res;
 800b1d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3748      	adds	r7, #72	; 0x48
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	20000928 	.word	0x20000928

0800b1e0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b090      	sub	sp, #64	; 0x40
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	603a      	str	r2, [r7, #0]
 800b1ea:	71fb      	strb	r3, [r7, #7]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800b1f6:	79bb      	ldrb	r3, [r7, #6]
 800b1f8:	2b03      	cmp	r3, #3
 800b1fa:	d852      	bhi.n	800b2a2 <USBH_ioctl+0xc2>
 800b1fc:	a201      	add	r2, pc, #4	; (adr r2, 800b204 <USBH_ioctl+0x24>)
 800b1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b202:	bf00      	nop
 800b204:	0800b215 	.word	0x0800b215
 800b208:	0800b21d 	.word	0x0800b21d
 800b20c:	0800b247 	.word	0x0800b247
 800b210:	0800b273 	.word	0x0800b273
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800b214:	2300      	movs	r3, #0
 800b216:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b21a:	e045      	b.n	800b2a8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b21c:	f107 0208 	add.w	r2, r7, #8
 800b220:	79fb      	ldrb	r3, [r7, #7]
 800b222:	4619      	mov	r1, r3
 800b224:	4823      	ldr	r0, [pc, #140]	; (800b2b4 <USBH_ioctl+0xd4>)
 800b226:	f000 fda7 	bl	800bd78 <USBH_MSC_GetLUNInfo>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d106      	bne.n	800b23e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800b230:	68fa      	ldr	r2, [r7, #12]
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b236:	2300      	movs	r3, #0
 800b238:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b23c:	e034      	b.n	800b2a8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b244:	e030      	b.n	800b2a8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b246:	f107 0208 	add.w	r2, r7, #8
 800b24a:	79fb      	ldrb	r3, [r7, #7]
 800b24c:	4619      	mov	r1, r3
 800b24e:	4819      	ldr	r0, [pc, #100]	; (800b2b4 <USBH_ioctl+0xd4>)
 800b250:	f000 fd92 	bl	800bd78 <USBH_MSC_GetLUNInfo>
 800b254:	4603      	mov	r3, r0
 800b256:	2b00      	cmp	r3, #0
 800b258:	d107      	bne.n	800b26a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800b25a:	8a3b      	ldrh	r3, [r7, #16]
 800b25c:	461a      	mov	r2, r3
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b262:	2300      	movs	r3, #0
 800b264:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b268:	e01e      	b.n	800b2a8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b26a:	2301      	movs	r3, #1
 800b26c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b270:	e01a      	b.n	800b2a8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b272:	f107 0208 	add.w	r2, r7, #8
 800b276:	79fb      	ldrb	r3, [r7, #7]
 800b278:	4619      	mov	r1, r3
 800b27a:	480e      	ldr	r0, [pc, #56]	; (800b2b4 <USBH_ioctl+0xd4>)
 800b27c:	f000 fd7c 	bl	800bd78 <USBH_MSC_GetLUNInfo>
 800b280:	4603      	mov	r3, r0
 800b282:	2b00      	cmp	r3, #0
 800b284:	d109      	bne.n	800b29a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800b286:	8a3b      	ldrh	r3, [r7, #16]
 800b288:	0a5b      	lsrs	r3, r3, #9
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	461a      	mov	r2, r3
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b292:	2300      	movs	r3, #0
 800b294:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b298:	e006      	b.n	800b2a8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b2a0:	e002      	b.n	800b2a8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800b2a2:	2304      	movs	r3, #4
 800b2a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800b2a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3740      	adds	r7, #64	; 0x40
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	20000928 	.word	0x20000928

0800b2b8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b2b8:	b590      	push	{r4, r7, lr}
 800b2ba:	b089      	sub	sp, #36	; 0x24
 800b2bc:	af04      	add	r7, sp, #16
 800b2be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2c6:	7919      	ldrb	r1, [r3, #4]
 800b2c8:	2350      	movs	r3, #80	; 0x50
 800b2ca:	2206      	movs	r2, #6
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f001 fc8a 	bl	800cbe6 <USBH_FindInterface>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800b2d6:	7bfb      	ldrb	r3, [r7, #15]
 800b2d8:	2bff      	cmp	r3, #255	; 0xff
 800b2da:	d002      	beq.n	800b2e2 <USBH_MSC_InterfaceInit+0x2a>
 800b2dc:	7bfb      	ldrb	r3, [r7, #15]
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d901      	bls.n	800b2e6 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b2e2:	2302      	movs	r3, #2
 800b2e4:	e106      	b.n	800b4f4 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800b2e6:	7bfb      	ldrb	r3, [r7, #15]
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f001 fc5f 	bl	800cbae <USBH_SelectInterface>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b2f4:	7bbb      	ldrb	r3, [r7, #14]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d001      	beq.n	800b2fe <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800b2fa:	2302      	movs	r3, #2
 800b2fc:	e0fa      	b.n	800b4f4 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b304:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b308:	f004 fffa 	bl	8010300 <malloc>
 800b30c:	4603      	mov	r3, r0
 800b30e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b316:	69db      	ldr	r3, [r3, #28]
 800b318:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d101      	bne.n	800b324 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800b320:	2302      	movs	r3, #2
 800b322:	e0e7      	b.n	800b4f4 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800b324:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b328:	2100      	movs	r1, #0
 800b32a:	68b8      	ldr	r0, [r7, #8]
 800b32c:	f005 f8c4 	bl	80104b8 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b330:	7bfb      	ldrb	r3, [r7, #15]
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	211a      	movs	r1, #26
 800b336:	fb01 f303 	mul.w	r3, r1, r3
 800b33a:	4413      	add	r3, r2
 800b33c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	b25b      	sxtb	r3, r3
 800b344:	2b00      	cmp	r3, #0
 800b346:	da16      	bge.n	800b376 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b348:	7bfb      	ldrb	r3, [r7, #15]
 800b34a:	687a      	ldr	r2, [r7, #4]
 800b34c:	211a      	movs	r1, #26
 800b34e:	fb01 f303 	mul.w	r3, r1, r3
 800b352:	4413      	add	r3, r2
 800b354:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b358:	781a      	ldrb	r2, [r3, #0]
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b35e:	7bfb      	ldrb	r3, [r7, #15]
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	211a      	movs	r1, #26
 800b364:	fb01 f303 	mul.w	r3, r1, r3
 800b368:	4413      	add	r3, r2
 800b36a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b36e:	881a      	ldrh	r2, [r3, #0]
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	815a      	strh	r2, [r3, #10]
 800b374:	e015      	b.n	800b3a2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b376:	7bfb      	ldrb	r3, [r7, #15]
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	211a      	movs	r1, #26
 800b37c:	fb01 f303 	mul.w	r3, r1, r3
 800b380:	4413      	add	r3, r2
 800b382:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b386:	781a      	ldrb	r2, [r3, #0]
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b38c:	7bfb      	ldrb	r3, [r7, #15]
 800b38e:	687a      	ldr	r2, [r7, #4]
 800b390:	211a      	movs	r1, #26
 800b392:	fb01 f303 	mul.w	r3, r1, r3
 800b396:	4413      	add	r3, r2
 800b398:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b39c:	881a      	ldrh	r2, [r3, #0]
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800b3a2:	7bfb      	ldrb	r3, [r7, #15]
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	211a      	movs	r1, #26
 800b3a8:	fb01 f303 	mul.w	r3, r1, r3
 800b3ac:	4413      	add	r3, r2
 800b3ae:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	b25b      	sxtb	r3, r3
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	da16      	bge.n	800b3e8 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	211a      	movs	r1, #26
 800b3c0:	fb01 f303 	mul.w	r3, r1, r3
 800b3c4:	4413      	add	r3, r2
 800b3c6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b3ca:	781a      	ldrb	r2, [r3, #0]
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b3d0:	7bfb      	ldrb	r3, [r7, #15]
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	211a      	movs	r1, #26
 800b3d6:	fb01 f303 	mul.w	r3, r1, r3
 800b3da:	4413      	add	r3, r2
 800b3dc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b3e0:	881a      	ldrh	r2, [r3, #0]
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	815a      	strh	r2, [r3, #10]
 800b3e6:	e015      	b.n	800b414 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b3e8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	211a      	movs	r1, #26
 800b3ee:	fb01 f303 	mul.w	r3, r1, r3
 800b3f2:	4413      	add	r3, r2
 800b3f4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b3f8:	781a      	ldrb	r2, [r3, #0]
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b3fe:	7bfb      	ldrb	r3, [r7, #15]
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	211a      	movs	r1, #26
 800b404:	fb01 f303 	mul.w	r3, r1, r3
 800b408:	4413      	add	r3, r2
 800b40a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b40e:	881a      	ldrh	r2, [r3, #0]
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	2200      	movs	r2, #0
 800b418:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	2200      	movs	r2, #0
 800b41e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	2200      	movs	r2, #0
 800b424:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	799b      	ldrb	r3, [r3, #6]
 800b42a:	4619      	mov	r1, r3
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f002 ff78 	bl	800e322 <USBH_AllocPipe>
 800b432:	4603      	mov	r3, r0
 800b434:	461a      	mov	r2, r3
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	79db      	ldrb	r3, [r3, #7]
 800b43e:	4619      	mov	r1, r3
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f002 ff6e 	bl	800e322 <USBH_AllocPipe>
 800b446:	4603      	mov	r3, r0
 800b448:	461a      	mov	r2, r3
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 fdc4 	bl	800bfdc <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	799b      	ldrb	r3, [r3, #6]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d01e      	beq.n	800b49a <USBH_MSC_InterfaceInit+0x1e2>
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	891b      	ldrh	r3, [r3, #8]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d01a      	beq.n	800b49a <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	7959      	ldrb	r1, [r3, #5]
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	7998      	ldrb	r0, [r3, #6]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b478:	68ba      	ldr	r2, [r7, #8]
 800b47a:	8912      	ldrh	r2, [r2, #8]
 800b47c:	9202      	str	r2, [sp, #8]
 800b47e:	2202      	movs	r2, #2
 800b480:	9201      	str	r2, [sp, #4]
 800b482:	9300      	str	r3, [sp, #0]
 800b484:	4623      	mov	r3, r4
 800b486:	4602      	mov	r2, r0
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f002 ff1b 	bl	800e2c4 <USBH_OpenPipe>
 800b48e:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	79db      	ldrb	r3, [r3, #7]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d02c      	beq.n	800b4f2 <USBH_MSC_InterfaceInit+0x23a>
 800b498:	e001      	b.n	800b49e <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800b49a:	2303      	movs	r3, #3
 800b49c:	e02a      	b.n	800b4f4 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	895b      	ldrh	r3, [r3, #10]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d025      	beq.n	800b4f2 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	7919      	ldrb	r1, [r3, #4]
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	79d8      	ldrb	r0, [r3, #7]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b4ba:	68ba      	ldr	r2, [r7, #8]
 800b4bc:	8952      	ldrh	r2, [r2, #10]
 800b4be:	9202      	str	r2, [sp, #8]
 800b4c0:	2202      	movs	r2, #2
 800b4c2:	9201      	str	r2, [sp, #4]
 800b4c4:	9300      	str	r3, [sp, #0]
 800b4c6:	4623      	mov	r3, r4
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f002 fefa 	bl	800e2c4 <USBH_OpenPipe>
 800b4d0:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	791b      	ldrb	r3, [r3, #4]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	4619      	mov	r1, r3
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f003 fa63 	bl	800e9a6 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	795b      	ldrb	r3, [r3, #5]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f003 fa5c 	bl	800e9a6 <USBH_LL_SetToggle>

  return USBH_OK;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	e000      	b.n	800b4f4 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800b4f2:	2303      	movs	r3, #3
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3714      	adds	r7, #20
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd90      	pop	{r4, r7, pc}

0800b4fc <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b50a:	69db      	ldr	r3, [r3, #28]
 800b50c:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	795b      	ldrb	r3, [r3, #5]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d00e      	beq.n	800b534 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	795b      	ldrb	r3, [r3, #5]
 800b51a:	4619      	mov	r1, r3
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f002 fef0 	bl	800e302 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	795b      	ldrb	r3, [r3, #5]
 800b526:	4619      	mov	r1, r3
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f002 ff1b 	bl	800e364 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2200      	movs	r2, #0
 800b532:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	791b      	ldrb	r3, [r3, #4]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d00e      	beq.n	800b55a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	791b      	ldrb	r3, [r3, #4]
 800b540:	4619      	mov	r1, r3
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f002 fedd 	bl	800e302 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	791b      	ldrb	r3, [r3, #4]
 800b54c:	4619      	mov	r1, r3
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f002 ff08 	bl	800e364 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2200      	movs	r2, #0
 800b558:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b560:	69db      	ldr	r3, [r3, #28]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d00b      	beq.n	800b57e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b56c:	69db      	ldr	r3, [r3, #28]
 800b56e:	4618      	mov	r0, r3
 800b570:	f004 fece 	bl	8010310 <free>
    phost->pActiveClass->pData = 0U;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b57a:	2200      	movs	r2, #0
 800b57c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b57e:	2300      	movs	r3, #0
}
 800b580:	4618      	mov	r0, r3
 800b582:	3710      	adds	r7, #16
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b596:	69db      	ldr	r3, [r3, #28]
 800b598:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b59a:	2301      	movs	r3, #1
 800b59c:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	7b9b      	ldrb	r3, [r3, #14]
 800b5a2:	2b03      	cmp	r3, #3
 800b5a4:	d041      	beq.n	800b62a <USBH_MSC_ClassRequest+0xa2>
 800b5a6:	2b03      	cmp	r3, #3
 800b5a8:	dc4b      	bgt.n	800b642 <USBH_MSC_ClassRequest+0xba>
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d001      	beq.n	800b5b2 <USBH_MSC_ClassRequest+0x2a>
 800b5ae:	2b02      	cmp	r3, #2
 800b5b0:	d147      	bne.n	800b642 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 fcf1 	bl	800bf9e <USBH_MSC_BOT_REQ_GetMaxLUN>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
 800b5c2:	2b03      	cmp	r3, #3
 800b5c4:	d104      	bne.n	800b5d0 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800b5d0:	7bfb      	ldrb	r3, [r7, #15]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d137      	bne.n	800b646 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	2b02      	cmp	r3, #2
 800b5dc:	d804      	bhi.n	800b5e8 <USBH_MSC_ClassRequest+0x60>
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	b2da      	uxtb	r2, r3
 800b5e6:	e000      	b.n	800b5ea <USBH_MSC_ClassRequest+0x62>
 800b5e8:	2202      	movs	r2, #2
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	73bb      	strb	r3, [r7, #14]
 800b5f2:	e014      	b.n	800b61e <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800b5f4:	7bbb      	ldrb	r3, [r7, #14]
 800b5f6:	68ba      	ldr	r2, [r7, #8]
 800b5f8:	2134      	movs	r1, #52	; 0x34
 800b5fa:	fb01 f303 	mul.w	r3, r1, r3
 800b5fe:	4413      	add	r3, r2
 800b600:	3392      	adds	r3, #146	; 0x92
 800b602:	2202      	movs	r2, #2
 800b604:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800b606:	7bbb      	ldrb	r3, [r7, #14]
 800b608:	68ba      	ldr	r2, [r7, #8]
 800b60a:	2134      	movs	r1, #52	; 0x34
 800b60c:	fb01 f303 	mul.w	r3, r1, r3
 800b610:	4413      	add	r3, r2
 800b612:	33c1      	adds	r3, #193	; 0xc1
 800b614:	2200      	movs	r2, #0
 800b616:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b618:	7bbb      	ldrb	r3, [r7, #14]
 800b61a:	3301      	adds	r3, #1
 800b61c:	73bb      	strb	r3, [r7, #14]
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	7bba      	ldrb	r2, [r7, #14]
 800b624:	429a      	cmp	r2, r3
 800b626:	d3e5      	bcc.n	800b5f4 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800b628:	e00d      	b.n	800b646 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800b62a:	2100      	movs	r1, #0
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f002 f8bb 	bl	800d7a8 <USBH_ClrFeature>
 800b632:	4603      	mov	r3, r0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d108      	bne.n	800b64a <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	7bda      	ldrb	r2, [r3, #15]
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	739a      	strb	r2, [r3, #14]
      }
      break;
 800b640:	e003      	b.n	800b64a <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800b642:	bf00      	nop
 800b644:	e002      	b.n	800b64c <USBH_MSC_ClassRequest+0xc4>
      break;
 800b646:	bf00      	nop
 800b648:	e000      	b.n	800b64c <USBH_MSC_ClassRequest+0xc4>
      break;
 800b64a:	bf00      	nop
  }

  return status;
 800b64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
	...

0800b658 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b086      	sub	sp, #24
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b666:	69db      	ldr	r3, [r3, #28]
 800b668:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800b66a:	2301      	movs	r3, #1
 800b66c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800b66e:	2301      	movs	r3, #1
 800b670:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800b672:	2301      	movs	r3, #1
 800b674:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	7b1b      	ldrb	r3, [r3, #12]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d003      	beq.n	800b686 <USBH_MSC_Process+0x2e>
 800b67e:	2b01      	cmp	r3, #1
 800b680:	f000 8271 	beq.w	800bb66 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800b684:	e272      	b.n	800bb6c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	b29b      	uxth	r3, r3
 800b692:	429a      	cmp	r2, r3
 800b694:	f080 824f 	bcs.w	800bb36 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b69e:	4619      	mov	r1, r3
 800b6a0:	693a      	ldr	r2, [r7, #16]
 800b6a2:	2334      	movs	r3, #52	; 0x34
 800b6a4:	fb01 f303 	mul.w	r3, r1, r3
 800b6a8:	4413      	add	r3, r2
 800b6aa:	3391      	adds	r3, #145	; 0x91
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	693a      	ldr	r2, [r7, #16]
 800b6ba:	2334      	movs	r3, #52	; 0x34
 800b6bc:	fb01 f303 	mul.w	r3, r1, r3
 800b6c0:	4413      	add	r3, r2
 800b6c2:	3390      	adds	r3, #144	; 0x90
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	2b08      	cmp	r3, #8
 800b6c8:	f200 8243 	bhi.w	800bb52 <USBH_MSC_Process+0x4fa>
 800b6cc:	a201      	add	r2, pc, #4	; (adr r2, 800b6d4 <USBH_MSC_Process+0x7c>)
 800b6ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d2:	bf00      	nop
 800b6d4:	0800b6f9 	.word	0x0800b6f9
 800b6d8:	0800bb53 	.word	0x0800bb53
 800b6dc:	0800b7c1 	.word	0x0800b7c1
 800b6e0:	0800b945 	.word	0x0800b945
 800b6e4:	0800b71f 	.word	0x0800b71f
 800b6e8:	0800ba11 	.word	0x0800ba11
 800b6ec:	0800bb53 	.word	0x0800bb53
 800b6f0:	0800bb53 	.word	0x0800bb53
 800b6f4:	0800bb25 	.word	0x0800bb25
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6fe:	4619      	mov	r1, r3
 800b700:	693a      	ldr	r2, [r7, #16]
 800b702:	2334      	movs	r3, #52	; 0x34
 800b704:	fb01 f303 	mul.w	r3, r1, r3
 800b708:	4413      	add	r3, r2
 800b70a:	3390      	adds	r3, #144	; 0x90
 800b70c:	2204      	movs	r2, #4
 800b70e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800b71c:	e222      	b.n	800bb64 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b724:	b2d9      	uxtb	r1, r3
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b72c:	461a      	mov	r2, r3
 800b72e:	2334      	movs	r3, #52	; 0x34
 800b730:	fb02 f303 	mul.w	r3, r2, r3
 800b734:	3398      	adds	r3, #152	; 0x98
 800b736:	693a      	ldr	r2, [r7, #16]
 800b738:	4413      	add	r3, r2
 800b73a:	3307      	adds	r3, #7
 800b73c:	461a      	mov	r2, r3
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 ff6a 	bl	800c618 <USBH_MSC_SCSI_Inquiry>
 800b744:	4603      	mov	r3, r0
 800b746:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b748:	7bfb      	ldrb	r3, [r7, #15]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d10b      	bne.n	800b766 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b754:	4619      	mov	r1, r3
 800b756:	693a      	ldr	r2, [r7, #16]
 800b758:	2334      	movs	r3, #52	; 0x34
 800b75a:	fb01 f303 	mul.w	r3, r1, r3
 800b75e:	4413      	add	r3, r2
 800b760:	3390      	adds	r3, #144	; 0x90
 800b762:	2202      	movs	r2, #2
 800b764:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800b766:	7bfb      	ldrb	r3, [r7, #15]
 800b768:	2b02      	cmp	r3, #2
 800b76a:	d10c      	bne.n	800b786 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b772:	4619      	mov	r1, r3
 800b774:	693a      	ldr	r2, [r7, #16]
 800b776:	2334      	movs	r3, #52	; 0x34
 800b778:	fb01 f303 	mul.w	r3, r1, r3
 800b77c:	4413      	add	r3, r2
 800b77e:	3390      	adds	r3, #144	; 0x90
 800b780:	2205      	movs	r2, #5
 800b782:	701a      	strb	r2, [r3, #0]
            break;
 800b784:	e1e7      	b.n	800bb56 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b786:	7bfb      	ldrb	r3, [r7, #15]
 800b788:	2b04      	cmp	r3, #4
 800b78a:	f040 81e4 	bne.w	800bb56 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b794:	4619      	mov	r1, r3
 800b796:	693a      	ldr	r2, [r7, #16]
 800b798:	2334      	movs	r3, #52	; 0x34
 800b79a:	fb01 f303 	mul.w	r3, r1, r3
 800b79e:	4413      	add	r3, r2
 800b7a0:	3390      	adds	r3, #144	; 0x90
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	693a      	ldr	r2, [r7, #16]
 800b7b0:	2334      	movs	r3, #52	; 0x34
 800b7b2:	fb01 f303 	mul.w	r3, r1, r3
 800b7b6:	4413      	add	r3, r2
 800b7b8:	3391      	adds	r3, #145	; 0x91
 800b7ba:	2202      	movs	r2, #2
 800b7bc:	701a      	strb	r2, [r3, #0]
            break;
 800b7be:	e1ca      	b.n	800bb56 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 fe66 	bl	800c49c <USBH_MSC_SCSI_TestUnitReady>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800b7d4:	7bbb      	ldrb	r3, [r7, #14]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d149      	bne.n	800b86e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	693a      	ldr	r2, [r7, #16]
 800b7e4:	2334      	movs	r3, #52	; 0x34
 800b7e6:	fb01 f303 	mul.w	r3, r1, r3
 800b7ea:	4413      	add	r3, r2
 800b7ec:	3392      	adds	r3, #146	; 0x92
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d00c      	beq.n	800b80e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	693a      	ldr	r2, [r7, #16]
 800b7fe:	2334      	movs	r3, #52	; 0x34
 800b800:	fb01 f303 	mul.w	r3, r1, r3
 800b804:	4413      	add	r3, r2
 800b806:	33c1      	adds	r3, #193	; 0xc1
 800b808:	2201      	movs	r2, #1
 800b80a:	701a      	strb	r2, [r3, #0]
 800b80c:	e00b      	b.n	800b826 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b814:	4619      	mov	r1, r3
 800b816:	693a      	ldr	r2, [r7, #16]
 800b818:	2334      	movs	r3, #52	; 0x34
 800b81a:	fb01 f303 	mul.w	r3, r1, r3
 800b81e:	4413      	add	r3, r2
 800b820:	33c1      	adds	r3, #193	; 0xc1
 800b822:	2200      	movs	r2, #0
 800b824:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b82c:	4619      	mov	r1, r3
 800b82e:	693a      	ldr	r2, [r7, #16]
 800b830:	2334      	movs	r3, #52	; 0x34
 800b832:	fb01 f303 	mul.w	r3, r1, r3
 800b836:	4413      	add	r3, r2
 800b838:	3390      	adds	r3, #144	; 0x90
 800b83a:	2203      	movs	r2, #3
 800b83c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b844:	4619      	mov	r1, r3
 800b846:	693a      	ldr	r2, [r7, #16]
 800b848:	2334      	movs	r3, #52	; 0x34
 800b84a:	fb01 f303 	mul.w	r3, r1, r3
 800b84e:	4413      	add	r3, r2
 800b850:	3391      	adds	r3, #145	; 0x91
 800b852:	2200      	movs	r2, #0
 800b854:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b85c:	4619      	mov	r1, r3
 800b85e:	693a      	ldr	r2, [r7, #16]
 800b860:	2334      	movs	r3, #52	; 0x34
 800b862:	fb01 f303 	mul.w	r3, r1, r3
 800b866:	4413      	add	r3, r2
 800b868:	3392      	adds	r3, #146	; 0x92
 800b86a:	2200      	movs	r2, #0
 800b86c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800b86e:	7bbb      	ldrb	r3, [r7, #14]
 800b870:	2b02      	cmp	r3, #2
 800b872:	d14a      	bne.n	800b90a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b87a:	4619      	mov	r1, r3
 800b87c:	693a      	ldr	r2, [r7, #16]
 800b87e:	2334      	movs	r3, #52	; 0x34
 800b880:	fb01 f303 	mul.w	r3, r1, r3
 800b884:	4413      	add	r3, r2
 800b886:	3392      	adds	r3, #146	; 0x92
 800b888:	781b      	ldrb	r3, [r3, #0]
 800b88a:	2b02      	cmp	r3, #2
 800b88c:	d00c      	beq.n	800b8a8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b894:	4619      	mov	r1, r3
 800b896:	693a      	ldr	r2, [r7, #16]
 800b898:	2334      	movs	r3, #52	; 0x34
 800b89a:	fb01 f303 	mul.w	r3, r1, r3
 800b89e:	4413      	add	r3, r2
 800b8a0:	33c1      	adds	r3, #193	; 0xc1
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	701a      	strb	r2, [r3, #0]
 800b8a6:	e00b      	b.n	800b8c0 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	693a      	ldr	r2, [r7, #16]
 800b8b2:	2334      	movs	r3, #52	; 0x34
 800b8b4:	fb01 f303 	mul.w	r3, r1, r3
 800b8b8:	4413      	add	r3, r2
 800b8ba:	33c1      	adds	r3, #193	; 0xc1
 800b8bc:	2200      	movs	r2, #0
 800b8be:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	693a      	ldr	r2, [r7, #16]
 800b8ca:	2334      	movs	r3, #52	; 0x34
 800b8cc:	fb01 f303 	mul.w	r3, r1, r3
 800b8d0:	4413      	add	r3, r2
 800b8d2:	3390      	adds	r3, #144	; 0x90
 800b8d4:	2205      	movs	r2, #5
 800b8d6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b8de:	4619      	mov	r1, r3
 800b8e0:	693a      	ldr	r2, [r7, #16]
 800b8e2:	2334      	movs	r3, #52	; 0x34
 800b8e4:	fb01 f303 	mul.w	r3, r1, r3
 800b8e8:	4413      	add	r3, r2
 800b8ea:	3391      	adds	r3, #145	; 0x91
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	693a      	ldr	r2, [r7, #16]
 800b8fa:	2334      	movs	r3, #52	; 0x34
 800b8fc:	fb01 f303 	mul.w	r3, r1, r3
 800b900:	4413      	add	r3, r2
 800b902:	3392      	adds	r3, #146	; 0x92
 800b904:	2202      	movs	r2, #2
 800b906:	701a      	strb	r2, [r3, #0]
            break;
 800b908:	e127      	b.n	800bb5a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800b90a:	7bbb      	ldrb	r3, [r7, #14]
 800b90c:	2b04      	cmp	r3, #4
 800b90e:	f040 8124 	bne.w	800bb5a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b918:	4619      	mov	r1, r3
 800b91a:	693a      	ldr	r2, [r7, #16]
 800b91c:	2334      	movs	r3, #52	; 0x34
 800b91e:	fb01 f303 	mul.w	r3, r1, r3
 800b922:	4413      	add	r3, r2
 800b924:	3390      	adds	r3, #144	; 0x90
 800b926:	2201      	movs	r2, #1
 800b928:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b930:	4619      	mov	r1, r3
 800b932:	693a      	ldr	r2, [r7, #16]
 800b934:	2334      	movs	r3, #52	; 0x34
 800b936:	fb01 f303 	mul.w	r3, r1, r3
 800b93a:	4413      	add	r3, r2
 800b93c:	3391      	adds	r3, #145	; 0x91
 800b93e:	2202      	movs	r2, #2
 800b940:	701a      	strb	r2, [r3, #0]
            break;
 800b942:	e10a      	b.n	800bb5a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b94a:	b2d9      	uxtb	r1, r3
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b952:	461a      	mov	r2, r3
 800b954:	2334      	movs	r3, #52	; 0x34
 800b956:	fb02 f303 	mul.w	r3, r2, r3
 800b95a:	3390      	adds	r3, #144	; 0x90
 800b95c:	693a      	ldr	r2, [r7, #16]
 800b95e:	4413      	add	r3, r2
 800b960:	3304      	adds	r3, #4
 800b962:	461a      	mov	r2, r3
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 fddc 	bl	800c522 <USBH_MSC_SCSI_ReadCapacity>
 800b96a:	4603      	mov	r3, r0
 800b96c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b96e:	7bfb      	ldrb	r3, [r7, #15]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d120      	bne.n	800b9b6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b97a:	4619      	mov	r1, r3
 800b97c:	693a      	ldr	r2, [r7, #16]
 800b97e:	2334      	movs	r3, #52	; 0x34
 800b980:	fb01 f303 	mul.w	r3, r1, r3
 800b984:	4413      	add	r3, r2
 800b986:	3390      	adds	r3, #144	; 0x90
 800b988:	2201      	movs	r2, #1
 800b98a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b992:	4619      	mov	r1, r3
 800b994:	693a      	ldr	r2, [r7, #16]
 800b996:	2334      	movs	r3, #52	; 0x34
 800b998:	fb01 f303 	mul.w	r3, r1, r3
 800b99c:	4413      	add	r3, r2
 800b99e:	3391      	adds	r3, #145	; 0x91
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	b29a      	uxth	r2, r3
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b9b4:	e0d3      	b.n	800bb5e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800b9b6:	7bfb      	ldrb	r3, [r7, #15]
 800b9b8:	2b02      	cmp	r3, #2
 800b9ba:	d10c      	bne.n	800b9d6 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	693a      	ldr	r2, [r7, #16]
 800b9c6:	2334      	movs	r3, #52	; 0x34
 800b9c8:	fb01 f303 	mul.w	r3, r1, r3
 800b9cc:	4413      	add	r3, r2
 800b9ce:	3390      	adds	r3, #144	; 0x90
 800b9d0:	2205      	movs	r2, #5
 800b9d2:	701a      	strb	r2, [r3, #0]
            break;
 800b9d4:	e0c3      	b.n	800bb5e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b9d6:	7bfb      	ldrb	r3, [r7, #15]
 800b9d8:	2b04      	cmp	r3, #4
 800b9da:	f040 80c0 	bne.w	800bb5e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	693a      	ldr	r2, [r7, #16]
 800b9e8:	2334      	movs	r3, #52	; 0x34
 800b9ea:	fb01 f303 	mul.w	r3, r1, r3
 800b9ee:	4413      	add	r3, r2
 800b9f0:	3390      	adds	r3, #144	; 0x90
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	693a      	ldr	r2, [r7, #16]
 800ba00:	2334      	movs	r3, #52	; 0x34
 800ba02:	fb01 f303 	mul.w	r3, r1, r3
 800ba06:	4413      	add	r3, r2
 800ba08:	3391      	adds	r3, #145	; 0x91
 800ba0a:	2202      	movs	r2, #2
 800ba0c:	701a      	strb	r2, [r3, #0]
            break;
 800ba0e:	e0a6      	b.n	800bb5e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba16:	b2d9      	uxtb	r1, r3
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba1e:	461a      	mov	r2, r3
 800ba20:	2334      	movs	r3, #52	; 0x34
 800ba22:	fb02 f303 	mul.w	r3, r2, r3
 800ba26:	3398      	adds	r3, #152	; 0x98
 800ba28:	693a      	ldr	r2, [r7, #16]
 800ba2a:	4413      	add	r3, r2
 800ba2c:	3304      	adds	r3, #4
 800ba2e:	461a      	mov	r2, r3
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 fe96 	bl	800c762 <USBH_MSC_SCSI_RequestSense>
 800ba36:	4603      	mov	r3, r0
 800ba38:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800ba3a:	7bfb      	ldrb	r3, [r7, #15]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d145      	bne.n	800bacc <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba46:	4619      	mov	r1, r3
 800ba48:	693a      	ldr	r2, [r7, #16]
 800ba4a:	2334      	movs	r3, #52	; 0x34
 800ba4c:	fb01 f303 	mul.w	r3, r1, r3
 800ba50:	4413      	add	r3, r2
 800ba52:	339c      	adds	r3, #156	; 0x9c
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	2b06      	cmp	r3, #6
 800ba58:	d00c      	beq.n	800ba74 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba60:	4619      	mov	r1, r3
 800ba62:	693a      	ldr	r2, [r7, #16]
 800ba64:	2334      	movs	r3, #52	; 0x34
 800ba66:	fb01 f303 	mul.w	r3, r1, r3
 800ba6a:	4413      	add	r3, r2
 800ba6c:	339c      	adds	r3, #156	; 0x9c
 800ba6e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800ba70:	2b02      	cmp	r3, #2
 800ba72:	d117      	bne.n	800baa4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800ba80:	1ad3      	subs	r3, r2, r3
 800ba82:	f242 720f 	movw	r2, #9999	; 0x270f
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d80c      	bhi.n	800baa4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba90:	4619      	mov	r1, r3
 800ba92:	693a      	ldr	r2, [r7, #16]
 800ba94:	2334      	movs	r3, #52	; 0x34
 800ba96:	fb01 f303 	mul.w	r3, r1, r3
 800ba9a:	4413      	add	r3, r2
 800ba9c:	3390      	adds	r3, #144	; 0x90
 800ba9e:	2202      	movs	r2, #2
 800baa0:	701a      	strb	r2, [r3, #0]
                  break;
 800baa2:	e05f      	b.n	800bb64 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800baaa:	4619      	mov	r1, r3
 800baac:	693a      	ldr	r2, [r7, #16]
 800baae:	2334      	movs	r3, #52	; 0x34
 800bab0:	fb01 f303 	mul.w	r3, r1, r3
 800bab4:	4413      	add	r3, r2
 800bab6:	3390      	adds	r3, #144	; 0x90
 800bab8:	2201      	movs	r2, #1
 800baba:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bac2:	3301      	adds	r3, #1
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800bacc:	7bfb      	ldrb	r3, [r7, #15]
 800bace:	2b02      	cmp	r3, #2
 800bad0:	d10c      	bne.n	800baec <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bad8:	4619      	mov	r1, r3
 800bada:	693a      	ldr	r2, [r7, #16]
 800badc:	2334      	movs	r3, #52	; 0x34
 800bade:	fb01 f303 	mul.w	r3, r1, r3
 800bae2:	4413      	add	r3, r2
 800bae4:	3390      	adds	r3, #144	; 0x90
 800bae6:	2208      	movs	r2, #8
 800bae8:	701a      	strb	r2, [r3, #0]
            break;
 800baea:	e03a      	b.n	800bb62 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800baec:	7bfb      	ldrb	r3, [r7, #15]
 800baee:	2b04      	cmp	r3, #4
 800baf0:	d137      	bne.n	800bb62 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800baf8:	4619      	mov	r1, r3
 800bafa:	693a      	ldr	r2, [r7, #16]
 800bafc:	2334      	movs	r3, #52	; 0x34
 800bafe:	fb01 f303 	mul.w	r3, r1, r3
 800bb02:	4413      	add	r3, r2
 800bb04:	3390      	adds	r3, #144	; 0x90
 800bb06:	2201      	movs	r2, #1
 800bb08:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb10:	4619      	mov	r1, r3
 800bb12:	693a      	ldr	r2, [r7, #16]
 800bb14:	2334      	movs	r3, #52	; 0x34
 800bb16:	fb01 f303 	mul.w	r3, r1, r3
 800bb1a:	4413      	add	r3, r2
 800bb1c:	3391      	adds	r3, #145	; 0x91
 800bb1e:	2202      	movs	r2, #2
 800bb20:	701a      	strb	r2, [r3, #0]
            break;
 800bb22:	e01e      	b.n	800bb62 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	b29a      	uxth	r2, r3
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800bb34:	e016      	b.n	800bb64 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	2201      	movs	r2, #1
 800bb42:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bb4a:	2102      	movs	r1, #2
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	4798      	blx	r3
      break;
 800bb50:	e00c      	b.n	800bb6c <USBH_MSC_Process+0x514>
            break;
 800bb52:	bf00      	nop
 800bb54:	e00a      	b.n	800bb6c <USBH_MSC_Process+0x514>
            break;
 800bb56:	bf00      	nop
 800bb58:	e008      	b.n	800bb6c <USBH_MSC_Process+0x514>
            break;
 800bb5a:	bf00      	nop
 800bb5c:	e006      	b.n	800bb6c <USBH_MSC_Process+0x514>
            break;
 800bb5e:	bf00      	nop
 800bb60:	e004      	b.n	800bb6c <USBH_MSC_Process+0x514>
            break;
 800bb62:	bf00      	nop
      break;
 800bb64:	e002      	b.n	800bb6c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800bb66:	2300      	movs	r3, #0
 800bb68:	75fb      	strb	r3, [r7, #23]
      break;
 800bb6a:	bf00      	nop
  }
  return error;
 800bb6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3718      	adds	r7, #24
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop

0800bb78 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b083      	sub	sp, #12
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800bb80:	2300      	movs	r3, #0
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	370c      	adds	r7, #12
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr

0800bb8e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800bb8e:	b580      	push	{r7, lr}
 800bb90:	b088      	sub	sp, #32
 800bb92:	af02      	add	r7, sp, #8
 800bb94:	6078      	str	r0, [r7, #4]
 800bb96:	460b      	mov	r3, r1
 800bb98:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bba0:	69db      	ldr	r3, [r3, #28]
 800bba2:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800bba4:	2301      	movs	r3, #1
 800bba6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800bbac:	78fb      	ldrb	r3, [r7, #3]
 800bbae:	693a      	ldr	r2, [r7, #16]
 800bbb0:	2134      	movs	r1, #52	; 0x34
 800bbb2:	fb01 f303 	mul.w	r3, r1, r3
 800bbb6:	4413      	add	r3, r2
 800bbb8:	3390      	adds	r3, #144	; 0x90
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	2b07      	cmp	r3, #7
 800bbbe:	d03c      	beq.n	800bc3a <USBH_MSC_RdWrProcess+0xac>
 800bbc0:	2b07      	cmp	r3, #7
 800bbc2:	f300 80a7 	bgt.w	800bd14 <USBH_MSC_RdWrProcess+0x186>
 800bbc6:	2b05      	cmp	r3, #5
 800bbc8:	d06c      	beq.n	800bca4 <USBH_MSC_RdWrProcess+0x116>
 800bbca:	2b06      	cmp	r3, #6
 800bbcc:	f040 80a2 	bne.w	800bd14 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800bbd0:	78f9      	ldrb	r1, [r7, #3]
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	9300      	str	r3, [sp, #0]
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	2200      	movs	r2, #0
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 fea5 	bl	800c92a <USBH_MSC_SCSI_Read>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800bbe4:	7bfb      	ldrb	r3, [r7, #15]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d10b      	bne.n	800bc02 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800bbea:	78fb      	ldrb	r3, [r7, #3]
 800bbec:	693a      	ldr	r2, [r7, #16]
 800bbee:	2134      	movs	r1, #52	; 0x34
 800bbf0:	fb01 f303 	mul.w	r3, r1, r3
 800bbf4:	4413      	add	r3, r2
 800bbf6:	3390      	adds	r3, #144	; 0x90
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bc00:	e08a      	b.n	800bd18 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800bc02:	7bfb      	ldrb	r3, [r7, #15]
 800bc04:	2b02      	cmp	r3, #2
 800bc06:	d109      	bne.n	800bc1c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800bc08:	78fb      	ldrb	r3, [r7, #3]
 800bc0a:	693a      	ldr	r2, [r7, #16]
 800bc0c:	2134      	movs	r1, #52	; 0x34
 800bc0e:	fb01 f303 	mul.w	r3, r1, r3
 800bc12:	4413      	add	r3, r2
 800bc14:	3390      	adds	r3, #144	; 0x90
 800bc16:	2205      	movs	r2, #5
 800bc18:	701a      	strb	r2, [r3, #0]
      break;
 800bc1a:	e07d      	b.n	800bd18 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bc1c:	7bfb      	ldrb	r3, [r7, #15]
 800bc1e:	2b04      	cmp	r3, #4
 800bc20:	d17a      	bne.n	800bd18 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800bc22:	78fb      	ldrb	r3, [r7, #3]
 800bc24:	693a      	ldr	r2, [r7, #16]
 800bc26:	2134      	movs	r1, #52	; 0x34
 800bc28:	fb01 f303 	mul.w	r3, r1, r3
 800bc2c:	4413      	add	r3, r2
 800bc2e:	3390      	adds	r3, #144	; 0x90
 800bc30:	2208      	movs	r2, #8
 800bc32:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800bc34:	2302      	movs	r3, #2
 800bc36:	75fb      	strb	r3, [r7, #23]
      break;
 800bc38:	e06e      	b.n	800bd18 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800bc3a:	78f9      	ldrb	r1, [r7, #3]
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	2300      	movs	r3, #0
 800bc42:	2200      	movs	r2, #0
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 fe05 	bl	800c854 <USBH_MSC_SCSI_Write>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800bc4e:	7bfb      	ldrb	r3, [r7, #15]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d10b      	bne.n	800bc6c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800bc54:	78fb      	ldrb	r3, [r7, #3]
 800bc56:	693a      	ldr	r2, [r7, #16]
 800bc58:	2134      	movs	r1, #52	; 0x34
 800bc5a:	fb01 f303 	mul.w	r3, r1, r3
 800bc5e:	4413      	add	r3, r2
 800bc60:	3390      	adds	r3, #144	; 0x90
 800bc62:	2201      	movs	r2, #1
 800bc64:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800bc66:	2300      	movs	r3, #0
 800bc68:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bc6a:	e057      	b.n	800bd1c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800bc6c:	7bfb      	ldrb	r3, [r7, #15]
 800bc6e:	2b02      	cmp	r3, #2
 800bc70:	d109      	bne.n	800bc86 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800bc72:	78fb      	ldrb	r3, [r7, #3]
 800bc74:	693a      	ldr	r2, [r7, #16]
 800bc76:	2134      	movs	r1, #52	; 0x34
 800bc78:	fb01 f303 	mul.w	r3, r1, r3
 800bc7c:	4413      	add	r3, r2
 800bc7e:	3390      	adds	r3, #144	; 0x90
 800bc80:	2205      	movs	r2, #5
 800bc82:	701a      	strb	r2, [r3, #0]
      break;
 800bc84:	e04a      	b.n	800bd1c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bc86:	7bfb      	ldrb	r3, [r7, #15]
 800bc88:	2b04      	cmp	r3, #4
 800bc8a:	d147      	bne.n	800bd1c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800bc8c:	78fb      	ldrb	r3, [r7, #3]
 800bc8e:	693a      	ldr	r2, [r7, #16]
 800bc90:	2134      	movs	r1, #52	; 0x34
 800bc92:	fb01 f303 	mul.w	r3, r1, r3
 800bc96:	4413      	add	r3, r2
 800bc98:	3390      	adds	r3, #144	; 0x90
 800bc9a:	2208      	movs	r2, #8
 800bc9c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800bc9e:	2302      	movs	r3, #2
 800bca0:	75fb      	strb	r3, [r7, #23]
      break;
 800bca2:	e03b      	b.n	800bd1c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800bca4:	78fb      	ldrb	r3, [r7, #3]
 800bca6:	2234      	movs	r2, #52	; 0x34
 800bca8:	fb02 f303 	mul.w	r3, r2, r3
 800bcac:	3398      	adds	r3, #152	; 0x98
 800bcae:	693a      	ldr	r2, [r7, #16]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	1d1a      	adds	r2, r3, #4
 800bcb4:	78fb      	ldrb	r3, [r7, #3]
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f000 fd52 	bl	800c762 <USBH_MSC_SCSI_RequestSense>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800bcc2:	7bfb      	ldrb	r3, [r7, #15]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d113      	bne.n	800bcf0 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800bcc8:	78fb      	ldrb	r3, [r7, #3]
 800bcca:	693a      	ldr	r2, [r7, #16]
 800bccc:	2134      	movs	r1, #52	; 0x34
 800bcce:	fb01 f303 	mul.w	r3, r1, r3
 800bcd2:	4413      	add	r3, r2
 800bcd4:	3390      	adds	r3, #144	; 0x90
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800bcda:	78fb      	ldrb	r3, [r7, #3]
 800bcdc:	693a      	ldr	r2, [r7, #16]
 800bcde:	2134      	movs	r1, #52	; 0x34
 800bce0:	fb01 f303 	mul.w	r3, r1, r3
 800bce4:	4413      	add	r3, r2
 800bce6:	3391      	adds	r3, #145	; 0x91
 800bce8:	2202      	movs	r2, #2
 800bcea:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800bcec:	2302      	movs	r3, #2
 800bcee:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800bcf0:	7bfb      	ldrb	r3, [r7, #15]
 800bcf2:	2b02      	cmp	r3, #2
 800bcf4:	d014      	beq.n	800bd20 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bcf6:	7bfb      	ldrb	r3, [r7, #15]
 800bcf8:	2b04      	cmp	r3, #4
 800bcfa:	d111      	bne.n	800bd20 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800bcfc:	78fb      	ldrb	r3, [r7, #3]
 800bcfe:	693a      	ldr	r2, [r7, #16]
 800bd00:	2134      	movs	r1, #52	; 0x34
 800bd02:	fb01 f303 	mul.w	r3, r1, r3
 800bd06:	4413      	add	r3, r2
 800bd08:	3390      	adds	r3, #144	; 0x90
 800bd0a:	2208      	movs	r2, #8
 800bd0c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800bd0e:	2302      	movs	r3, #2
 800bd10:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bd12:	e005      	b.n	800bd20 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800bd14:	bf00      	nop
 800bd16:	e004      	b.n	800bd22 <USBH_MSC_RdWrProcess+0x194>
      break;
 800bd18:	bf00      	nop
 800bd1a:	e002      	b.n	800bd22 <USBH_MSC_RdWrProcess+0x194>
      break;
 800bd1c:	bf00      	nop
 800bd1e:	e000      	b.n	800bd22 <USBH_MSC_RdWrProcess+0x194>
      break;
 800bd20:	bf00      	nop

  }
  return error;
 800bd22:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3718      	adds	r7, #24
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b085      	sub	sp, #20
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	460b      	mov	r3, r1
 800bd36:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd3e:	69db      	ldr	r3, [r3, #28]
 800bd40:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	2b0b      	cmp	r3, #11
 800bd4a:	d10c      	bne.n	800bd66 <USBH_MSC_UnitIsReady+0x3a>
 800bd4c:	78fb      	ldrb	r3, [r7, #3]
 800bd4e:	68ba      	ldr	r2, [r7, #8]
 800bd50:	2134      	movs	r1, #52	; 0x34
 800bd52:	fb01 f303 	mul.w	r3, r1, r3
 800bd56:	4413      	add	r3, r2
 800bd58:	3391      	adds	r3, #145	; 0x91
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d102      	bne.n	800bd66 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800bd60:	2301      	movs	r3, #1
 800bd62:	73fb      	strb	r3, [r7, #15]
 800bd64:	e001      	b.n	800bd6a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800bd66:	2300      	movs	r3, #0
 800bd68:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800bd6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3714      	adds	r7, #20
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr

0800bd78 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b086      	sub	sp, #24
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	460b      	mov	r3, r1
 800bd82:	607a      	str	r2, [r7, #4]
 800bd84:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd8c:	69db      	ldr	r3, [r3, #28]
 800bd8e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	2b0b      	cmp	r3, #11
 800bd98:	d10d      	bne.n	800bdb6 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800bd9a:	7afb      	ldrb	r3, [r7, #11]
 800bd9c:	2234      	movs	r2, #52	; 0x34
 800bd9e:	fb02 f303 	mul.w	r3, r2, r3
 800bda2:	3390      	adds	r3, #144	; 0x90
 800bda4:	697a      	ldr	r2, [r7, #20]
 800bda6:	4413      	add	r3, r2
 800bda8:	2234      	movs	r2, #52	; 0x34
 800bdaa:	4619      	mov	r1, r3
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f004 fbc7 	bl	8010540 <memcpy>
    return USBH_OK;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	e000      	b.n	800bdb8 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800bdb6:	2302      	movs	r3, #2
  }
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3718      	adds	r7, #24
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b088      	sub	sp, #32
 800bdc4:	af02      	add	r7, sp, #8
 800bdc6:	60f8      	str	r0, [r7, #12]
 800bdc8:	607a      	str	r2, [r7, #4]
 800bdca:	603b      	str	r3, [r7, #0]
 800bdcc:	460b      	mov	r3, r1
 800bdce:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bdd6:	69db      	ldr	r3, [r3, #28]
 800bdd8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d00e      	beq.n	800be04 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800bdec:	2b0b      	cmp	r3, #11
 800bdee:	d109      	bne.n	800be04 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800bdf0:	7afb      	ldrb	r3, [r7, #11]
 800bdf2:	697a      	ldr	r2, [r7, #20]
 800bdf4:	2134      	movs	r1, #52	; 0x34
 800bdf6:	fb01 f303 	mul.w	r3, r1, r3
 800bdfa:	4413      	add	r3, r2
 800bdfc:	3390      	adds	r3, #144	; 0x90
 800bdfe:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800be00:	2b01      	cmp	r3, #1
 800be02:	d001      	beq.n	800be08 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800be04:	2302      	movs	r3, #2
 800be06:	e040      	b.n	800be8a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	2206      	movs	r2, #6
 800be0c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800be0e:	7afb      	ldrb	r3, [r7, #11]
 800be10:	697a      	ldr	r2, [r7, #20]
 800be12:	2134      	movs	r1, #52	; 0x34
 800be14:	fb01 f303 	mul.w	r3, r1, r3
 800be18:	4413      	add	r3, r2
 800be1a:	3390      	adds	r3, #144	; 0x90
 800be1c:	2206      	movs	r2, #6
 800be1e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800be20:	7afb      	ldrb	r3, [r7, #11]
 800be22:	b29a      	uxth	r2, r3
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800be2a:	7af9      	ldrb	r1, [r7, #11]
 800be2c:	6a3b      	ldr	r3, [r7, #32]
 800be2e:	9300      	str	r3, [sp, #0]
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	68f8      	ldr	r0, [r7, #12]
 800be36:	f000 fd78 	bl	800c92a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800be40:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800be42:	e016      	b.n	800be72 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	1ad2      	subs	r2, r2, r3
 800be4e:	6a3b      	ldr	r3, [r7, #32]
 800be50:	f242 7110 	movw	r1, #10000	; 0x2710
 800be54:	fb01 f303 	mul.w	r3, r1, r3
 800be58:	429a      	cmp	r2, r3
 800be5a:	d805      	bhi.n	800be68 <USBH_MSC_Read+0xa8>
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800be62:	b2db      	uxtb	r3, r3
 800be64:	2b00      	cmp	r3, #0
 800be66:	d104      	bne.n	800be72 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	2201      	movs	r2, #1
 800be6c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800be6e:	2302      	movs	r3, #2
 800be70:	e00b      	b.n	800be8a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800be72:	7afb      	ldrb	r3, [r7, #11]
 800be74:	4619      	mov	r1, r3
 800be76:	68f8      	ldr	r0, [r7, #12]
 800be78:	f7ff fe89 	bl	800bb8e <USBH_MSC_RdWrProcess>
 800be7c:	4603      	mov	r3, r0
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d0e0      	beq.n	800be44 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	2201      	movs	r2, #1
 800be86:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800be88:	2300      	movs	r3, #0
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3718      	adds	r7, #24
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}

0800be92 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800be92:	b580      	push	{r7, lr}
 800be94:	b088      	sub	sp, #32
 800be96:	af02      	add	r7, sp, #8
 800be98:	60f8      	str	r0, [r7, #12]
 800be9a:	607a      	str	r2, [r7, #4]
 800be9c:	603b      	str	r3, [r7, #0]
 800be9e:	460b      	mov	r3, r1
 800bea0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bea8:	69db      	ldr	r3, [r3, #28]
 800beaa:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d00e      	beq.n	800bed6 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800bebe:	2b0b      	cmp	r3, #11
 800bec0:	d109      	bne.n	800bed6 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800bec2:	7afb      	ldrb	r3, [r7, #11]
 800bec4:	697a      	ldr	r2, [r7, #20]
 800bec6:	2134      	movs	r1, #52	; 0x34
 800bec8:	fb01 f303 	mul.w	r3, r1, r3
 800becc:	4413      	add	r3, r2
 800bece:	3390      	adds	r3, #144	; 0x90
 800bed0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d001      	beq.n	800beda <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800bed6:	2302      	movs	r3, #2
 800bed8:	e040      	b.n	800bf5c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	2207      	movs	r2, #7
 800bede:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800bee0:	7afb      	ldrb	r3, [r7, #11]
 800bee2:	697a      	ldr	r2, [r7, #20]
 800bee4:	2134      	movs	r1, #52	; 0x34
 800bee6:	fb01 f303 	mul.w	r3, r1, r3
 800beea:	4413      	add	r3, r2
 800beec:	3390      	adds	r3, #144	; 0x90
 800beee:	2207      	movs	r2, #7
 800bef0:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800bef2:	7afb      	ldrb	r3, [r7, #11]
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800befc:	7af9      	ldrb	r1, [r7, #11]
 800befe:	6a3b      	ldr	r3, [r7, #32]
 800bf00:	9300      	str	r3, [sp, #0]
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	f000 fca4 	bl	800c854 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bf12:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bf14:	e016      	b.n	800bf44 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	1ad2      	subs	r2, r2, r3
 800bf20:	6a3b      	ldr	r3, [r7, #32]
 800bf22:	f242 7110 	movw	r1, #10000	; 0x2710
 800bf26:	fb01 f303 	mul.w	r3, r1, r3
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d805      	bhi.n	800bf3a <USBH_MSC_Write+0xa8>
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bf34:	b2db      	uxtb	r3, r3
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d104      	bne.n	800bf44 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800bf40:	2302      	movs	r3, #2
 800bf42:	e00b      	b.n	800bf5c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bf44:	7afb      	ldrb	r3, [r7, #11]
 800bf46:	4619      	mov	r1, r3
 800bf48:	68f8      	ldr	r0, [r7, #12]
 800bf4a:	f7ff fe20 	bl	800bb8e <USBH_MSC_RdWrProcess>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d0e0      	beq.n	800bf16 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	2201      	movs	r2, #1
 800bf58:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800bf5a:	2300      	movs	r3, #0
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3718      	adds	r7, #24
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2221      	movs	r2, #33	; 0x21
 800bf70:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	22ff      	movs	r2, #255	; 0xff
 800bf76:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2200      	movs	r2, #0
 800bf82:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	2100      	movs	r1, #0
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f001 ff46 	bl	800de20 <USBH_CtlReq>
 800bf94:	4603      	mov	r3, r0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3708      	adds	r7, #8
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}

0800bf9e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800bf9e:	b580      	push	{r7, lr}
 800bfa0:	b082      	sub	sp, #8
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
 800bfa6:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	22a1      	movs	r2, #161	; 0xa1
 800bfac:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	22fe      	movs	r2, #254	; 0xfe
 800bfb2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	6839      	ldr	r1, [r7, #0]
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f001 ff28 	bl	800de20 <USBH_CtlReq>
 800bfd0:	4603      	mov	r3, r0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3708      	adds	r7, #8
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
	...

0800bfdc <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bfea:	69db      	ldr	r3, [r3, #28]
 800bfec:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	4a09      	ldr	r2, [pc, #36]	; (800c018 <USBH_MSC_BOT_Init+0x3c>)
 800bff2:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	4a09      	ldr	r2, [pc, #36]	; (800c01c <USBH_MSC_BOT_Init+0x40>)
 800bff8:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2201      	movs	r2, #1
 800bffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2201      	movs	r2, #1
 800c006:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800c00a:	2300      	movs	r3, #0
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3714      	adds	r7, #20
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr
 800c018:	43425355 	.word	0x43425355
 800c01c:	20304050 	.word	0x20304050

0800c020 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b088      	sub	sp, #32
 800c024:	af02      	add	r7, sp, #8
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	460b      	mov	r3, r1
 800c02a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800c02c:	2301      	movs	r3, #1
 800c02e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800c030:	2301      	movs	r3, #1
 800c032:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800c034:	2301      	movs	r3, #1
 800c036:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c038:	2300      	movs	r3, #0
 800c03a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c042:	69db      	ldr	r3, [r3, #28]
 800c044:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800c046:	2300      	movs	r3, #0
 800c048:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c050:	3b01      	subs	r3, #1
 800c052:	2b0a      	cmp	r3, #10
 800c054:	f200 819e 	bhi.w	800c394 <USBH_MSC_BOT_Process+0x374>
 800c058:	a201      	add	r2, pc, #4	; (adr r2, 800c060 <USBH_MSC_BOT_Process+0x40>)
 800c05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05e:	bf00      	nop
 800c060:	0800c08d 	.word	0x0800c08d
 800c064:	0800c0b5 	.word	0x0800c0b5
 800c068:	0800c11f 	.word	0x0800c11f
 800c06c:	0800c13d 	.word	0x0800c13d
 800c070:	0800c1c1 	.word	0x0800c1c1
 800c074:	0800c1e3 	.word	0x0800c1e3
 800c078:	0800c27b 	.word	0x0800c27b
 800c07c:	0800c297 	.word	0x0800c297
 800c080:	0800c2e9 	.word	0x0800c2e9
 800c084:	0800c319 	.word	0x0800c319
 800c088:	0800c37b 	.word	0x0800c37b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	78fa      	ldrb	r2, [r7, #3]
 800c090:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	2202      	movs	r2, #2
 800c098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	795b      	ldrb	r3, [r3, #5]
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	9200      	str	r2, [sp, #0]
 800c0aa:	221f      	movs	r2, #31
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f002 f8c6 	bl	800e23e <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800c0b2:	e17e      	b.n	800c3b2 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	795b      	ldrb	r3, [r3, #5]
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f002 fc52 	bl	800e964 <USBH_LL_GetURBState>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c0c4:	7d3b      	ldrb	r3, [r7, #20]
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d118      	bne.n	800c0fc <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d00f      	beq.n	800c0f2 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800c0d8:	b25b      	sxtb	r3, r3
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	da04      	bge.n	800c0e8 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	2203      	movs	r2, #3
 800c0e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c0e6:	e157      	b.n	800c398 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	2205      	movs	r2, #5
 800c0ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c0f0:	e152      	b.n	800c398 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	2207      	movs	r2, #7
 800c0f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c0fa:	e14d      	b.n	800c398 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c0fc:	7d3b      	ldrb	r3, [r7, #20]
 800c0fe:	2b02      	cmp	r3, #2
 800c100:	d104      	bne.n	800c10c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	2201      	movs	r2, #1
 800c106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c10a:	e145      	b.n	800c398 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800c10c:	7d3b      	ldrb	r3, [r7, #20]
 800c10e:	2b05      	cmp	r3, #5
 800c110:	f040 8142 	bne.w	800c398 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	220a      	movs	r2, #10
 800c118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c11c:	e13c      	b.n	800c398 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	895a      	ldrh	r2, [r3, #10]
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	791b      	ldrb	r3, [r3, #4]
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f002 f8ab 	bl	800e288 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	2204      	movs	r2, #4
 800c136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800c13a:	e13a      	b.n	800c3b2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	791b      	ldrb	r3, [r3, #4]
 800c140:	4619      	mov	r1, r3
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f002 fc0e 	bl	800e964 <USBH_LL_GetURBState>
 800c148:	4603      	mov	r3, r0
 800c14a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c14c:	7d3b      	ldrb	r3, [r7, #20]
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d12d      	bne.n	800c1ae <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c156:	693a      	ldr	r2, [r7, #16]
 800c158:	8952      	ldrh	r2, [r2, #10]
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d910      	bls.n	800c180 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c164:	693a      	ldr	r2, [r7, #16]
 800c166:	8952      	ldrh	r2, [r2, #10]
 800c168:	441a      	add	r2, r3
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c174:	693a      	ldr	r2, [r7, #16]
 800c176:	8952      	ldrh	r2, [r2, #10]
 800c178:	1a9a      	subs	r2, r3, r2
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	65da      	str	r2, [r3, #92]	; 0x5c
 800c17e:	e002      	b.n	800c186 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	2200      	movs	r2, #0
 800c184:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d00a      	beq.n	800c1a4 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	895a      	ldrh	r2, [r3, #10]
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	791b      	ldrb	r3, [r3, #4]
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f002 f873 	bl	800e288 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800c1a2:	e0fb      	b.n	800c39c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	2207      	movs	r2, #7
 800c1a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c1ac:	e0f6      	b.n	800c39c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800c1ae:	7d3b      	ldrb	r3, [r7, #20]
 800c1b0:	2b05      	cmp	r3, #5
 800c1b2:	f040 80f3 	bne.w	800c39c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	2209      	movs	r2, #9
 800c1ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c1be:	e0ed      	b.n	800c39c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	891a      	ldrh	r2, [r3, #8]
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	795b      	ldrb	r3, [r3, #5]
 800c1ce:	2001      	movs	r0, #1
 800c1d0:	9000      	str	r0, [sp, #0]
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f002 f833 	bl	800e23e <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	2206      	movs	r2, #6
 800c1dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c1e0:	e0e7      	b.n	800c3b2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	795b      	ldrb	r3, [r3, #5]
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f002 fbbb 	bl	800e964 <USBH_LL_GetURBState>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c1f2:	7d3b      	ldrb	r3, [r7, #20]
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d12f      	bne.n	800c258 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1fc:	693a      	ldr	r2, [r7, #16]
 800c1fe:	8912      	ldrh	r2, [r2, #8]
 800c200:	4293      	cmp	r3, r2
 800c202:	d910      	bls.n	800c226 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c20a:	693a      	ldr	r2, [r7, #16]
 800c20c:	8912      	ldrh	r2, [r2, #8]
 800c20e:	441a      	add	r2, r3
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c21a:	693a      	ldr	r2, [r7, #16]
 800c21c:	8912      	ldrh	r2, [r2, #8]
 800c21e:	1a9a      	subs	r2, r3, r2
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	65da      	str	r2, [r3, #92]	; 0x5c
 800c224:	e002      	b.n	800c22c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	2200      	movs	r2, #0
 800c22a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c230:	2b00      	cmp	r3, #0
 800c232:	d00c      	beq.n	800c24e <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	891a      	ldrh	r2, [r3, #8]
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	795b      	ldrb	r3, [r3, #5]
 800c242:	2001      	movs	r0, #1
 800c244:	9000      	str	r0, [sp, #0]
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f001 fff9 	bl	800e23e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800c24c:	e0a8      	b.n	800c3a0 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	2207      	movs	r2, #7
 800c252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c256:	e0a3      	b.n	800c3a0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c258:	7d3b      	ldrb	r3, [r7, #20]
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	d104      	bne.n	800c268 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	2205      	movs	r2, #5
 800c262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c266:	e09b      	b.n	800c3a0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800c268:	7d3b      	ldrb	r3, [r7, #20]
 800c26a:	2b05      	cmp	r3, #5
 800c26c:	f040 8098 	bne.w	800c3a0 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	220a      	movs	r2, #10
 800c274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c278:	e092      	b.n	800c3a0 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	791b      	ldrb	r3, [r3, #4]
 800c284:	220d      	movs	r2, #13
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f001 fffe 	bl	800e288 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	2208      	movs	r2, #8
 800c290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c294:	e08d      	b.n	800c3b2 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	791b      	ldrb	r3, [r3, #4]
 800c29a:	4619      	mov	r1, r3
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f002 fb61 	bl	800e964 <USBH_LL_GetURBState>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800c2a6:	7d3b      	ldrb	r3, [r7, #20]
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d115      	bne.n	800c2d8 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 f8a9 	bl	800c414 <USBH_MSC_DecodeCSW>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800c2c6:	7d7b      	ldrb	r3, [r7, #21]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d102      	bne.n	800c2d2 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800c2d0:	e068      	b.n	800c3a4 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800c2d2:	2302      	movs	r3, #2
 800c2d4:	75fb      	strb	r3, [r7, #23]
      break;
 800c2d6:	e065      	b.n	800c3a4 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800c2d8:	7d3b      	ldrb	r3, [r7, #20]
 800c2da:	2b05      	cmp	r3, #5
 800c2dc:	d162      	bne.n	800c3a4 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	2209      	movs	r2, #9
 800c2e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c2e6:	e05d      	b.n	800c3a4 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800c2e8:	78fb      	ldrb	r3, [r7, #3]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 f864 	bl	800c3bc <USBH_MSC_BOT_Abort>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c2f8:	7dbb      	ldrb	r3, [r7, #22]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d104      	bne.n	800c308 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	2207      	movs	r2, #7
 800c302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800c306:	e04f      	b.n	800c3a8 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800c308:	7dbb      	ldrb	r3, [r7, #22]
 800c30a:	2b04      	cmp	r3, #4
 800c30c:	d14c      	bne.n	800c3a8 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	220b      	movs	r2, #11
 800c312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c316:	e047      	b.n	800c3a8 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800c318:	78fb      	ldrb	r3, [r7, #3]
 800c31a:	2201      	movs	r2, #1
 800c31c:	4619      	mov	r1, r3
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 f84c 	bl	800c3bc <USBH_MSC_BOT_Abort>
 800c324:	4603      	mov	r3, r0
 800c326:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c328:	7dbb      	ldrb	r3, [r7, #22]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d11d      	bne.n	800c36a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	795b      	ldrb	r3, [r3, #5]
 800c332:	4619      	mov	r1, r3
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f002 fb69 	bl	800ea0c <USBH_LL_GetToggle>
 800c33a:	4603      	mov	r3, r0
 800c33c:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	7959      	ldrb	r1, [r3, #5]
 800c342:	7bfb      	ldrb	r3, [r7, #15]
 800c344:	f1c3 0301 	rsb	r3, r3, #1
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	461a      	mov	r2, r3
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f002 fb2a 	bl	800e9a6 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	791b      	ldrb	r3, [r3, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	4619      	mov	r1, r3
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f002 fb23 	bl	800e9a6 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	2209      	movs	r2, #9
 800c364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800c368:	e020      	b.n	800c3ac <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800c36a:	7dbb      	ldrb	r3, [r7, #22]
 800c36c:	2b04      	cmp	r3, #4
 800c36e:	d11d      	bne.n	800c3ac <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	220b      	movs	r2, #11
 800c374:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c378:	e018      	b.n	800c3ac <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f7ff fdf2 	bl	800bf64 <USBH_MSC_BOT_REQ_Reset>
 800c380:	4603      	mov	r3, r0
 800c382:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800c384:	7dfb      	ldrb	r3, [r7, #23]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d112      	bne.n	800c3b0 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	2201      	movs	r2, #1
 800c38e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800c392:	e00d      	b.n	800c3b0 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800c394:	bf00      	nop
 800c396:	e00c      	b.n	800c3b2 <USBH_MSC_BOT_Process+0x392>
      break;
 800c398:	bf00      	nop
 800c39a:	e00a      	b.n	800c3b2 <USBH_MSC_BOT_Process+0x392>
      break;
 800c39c:	bf00      	nop
 800c39e:	e008      	b.n	800c3b2 <USBH_MSC_BOT_Process+0x392>
      break;
 800c3a0:	bf00      	nop
 800c3a2:	e006      	b.n	800c3b2 <USBH_MSC_BOT_Process+0x392>
      break;
 800c3a4:	bf00      	nop
 800c3a6:	e004      	b.n	800c3b2 <USBH_MSC_BOT_Process+0x392>
      break;
 800c3a8:	bf00      	nop
 800c3aa:	e002      	b.n	800c3b2 <USBH_MSC_BOT_Process+0x392>
      break;
 800c3ac:	bf00      	nop
 800c3ae:	e000      	b.n	800c3b2 <USBH_MSC_BOT_Process+0x392>
      break;
 800c3b0:	bf00      	nop
  }
  return status;
 800c3b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3718      	adds	r7, #24
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	70fb      	strb	r3, [r7, #3]
 800c3c8:	4613      	mov	r3, r2
 800c3ca:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800c3cc:	2302      	movs	r3, #2
 800c3ce:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c3d6:	69db      	ldr	r3, [r3, #28]
 800c3d8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800c3da:	78bb      	ldrb	r3, [r7, #2]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d002      	beq.n	800c3e6 <USBH_MSC_BOT_Abort+0x2a>
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d009      	beq.n	800c3f8 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800c3e4:	e011      	b.n	800c40a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	79db      	ldrb	r3, [r3, #7]
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f001 f9db 	bl	800d7a8 <USBH_ClrFeature>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	73fb      	strb	r3, [r7, #15]
      break;
 800c3f6:	e008      	b.n	800c40a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	799b      	ldrb	r3, [r3, #6]
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f001 f9d2 	bl	800d7a8 <USBH_ClrFeature>
 800c404:	4603      	mov	r3, r0
 800c406:	73fb      	strb	r3, [r7, #15]
      break;
 800c408:	bf00      	nop
  }
  return status;
 800c40a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3710      	adds	r7, #16
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c422:	69db      	ldr	r3, [r3, #28]
 800c424:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800c426:	2301      	movs	r3, #1
 800c428:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	791b      	ldrb	r3, [r3, #4]
 800c42e:	4619      	mov	r1, r3
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f002 fa05 	bl	800e840 <USBH_LL_GetLastXferSize>
 800c436:	4603      	mov	r3, r0
 800c438:	2b0d      	cmp	r3, #13
 800c43a:	d002      	beq.n	800c442 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800c43c:	2302      	movs	r3, #2
 800c43e:	73fb      	strb	r3, [r7, #15]
 800c440:	e024      	b.n	800c48c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c446:	4a14      	ldr	r2, [pc, #80]	; (800c498 <USBH_MSC_DecodeCSW+0x84>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d11d      	bne.n	800c488 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c454:	429a      	cmp	r2, r3
 800c456:	d119      	bne.n	800c48c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d102      	bne.n	800c468 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800c462:	2300      	movs	r3, #0
 800c464:	73fb      	strb	r3, [r7, #15]
 800c466:	e011      	b.n	800c48c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d102      	bne.n	800c478 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800c472:	2301      	movs	r3, #1
 800c474:	73fb      	strb	r3, [r7, #15]
 800c476:	e009      	b.n	800c48c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c47e:	2b02      	cmp	r3, #2
 800c480:	d104      	bne.n	800c48c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800c482:	2302      	movs	r3, #2
 800c484:	73fb      	strb	r3, [r7, #15]
 800c486:	e001      	b.n	800c48c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800c488:	2302      	movs	r3, #2
 800c48a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800c48c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3710      	adds	r7, #16
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	53425355 	.word	0x53425355

0800c49c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800c4a8:	2302      	movs	r3, #2
 800c4aa:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c4b2:	69db      	ldr	r3, [r3, #28]
 800c4b4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d002      	beq.n	800c4c6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800c4c0:	2b02      	cmp	r3, #2
 800c4c2:	d021      	beq.n	800c508 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c4c4:	e028      	b.n	800c518 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	220a      	movs	r2, #10
 800c4d8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	3363      	adds	r3, #99	; 0x63
 800c4e0:	2210      	movs	r2, #16
 800c4e2:	2100      	movs	r1, #0
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f003 ffe7 	bl	80104b8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	2202      	movs	r2, #2
 800c4fe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800c502:	2301      	movs	r3, #1
 800c504:	73fb      	strb	r3, [r7, #15]
      break;
 800c506:	e007      	b.n	800c518 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c508:	78fb      	ldrb	r3, [r7, #3]
 800c50a:	4619      	mov	r1, r3
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f7ff fd87 	bl	800c020 <USBH_MSC_BOT_Process>
 800c512:	4603      	mov	r3, r0
 800c514:	73fb      	strb	r3, [r7, #15]
      break;
 800c516:	bf00      	nop
  }

  return error;
 800c518:	7bfb      	ldrb	r3, [r7, #15]
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3710      	adds	r7, #16
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}

0800c522 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800c522:	b580      	push	{r7, lr}
 800c524:	b086      	sub	sp, #24
 800c526:	af00      	add	r7, sp, #0
 800c528:	60f8      	str	r0, [r7, #12]
 800c52a:	460b      	mov	r3, r1
 800c52c:	607a      	str	r2, [r7, #4]
 800c52e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY;
 800c530:	2301      	movs	r3, #1
 800c532:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c53a:	69db      	ldr	r3, [r3, #28]
 800c53c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c544:	2b01      	cmp	r3, #1
 800c546:	d002      	beq.n	800c54e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800c548:	2b02      	cmp	r3, #2
 800c54a:	d027      	beq.n	800c59c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800c54c:	e05f      	b.n	800c60e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	2208      	movs	r2, #8
 800c552:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	2280      	movs	r2, #128	; 0x80
 800c558:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	220a      	movs	r2, #10
 800c560:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	3363      	adds	r3, #99	; 0x63
 800c568:	2210      	movs	r2, #16
 800c56a:	2100      	movs	r1, #0
 800c56c:	4618      	mov	r0, r3
 800c56e:	f003 ffa3 	bl	80104b8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	2225      	movs	r2, #37	; 0x25
 800c576:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	2201      	movs	r2, #1
 800c57e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	2202      	movs	r2, #2
 800c586:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	f103 0210 	add.w	r2, r3, #16
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c596:	2301      	movs	r3, #1
 800c598:	75fb      	strb	r3, [r7, #23]
      break;
 800c59a:	e038      	b.n	800c60e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c59c:	7afb      	ldrb	r3, [r7, #11]
 800c59e:	4619      	mov	r1, r3
 800c5a0:	68f8      	ldr	r0, [r7, #12]
 800c5a2:	f7ff fd3d 	bl	800c020 <USBH_MSC_BOT_Process>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c5aa:	7dfb      	ldrb	r3, [r7, #23]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d12d      	bne.n	800c60c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5b6:	3303      	adds	r3, #3
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5c2:	3302      	adds	r3, #2
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	021b      	lsls	r3, r3, #8
 800c5c8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c5d6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	061b      	lsls	r3, r3, #24
 800c5e2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5ee:	3307      	adds	r3, #7
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	b29a      	uxth	r2, r3
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5fa:	3306      	adds	r3, #6
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	021b      	lsls	r3, r3, #8
 800c602:	b29b      	uxth	r3, r3
 800c604:	4313      	orrs	r3, r2
 800c606:	b29a      	uxth	r2, r3
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	809a      	strh	r2, [r3, #4]
      break;
 800c60c:	bf00      	nop
  }

  return error;
 800c60e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c610:	4618      	mov	r0, r3
 800c612:	3718      	adds	r7, #24
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}

0800c618 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b086      	sub	sp, #24
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	60f8      	str	r0, [r7, #12]
 800c620:	460b      	mov	r3, r1
 800c622:	607a      	str	r2, [r7, #4]
 800c624:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800c626:	2302      	movs	r3, #2
 800c628:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c630:	69db      	ldr	r3, [r3, #28]
 800c632:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	d002      	beq.n	800c644 <USBH_MSC_SCSI_Inquiry+0x2c>
 800c63e:	2b02      	cmp	r3, #2
 800c640:	d03d      	beq.n	800c6be <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800c642:	e089      	b.n	800c758 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	2224      	movs	r2, #36	; 0x24
 800c648:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	2280      	movs	r2, #128	; 0x80
 800c64e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	220a      	movs	r2, #10
 800c656:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	3363      	adds	r3, #99	; 0x63
 800c65e:	220a      	movs	r2, #10
 800c660:	2100      	movs	r1, #0
 800c662:	4618      	mov	r0, r3
 800c664:	f003 ff28 	bl	80104b8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	2212      	movs	r2, #18
 800c66c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c670:	7afb      	ldrb	r3, [r7, #11]
 800c672:	015b      	lsls	r3, r3, #5
 800c674:	b2da      	uxtb	r2, r3
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	2200      	movs	r2, #0
 800c680:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	2200      	movs	r2, #0
 800c688:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	2224      	movs	r2, #36	; 0x24
 800c690:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	2200      	movs	r2, #0
 800c698:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	2201      	movs	r2, #1
 800c6a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	2202      	movs	r2, #2
 800c6a8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	f103 0210 	add.w	r2, r3, #16
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	75fb      	strb	r3, [r7, #23]
      break;
 800c6bc:	e04c      	b.n	800c758 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c6be:	7afb      	ldrb	r3, [r7, #11]
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	68f8      	ldr	r0, [r7, #12]
 800c6c4:	f7ff fcac 	bl	800c020 <USBH_MSC_BOT_Process>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c6cc:	7dfb      	ldrb	r3, [r7, #23]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d141      	bne.n	800c756 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800c6d2:	2222      	movs	r2, #34	; 0x22
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f003 feee 	bl	80104b8 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	f003 031f 	and.w	r3, r3, #31
 800c6e8:	b2da      	uxtb	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6f4:	781b      	ldrb	r3, [r3, #0]
 800c6f6:	095b      	lsrs	r3, r3, #5
 800c6f8:	b2da      	uxtb	r2, r3
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c704:	3301      	adds	r3, #1
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	b25b      	sxtb	r3, r3
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	da03      	bge.n	800c716 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2201      	movs	r2, #1
 800c712:	709a      	strb	r2, [r3, #2]
 800c714:	e002      	b.n	800c71c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2200      	movs	r2, #0
 800c71a:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	1cd8      	adds	r0, r3, #3
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c726:	3308      	adds	r3, #8
 800c728:	2208      	movs	r2, #8
 800c72a:	4619      	mov	r1, r3
 800c72c:	f003 ff08 	bl	8010540 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f103 000c 	add.w	r0, r3, #12
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c73c:	3310      	adds	r3, #16
 800c73e:	2210      	movs	r2, #16
 800c740:	4619      	mov	r1, r3
 800c742:	f003 fefd 	bl	8010540 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	331d      	adds	r3, #29
 800c74a:	693a      	ldr	r2, [r7, #16]
 800c74c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800c750:	3220      	adds	r2, #32
 800c752:	6812      	ldr	r2, [r2, #0]
 800c754:	601a      	str	r2, [r3, #0]
      break;
 800c756:	bf00      	nop
  }

  return error;
 800c758:	7dfb      	ldrb	r3, [r7, #23]
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3718      	adds	r7, #24
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}

0800c762 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800c762:	b580      	push	{r7, lr}
 800c764:	b086      	sub	sp, #24
 800c766:	af00      	add	r7, sp, #0
 800c768:	60f8      	str	r0, [r7, #12]
 800c76a:	460b      	mov	r3, r1
 800c76c:	607a      	str	r2, [r7, #4]
 800c76e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800c770:	2302      	movs	r3, #2
 800c772:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c77a:	69db      	ldr	r3, [r3, #28]
 800c77c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c784:	2b01      	cmp	r3, #1
 800c786:	d002      	beq.n	800c78e <USBH_MSC_SCSI_RequestSense+0x2c>
 800c788:	2b02      	cmp	r3, #2
 800c78a:	d03d      	beq.n	800c808 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800c78c:	e05d      	b.n	800c84a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	220e      	movs	r2, #14
 800c792:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	2280      	movs	r2, #128	; 0x80
 800c798:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	220a      	movs	r2, #10
 800c7a0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	3363      	adds	r3, #99	; 0x63
 800c7a8:	2210      	movs	r2, #16
 800c7aa:	2100      	movs	r1, #0
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f003 fe83 	bl	80104b8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	2203      	movs	r2, #3
 800c7b6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c7ba:	7afb      	ldrb	r3, [r7, #11]
 800c7bc:	015b      	lsls	r3, r3, #5
 800c7be:	b2da      	uxtb	r2, r3
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	220e      	movs	r2, #14
 800c7da:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	2202      	movs	r2, #2
 800c7f2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	f103 0210 	add.w	r2, r3, #16
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c802:	2301      	movs	r3, #1
 800c804:	75fb      	strb	r3, [r7, #23]
      break;
 800c806:	e020      	b.n	800c84a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c808:	7afb      	ldrb	r3, [r7, #11]
 800c80a:	4619      	mov	r1, r3
 800c80c:	68f8      	ldr	r0, [r7, #12]
 800c80e:	f7ff fc07 	bl	800c020 <USBH_MSC_BOT_Process>
 800c812:	4603      	mov	r3, r0
 800c814:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c816:	7dfb      	ldrb	r3, [r7, #23]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d115      	bne.n	800c848 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c822:	3302      	adds	r3, #2
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	f003 030f 	and.w	r3, r3, #15
 800c82a:	b2da      	uxtb	r2, r3
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c836:	7b1a      	ldrb	r2, [r3, #12]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c842:	7b5a      	ldrb	r2, [r3, #13]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	709a      	strb	r2, [r3, #2]
      break;
 800c848:	bf00      	nop
  }

  return error;
 800c84a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3718      	adds	r7, #24
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}

0800c854 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b086      	sub	sp, #24
 800c858:	af00      	add	r7, sp, #0
 800c85a:	60f8      	str	r0, [r7, #12]
 800c85c:	607a      	str	r2, [r7, #4]
 800c85e:	603b      	str	r3, [r7, #0]
 800c860:	460b      	mov	r3, r1
 800c862:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800c864:	2302      	movs	r3, #2
 800c866:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c86e:	69db      	ldr	r3, [r3, #28]
 800c870:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c878:	2b01      	cmp	r3, #1
 800c87a:	d002      	beq.n	800c882 <USBH_MSC_SCSI_Write+0x2e>
 800c87c:	2b02      	cmp	r3, #2
 800c87e:	d047      	beq.n	800c910 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c880:	e04e      	b.n	800c920 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c888:	461a      	mov	r2, r3
 800c88a:	6a3b      	ldr	r3, [r7, #32]
 800c88c:	fb03 f202 	mul.w	r2, r3, r2
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	2200      	movs	r2, #0
 800c898:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	220a      	movs	r2, #10
 800c8a0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	3363      	adds	r3, #99	; 0x63
 800c8a8:	2210      	movs	r2, #16
 800c8aa:	2100      	movs	r1, #0
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f003 fe03 	bl	80104b8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	222a      	movs	r2, #42	; 0x2a
 800c8b6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c8ba:	79fa      	ldrb	r2, [r7, #7]
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c8c2:	79ba      	ldrb	r2, [r7, #6]
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c8ca:	797a      	ldrb	r2, [r7, #5]
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c8d2:	1d3b      	adds	r3, r7, #4
 800c8d4:	781a      	ldrb	r2, [r3, #0]
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 800c8dc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 800c8e6:	f107 0320 	add.w	r3, r7, #32
 800c8ea:	781a      	ldrb	r2, [r3, #0]
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	2202      	movs	r2, #2
 800c8fe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	683a      	ldr	r2, [r7, #0]
 800c906:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c90a:	2301      	movs	r3, #1
 800c90c:	75fb      	strb	r3, [r7, #23]
      break;
 800c90e:	e007      	b.n	800c920 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c910:	7afb      	ldrb	r3, [r7, #11]
 800c912:	4619      	mov	r1, r3
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f7ff fb83 	bl	800c020 <USBH_MSC_BOT_Process>
 800c91a:	4603      	mov	r3, r0
 800c91c:	75fb      	strb	r3, [r7, #23]
      break;
 800c91e:	bf00      	nop
  }

  return error;
 800c920:	7dfb      	ldrb	r3, [r7, #23]
}
 800c922:	4618      	mov	r0, r3
 800c924:	3718      	adds	r7, #24
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}

0800c92a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b086      	sub	sp, #24
 800c92e:	af00      	add	r7, sp, #0
 800c930:	60f8      	str	r0, [r7, #12]
 800c932:	607a      	str	r2, [r7, #4]
 800c934:	603b      	str	r3, [r7, #0]
 800c936:	460b      	mov	r3, r1
 800c938:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800c93a:	2302      	movs	r3, #2
 800c93c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c944:	69db      	ldr	r3, [r3, #28]
 800c946:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d002      	beq.n	800c958 <USBH_MSC_SCSI_Read+0x2e>
 800c952:	2b02      	cmp	r3, #2
 800c954:	d047      	beq.n	800c9e6 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c956:	e04e      	b.n	800c9f6 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c95e:	461a      	mov	r2, r3
 800c960:	6a3b      	ldr	r3, [r7, #32]
 800c962:	fb03 f202 	mul.w	r2, r3, r2
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	2280      	movs	r2, #128	; 0x80
 800c96e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	220a      	movs	r2, #10
 800c976:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	3363      	adds	r3, #99	; 0x63
 800c97e:	2210      	movs	r2, #16
 800c980:	2100      	movs	r1, #0
 800c982:	4618      	mov	r0, r3
 800c984:	f003 fd98 	bl	80104b8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	2228      	movs	r2, #40	; 0x28
 800c98c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c990:	79fa      	ldrb	r2, [r7, #7]
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c998:	79ba      	ldrb	r2, [r7, #6]
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c9a0:	797a      	ldrb	r2, [r7, #5]
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c9a8:	1d3b      	adds	r3, r7, #4
 800c9aa:	781a      	ldrb	r2, [r3, #0]
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 800c9b2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 800c9bc:	f107 0320 	add.w	r3, r7, #32
 800c9c0:	781a      	ldrb	r2, [r3, #0]
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	2202      	movs	r2, #2
 800c9d4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	683a      	ldr	r2, [r7, #0]
 800c9dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	75fb      	strb	r3, [r7, #23]
      break;
 800c9e4:	e007      	b.n	800c9f6 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c9e6:	7afb      	ldrb	r3, [r7, #11]
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	68f8      	ldr	r0, [r7, #12]
 800c9ec:	f7ff fb18 	bl	800c020 <USBH_MSC_BOT_Process>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	75fb      	strb	r3, [r7, #23]
      break;
 800c9f4:	bf00      	nop
  }

  return error;
 800c9f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3718      	adds	r7, #24
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	60f8      	str	r0, [r7, #12]
 800ca08:	60b9      	str	r1, [r7, #8]
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d101      	bne.n	800ca18 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ca14:	2302      	movs	r3, #2
 800ca16:	e029      	b.n	800ca6c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	79fa      	ldrb	r2, [r7, #7]
 800ca1c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2200      	movs	r2, #0
 800ca24:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ca30:	68f8      	ldr	r0, [r7, #12]
 800ca32:	f000 f81f 	bl	800ca74 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2200      	movs	r2, #0
 800ca42:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2200      	movs	r2, #0
 800ca52:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d003      	beq.n	800ca64 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	68ba      	ldr	r2, [r7, #8]
 800ca60:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	f001 fe37 	bl	800e6d8 <USBH_LL_Init>

  return USBH_OK;
 800ca6a:	2300      	movs	r3, #0
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3710      	adds	r7, #16
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b084      	sub	sp, #16
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ca80:	2300      	movs	r3, #0
 800ca82:	60fb      	str	r3, [r7, #12]
 800ca84:	e009      	b.n	800ca9a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ca86:	687a      	ldr	r2, [r7, #4]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	33e0      	adds	r3, #224	; 0xe0
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	4413      	add	r3, r2
 800ca90:	2200      	movs	r2, #0
 800ca92:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	3301      	adds	r3, #1
 800ca98:	60fb      	str	r3, [r7, #12]
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2b0f      	cmp	r3, #15
 800ca9e:	d9f2      	bls.n	800ca86 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800caa0:	2300      	movs	r3, #0
 800caa2:	60fb      	str	r3, [r7, #12]
 800caa4:	e009      	b.n	800caba <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800caa6:	687a      	ldr	r2, [r7, #4]
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	4413      	add	r3, r2
 800caac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cab0:	2200      	movs	r2, #0
 800cab2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	3301      	adds	r3, #1
 800cab8:	60fb      	str	r3, [r7, #12]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cac0:	d3f1      	bcc.n	800caa6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2200      	movs	r2, #0
 800cac6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2201      	movs	r2, #1
 800cad2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2200      	movs	r2, #0
 800cad8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2201      	movs	r2, #1
 800cae0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2240      	movs	r2, #64	; 0x40
 800cae6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2200      	movs	r2, #0
 800caec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2200      	movs	r2, #0
 800caf2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2201      	movs	r2, #1
 800cafa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2200      	movs	r2, #0
 800cb02:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	331c      	adds	r3, #28
 800cb12:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb16:	2100      	movs	r1, #0
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f003 fccd 	bl	80104b8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cb24:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb28:	2100      	movs	r1, #0
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f003 fcc4 	bl	80104b8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f203 3326 	addw	r3, r3, #806	; 0x326
 800cb36:	2212      	movs	r2, #18
 800cb38:	2100      	movs	r1, #0
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f003 fcbc 	bl	80104b8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800cb46:	223e      	movs	r2, #62	; 0x3e
 800cb48:	2100      	movs	r1, #0
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f003 fcb4 	bl	80104b8 <memset>

  return USBH_OK;
 800cb50:	2300      	movs	r3, #0
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}

0800cb5a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800cb5a:	b480      	push	{r7}
 800cb5c:	b085      	sub	sp, #20
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	6078      	str	r0, [r7, #4]
 800cb62:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800cb64:	2300      	movs	r3, #0
 800cb66:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d016      	beq.n	800cb9c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d10e      	bne.n	800cb96 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cb7e:	1c59      	adds	r1, r3, #1
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800cb86:	687a      	ldr	r2, [r7, #4]
 800cb88:	33de      	adds	r3, #222	; 0xde
 800cb8a:	6839      	ldr	r1, [r7, #0]
 800cb8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800cb90:	2300      	movs	r3, #0
 800cb92:	73fb      	strb	r3, [r7, #15]
 800cb94:	e004      	b.n	800cba0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800cb96:	2302      	movs	r3, #2
 800cb98:	73fb      	strb	r3, [r7, #15]
 800cb9a:	e001      	b.n	800cba0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800cb9c:	2302      	movs	r3, #2
 800cb9e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3714      	adds	r7, #20
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr

0800cbae <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800cbae:	b480      	push	{r7}
 800cbb0:	b085      	sub	sp, #20
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800cbc4:	78fa      	ldrb	r2, [r7, #3]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d204      	bcs.n	800cbd4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	78fa      	ldrb	r2, [r7, #3]
 800cbce:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800cbd2:	e001      	b.n	800cbd8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800cbd4:	2302      	movs	r3, #2
 800cbd6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cbd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3714      	adds	r7, #20
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe4:	4770      	bx	lr

0800cbe6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800cbe6:	b480      	push	{r7}
 800cbe8:	b087      	sub	sp, #28
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
 800cbee:	4608      	mov	r0, r1
 800cbf0:	4611      	mov	r1, r2
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	70fb      	strb	r3, [r7, #3]
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	70bb      	strb	r3, [r7, #2]
 800cbfc:	4613      	mov	r3, r2
 800cbfe:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800cc00:	2300      	movs	r3, #0
 800cc02:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800cc04:	2300      	movs	r3, #0
 800cc06:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800cc0e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cc10:	e025      	b.n	800cc5e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800cc12:	7dfb      	ldrb	r3, [r7, #23]
 800cc14:	221a      	movs	r2, #26
 800cc16:	fb02 f303 	mul.w	r3, r2, r3
 800cc1a:	3308      	adds	r3, #8
 800cc1c:	68fa      	ldr	r2, [r7, #12]
 800cc1e:	4413      	add	r3, r2
 800cc20:	3302      	adds	r3, #2
 800cc22:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	795b      	ldrb	r3, [r3, #5]
 800cc28:	78fa      	ldrb	r2, [r7, #3]
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d002      	beq.n	800cc34 <USBH_FindInterface+0x4e>
 800cc2e:	78fb      	ldrb	r3, [r7, #3]
 800cc30:	2bff      	cmp	r3, #255	; 0xff
 800cc32:	d111      	bne.n	800cc58 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cc38:	78ba      	ldrb	r2, [r7, #2]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d002      	beq.n	800cc44 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cc3e:	78bb      	ldrb	r3, [r7, #2]
 800cc40:	2bff      	cmp	r3, #255	; 0xff
 800cc42:	d109      	bne.n	800cc58 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cc48:	787a      	ldrb	r2, [r7, #1]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d002      	beq.n	800cc54 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cc4e:	787b      	ldrb	r3, [r7, #1]
 800cc50:	2bff      	cmp	r3, #255	; 0xff
 800cc52:	d101      	bne.n	800cc58 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800cc54:	7dfb      	ldrb	r3, [r7, #23]
 800cc56:	e006      	b.n	800cc66 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800cc58:	7dfb      	ldrb	r3, [r7, #23]
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cc5e:	7dfb      	ldrb	r3, [r7, #23]
 800cc60:	2b01      	cmp	r3, #1
 800cc62:	d9d6      	bls.n	800cc12 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800cc64:	23ff      	movs	r3, #255	; 0xff
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	371c      	adds	r7, #28
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr

0800cc72 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800cc72:	b580      	push	{r7, lr}
 800cc74:	b082      	sub	sp, #8
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f001 fd68 	bl	800e750 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800cc80:	2101      	movs	r1, #1
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f001 fe81 	bl	800e98a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800cc88:	2300      	movs	r3, #0
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3708      	adds	r7, #8
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
	...

0800cc94 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b088      	sub	sp, #32
 800cc98:	af04      	add	r7, sp, #16
 800cc9a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800cc9c:	2302      	movs	r3, #2
 800cc9e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800cca0:	2300      	movs	r3, #0
 800cca2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800ccaa:	b2db      	uxtb	r3, r3
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d102      	bne.n	800ccb6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2203      	movs	r2, #3
 800ccb4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	2b0b      	cmp	r3, #11
 800ccbe:	f200 81be 	bhi.w	800d03e <USBH_Process+0x3aa>
 800ccc2:	a201      	add	r2, pc, #4	; (adr r2, 800ccc8 <USBH_Process+0x34>)
 800ccc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc8:	0800ccf9 	.word	0x0800ccf9
 800cccc:	0800cd2b 	.word	0x0800cd2b
 800ccd0:	0800cd93 	.word	0x0800cd93
 800ccd4:	0800cfd9 	.word	0x0800cfd9
 800ccd8:	0800d03f 	.word	0x0800d03f
 800ccdc:	0800ce37 	.word	0x0800ce37
 800cce0:	0800cf7f 	.word	0x0800cf7f
 800cce4:	0800ce6d 	.word	0x0800ce6d
 800cce8:	0800ce8d 	.word	0x0800ce8d
 800ccec:	0800cead 	.word	0x0800cead
 800ccf0:	0800cef1 	.word	0x0800cef1
 800ccf4:	0800cfc1 	.word	0x0800cfc1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ccfe:	b2db      	uxtb	r3, r3
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	f000 819e 	beq.w	800d042 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2201      	movs	r2, #1
 800cd0a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800cd0c:	20c8      	movs	r0, #200	; 0xc8
 800cd0e:	f001 feb0 	bl	800ea72 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f001 fd79 	bl	800e80a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2200      	movs	r2, #0
 800cd24:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cd28:	e18b      	b.n	800d042 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	d107      	bne.n	800cd44 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2200      	movs	r2, #0
 800cd38:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2202      	movs	r2, #2
 800cd40:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cd42:	e18d      	b.n	800d060 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cd4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd4e:	d914      	bls.n	800cd7a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800cd56:	3301      	adds	r3, #1
 800cd58:	b2da      	uxtb	r2, r3
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800cd66:	2b03      	cmp	r3, #3
 800cd68:	d903      	bls.n	800cd72 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	220d      	movs	r2, #13
 800cd6e:	701a      	strb	r2, [r3, #0]
      break;
 800cd70:	e176      	b.n	800d060 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2200      	movs	r2, #0
 800cd76:	701a      	strb	r2, [r3, #0]
      break;
 800cd78:	e172      	b.n	800d060 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cd80:	f103 020a 	add.w	r2, r3, #10
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800cd8a:	200a      	movs	r0, #10
 800cd8c:	f001 fe71 	bl	800ea72 <USBH_Delay>
      break;
 800cd90:	e166      	b.n	800d060 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d005      	beq.n	800cda8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cda2:	2104      	movs	r1, #4
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800cda8:	2064      	movs	r0, #100	; 0x64
 800cdaa:	f001 fe62 	bl	800ea72 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f001 fd04 	bl	800e7bc <USBH_LL_GetSpeed>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2205      	movs	r2, #5
 800cdc2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800cdc4:	2100      	movs	r1, #0
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f001 faab 	bl	800e322 <USBH_AllocPipe>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	461a      	mov	r2, r3
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800cdd4:	2180      	movs	r1, #128	; 0x80
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f001 faa3 	bl	800e322 <USBH_AllocPipe>
 800cddc:	4603      	mov	r3, r0
 800cdde:	461a      	mov	r2, r3
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	7919      	ldrb	r1, [r3, #4]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cdf8:	b292      	uxth	r2, r2
 800cdfa:	9202      	str	r2, [sp, #8]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	9201      	str	r2, [sp, #4]
 800ce00:	9300      	str	r3, [sp, #0]
 800ce02:	4603      	mov	r3, r0
 800ce04:	2280      	movs	r2, #128	; 0x80
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f001 fa5c 	bl	800e2c4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	7959      	ldrb	r1, [r3, #5]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ce20:	b292      	uxth	r2, r2
 800ce22:	9202      	str	r2, [sp, #8]
 800ce24:	2200      	movs	r2, #0
 800ce26:	9201      	str	r2, [sp, #4]
 800ce28:	9300      	str	r3, [sp, #0]
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f001 fa48 	bl	800e2c4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ce34:	e114      	b.n	800d060 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f000 f918 	bl	800d06c <USBH_HandleEnum>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ce40:	7bbb      	ldrb	r3, [r7, #14]
 800ce42:	b2db      	uxtb	r3, r3
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	f040 80fe 	bne.w	800d046 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	d103      	bne.n	800ce64 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2208      	movs	r2, #8
 800ce60:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ce62:	e0f0      	b.n	800d046 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2207      	movs	r2, #7
 800ce68:	701a      	strb	r2, [r3, #0]
      break;
 800ce6a:	e0ec      	b.n	800d046 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	f000 80e9 	beq.w	800d04a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce7e:	2101      	movs	r1, #1
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2208      	movs	r2, #8
 800ce88:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800ce8a:	e0de      	b.n	800d04a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ce92:	b29b      	uxth	r3, r3
 800ce94:	4619      	mov	r1, r3
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 fc3f 	bl	800d71a <USBH_SetCfg>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	f040 80d5 	bne.w	800d04e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2209      	movs	r2, #9
 800cea8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ceaa:	e0d0      	b.n	800d04e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ceb2:	f003 0320 	and.w	r3, r3, #32
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d016      	beq.n	800cee8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800ceba:	2101      	movs	r1, #1
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f000 fc4f 	bl	800d760 <USBH_SetFeature>
 800cec2:	4603      	mov	r3, r0
 800cec4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cec6:	7bbb      	ldrb	r3, [r7, #14]
 800cec8:	b2db      	uxtb	r3, r3
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d103      	bne.n	800ced6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	220a      	movs	r2, #10
 800ced2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ced4:	e0bd      	b.n	800d052 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800ced6:	7bbb      	ldrb	r3, [r7, #14]
 800ced8:	b2db      	uxtb	r3, r3
 800ceda:	2b03      	cmp	r3, #3
 800cedc:	f040 80b9 	bne.w	800d052 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	220a      	movs	r2, #10
 800cee4:	701a      	strb	r2, [r3, #0]
      break;
 800cee6:	e0b4      	b.n	800d052 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	220a      	movs	r2, #10
 800ceec:	701a      	strb	r2, [r3, #0]
      break;
 800ceee:	e0b0      	b.n	800d052 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	f000 80ad 	beq.w	800d056 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2200      	movs	r2, #0
 800cf00:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cf04:	2300      	movs	r3, #0
 800cf06:	73fb      	strb	r3, [r7, #15]
 800cf08:	e016      	b.n	800cf38 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cf0a:	7bfa      	ldrb	r2, [r7, #15]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	32de      	adds	r2, #222	; 0xde
 800cf10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf14:	791a      	ldrb	r2, [r3, #4]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d108      	bne.n	800cf32 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800cf20:	7bfa      	ldrb	r2, [r7, #15]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	32de      	adds	r2, #222	; 0xde
 800cf26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800cf30:	e005      	b.n	800cf3e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cf32:	7bfb      	ldrb	r3, [r7, #15]
 800cf34:	3301      	adds	r3, #1
 800cf36:	73fb      	strb	r3, [r7, #15]
 800cf38:	7bfb      	ldrb	r3, [r7, #15]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d0e5      	beq.n	800cf0a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d016      	beq.n	800cf76 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf4e:	689b      	ldr	r3, [r3, #8]
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	4798      	blx	r3
 800cf54:	4603      	mov	r3, r0
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d109      	bne.n	800cf6e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2206      	movs	r2, #6
 800cf5e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cf66:	2103      	movs	r1, #3
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cf6c:	e073      	b.n	800d056 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	220d      	movs	r2, #13
 800cf72:	701a      	strb	r2, [r3, #0]
      break;
 800cf74:	e06f      	b.n	800d056 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	220d      	movs	r2, #13
 800cf7a:	701a      	strb	r2, [r3, #0]
      break;
 800cf7c:	e06b      	b.n	800d056 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d017      	beq.n	800cfb8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf8e:	691b      	ldr	r3, [r3, #16]
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	4798      	blx	r3
 800cf94:	4603      	mov	r3, r0
 800cf96:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cf98:	7bbb      	ldrb	r3, [r7, #14]
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d103      	bne.n	800cfa8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	220b      	movs	r2, #11
 800cfa4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cfa6:	e058      	b.n	800d05a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800cfa8:	7bbb      	ldrb	r3, [r7, #14]
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	2b02      	cmp	r3, #2
 800cfae:	d154      	bne.n	800d05a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	220d      	movs	r2, #13
 800cfb4:	701a      	strb	r2, [r3, #0]
      break;
 800cfb6:	e050      	b.n	800d05a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	220d      	movs	r2, #13
 800cfbc:	701a      	strb	r2, [r3, #0]
      break;
 800cfbe:	e04c      	b.n	800d05a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d049      	beq.n	800d05e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cfd0:	695b      	ldr	r3, [r3, #20]
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	4798      	blx	r3
      }
      break;
 800cfd6:	e042      	b.n	800d05e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f7ff fd47 	bl	800ca74 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d009      	beq.n	800d004 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2200      	movs	r2, #0
 800d000:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d005      	beq.n	800d01a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d014:	2105      	movs	r1, #5
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800d020:	b2db      	uxtb	r3, r3
 800d022:	2b01      	cmp	r3, #1
 800d024:	d107      	bne.n	800d036 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2200      	movs	r2, #0
 800d02a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f7ff fe1f 	bl	800cc72 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d034:	e014      	b.n	800d060 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f001 fb8a 	bl	800e750 <USBH_LL_Start>
      break;
 800d03c:	e010      	b.n	800d060 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800d03e:	bf00      	nop
 800d040:	e00e      	b.n	800d060 <USBH_Process+0x3cc>
      break;
 800d042:	bf00      	nop
 800d044:	e00c      	b.n	800d060 <USBH_Process+0x3cc>
      break;
 800d046:	bf00      	nop
 800d048:	e00a      	b.n	800d060 <USBH_Process+0x3cc>
    break;
 800d04a:	bf00      	nop
 800d04c:	e008      	b.n	800d060 <USBH_Process+0x3cc>
      break;
 800d04e:	bf00      	nop
 800d050:	e006      	b.n	800d060 <USBH_Process+0x3cc>
      break;
 800d052:	bf00      	nop
 800d054:	e004      	b.n	800d060 <USBH_Process+0x3cc>
      break;
 800d056:	bf00      	nop
 800d058:	e002      	b.n	800d060 <USBH_Process+0x3cc>
      break;
 800d05a:	bf00      	nop
 800d05c:	e000      	b.n	800d060 <USBH_Process+0x3cc>
      break;
 800d05e:	bf00      	nop
  }
  return USBH_OK;
 800d060:	2300      	movs	r3, #0
}
 800d062:	4618      	mov	r0, r3
 800d064:	3710      	adds	r7, #16
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	bf00      	nop

0800d06c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b088      	sub	sp, #32
 800d070:	af04      	add	r7, sp, #16
 800d072:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d074:	2301      	movs	r3, #1
 800d076:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d078:	2301      	movs	r3, #1
 800d07a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	785b      	ldrb	r3, [r3, #1]
 800d080:	2b07      	cmp	r3, #7
 800d082:	f200 81c1 	bhi.w	800d408 <USBH_HandleEnum+0x39c>
 800d086:	a201      	add	r2, pc, #4	; (adr r2, 800d08c <USBH_HandleEnum+0x20>)
 800d088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d08c:	0800d0ad 	.word	0x0800d0ad
 800d090:	0800d16b 	.word	0x0800d16b
 800d094:	0800d1d5 	.word	0x0800d1d5
 800d098:	0800d263 	.word	0x0800d263
 800d09c:	0800d2cd 	.word	0x0800d2cd
 800d0a0:	0800d33d 	.word	0x0800d33d
 800d0a4:	0800d383 	.word	0x0800d383
 800d0a8:	0800d3c9 	.word	0x0800d3c9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d0ac:	2108      	movs	r1, #8
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f000 fa50 	bl	800d554 <USBH_Get_DevDesc>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d0b8:	7bbb      	ldrb	r3, [r7, #14]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d130      	bne.n	800d120 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	7919      	ldrb	r1, [r3, #4]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d0e2:	b292      	uxth	r2, r2
 800d0e4:	9202      	str	r2, [sp, #8]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	9201      	str	r2, [sp, #4]
 800d0ea:	9300      	str	r3, [sp, #0]
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	2280      	movs	r2, #128	; 0x80
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f001 f8e7 	bl	800e2c4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	7959      	ldrb	r1, [r3, #5]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d106:	687a      	ldr	r2, [r7, #4]
 800d108:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d10a:	b292      	uxth	r2, r2
 800d10c:	9202      	str	r2, [sp, #8]
 800d10e:	2200      	movs	r2, #0
 800d110:	9201      	str	r2, [sp, #4]
 800d112:	9300      	str	r3, [sp, #0]
 800d114:	4603      	mov	r3, r0
 800d116:	2200      	movs	r2, #0
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f001 f8d3 	bl	800e2c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d11e:	e175      	b.n	800d40c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d120:	7bbb      	ldrb	r3, [r7, #14]
 800d122:	2b03      	cmp	r3, #3
 800d124:	f040 8172 	bne.w	800d40c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d12e:	3301      	adds	r3, #1
 800d130:	b2da      	uxtb	r2, r3
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d13e:	2b03      	cmp	r3, #3
 800d140:	d903      	bls.n	800d14a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	220d      	movs	r2, #13
 800d146:	701a      	strb	r2, [r3, #0]
      break;
 800d148:	e160      	b.n	800d40c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	795b      	ldrb	r3, [r3, #5]
 800d14e:	4619      	mov	r1, r3
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f001 f907 	bl	800e364 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	791b      	ldrb	r3, [r3, #4]
 800d15a:	4619      	mov	r1, r3
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f001 f901 	bl	800e364 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2200      	movs	r2, #0
 800d166:	701a      	strb	r2, [r3, #0]
      break;
 800d168:	e150      	b.n	800d40c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d16a:	2112      	movs	r1, #18
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f000 f9f1 	bl	800d554 <USBH_Get_DevDesc>
 800d172:	4603      	mov	r3, r0
 800d174:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d176:	7bbb      	ldrb	r3, [r7, #14]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d103      	bne.n	800d184 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2202      	movs	r2, #2
 800d180:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d182:	e145      	b.n	800d410 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d184:	7bbb      	ldrb	r3, [r7, #14]
 800d186:	2b03      	cmp	r3, #3
 800d188:	f040 8142 	bne.w	800d410 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d192:	3301      	adds	r3, #1
 800d194:	b2da      	uxtb	r2, r3
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d1a2:	2b03      	cmp	r3, #3
 800d1a4:	d903      	bls.n	800d1ae <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	220d      	movs	r2, #13
 800d1aa:	701a      	strb	r2, [r3, #0]
      break;
 800d1ac:	e130      	b.n	800d410 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	795b      	ldrb	r3, [r3, #5]
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f001 f8d5 	bl	800e364 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	791b      	ldrb	r3, [r3, #4]
 800d1be:	4619      	mov	r1, r3
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f001 f8cf 	bl	800e364 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	701a      	strb	r2, [r3, #0]
      break;
 800d1d2:	e11d      	b.n	800d410 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d1d4:	2101      	movs	r1, #1
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 fa7b 	bl	800d6d2 <USBH_SetAddress>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d1e0:	7bbb      	ldrb	r3, [r7, #14]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d132      	bne.n	800d24c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800d1e6:	2002      	movs	r0, #2
 800d1e8:	f001 fc43 	bl	800ea72 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2203      	movs	r2, #3
 800d1f8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	7919      	ldrb	r1, [r3, #4]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d20e:	b292      	uxth	r2, r2
 800d210:	9202      	str	r2, [sp, #8]
 800d212:	2200      	movs	r2, #0
 800d214:	9201      	str	r2, [sp, #4]
 800d216:	9300      	str	r3, [sp, #0]
 800d218:	4603      	mov	r3, r0
 800d21a:	2280      	movs	r2, #128	; 0x80
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f001 f851 	bl	800e2c4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	7959      	ldrb	r1, [r3, #5]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d236:	b292      	uxth	r2, r2
 800d238:	9202      	str	r2, [sp, #8]
 800d23a:	2200      	movs	r2, #0
 800d23c:	9201      	str	r2, [sp, #4]
 800d23e:	9300      	str	r3, [sp, #0]
 800d240:	4603      	mov	r3, r0
 800d242:	2200      	movs	r2, #0
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f001 f83d 	bl	800e2c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d24a:	e0e3      	b.n	800d414 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d24c:	7bbb      	ldrb	r3, [r7, #14]
 800d24e:	2b03      	cmp	r3, #3
 800d250:	f040 80e0 	bne.w	800d414 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	220d      	movs	r2, #13
 800d258:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2200      	movs	r2, #0
 800d25e:	705a      	strb	r2, [r3, #1]
      break;
 800d260:	e0d8      	b.n	800d414 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d262:	2109      	movs	r1, #9
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f000 f9a1 	bl	800d5ac <USBH_Get_CfgDesc>
 800d26a:	4603      	mov	r3, r0
 800d26c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d26e:	7bbb      	ldrb	r3, [r7, #14]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d103      	bne.n	800d27c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2204      	movs	r2, #4
 800d278:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d27a:	e0cd      	b.n	800d418 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d27c:	7bbb      	ldrb	r3, [r7, #14]
 800d27e:	2b03      	cmp	r3, #3
 800d280:	f040 80ca 	bne.w	800d418 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d28a:	3301      	adds	r3, #1
 800d28c:	b2da      	uxtb	r2, r3
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d29a:	2b03      	cmp	r3, #3
 800d29c:	d903      	bls.n	800d2a6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	220d      	movs	r2, #13
 800d2a2:	701a      	strb	r2, [r3, #0]
      break;
 800d2a4:	e0b8      	b.n	800d418 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	795b      	ldrb	r3, [r3, #5]
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f001 f859 	bl	800e364 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	791b      	ldrb	r3, [r3, #4]
 800d2b6:	4619      	mov	r1, r3
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f001 f853 	bl	800e364 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	701a      	strb	r2, [r3, #0]
      break;
 800d2ca:	e0a5      	b.n	800d418 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f000 f969 	bl	800d5ac <USBH_Get_CfgDesc>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d2de:	7bbb      	ldrb	r3, [r7, #14]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d103      	bne.n	800d2ec <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2205      	movs	r2, #5
 800d2e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d2ea:	e097      	b.n	800d41c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d2ec:	7bbb      	ldrb	r3, [r7, #14]
 800d2ee:	2b03      	cmp	r3, #3
 800d2f0:	f040 8094 	bne.w	800d41c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	b2da      	uxtb	r2, r3
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d30a:	2b03      	cmp	r3, #3
 800d30c:	d903      	bls.n	800d316 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	220d      	movs	r2, #13
 800d312:	701a      	strb	r2, [r3, #0]
      break;
 800d314:	e082      	b.n	800d41c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	795b      	ldrb	r3, [r3, #5]
 800d31a:	4619      	mov	r1, r3
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f001 f821 	bl	800e364 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	791b      	ldrb	r3, [r3, #4]
 800d326:	4619      	mov	r1, r3
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f001 f81b 	bl	800e364 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2200      	movs	r2, #0
 800d332:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2200      	movs	r2, #0
 800d338:	701a      	strb	r2, [r3, #0]
      break;
 800d33a:	e06f      	b.n	800d41c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d342:	2b00      	cmp	r3, #0
 800d344:	d019      	beq.n	800d37a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d352:	23ff      	movs	r3, #255	; 0xff
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f000 f953 	bl	800d600 <USBH_Get_StringDesc>
 800d35a:	4603      	mov	r3, r0
 800d35c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d35e:	7bbb      	ldrb	r3, [r7, #14]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d103      	bne.n	800d36c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2206      	movs	r2, #6
 800d368:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d36a:	e059      	b.n	800d420 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d36c:	7bbb      	ldrb	r3, [r7, #14]
 800d36e:	2b03      	cmp	r3, #3
 800d370:	d156      	bne.n	800d420 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2206      	movs	r2, #6
 800d376:	705a      	strb	r2, [r3, #1]
      break;
 800d378:	e052      	b.n	800d420 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2206      	movs	r2, #6
 800d37e:	705a      	strb	r2, [r3, #1]
      break;
 800d380:	e04e      	b.n	800d420 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d019      	beq.n	800d3c0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d398:	23ff      	movs	r3, #255	; 0xff
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f000 f930 	bl	800d600 <USBH_Get_StringDesc>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d3a4:	7bbb      	ldrb	r3, [r7, #14]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d103      	bne.n	800d3b2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2207      	movs	r2, #7
 800d3ae:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d3b0:	e038      	b.n	800d424 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d3b2:	7bbb      	ldrb	r3, [r7, #14]
 800d3b4:	2b03      	cmp	r3, #3
 800d3b6:	d135      	bne.n	800d424 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2207      	movs	r2, #7
 800d3bc:	705a      	strb	r2, [r3, #1]
      break;
 800d3be:	e031      	b.n	800d424 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2207      	movs	r2, #7
 800d3c4:	705a      	strb	r2, [r3, #1]
      break;
 800d3c6:	e02d      	b.n	800d424 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d017      	beq.n	800d402 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d3de:	23ff      	movs	r3, #255	; 0xff
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f000 f90d 	bl	800d600 <USBH_Get_StringDesc>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d3ea:	7bbb      	ldrb	r3, [r7, #14]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d102      	bne.n	800d3f6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d3f4:	e018      	b.n	800d428 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d3f6:	7bbb      	ldrb	r3, [r7, #14]
 800d3f8:	2b03      	cmp	r3, #3
 800d3fa:	d115      	bne.n	800d428 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	73fb      	strb	r3, [r7, #15]
      break;
 800d400:	e012      	b.n	800d428 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800d402:	2300      	movs	r3, #0
 800d404:	73fb      	strb	r3, [r7, #15]
      break;
 800d406:	e00f      	b.n	800d428 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800d408:	bf00      	nop
 800d40a:	e00e      	b.n	800d42a <USBH_HandleEnum+0x3be>
      break;
 800d40c:	bf00      	nop
 800d40e:	e00c      	b.n	800d42a <USBH_HandleEnum+0x3be>
      break;
 800d410:	bf00      	nop
 800d412:	e00a      	b.n	800d42a <USBH_HandleEnum+0x3be>
      break;
 800d414:	bf00      	nop
 800d416:	e008      	b.n	800d42a <USBH_HandleEnum+0x3be>
      break;
 800d418:	bf00      	nop
 800d41a:	e006      	b.n	800d42a <USBH_HandleEnum+0x3be>
      break;
 800d41c:	bf00      	nop
 800d41e:	e004      	b.n	800d42a <USBH_HandleEnum+0x3be>
      break;
 800d420:	bf00      	nop
 800d422:	e002      	b.n	800d42a <USBH_HandleEnum+0x3be>
      break;
 800d424:	bf00      	nop
 800d426:	e000      	b.n	800d42a <USBH_HandleEnum+0x3be>
      break;
 800d428:	bf00      	nop
  }
  return Status;
 800d42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3710      	adds	r7, #16
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d434:	b480      	push	{r7}
 800d436:	b083      	sub	sp, #12
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	683a      	ldr	r2, [r7, #0]
 800d442:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d446:	bf00      	nop
 800d448:	370c      	adds	r7, #12
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr

0800d452 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d452:	b580      	push	{r7, lr}
 800d454:	b082      	sub	sp, #8
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d460:	1c5a      	adds	r2, r3, #1
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f000 f804 	bl	800d476 <USBH_HandleSof>
}
 800d46e:	bf00      	nop
 800d470:	3708      	adds	r7, #8
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}

0800d476 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d476:	b580      	push	{r7, lr}
 800d478:	b082      	sub	sp, #8
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	b2db      	uxtb	r3, r3
 800d484:	2b0b      	cmp	r3, #11
 800d486:	d10a      	bne.n	800d49e <USBH_HandleSof+0x28>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d005      	beq.n	800d49e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d498:	699b      	ldr	r3, [r3, #24]
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	4798      	blx	r3
  }
}
 800d49e:	bf00      	nop
 800d4a0:	3708      	adds	r7, #8
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}

0800d4a6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d4a6:	b480      	push	{r7}
 800d4a8:	b083      	sub	sp, #12
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800d4b6:	bf00      	nop
}
 800d4b8:	370c      	adds	r7, #12
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr

0800d4c2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d4c2:	b480      	push	{r7}
 800d4c4:	b083      	sub	sp, #12
 800d4c6:	af00      	add	r7, sp, #0
 800d4c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d4d2:	bf00      	nop
}
 800d4d4:	370c      	adds	r7, #12
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4dc:	4770      	bx	lr

0800d4de <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d4de:	b480      	push	{r7}
 800d4e0:	b083      	sub	sp, #12
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d4fe:	2300      	movs	r3, #0
}
 800d500:	4618      	mov	r0, r3
 800d502:	370c      	adds	r7, #12
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr

0800d50c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2201      	movs	r2, #1
 800d518:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2200      	movs	r2, #0
 800d520:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2200      	movs	r2, #0
 800d528:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f001 f92a 	bl	800e786 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	791b      	ldrb	r3, [r3, #4]
 800d536:	4619      	mov	r1, r3
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f000 ff13 	bl	800e364 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	795b      	ldrb	r3, [r3, #5]
 800d542:	4619      	mov	r1, r3
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f000 ff0d 	bl	800e364 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d54a:	2300      	movs	r3, #0
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3708      	adds	r7, #8
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b086      	sub	sp, #24
 800d558:	af02      	add	r7, sp, #8
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	460b      	mov	r3, r1
 800d55e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800d560:	887b      	ldrh	r3, [r7, #2]
 800d562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d566:	d901      	bls.n	800d56c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d568:	2303      	movs	r3, #3
 800d56a:	e01b      	b.n	800d5a4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800d572:	887b      	ldrh	r3, [r7, #2]
 800d574:	9300      	str	r3, [sp, #0]
 800d576:	4613      	mov	r3, r2
 800d578:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d57c:	2100      	movs	r1, #0
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 f872 	bl	800d668 <USBH_GetDescriptor>
 800d584:	4603      	mov	r3, r0
 800d586:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800d588:	7bfb      	ldrb	r3, [r7, #15]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d109      	bne.n	800d5a2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d594:	887a      	ldrh	r2, [r7, #2]
 800d596:	4619      	mov	r1, r3
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f000 f929 	bl	800d7f0 <USBH_ParseDevDesc>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d5a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3710      	adds	r7, #16
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b086      	sub	sp, #24
 800d5b0:	af02      	add	r7, sp, #8
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	460b      	mov	r3, r1
 800d5b6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	331c      	adds	r3, #28
 800d5bc:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800d5be:	887b      	ldrh	r3, [r7, #2]
 800d5c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5c4:	d901      	bls.n	800d5ca <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d5c6:	2303      	movs	r3, #3
 800d5c8:	e016      	b.n	800d5f8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d5ca:	887b      	ldrh	r3, [r7, #2]
 800d5cc:	9300      	str	r3, [sp, #0]
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d5d4:	2100      	movs	r1, #0
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f000 f846 	bl	800d668 <USBH_GetDescriptor>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800d5e0:	7bfb      	ldrb	r3, [r7, #15]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d107      	bne.n	800d5f6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800d5e6:	887b      	ldrh	r3, [r7, #2]
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	68b9      	ldr	r1, [r7, #8]
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f000 f9b3 	bl	800d958 <USBH_ParseCfgDesc>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d5f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3710      	adds	r7, #16
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b088      	sub	sp, #32
 800d604:	af02      	add	r7, sp, #8
 800d606:	60f8      	str	r0, [r7, #12]
 800d608:	607a      	str	r2, [r7, #4]
 800d60a:	461a      	mov	r2, r3
 800d60c:	460b      	mov	r3, r1
 800d60e:	72fb      	strb	r3, [r7, #11]
 800d610:	4613      	mov	r3, r2
 800d612:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800d614:	893b      	ldrh	r3, [r7, #8]
 800d616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d61a:	d802      	bhi.n	800d622 <USBH_Get_StringDesc+0x22>
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d101      	bne.n	800d626 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d622:	2303      	movs	r3, #3
 800d624:	e01c      	b.n	800d660 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800d626:	7afb      	ldrb	r3, [r7, #11]
 800d628:	b29b      	uxth	r3, r3
 800d62a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d62e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800d636:	893b      	ldrh	r3, [r7, #8]
 800d638:	9300      	str	r3, [sp, #0]
 800d63a:	460b      	mov	r3, r1
 800d63c:	2100      	movs	r1, #0
 800d63e:	68f8      	ldr	r0, [r7, #12]
 800d640:	f000 f812 	bl	800d668 <USBH_GetDescriptor>
 800d644:	4603      	mov	r3, r0
 800d646:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800d648:	7dfb      	ldrb	r3, [r7, #23]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d107      	bne.n	800d65e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d654:	893a      	ldrh	r2, [r7, #8]
 800d656:	6879      	ldr	r1, [r7, #4]
 800d658:	4618      	mov	r0, r3
 800d65a:	f000 fb93 	bl	800dd84 <USBH_ParseStringDesc>
  }

  return status;
 800d65e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d660:	4618      	mov	r0, r3
 800d662:	3718      	adds	r7, #24
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	607b      	str	r3, [r7, #4]
 800d672:	460b      	mov	r3, r1
 800d674:	72fb      	strb	r3, [r7, #11]
 800d676:	4613      	mov	r3, r2
 800d678:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	789b      	ldrb	r3, [r3, #2]
 800d67e:	2b01      	cmp	r3, #1
 800d680:	d11c      	bne.n	800d6bc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d682:	7afb      	ldrb	r3, [r7, #11]
 800d684:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d688:	b2da      	uxtb	r2, r3
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2206      	movs	r2, #6
 800d692:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	893a      	ldrh	r2, [r7, #8]
 800d698:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d69a:	893b      	ldrh	r3, [r7, #8]
 800d69c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d6a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d6a4:	d104      	bne.n	800d6b0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f240 4209 	movw	r2, #1033	; 0x409
 800d6ac:	829a      	strh	r2, [r3, #20]
 800d6ae:	e002      	b.n	800d6b6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	8b3a      	ldrh	r2, [r7, #24]
 800d6ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d6bc:	8b3b      	ldrh	r3, [r7, #24]
 800d6be:	461a      	mov	r2, r3
 800d6c0:	6879      	ldr	r1, [r7, #4]
 800d6c2:	68f8      	ldr	r0, [r7, #12]
 800d6c4:	f000 fbac 	bl	800de20 <USBH_CtlReq>
 800d6c8:	4603      	mov	r3, r0
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3710      	adds	r7, #16
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}

0800d6d2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d6d2:	b580      	push	{r7, lr}
 800d6d4:	b082      	sub	sp, #8
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	6078      	str	r0, [r7, #4]
 800d6da:	460b      	mov	r3, r1
 800d6dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	789b      	ldrb	r3, [r3, #2]
 800d6e2:	2b01      	cmp	r3, #1
 800d6e4:	d10f      	bne.n	800d706 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2205      	movs	r2, #5
 800d6f0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d6f2:	78fb      	ldrb	r3, [r7, #3]
 800d6f4:	b29a      	uxth	r2, r3
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2200      	movs	r2, #0
 800d704:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d706:	2200      	movs	r2, #0
 800d708:	2100      	movs	r1, #0
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f000 fb88 	bl	800de20 <USBH_CtlReq>
 800d710:	4603      	mov	r3, r0
}
 800d712:	4618      	mov	r0, r3
 800d714:	3708      	adds	r7, #8
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}

0800d71a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d71a:	b580      	push	{r7, lr}
 800d71c:	b082      	sub	sp, #8
 800d71e:	af00      	add	r7, sp, #0
 800d720:	6078      	str	r0, [r7, #4]
 800d722:	460b      	mov	r3, r1
 800d724:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	789b      	ldrb	r3, [r3, #2]
 800d72a:	2b01      	cmp	r3, #1
 800d72c:	d10e      	bne.n	800d74c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2200      	movs	r2, #0
 800d732:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2209      	movs	r2, #9
 800d738:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	887a      	ldrh	r2, [r7, #2]
 800d73e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2200      	movs	r2, #0
 800d744:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2200      	movs	r2, #0
 800d74a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d74c:	2200      	movs	r2, #0
 800d74e:	2100      	movs	r1, #0
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f000 fb65 	bl	800de20 <USBH_CtlReq>
 800d756:	4603      	mov	r3, r0
}
 800d758:	4618      	mov	r0, r3
 800d75a:	3708      	adds	r7, #8
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	460b      	mov	r3, r1
 800d76a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	789b      	ldrb	r3, [r3, #2]
 800d770:	2b01      	cmp	r3, #1
 800d772:	d10f      	bne.n	800d794 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2200      	movs	r2, #0
 800d778:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2203      	movs	r2, #3
 800d77e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d780:	78fb      	ldrb	r3, [r7, #3]
 800d782:	b29a      	uxth	r2, r3
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2200      	movs	r2, #0
 800d78c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2200      	movs	r2, #0
 800d792:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d794:	2200      	movs	r2, #0
 800d796:	2100      	movs	r1, #0
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f000 fb41 	bl	800de20 <USBH_CtlReq>
 800d79e:	4603      	mov	r3, r0
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3708      	adds	r7, #8
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	789b      	ldrb	r3, [r3, #2]
 800d7b8:	2b01      	cmp	r3, #1
 800d7ba:	d10f      	bne.n	800d7dc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2202      	movs	r2, #2
 800d7c0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d7ce:	78fb      	ldrb	r3, [r7, #3]
 800d7d0:	b29a      	uxth	r2, r3
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d7dc:	2200      	movs	r2, #0
 800d7de:	2100      	movs	r1, #0
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f000 fb1d 	bl	800de20 <USBH_CtlReq>
 800d7e6:	4603      	mov	r3, r0
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3708      	adds	r7, #8
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b087      	sub	sp, #28
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	60f8      	str	r0, [r7, #12]
 800d7f8:	60b9      	str	r1, [r7, #8]
 800d7fa:	4613      	mov	r3, r2
 800d7fc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	f203 3326 	addw	r3, r3, #806	; 0x326
 800d804:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800d806:	2300      	movs	r3, #0
 800d808:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d101      	bne.n	800d814 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800d810:	2302      	movs	r3, #2
 800d812:	e098      	b.n	800d946 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	781a      	ldrb	r2, [r3, #0]
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	785a      	ldrb	r2, [r3, #1]
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	3302      	adds	r3, #2
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	b29a      	uxth	r2, r3
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	3303      	adds	r3, #3
 800d830:	781b      	ldrb	r3, [r3, #0]
 800d832:	b29b      	uxth	r3, r3
 800d834:	021b      	lsls	r3, r3, #8
 800d836:	b29b      	uxth	r3, r3
 800d838:	4313      	orrs	r3, r2
 800d83a:	b29a      	uxth	r2, r3
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	791a      	ldrb	r2, [r3, #4]
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	795a      	ldrb	r2, [r3, #5]
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	799a      	ldrb	r2, [r3, #6]
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	79da      	ldrb	r2, [r3, #7]
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d866:	2b00      	cmp	r3, #0
 800d868:	d004      	beq.n	800d874 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d870:	2b01      	cmp	r3, #1
 800d872:	d11b      	bne.n	800d8ac <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	79db      	ldrb	r3, [r3, #7]
 800d878:	2b20      	cmp	r3, #32
 800d87a:	dc0f      	bgt.n	800d89c <USBH_ParseDevDesc+0xac>
 800d87c:	2b08      	cmp	r3, #8
 800d87e:	db0f      	blt.n	800d8a0 <USBH_ParseDevDesc+0xb0>
 800d880:	3b08      	subs	r3, #8
 800d882:	4a34      	ldr	r2, [pc, #208]	; (800d954 <USBH_ParseDevDesc+0x164>)
 800d884:	fa22 f303 	lsr.w	r3, r2, r3
 800d888:	f003 0301 	and.w	r3, r3, #1
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	bf14      	ite	ne
 800d890:	2301      	movne	r3, #1
 800d892:	2300      	moveq	r3, #0
 800d894:	b2db      	uxtb	r3, r3
 800d896:	2b00      	cmp	r3, #0
 800d898:	d106      	bne.n	800d8a8 <USBH_ParseDevDesc+0xb8>
 800d89a:	e001      	b.n	800d8a0 <USBH_ParseDevDesc+0xb0>
 800d89c:	2b40      	cmp	r3, #64	; 0x40
 800d89e:	d003      	beq.n	800d8a8 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	2208      	movs	r2, #8
 800d8a4:	71da      	strb	r2, [r3, #7]
        break;
 800d8a6:	e000      	b.n	800d8aa <USBH_ParseDevDesc+0xba>
        break;
 800d8a8:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800d8aa:	e00e      	b.n	800d8ca <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d8b2:	2b02      	cmp	r3, #2
 800d8b4:	d107      	bne.n	800d8c6 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	79db      	ldrb	r3, [r3, #7]
 800d8ba:	2b08      	cmp	r3, #8
 800d8bc:	d005      	beq.n	800d8ca <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	2208      	movs	r2, #8
 800d8c2:	71da      	strb	r2, [r3, #7]
 800d8c4:	e001      	b.n	800d8ca <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d8c6:	2303      	movs	r3, #3
 800d8c8:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800d8ca:	88fb      	ldrh	r3, [r7, #6]
 800d8cc:	2b08      	cmp	r3, #8
 800d8ce:	d939      	bls.n	800d944 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	3308      	adds	r3, #8
 800d8d4:	781b      	ldrb	r3, [r3, #0]
 800d8d6:	b29a      	uxth	r2, r3
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	3309      	adds	r3, #9
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	021b      	lsls	r3, r3, #8
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	b29a      	uxth	r2, r3
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	330a      	adds	r3, #10
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	b29a      	uxth	r2, r3
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	330b      	adds	r3, #11
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	021b      	lsls	r3, r3, #8
 800d8fe:	b29b      	uxth	r3, r3
 800d900:	4313      	orrs	r3, r2
 800d902:	b29a      	uxth	r2, r3
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	330c      	adds	r3, #12
 800d90c:	781b      	ldrb	r3, [r3, #0]
 800d90e:	b29a      	uxth	r2, r3
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	330d      	adds	r3, #13
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	b29b      	uxth	r3, r3
 800d918:	021b      	lsls	r3, r3, #8
 800d91a:	b29b      	uxth	r3, r3
 800d91c:	4313      	orrs	r3, r2
 800d91e:	b29a      	uxth	r2, r3
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	7b9a      	ldrb	r2, [r3, #14]
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	7bda      	ldrb	r2, [r3, #15]
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	7c1a      	ldrb	r2, [r3, #16]
 800d938:	693b      	ldr	r3, [r7, #16]
 800d93a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	7c5a      	ldrb	r2, [r3, #17]
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800d944:	7dfb      	ldrb	r3, [r7, #23]
}
 800d946:	4618      	mov	r0, r3
 800d948:	371c      	adds	r7, #28
 800d94a:	46bd      	mov	sp, r7
 800d94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop
 800d954:	01000101 	.word	0x01000101

0800d958 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b08c      	sub	sp, #48	; 0x30
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	60b9      	str	r1, [r7, #8]
 800d962:	4613      	mov	r3, r2
 800d964:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d96c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d96e:	2300      	movs	r3, #0
 800d970:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d974:	2300      	movs	r3, #0
 800d976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800d97a:	2300      	movs	r3, #0
 800d97c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d101      	bne.n	800d98a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800d986:	2302      	movs	r3, #2
 800d988:	e0db      	b.n	800db42 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	781a      	ldrb	r2, [r3, #0]
 800d992:	6a3b      	ldr	r3, [r7, #32]
 800d994:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	785a      	ldrb	r2, [r3, #1]
 800d99a:	6a3b      	ldr	r3, [r7, #32]
 800d99c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	3302      	adds	r3, #2
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	b29a      	uxth	r2, r3
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	3303      	adds	r3, #3
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	021b      	lsls	r3, r3, #8
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	4313      	orrs	r3, r2
 800d9b4:	b29b      	uxth	r3, r3
 800d9b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d9ba:	bf28      	it	cs
 800d9bc:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800d9c0:	b29a      	uxth	r2, r3
 800d9c2:	6a3b      	ldr	r3, [r7, #32]
 800d9c4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	791a      	ldrb	r2, [r3, #4]
 800d9ca:	6a3b      	ldr	r3, [r7, #32]
 800d9cc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	795a      	ldrb	r2, [r3, #5]
 800d9d2:	6a3b      	ldr	r3, [r7, #32]
 800d9d4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	799a      	ldrb	r2, [r3, #6]
 800d9da:	6a3b      	ldr	r3, [r7, #32]
 800d9dc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	79da      	ldrb	r2, [r3, #7]
 800d9e2:	6a3b      	ldr	r3, [r7, #32]
 800d9e4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	7a1a      	ldrb	r2, [r3, #8]
 800d9ea:	6a3b      	ldr	r3, [r7, #32]
 800d9ec:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800d9ee:	6a3b      	ldr	r3, [r7, #32]
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	2b09      	cmp	r3, #9
 800d9f4:	d002      	beq.n	800d9fc <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d9f6:	6a3b      	ldr	r3, [r7, #32]
 800d9f8:	2209      	movs	r2, #9
 800d9fa:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d9fc:	88fb      	ldrh	r3, [r7, #6]
 800d9fe:	2b09      	cmp	r3, #9
 800da00:	f240 809d 	bls.w	800db3e <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800da04:	2309      	movs	r3, #9
 800da06:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800da08:	2300      	movs	r3, #0
 800da0a:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800da0c:	e081      	b.n	800db12 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800da0e:	f107 0316 	add.w	r3, r7, #22
 800da12:	4619      	mov	r1, r3
 800da14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da16:	f000 f9e8 	bl	800ddea <USBH_GetNextDesc>
 800da1a:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800da1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1e:	785b      	ldrb	r3, [r3, #1]
 800da20:	2b04      	cmp	r3, #4
 800da22:	d176      	bne.n	800db12 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800da24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da26:	781b      	ldrb	r3, [r3, #0]
 800da28:	2b09      	cmp	r3, #9
 800da2a:	d002      	beq.n	800da32 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800da2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da2e:	2209      	movs	r2, #9
 800da30:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800da32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da36:	221a      	movs	r2, #26
 800da38:	fb02 f303 	mul.w	r3, r2, r3
 800da3c:	3308      	adds	r3, #8
 800da3e:	6a3a      	ldr	r2, [r7, #32]
 800da40:	4413      	add	r3, r2
 800da42:	3302      	adds	r3, #2
 800da44:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800da46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da48:	69f8      	ldr	r0, [r7, #28]
 800da4a:	f000 f87e 	bl	800db4a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800da4e:	2300      	movs	r3, #0
 800da50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800da54:	2300      	movs	r3, #0
 800da56:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800da58:	e043      	b.n	800dae2 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800da5a:	f107 0316 	add.w	r3, r7, #22
 800da5e:	4619      	mov	r1, r3
 800da60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da62:	f000 f9c2 	bl	800ddea <USBH_GetNextDesc>
 800da66:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800da68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6a:	785b      	ldrb	r3, [r3, #1]
 800da6c:	2b05      	cmp	r3, #5
 800da6e:	d138      	bne.n	800dae2 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800da70:	69fb      	ldr	r3, [r7, #28]
 800da72:	795b      	ldrb	r3, [r3, #5]
 800da74:	2b01      	cmp	r3, #1
 800da76:	d113      	bne.n	800daa0 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800da78:	69fb      	ldr	r3, [r7, #28]
 800da7a:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800da7c:	2b02      	cmp	r3, #2
 800da7e:	d003      	beq.n	800da88 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800da80:	69fb      	ldr	r3, [r7, #28]
 800da82:	799b      	ldrb	r3, [r3, #6]
 800da84:	2b03      	cmp	r3, #3
 800da86:	d10b      	bne.n	800daa0 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800da88:	69fb      	ldr	r3, [r7, #28]
 800da8a:	79db      	ldrb	r3, [r3, #7]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d10b      	bne.n	800daa8 <USBH_ParseCfgDesc+0x150>
 800da90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	2b09      	cmp	r3, #9
 800da96:	d007      	beq.n	800daa8 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800da98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da9a:	2209      	movs	r2, #9
 800da9c:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800da9e:	e003      	b.n	800daa8 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800daa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa2:	2207      	movs	r2, #7
 800daa4:	701a      	strb	r2, [r3, #0]
 800daa6:	e000      	b.n	800daaa <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800daa8:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800daaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800daae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800dab2:	3201      	adds	r2, #1
 800dab4:	00d2      	lsls	r2, r2, #3
 800dab6:	211a      	movs	r1, #26
 800dab8:	fb01 f303 	mul.w	r3, r1, r3
 800dabc:	4413      	add	r3, r2
 800dabe:	3308      	adds	r3, #8
 800dac0:	6a3a      	ldr	r2, [r7, #32]
 800dac2:	4413      	add	r3, r2
 800dac4:	3304      	adds	r3, #4
 800dac6:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800dac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800daca:	69b9      	ldr	r1, [r7, #24]
 800dacc:	68f8      	ldr	r0, [r7, #12]
 800dace:	f000 f870 	bl	800dbb2 <USBH_ParseEPDesc>
 800dad2:	4603      	mov	r3, r0
 800dad4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800dad8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dadc:	3301      	adds	r3, #1
 800dade:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800dae2:	69fb      	ldr	r3, [r7, #28]
 800dae4:	791b      	ldrb	r3, [r3, #4]
 800dae6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800daea:	429a      	cmp	r2, r3
 800daec:	d204      	bcs.n	800daf8 <USBH_ParseCfgDesc+0x1a0>
 800daee:	6a3b      	ldr	r3, [r7, #32]
 800daf0:	885a      	ldrh	r2, [r3, #2]
 800daf2:	8afb      	ldrh	r3, [r7, #22]
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d8b0      	bhi.n	800da5a <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800daf8:	69fb      	ldr	r3, [r7, #28]
 800dafa:	791b      	ldrb	r3, [r3, #4]
 800dafc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800db00:	429a      	cmp	r2, r3
 800db02:	d201      	bcs.n	800db08 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800db04:	2303      	movs	r3, #3
 800db06:	e01c      	b.n	800db42 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800db08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db0c:	3301      	adds	r3, #1
 800db0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800db12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db16:	2b01      	cmp	r3, #1
 800db18:	d805      	bhi.n	800db26 <USBH_ParseCfgDesc+0x1ce>
 800db1a:	6a3b      	ldr	r3, [r7, #32]
 800db1c:	885a      	ldrh	r2, [r3, #2]
 800db1e:	8afb      	ldrh	r3, [r7, #22]
 800db20:	429a      	cmp	r2, r3
 800db22:	f63f af74 	bhi.w	800da0e <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800db26:	6a3b      	ldr	r3, [r7, #32]
 800db28:	791b      	ldrb	r3, [r3, #4]
 800db2a:	2b02      	cmp	r3, #2
 800db2c:	bf28      	it	cs
 800db2e:	2302      	movcs	r3, #2
 800db30:	b2db      	uxtb	r3, r3
 800db32:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800db36:	429a      	cmp	r2, r3
 800db38:	d201      	bcs.n	800db3e <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800db3a:	2303      	movs	r3, #3
 800db3c:	e001      	b.n	800db42 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800db3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800db42:	4618      	mov	r0, r3
 800db44:	3730      	adds	r7, #48	; 0x30
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}

0800db4a <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800db4a:	b480      	push	{r7}
 800db4c:	b083      	sub	sp, #12
 800db4e:	af00      	add	r7, sp, #0
 800db50:	6078      	str	r0, [r7, #4]
 800db52:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	781a      	ldrb	r2, [r3, #0]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	785a      	ldrb	r2, [r3, #1]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	789a      	ldrb	r2, [r3, #2]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	78da      	ldrb	r2, [r3, #3]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	3304      	adds	r3, #4
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	2b02      	cmp	r3, #2
 800db7c:	bf28      	it	cs
 800db7e:	2302      	movcs	r3, #2
 800db80:	b2da      	uxtb	r2, r3
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	795a      	ldrb	r2, [r3, #5]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	799a      	ldrb	r2, [r3, #6]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	79da      	ldrb	r2, [r3, #7]
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	7a1a      	ldrb	r2, [r3, #8]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	721a      	strb	r2, [r3, #8]
}
 800dba6:	bf00      	nop
 800dba8:	370c      	adds	r7, #12
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb0:	4770      	bx	lr

0800dbb2 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800dbb2:	b480      	push	{r7}
 800dbb4:	b087      	sub	sp, #28
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	60f8      	str	r0, [r7, #12]
 800dbba:	60b9      	str	r1, [r7, #8]
 800dbbc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	781a      	ldrb	r2, [r3, #0]
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	785a      	ldrb	r2, [r3, #1]
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	789a      	ldrb	r2, [r3, #2]
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	78da      	ldrb	r2, [r3, #3]
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	3304      	adds	r3, #4
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	b29a      	uxth	r2, r3
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	3305      	adds	r3, #5
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	b29b      	uxth	r3, r3
 800dbf2:	021b      	lsls	r3, r3, #8
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	4313      	orrs	r3, r2
 800dbf8:	b29a      	uxth	r2, r3
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	799a      	ldrb	r2, [r3, #6]
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	889b      	ldrh	r3, [r3, #4]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d009      	beq.n	800dc22 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800dc12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc16:	d804      	bhi.n	800dc22 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800dc1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc20:	d901      	bls.n	800dc26 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800dc22:	2303      	movs	r3, #3
 800dc24:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d136      	bne.n	800dc9e <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	78db      	ldrb	r3, [r3, #3]
 800dc34:	f003 0303 	and.w	r3, r3, #3
 800dc38:	2b02      	cmp	r3, #2
 800dc3a:	d108      	bne.n	800dc4e <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	889b      	ldrh	r3, [r3, #4]
 800dc40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc44:	f240 8097 	bls.w	800dd76 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800dc48:	2303      	movs	r3, #3
 800dc4a:	75fb      	strb	r3, [r7, #23]
 800dc4c:	e093      	b.n	800dd76 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	78db      	ldrb	r3, [r3, #3]
 800dc52:	f003 0303 	and.w	r3, r3, #3
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d107      	bne.n	800dc6a <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	889b      	ldrh	r3, [r3, #4]
 800dc5e:	2b40      	cmp	r3, #64	; 0x40
 800dc60:	f240 8089 	bls.w	800dd76 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800dc64:	2303      	movs	r3, #3
 800dc66:	75fb      	strb	r3, [r7, #23]
 800dc68:	e085      	b.n	800dd76 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	78db      	ldrb	r3, [r3, #3]
 800dc6e:	f003 0303 	and.w	r3, r3, #3
 800dc72:	2b01      	cmp	r3, #1
 800dc74:	d005      	beq.n	800dc82 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	78db      	ldrb	r3, [r3, #3]
 800dc7a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800dc7e:	2b03      	cmp	r3, #3
 800dc80:	d10a      	bne.n	800dc98 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	799b      	ldrb	r3, [r3, #6]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d003      	beq.n	800dc92 <USBH_ParseEPDesc+0xe0>
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	799b      	ldrb	r3, [r3, #6]
 800dc8e:	2b10      	cmp	r3, #16
 800dc90:	d970      	bls.n	800dd74 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dc92:	2303      	movs	r3, #3
 800dc94:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800dc96:	e06d      	b.n	800dd74 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800dc98:	2303      	movs	r3, #3
 800dc9a:	75fb      	strb	r3, [r7, #23]
 800dc9c:	e06b      	b.n	800dd76 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dca4:	2b01      	cmp	r3, #1
 800dca6:	d13c      	bne.n	800dd22 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	78db      	ldrb	r3, [r3, #3]
 800dcac:	f003 0303 	and.w	r3, r3, #3
 800dcb0:	2b02      	cmp	r3, #2
 800dcb2:	d005      	beq.n	800dcc0 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	78db      	ldrb	r3, [r3, #3]
 800dcb8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d106      	bne.n	800dcce <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	889b      	ldrh	r3, [r3, #4]
 800dcc4:	2b40      	cmp	r3, #64	; 0x40
 800dcc6:	d956      	bls.n	800dd76 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800dcc8:	2303      	movs	r3, #3
 800dcca:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800dccc:	e053      	b.n	800dd76 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	78db      	ldrb	r3, [r3, #3]
 800dcd2:	f003 0303 	and.w	r3, r3, #3
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	d10e      	bne.n	800dcf8 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	799b      	ldrb	r3, [r3, #6]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d007      	beq.n	800dcf2 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800dce6:	2b10      	cmp	r3, #16
 800dce8:	d803      	bhi.n	800dcf2 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800dcee:	2b40      	cmp	r3, #64	; 0x40
 800dcf0:	d941      	bls.n	800dd76 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800dcf2:	2303      	movs	r3, #3
 800dcf4:	75fb      	strb	r3, [r7, #23]
 800dcf6:	e03e      	b.n	800dd76 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	78db      	ldrb	r3, [r3, #3]
 800dcfc:	f003 0303 	and.w	r3, r3, #3
 800dd00:	2b03      	cmp	r3, #3
 800dd02:	d10b      	bne.n	800dd1c <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	799b      	ldrb	r3, [r3, #6]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d004      	beq.n	800dd16 <USBH_ParseEPDesc+0x164>
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	889b      	ldrh	r3, [r3, #4]
 800dd10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd14:	d32f      	bcc.n	800dd76 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800dd16:	2303      	movs	r3, #3
 800dd18:	75fb      	strb	r3, [r7, #23]
 800dd1a:	e02c      	b.n	800dd76 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800dd1c:	2303      	movs	r3, #3
 800dd1e:	75fb      	strb	r3, [r7, #23]
 800dd20:	e029      	b.n	800dd76 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dd28:	2b02      	cmp	r3, #2
 800dd2a:	d120      	bne.n	800dd6e <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	78db      	ldrb	r3, [r3, #3]
 800dd30:	f003 0303 	and.w	r3, r3, #3
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d106      	bne.n	800dd46 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	889b      	ldrh	r3, [r3, #4]
 800dd3c:	2b08      	cmp	r3, #8
 800dd3e:	d01a      	beq.n	800dd76 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800dd40:	2303      	movs	r3, #3
 800dd42:	75fb      	strb	r3, [r7, #23]
 800dd44:	e017      	b.n	800dd76 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	78db      	ldrb	r3, [r3, #3]
 800dd4a:	f003 0303 	and.w	r3, r3, #3
 800dd4e:	2b03      	cmp	r3, #3
 800dd50:	d10a      	bne.n	800dd68 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	799b      	ldrb	r3, [r3, #6]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d003      	beq.n	800dd62 <USBH_ParseEPDesc+0x1b0>
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	889b      	ldrh	r3, [r3, #4]
 800dd5e:	2b08      	cmp	r3, #8
 800dd60:	d909      	bls.n	800dd76 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800dd62:	2303      	movs	r3, #3
 800dd64:	75fb      	strb	r3, [r7, #23]
 800dd66:	e006      	b.n	800dd76 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800dd68:	2303      	movs	r3, #3
 800dd6a:	75fb      	strb	r3, [r7, #23]
 800dd6c:	e003      	b.n	800dd76 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800dd6e:	2303      	movs	r3, #3
 800dd70:	75fb      	strb	r3, [r7, #23]
 800dd72:	e000      	b.n	800dd76 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800dd74:	bf00      	nop
  }

  return status;
 800dd76:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	371c      	adds	r7, #28
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr

0800dd84 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b087      	sub	sp, #28
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	60f8      	str	r0, [r7, #12]
 800dd8c:	60b9      	str	r1, [r7, #8]
 800dd8e:	4613      	mov	r3, r2
 800dd90:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	3301      	adds	r3, #1
 800dd96:	781b      	ldrb	r3, [r3, #0]
 800dd98:	2b03      	cmp	r3, #3
 800dd9a:	d120      	bne.n	800ddde <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	1e9a      	subs	r2, r3, #2
 800dda2:	88fb      	ldrh	r3, [r7, #6]
 800dda4:	4293      	cmp	r3, r2
 800dda6:	bf28      	it	cs
 800dda8:	4613      	movcs	r3, r2
 800ddaa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	3302      	adds	r3, #2
 800ddb0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	82fb      	strh	r3, [r7, #22]
 800ddb6:	e00b      	b.n	800ddd0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ddb8:	8afb      	ldrh	r3, [r7, #22]
 800ddba:	68fa      	ldr	r2, [r7, #12]
 800ddbc:	4413      	add	r3, r2
 800ddbe:	781a      	ldrb	r2, [r3, #0]
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ddca:	8afb      	ldrh	r3, [r7, #22]
 800ddcc:	3302      	adds	r3, #2
 800ddce:	82fb      	strh	r3, [r7, #22]
 800ddd0:	8afa      	ldrh	r2, [r7, #22]
 800ddd2:	8abb      	ldrh	r3, [r7, #20]
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d3ef      	bcc.n	800ddb8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	2200      	movs	r2, #0
 800dddc:	701a      	strb	r2, [r3, #0]
  }
}
 800ddde:	bf00      	nop
 800dde0:	371c      	adds	r7, #28
 800dde2:	46bd      	mov	sp, r7
 800dde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde8:	4770      	bx	lr

0800ddea <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ddea:	b480      	push	{r7}
 800ddec:	b085      	sub	sp, #20
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	6078      	str	r0, [r7, #4]
 800ddf2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	881a      	ldrh	r2, [r3, #0]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	b29b      	uxth	r3, r3
 800ddfe:	4413      	add	r3, r2
 800de00:	b29a      	uxth	r2, r3
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	781b      	ldrb	r3, [r3, #0]
 800de0a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	4413      	add	r3, r2
 800de10:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800de12:	68fb      	ldr	r3, [r7, #12]
}
 800de14:	4618      	mov	r0, r3
 800de16:	3714      	adds	r7, #20
 800de18:	46bd      	mov	sp, r7
 800de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1e:	4770      	bx	lr

0800de20 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b086      	sub	sp, #24
 800de24:	af00      	add	r7, sp, #0
 800de26:	60f8      	str	r0, [r7, #12]
 800de28:	60b9      	str	r1, [r7, #8]
 800de2a:	4613      	mov	r3, r2
 800de2c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800de2e:	2301      	movs	r3, #1
 800de30:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	789b      	ldrb	r3, [r3, #2]
 800de36:	2b01      	cmp	r3, #1
 800de38:	d002      	beq.n	800de40 <USBH_CtlReq+0x20>
 800de3a:	2b02      	cmp	r3, #2
 800de3c:	d00f      	beq.n	800de5e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800de3e:	e027      	b.n	800de90 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	68ba      	ldr	r2, [r7, #8]
 800de44:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	88fa      	ldrh	r2, [r7, #6]
 800de4a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2201      	movs	r2, #1
 800de50:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	2202      	movs	r2, #2
 800de56:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800de58:	2301      	movs	r3, #1
 800de5a:	75fb      	strb	r3, [r7, #23]
      break;
 800de5c:	e018      	b.n	800de90 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800de5e:	68f8      	ldr	r0, [r7, #12]
 800de60:	f000 f81c 	bl	800de9c <USBH_HandleControl>
 800de64:	4603      	mov	r3, r0
 800de66:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800de68:	7dfb      	ldrb	r3, [r7, #23]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d002      	beq.n	800de74 <USBH_CtlReq+0x54>
 800de6e:	7dfb      	ldrb	r3, [r7, #23]
 800de70:	2b03      	cmp	r3, #3
 800de72:	d106      	bne.n	800de82 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	2201      	movs	r2, #1
 800de78:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	2200      	movs	r2, #0
 800de7e:	761a      	strb	r2, [r3, #24]
      break;
 800de80:	e005      	b.n	800de8e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800de82:	7dfb      	ldrb	r3, [r7, #23]
 800de84:	2b02      	cmp	r3, #2
 800de86:	d102      	bne.n	800de8e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	2201      	movs	r2, #1
 800de8c:	709a      	strb	r2, [r3, #2]
      break;
 800de8e:	bf00      	nop
  }
  return status;
 800de90:	7dfb      	ldrb	r3, [r7, #23]
}
 800de92:	4618      	mov	r0, r3
 800de94:	3718      	adds	r7, #24
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
	...

0800de9c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b086      	sub	sp, #24
 800dea0:	af02      	add	r7, sp, #8
 800dea2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800dea4:	2301      	movs	r3, #1
 800dea6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dea8:	2300      	movs	r3, #0
 800deaa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	7e1b      	ldrb	r3, [r3, #24]
 800deb0:	3b01      	subs	r3, #1
 800deb2:	2b0a      	cmp	r3, #10
 800deb4:	f200 8156 	bhi.w	800e164 <USBH_HandleControl+0x2c8>
 800deb8:	a201      	add	r2, pc, #4	; (adr r2, 800dec0 <USBH_HandleControl+0x24>)
 800deba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800debe:	bf00      	nop
 800dec0:	0800deed 	.word	0x0800deed
 800dec4:	0800df07 	.word	0x0800df07
 800dec8:	0800df71 	.word	0x0800df71
 800decc:	0800df97 	.word	0x0800df97
 800ded0:	0800dfcf 	.word	0x0800dfcf
 800ded4:	0800dff9 	.word	0x0800dff9
 800ded8:	0800e04b 	.word	0x0800e04b
 800dedc:	0800e06d 	.word	0x0800e06d
 800dee0:	0800e0a9 	.word	0x0800e0a9
 800dee4:	0800e0cf 	.word	0x0800e0cf
 800dee8:	0800e10d 	.word	0x0800e10d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f103 0110 	add.w	r1, r3, #16
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	795b      	ldrb	r3, [r3, #5]
 800def6:	461a      	mov	r2, r3
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f000 f943 	bl	800e184 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2202      	movs	r2, #2
 800df02:	761a      	strb	r2, [r3, #24]
      break;
 800df04:	e139      	b.n	800e17a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	795b      	ldrb	r3, [r3, #5]
 800df0a:	4619      	mov	r1, r3
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f000 fd29 	bl	800e964 <USBH_LL_GetURBState>
 800df12:	4603      	mov	r3, r0
 800df14:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800df16:	7bbb      	ldrb	r3, [r7, #14]
 800df18:	2b01      	cmp	r3, #1
 800df1a:	d11e      	bne.n	800df5a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	7c1b      	ldrb	r3, [r3, #16]
 800df20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800df24:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	8adb      	ldrh	r3, [r3, #22]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d00a      	beq.n	800df44 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800df2e:	7b7b      	ldrb	r3, [r7, #13]
 800df30:	2b80      	cmp	r3, #128	; 0x80
 800df32:	d103      	bne.n	800df3c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2203      	movs	r2, #3
 800df38:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800df3a:	e115      	b.n	800e168 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2205      	movs	r2, #5
 800df40:	761a      	strb	r2, [r3, #24]
      break;
 800df42:	e111      	b.n	800e168 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800df44:	7b7b      	ldrb	r3, [r7, #13]
 800df46:	2b80      	cmp	r3, #128	; 0x80
 800df48:	d103      	bne.n	800df52 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2209      	movs	r2, #9
 800df4e:	761a      	strb	r2, [r3, #24]
      break;
 800df50:	e10a      	b.n	800e168 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2207      	movs	r2, #7
 800df56:	761a      	strb	r2, [r3, #24]
      break;
 800df58:	e106      	b.n	800e168 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800df5a:	7bbb      	ldrb	r3, [r7, #14]
 800df5c:	2b04      	cmp	r3, #4
 800df5e:	d003      	beq.n	800df68 <USBH_HandleControl+0xcc>
 800df60:	7bbb      	ldrb	r3, [r7, #14]
 800df62:	2b02      	cmp	r3, #2
 800df64:	f040 8100 	bne.w	800e168 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	220b      	movs	r2, #11
 800df6c:	761a      	strb	r2, [r3, #24]
      break;
 800df6e:	e0fb      	b.n	800e168 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800df76:	b29a      	uxth	r2, r3
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6899      	ldr	r1, [r3, #8]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	899a      	ldrh	r2, [r3, #12]
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	791b      	ldrb	r3, [r3, #4]
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f000 f93a 	bl	800e202 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2204      	movs	r2, #4
 800df92:	761a      	strb	r2, [r3, #24]
      break;
 800df94:	e0f1      	b.n	800e17a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	791b      	ldrb	r3, [r3, #4]
 800df9a:	4619      	mov	r1, r3
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f000 fce1 	bl	800e964 <USBH_LL_GetURBState>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800dfa6:	7bbb      	ldrb	r3, [r7, #14]
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	d102      	bne.n	800dfb2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2209      	movs	r2, #9
 800dfb0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800dfb2:	7bbb      	ldrb	r3, [r7, #14]
 800dfb4:	2b05      	cmp	r3, #5
 800dfb6:	d102      	bne.n	800dfbe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800dfb8:	2303      	movs	r3, #3
 800dfba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dfbc:	e0d6      	b.n	800e16c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800dfbe:	7bbb      	ldrb	r3, [r7, #14]
 800dfc0:	2b04      	cmp	r3, #4
 800dfc2:	f040 80d3 	bne.w	800e16c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	220b      	movs	r2, #11
 800dfca:	761a      	strb	r2, [r3, #24]
      break;
 800dfcc:	e0ce      	b.n	800e16c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6899      	ldr	r1, [r3, #8]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	899a      	ldrh	r2, [r3, #12]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	795b      	ldrb	r3, [r3, #5]
 800dfda:	2001      	movs	r0, #1
 800dfdc:	9000      	str	r0, [sp, #0]
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f000 f8ea 	bl	800e1b8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dfea:	b29a      	uxth	r2, r3
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2206      	movs	r2, #6
 800dff4:	761a      	strb	r2, [r3, #24]
      break;
 800dff6:	e0c0      	b.n	800e17a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	795b      	ldrb	r3, [r3, #5]
 800dffc:	4619      	mov	r1, r3
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 fcb0 	bl	800e964 <USBH_LL_GetURBState>
 800e004:	4603      	mov	r3, r0
 800e006:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e008:	7bbb      	ldrb	r3, [r7, #14]
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	d103      	bne.n	800e016 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2207      	movs	r2, #7
 800e012:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e014:	e0ac      	b.n	800e170 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800e016:	7bbb      	ldrb	r3, [r7, #14]
 800e018:	2b05      	cmp	r3, #5
 800e01a:	d105      	bne.n	800e028 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	220c      	movs	r2, #12
 800e020:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e022:	2303      	movs	r3, #3
 800e024:	73fb      	strb	r3, [r7, #15]
      break;
 800e026:	e0a3      	b.n	800e170 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e028:	7bbb      	ldrb	r3, [r7, #14]
 800e02a:	2b02      	cmp	r3, #2
 800e02c:	d103      	bne.n	800e036 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2205      	movs	r2, #5
 800e032:	761a      	strb	r2, [r3, #24]
      break;
 800e034:	e09c      	b.n	800e170 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800e036:	7bbb      	ldrb	r3, [r7, #14]
 800e038:	2b04      	cmp	r3, #4
 800e03a:	f040 8099 	bne.w	800e170 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	220b      	movs	r2, #11
 800e042:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e044:	2302      	movs	r3, #2
 800e046:	73fb      	strb	r3, [r7, #15]
      break;
 800e048:	e092      	b.n	800e170 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	791b      	ldrb	r3, [r3, #4]
 800e04e:	2200      	movs	r2, #0
 800e050:	2100      	movs	r1, #0
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f000 f8d5 	bl	800e202 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e05e:	b29a      	uxth	r2, r3
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2208      	movs	r2, #8
 800e068:	761a      	strb	r2, [r3, #24]

      break;
 800e06a:	e086      	b.n	800e17a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	791b      	ldrb	r3, [r3, #4]
 800e070:	4619      	mov	r1, r3
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f000 fc76 	bl	800e964 <USBH_LL_GetURBState>
 800e078:	4603      	mov	r3, r0
 800e07a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e07c:	7bbb      	ldrb	r3, [r7, #14]
 800e07e:	2b01      	cmp	r3, #1
 800e080:	d105      	bne.n	800e08e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	220d      	movs	r2, #13
 800e086:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e088:	2300      	movs	r3, #0
 800e08a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e08c:	e072      	b.n	800e174 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800e08e:	7bbb      	ldrb	r3, [r7, #14]
 800e090:	2b04      	cmp	r3, #4
 800e092:	d103      	bne.n	800e09c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	220b      	movs	r2, #11
 800e098:	761a      	strb	r2, [r3, #24]
      break;
 800e09a:	e06b      	b.n	800e174 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800e09c:	7bbb      	ldrb	r3, [r7, #14]
 800e09e:	2b05      	cmp	r3, #5
 800e0a0:	d168      	bne.n	800e174 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800e0a2:	2303      	movs	r3, #3
 800e0a4:	73fb      	strb	r3, [r7, #15]
      break;
 800e0a6:	e065      	b.n	800e174 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	795b      	ldrb	r3, [r3, #5]
 800e0ac:	2201      	movs	r2, #1
 800e0ae:	9200      	str	r2, [sp, #0]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	2100      	movs	r1, #0
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f000 f87f 	bl	800e1b8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e0c0:	b29a      	uxth	r2, r3
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	220a      	movs	r2, #10
 800e0ca:	761a      	strb	r2, [r3, #24]
      break;
 800e0cc:	e055      	b.n	800e17a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	795b      	ldrb	r3, [r3, #5]
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f000 fc45 	bl	800e964 <USBH_LL_GetURBState>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e0de:	7bbb      	ldrb	r3, [r7, #14]
 800e0e0:	2b01      	cmp	r3, #1
 800e0e2:	d105      	bne.n	800e0f0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	220d      	movs	r2, #13
 800e0ec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e0ee:	e043      	b.n	800e178 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e0f0:	7bbb      	ldrb	r3, [r7, #14]
 800e0f2:	2b02      	cmp	r3, #2
 800e0f4:	d103      	bne.n	800e0fe <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2209      	movs	r2, #9
 800e0fa:	761a      	strb	r2, [r3, #24]
      break;
 800e0fc:	e03c      	b.n	800e178 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800e0fe:	7bbb      	ldrb	r3, [r7, #14]
 800e100:	2b04      	cmp	r3, #4
 800e102:	d139      	bne.n	800e178 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	220b      	movs	r2, #11
 800e108:	761a      	strb	r2, [r3, #24]
      break;
 800e10a:	e035      	b.n	800e178 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	7e5b      	ldrb	r3, [r3, #25]
 800e110:	3301      	adds	r3, #1
 800e112:	b2da      	uxtb	r2, r3
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	765a      	strb	r2, [r3, #25]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	7e5b      	ldrb	r3, [r3, #25]
 800e11c:	2b02      	cmp	r3, #2
 800e11e:	d806      	bhi.n	800e12e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2201      	movs	r2, #1
 800e124:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2201      	movs	r2, #1
 800e12a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e12c:	e025      	b.n	800e17a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e134:	2106      	movs	r1, #6
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2200      	movs	r2, #0
 800e13e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	795b      	ldrb	r3, [r3, #5]
 800e144:	4619      	mov	r1, r3
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f000 f90c 	bl	800e364 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	791b      	ldrb	r3, [r3, #4]
 800e150:	4619      	mov	r1, r3
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f000 f906 	bl	800e364 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2200      	movs	r2, #0
 800e15c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e15e:	2302      	movs	r3, #2
 800e160:	73fb      	strb	r3, [r7, #15]
      break;
 800e162:	e00a      	b.n	800e17a <USBH_HandleControl+0x2de>

    default:
      break;
 800e164:	bf00      	nop
 800e166:	e008      	b.n	800e17a <USBH_HandleControl+0x2de>
      break;
 800e168:	bf00      	nop
 800e16a:	e006      	b.n	800e17a <USBH_HandleControl+0x2de>
      break;
 800e16c:	bf00      	nop
 800e16e:	e004      	b.n	800e17a <USBH_HandleControl+0x2de>
      break;
 800e170:	bf00      	nop
 800e172:	e002      	b.n	800e17a <USBH_HandleControl+0x2de>
      break;
 800e174:	bf00      	nop
 800e176:	e000      	b.n	800e17a <USBH_HandleControl+0x2de>
      break;
 800e178:	bf00      	nop
  }

  return status;
 800e17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3710      	adds	r7, #16
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}

0800e184 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b088      	sub	sp, #32
 800e188:	af04      	add	r7, sp, #16
 800e18a:	60f8      	str	r0, [r7, #12]
 800e18c:	60b9      	str	r1, [r7, #8]
 800e18e:	4613      	mov	r3, r2
 800e190:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e192:	79f9      	ldrb	r1, [r7, #7]
 800e194:	2300      	movs	r3, #0
 800e196:	9303      	str	r3, [sp, #12]
 800e198:	2308      	movs	r3, #8
 800e19a:	9302      	str	r3, [sp, #8]
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	9301      	str	r3, [sp, #4]
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	9300      	str	r3, [sp, #0]
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	68f8      	ldr	r0, [r7, #12]
 800e1aa:	f000 fbaa 	bl	800e902 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e1ae:	2300      	movs	r3, #0
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3710      	adds	r7, #16
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}

0800e1b8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b088      	sub	sp, #32
 800e1bc:	af04      	add	r7, sp, #16
 800e1be:	60f8      	str	r0, [r7, #12]
 800e1c0:	60b9      	str	r1, [r7, #8]
 800e1c2:	4611      	mov	r1, r2
 800e1c4:	461a      	mov	r2, r3
 800e1c6:	460b      	mov	r3, r1
 800e1c8:	80fb      	strh	r3, [r7, #6]
 800e1ca:	4613      	mov	r3, r2
 800e1cc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d001      	beq.n	800e1dc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e1dc:	7979      	ldrb	r1, [r7, #5]
 800e1de:	7e3b      	ldrb	r3, [r7, #24]
 800e1e0:	9303      	str	r3, [sp, #12]
 800e1e2:	88fb      	ldrh	r3, [r7, #6]
 800e1e4:	9302      	str	r3, [sp, #8]
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	9301      	str	r3, [sp, #4]
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	9300      	str	r3, [sp, #0]
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	68f8      	ldr	r0, [r7, #12]
 800e1f4:	f000 fb85 	bl	800e902 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e1f8:	2300      	movs	r3, #0
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	3710      	adds	r7, #16
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}

0800e202 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e202:	b580      	push	{r7, lr}
 800e204:	b088      	sub	sp, #32
 800e206:	af04      	add	r7, sp, #16
 800e208:	60f8      	str	r0, [r7, #12]
 800e20a:	60b9      	str	r1, [r7, #8]
 800e20c:	4611      	mov	r1, r2
 800e20e:	461a      	mov	r2, r3
 800e210:	460b      	mov	r3, r1
 800e212:	80fb      	strh	r3, [r7, #6]
 800e214:	4613      	mov	r3, r2
 800e216:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e218:	7979      	ldrb	r1, [r7, #5]
 800e21a:	2300      	movs	r3, #0
 800e21c:	9303      	str	r3, [sp, #12]
 800e21e:	88fb      	ldrh	r3, [r7, #6]
 800e220:	9302      	str	r3, [sp, #8]
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	9301      	str	r3, [sp, #4]
 800e226:	2301      	movs	r3, #1
 800e228:	9300      	str	r3, [sp, #0]
 800e22a:	2300      	movs	r3, #0
 800e22c:	2201      	movs	r2, #1
 800e22e:	68f8      	ldr	r0, [r7, #12]
 800e230:	f000 fb67 	bl	800e902 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e234:	2300      	movs	r3, #0

}
 800e236:	4618      	mov	r0, r3
 800e238:	3710      	adds	r7, #16
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}

0800e23e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e23e:	b580      	push	{r7, lr}
 800e240:	b088      	sub	sp, #32
 800e242:	af04      	add	r7, sp, #16
 800e244:	60f8      	str	r0, [r7, #12]
 800e246:	60b9      	str	r1, [r7, #8]
 800e248:	4611      	mov	r1, r2
 800e24a:	461a      	mov	r2, r3
 800e24c:	460b      	mov	r3, r1
 800e24e:	80fb      	strh	r3, [r7, #6]
 800e250:	4613      	mov	r3, r2
 800e252:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d001      	beq.n	800e262 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e25e:	2300      	movs	r3, #0
 800e260:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e262:	7979      	ldrb	r1, [r7, #5]
 800e264:	7e3b      	ldrb	r3, [r7, #24]
 800e266:	9303      	str	r3, [sp, #12]
 800e268:	88fb      	ldrh	r3, [r7, #6]
 800e26a:	9302      	str	r3, [sp, #8]
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	9301      	str	r3, [sp, #4]
 800e270:	2301      	movs	r3, #1
 800e272:	9300      	str	r3, [sp, #0]
 800e274:	2302      	movs	r3, #2
 800e276:	2200      	movs	r2, #0
 800e278:	68f8      	ldr	r0, [r7, #12]
 800e27a:	f000 fb42 	bl	800e902 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e27e:	2300      	movs	r3, #0
}
 800e280:	4618      	mov	r0, r3
 800e282:	3710      	adds	r7, #16
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}

0800e288 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b088      	sub	sp, #32
 800e28c:	af04      	add	r7, sp, #16
 800e28e:	60f8      	str	r0, [r7, #12]
 800e290:	60b9      	str	r1, [r7, #8]
 800e292:	4611      	mov	r1, r2
 800e294:	461a      	mov	r2, r3
 800e296:	460b      	mov	r3, r1
 800e298:	80fb      	strh	r3, [r7, #6]
 800e29a:	4613      	mov	r3, r2
 800e29c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e29e:	7979      	ldrb	r1, [r7, #5]
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	9303      	str	r3, [sp, #12]
 800e2a4:	88fb      	ldrh	r3, [r7, #6]
 800e2a6:	9302      	str	r3, [sp, #8]
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	9301      	str	r3, [sp, #4]
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	9300      	str	r3, [sp, #0]
 800e2b0:	2302      	movs	r3, #2
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	68f8      	ldr	r0, [r7, #12]
 800e2b6:	f000 fb24 	bl	800e902 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e2ba:	2300      	movs	r3, #0
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3710      	adds	r7, #16
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}

0800e2c4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b086      	sub	sp, #24
 800e2c8:	af04      	add	r7, sp, #16
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	4608      	mov	r0, r1
 800e2ce:	4611      	mov	r1, r2
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	70fb      	strb	r3, [r7, #3]
 800e2d6:	460b      	mov	r3, r1
 800e2d8:	70bb      	strb	r3, [r7, #2]
 800e2da:	4613      	mov	r3, r2
 800e2dc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e2de:	7878      	ldrb	r0, [r7, #1]
 800e2e0:	78ba      	ldrb	r2, [r7, #2]
 800e2e2:	78f9      	ldrb	r1, [r7, #3]
 800e2e4:	8b3b      	ldrh	r3, [r7, #24]
 800e2e6:	9302      	str	r3, [sp, #8]
 800e2e8:	7d3b      	ldrb	r3, [r7, #20]
 800e2ea:	9301      	str	r3, [sp, #4]
 800e2ec:	7c3b      	ldrb	r3, [r7, #16]
 800e2ee:	9300      	str	r3, [sp, #0]
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f000 fab7 	bl	800e866 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e2f8:	2300      	movs	r3, #0
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3708      	adds	r7, #8
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}

0800e302 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e302:	b580      	push	{r7, lr}
 800e304:	b082      	sub	sp, #8
 800e306:	af00      	add	r7, sp, #0
 800e308:	6078      	str	r0, [r7, #4]
 800e30a:	460b      	mov	r3, r1
 800e30c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800e30e:	78fb      	ldrb	r3, [r7, #3]
 800e310:	4619      	mov	r1, r3
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f000 fad6 	bl	800e8c4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e318:	2300      	movs	r3, #0
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3708      	adds	r7, #8
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}

0800e322 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e322:	b580      	push	{r7, lr}
 800e324:	b084      	sub	sp, #16
 800e326:	af00      	add	r7, sp, #0
 800e328:	6078      	str	r0, [r7, #4]
 800e32a:	460b      	mov	r3, r1
 800e32c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f000 f836 	bl	800e3a0 <USBH_GetFreePipe>
 800e334:	4603      	mov	r3, r0
 800e336:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e338:	89fb      	ldrh	r3, [r7, #14]
 800e33a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e33e:	4293      	cmp	r3, r2
 800e340:	d00a      	beq.n	800e358 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800e342:	78fa      	ldrb	r2, [r7, #3]
 800e344:	89fb      	ldrh	r3, [r7, #14]
 800e346:	f003 030f 	and.w	r3, r3, #15
 800e34a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e34e:	6879      	ldr	r1, [r7, #4]
 800e350:	33e0      	adds	r3, #224	; 0xe0
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	440b      	add	r3, r1
 800e356:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e358:	89fb      	ldrh	r3, [r7, #14]
 800e35a:	b2db      	uxtb	r3, r3
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3710      	adds	r7, #16
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e364:	b480      	push	{r7}
 800e366:	b083      	sub	sp, #12
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	460b      	mov	r3, r1
 800e36e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800e370:	78fb      	ldrb	r3, [r7, #3]
 800e372:	2b0f      	cmp	r3, #15
 800e374:	d80d      	bhi.n	800e392 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e376:	78fb      	ldrb	r3, [r7, #3]
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	33e0      	adds	r3, #224	; 0xe0
 800e37c:	009b      	lsls	r3, r3, #2
 800e37e:	4413      	add	r3, r2
 800e380:	685a      	ldr	r2, [r3, #4]
 800e382:	78fb      	ldrb	r3, [r7, #3]
 800e384:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e388:	6879      	ldr	r1, [r7, #4]
 800e38a:	33e0      	adds	r3, #224	; 0xe0
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	440b      	add	r3, r1
 800e390:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e392:	2300      	movs	r3, #0
}
 800e394:	4618      	mov	r0, r3
 800e396:	370c      	adds	r7, #12
 800e398:	46bd      	mov	sp, r7
 800e39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39e:	4770      	bx	lr

0800e3a0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b085      	sub	sp, #20
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	73fb      	strb	r3, [r7, #15]
 800e3b0:	e00f      	b.n	800e3d2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e3b2:	7bfb      	ldrb	r3, [r7, #15]
 800e3b4:	687a      	ldr	r2, [r7, #4]
 800e3b6:	33e0      	adds	r3, #224	; 0xe0
 800e3b8:	009b      	lsls	r3, r3, #2
 800e3ba:	4413      	add	r3, r2
 800e3bc:	685b      	ldr	r3, [r3, #4]
 800e3be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d102      	bne.n	800e3cc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e3c6:	7bfb      	ldrb	r3, [r7, #15]
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	e007      	b.n	800e3dc <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e3cc:	7bfb      	ldrb	r3, [r7, #15]
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	73fb      	strb	r3, [r7, #15]
 800e3d2:	7bfb      	ldrb	r3, [r7, #15]
 800e3d4:	2b0f      	cmp	r3, #15
 800e3d6:	d9ec      	bls.n	800e3b2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e3d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e3dc:	4618      	mov	r0, r3
 800e3de:	3714      	adds	r7, #20
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e6:	4770      	bx	lr

0800e3e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e3e8:	b480      	push	{r7}
 800e3ea:	b087      	sub	sp, #28
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	60f8      	str	r0, [r7, #12]
 800e3f0:	60b9      	str	r1, [r7, #8]
 800e3f2:	4613      	mov	r3, r2
 800e3f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e3fe:	4b1f      	ldr	r3, [pc, #124]	; (800e47c <FATFS_LinkDriverEx+0x94>)
 800e400:	7a5b      	ldrb	r3, [r3, #9]
 800e402:	b2db      	uxtb	r3, r3
 800e404:	2b00      	cmp	r3, #0
 800e406:	d131      	bne.n	800e46c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e408:	4b1c      	ldr	r3, [pc, #112]	; (800e47c <FATFS_LinkDriverEx+0x94>)
 800e40a:	7a5b      	ldrb	r3, [r3, #9]
 800e40c:	b2db      	uxtb	r3, r3
 800e40e:	461a      	mov	r2, r3
 800e410:	4b1a      	ldr	r3, [pc, #104]	; (800e47c <FATFS_LinkDriverEx+0x94>)
 800e412:	2100      	movs	r1, #0
 800e414:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e416:	4b19      	ldr	r3, [pc, #100]	; (800e47c <FATFS_LinkDriverEx+0x94>)
 800e418:	7a5b      	ldrb	r3, [r3, #9]
 800e41a:	b2db      	uxtb	r3, r3
 800e41c:	4a17      	ldr	r2, [pc, #92]	; (800e47c <FATFS_LinkDriverEx+0x94>)
 800e41e:	009b      	lsls	r3, r3, #2
 800e420:	4413      	add	r3, r2
 800e422:	68fa      	ldr	r2, [r7, #12]
 800e424:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e426:	4b15      	ldr	r3, [pc, #84]	; (800e47c <FATFS_LinkDriverEx+0x94>)
 800e428:	7a5b      	ldrb	r3, [r3, #9]
 800e42a:	b2db      	uxtb	r3, r3
 800e42c:	461a      	mov	r2, r3
 800e42e:	4b13      	ldr	r3, [pc, #76]	; (800e47c <FATFS_LinkDriverEx+0x94>)
 800e430:	4413      	add	r3, r2
 800e432:	79fa      	ldrb	r2, [r7, #7]
 800e434:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e436:	4b11      	ldr	r3, [pc, #68]	; (800e47c <FATFS_LinkDriverEx+0x94>)
 800e438:	7a5b      	ldrb	r3, [r3, #9]
 800e43a:	b2db      	uxtb	r3, r3
 800e43c:	1c5a      	adds	r2, r3, #1
 800e43e:	b2d1      	uxtb	r1, r2
 800e440:	4a0e      	ldr	r2, [pc, #56]	; (800e47c <FATFS_LinkDriverEx+0x94>)
 800e442:	7251      	strb	r1, [r2, #9]
 800e444:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e446:	7dbb      	ldrb	r3, [r7, #22]
 800e448:	3330      	adds	r3, #48	; 0x30
 800e44a:	b2da      	uxtb	r2, r3
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	3301      	adds	r3, #1
 800e454:	223a      	movs	r2, #58	; 0x3a
 800e456:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	3302      	adds	r3, #2
 800e45c:	222f      	movs	r2, #47	; 0x2f
 800e45e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	3303      	adds	r3, #3
 800e464:	2200      	movs	r2, #0
 800e466:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e468:	2300      	movs	r3, #0
 800e46a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e46c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e46e:	4618      	mov	r0, r3
 800e470:	371c      	adds	r7, #28
 800e472:	46bd      	mov	sp, r7
 800e474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e478:	4770      	bx	lr
 800e47a:	bf00      	nop
 800e47c:	2000091c 	.word	0x2000091c

0800e480 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b082      	sub	sp, #8
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e48a:	2200      	movs	r2, #0
 800e48c:	6839      	ldr	r1, [r7, #0]
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f7ff ffaa 	bl	800e3e8 <FATFS_LinkDriverEx>
 800e494:	4603      	mov	r3, r0
}
 800e496:	4618      	mov	r0, r3
 800e498:	3708      	adds	r7, #8
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
	...

0800e4a0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	490e      	ldr	r1, [pc, #56]	; (800e4e0 <MX_USB_HOST_Init+0x40>)
 800e4a8:	480e      	ldr	r0, [pc, #56]	; (800e4e4 <MX_USB_HOST_Init+0x44>)
 800e4aa:	f7fe faa9 	bl	800ca00 <USBH_Init>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d001      	beq.n	800e4b8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e4b4:	f7f3 f8a4 	bl	8001600 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800e4b8:	490b      	ldr	r1, [pc, #44]	; (800e4e8 <MX_USB_HOST_Init+0x48>)
 800e4ba:	480a      	ldr	r0, [pc, #40]	; (800e4e4 <MX_USB_HOST_Init+0x44>)
 800e4bc:	f7fe fb4d 	bl	800cb5a <USBH_RegisterClass>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d001      	beq.n	800e4ca <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e4c6:	f7f3 f89b 	bl	8001600 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e4ca:	4806      	ldr	r0, [pc, #24]	; (800e4e4 <MX_USB_HOST_Init+0x44>)
 800e4cc:	f7fe fbd1 	bl	800cc72 <USBH_Start>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d001      	beq.n	800e4da <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e4d6:	f7f3 f893 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e4da:	bf00      	nop
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	0800e501 	.word	0x0800e501
 800e4e4:	20000928 	.word	0x20000928
 800e4e8:	2000000c 	.word	0x2000000c

0800e4ec <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800e4f0:	4802      	ldr	r0, [pc, #8]	; (800e4fc <MX_USB_HOST_Process+0x10>)
 800e4f2:	f7fe fbcf 	bl	800cc94 <USBH_Process>
}
 800e4f6:	bf00      	nop
 800e4f8:	bd80      	pop	{r7, pc}
 800e4fa:	bf00      	nop
 800e4fc:	20000928 	.word	0x20000928

0800e500 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e500:	b480      	push	{r7}
 800e502:	b083      	sub	sp, #12
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	460b      	mov	r3, r1
 800e50a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e50c:	78fb      	ldrb	r3, [r7, #3]
 800e50e:	3b01      	subs	r3, #1
 800e510:	2b04      	cmp	r3, #4
 800e512:	d819      	bhi.n	800e548 <USBH_UserProcess+0x48>
 800e514:	a201      	add	r2, pc, #4	; (adr r2, 800e51c <USBH_UserProcess+0x1c>)
 800e516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e51a:	bf00      	nop
 800e51c:	0800e549 	.word	0x0800e549
 800e520:	0800e539 	.word	0x0800e539
 800e524:	0800e549 	.word	0x0800e549
 800e528:	0800e541 	.word	0x0800e541
 800e52c:	0800e531 	.word	0x0800e531
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e530:	4b09      	ldr	r3, [pc, #36]	; (800e558 <USBH_UserProcess+0x58>)
 800e532:	2203      	movs	r2, #3
 800e534:	701a      	strb	r2, [r3, #0]
  break;
 800e536:	e008      	b.n	800e54a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e538:	4b07      	ldr	r3, [pc, #28]	; (800e558 <USBH_UserProcess+0x58>)
 800e53a:	2202      	movs	r2, #2
 800e53c:	701a      	strb	r2, [r3, #0]
  break;
 800e53e:	e004      	b.n	800e54a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e540:	4b05      	ldr	r3, [pc, #20]	; (800e558 <USBH_UserProcess+0x58>)
 800e542:	2201      	movs	r2, #1
 800e544:	701a      	strb	r2, [r3, #0]
  break;
 800e546:	e000      	b.n	800e54a <USBH_UserProcess+0x4a>

  default:
  break;
 800e548:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e54a:	bf00      	nop
 800e54c:	370c      	adds	r7, #12
 800e54e:	46bd      	mov	sp, r7
 800e550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e554:	4770      	bx	lr
 800e556:	bf00      	nop
 800e558:	20000d00 	.word	0x20000d00

0800e55c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b0a0      	sub	sp, #128	; 0x80
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e564:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e568:	2200      	movs	r2, #0
 800e56a:	601a      	str	r2, [r3, #0]
 800e56c:	605a      	str	r2, [r3, #4]
 800e56e:	609a      	str	r2, [r3, #8]
 800e570:	60da      	str	r2, [r3, #12]
 800e572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e574:	f107 0310 	add.w	r3, r7, #16
 800e578:	225c      	movs	r2, #92	; 0x5c
 800e57a:	2100      	movs	r1, #0
 800e57c:	4618      	mov	r0, r3
 800e57e:	f001 ff9b 	bl	80104b8 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e58a:	d149      	bne.n	800e620 <HAL_HCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800e58c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e590:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800e592:	2300      	movs	r3, #0
 800e594:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e596:	f107 0310 	add.w	r3, r7, #16
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7f8 f9f0 	bl	8006980 <HAL_RCCEx_PeriphCLKConfig>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d001      	beq.n	800e5aa <HAL_HCD_MspInit+0x4e>
    {
      Error_Handler();
 800e5a6:	f7f3 f82b 	bl	8001600 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	60fb      	str	r3, [r7, #12]
 800e5ae:	4b1e      	ldr	r3, [pc, #120]	; (800e628 <HAL_HCD_MspInit+0xcc>)
 800e5b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5b2:	4a1d      	ldr	r2, [pc, #116]	; (800e628 <HAL_HCD_MspInit+0xcc>)
 800e5b4:	f043 0301 	orr.w	r3, r3, #1
 800e5b8:	6313      	str	r3, [r2, #48]	; 0x30
 800e5ba:	4b1b      	ldr	r3, [pc, #108]	; (800e628 <HAL_HCD_MspInit+0xcc>)
 800e5bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5be:	f003 0301 	and.w	r3, r3, #1
 800e5c2:	60fb      	str	r3, [r7, #12]
 800e5c4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e5c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e5ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5cc:	2302      	movs	r3, #2
 800e5ce:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e5d4:	2303      	movs	r3, #3
 800e5d6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e5d8:	230a      	movs	r3, #10
 800e5da:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e5dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	4812      	ldr	r0, [pc, #72]	; (800e62c <HAL_HCD_MspInit+0xd0>)
 800e5e4:	f7f4 fc9e 	bl	8002f24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e5e8:	4b0f      	ldr	r3, [pc, #60]	; (800e628 <HAL_HCD_MspInit+0xcc>)
 800e5ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ec:	4a0e      	ldr	r2, [pc, #56]	; (800e628 <HAL_HCD_MspInit+0xcc>)
 800e5ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5f2:	6353      	str	r3, [r2, #52]	; 0x34
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	60bb      	str	r3, [r7, #8]
 800e5f8:	4b0b      	ldr	r3, [pc, #44]	; (800e628 <HAL_HCD_MspInit+0xcc>)
 800e5fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5fc:	4a0a      	ldr	r2, [pc, #40]	; (800e628 <HAL_HCD_MspInit+0xcc>)
 800e5fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e602:	6453      	str	r3, [r2, #68]	; 0x44
 800e604:	4b08      	ldr	r3, [pc, #32]	; (800e628 <HAL_HCD_MspInit+0xcc>)
 800e606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e60c:	60bb      	str	r3, [r7, #8]
 800e60e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e610:	2200      	movs	r2, #0
 800e612:	2100      	movs	r1, #0
 800e614:	2043      	movs	r0, #67	; 0x43
 800e616:	f7f4 f86a 	bl	80026ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e61a:	2043      	movs	r0, #67	; 0x43
 800e61c:	f7f4 f883 	bl	8002726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e620:	bf00      	nop
 800e622:	3780      	adds	r7, #128	; 0x80
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}
 800e628:	40023800 	.word	0x40023800
 800e62c:	40020000 	.word	0x40020000

0800e630 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b082      	sub	sp, #8
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800e63e:	4618      	mov	r0, r3
 800e640:	f7fe ff07 	bl	800d452 <USBH_LL_IncTimer>
}
 800e644:	bf00      	nop
 800e646:	3708      	adds	r7, #8
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b082      	sub	sp, #8
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7fe ff3f 	bl	800d4de <USBH_LL_Connect>
}
 800e660:	bf00      	nop
 800e662:	3708      	adds	r7, #8
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}

0800e668 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b082      	sub	sp, #8
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800e676:	4618      	mov	r0, r3
 800e678:	f7fe ff48 	bl	800d50c <USBH_LL_Disconnect>
}
 800e67c:	bf00      	nop
 800e67e:	3708      	adds	r7, #8
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}

0800e684 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e684:	b480      	push	{r7}
 800e686:	b083      	sub	sp, #12
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	460b      	mov	r3, r1
 800e68e:	70fb      	strb	r3, [r7, #3]
 800e690:	4613      	mov	r3, r2
 800e692:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e694:	bf00      	nop
 800e696:	370c      	adds	r7, #12
 800e698:	46bd      	mov	sp, r7
 800e69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69e:	4770      	bx	lr

0800e6a0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b082      	sub	sp, #8
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f7fe fef9 	bl	800d4a6 <USBH_LL_PortEnabled>
}
 800e6b4:	bf00      	nop
 800e6b6:	3708      	adds	r7, #8
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}

0800e6bc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f7fe fef9 	bl	800d4c2 <USBH_LL_PortDisabled>
}
 800e6d0:	bf00      	nop
 800e6d2:	3708      	adds	r7, #8
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b082      	sub	sp, #8
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d12a      	bne.n	800e740 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e6ea:	4a18      	ldr	r2, [pc, #96]	; (800e74c <USBH_LL_Init+0x74>)
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	4a15      	ldr	r2, [pc, #84]	; (800e74c <USBH_LL_Init+0x74>)
 800e6f6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e6fa:	4b14      	ldr	r3, [pc, #80]	; (800e74c <USBH_LL_Init+0x74>)
 800e6fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e700:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800e702:	4b12      	ldr	r3, [pc, #72]	; (800e74c <USBH_LL_Init+0x74>)
 800e704:	220c      	movs	r2, #12
 800e706:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_LOW;
 800e708:	4b10      	ldr	r3, [pc, #64]	; (800e74c <USBH_LL_Init+0x74>)
 800e70a:	2201      	movs	r2, #1
 800e70c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e70e:	4b0f      	ldr	r3, [pc, #60]	; (800e74c <USBH_LL_Init+0x74>)
 800e710:	2200      	movs	r2, #0
 800e712:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e714:	4b0d      	ldr	r3, [pc, #52]	; (800e74c <USBH_LL_Init+0x74>)
 800e716:	2202      	movs	r2, #2
 800e718:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e71a:	4b0c      	ldr	r3, [pc, #48]	; (800e74c <USBH_LL_Init+0x74>)
 800e71c:	2200      	movs	r2, #0
 800e71e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e720:	480a      	ldr	r0, [pc, #40]	; (800e74c <USBH_LL_Init+0x74>)
 800e722:	f7f4 fdc4 	bl	80032ae <HAL_HCD_Init>
 800e726:	4603      	mov	r3, r0
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d001      	beq.n	800e730 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e72c:	f7f2 ff68 	bl	8001600 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e730:	4806      	ldr	r0, [pc, #24]	; (800e74c <USBH_LL_Init+0x74>)
 800e732:	f7f5 fa25 	bl	8003b80 <HAL_HCD_GetCurrentFrame>
 800e736:	4603      	mov	r3, r0
 800e738:	4619      	mov	r1, r3
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f7fe fe7a 	bl	800d434 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e740:	2300      	movs	r3, #0
}
 800e742:	4618      	mov	r0, r3
 800e744:	3708      	adds	r7, #8
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
 800e74a:	bf00      	nop
 800e74c:	20000d04 	.word	0x20000d04

0800e750 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b084      	sub	sp, #16
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e758:	2300      	movs	r3, #0
 800e75a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e75c:	2300      	movs	r3, #0
 800e75e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e766:	4618      	mov	r0, r3
 800e768:	f7f5 f992 	bl	8003a90 <HAL_HCD_Start>
 800e76c:	4603      	mov	r3, r0
 800e76e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e770:	7bfb      	ldrb	r3, [r7, #15]
 800e772:	4618      	mov	r0, r3
 800e774:	f000 f988 	bl	800ea88 <USBH_Get_USB_Status>
 800e778:	4603      	mov	r3, r0
 800e77a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e77c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e77e:	4618      	mov	r0, r3
 800e780:	3710      	adds	r7, #16
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}

0800e786 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e786:	b580      	push	{r7, lr}
 800e788:	b084      	sub	sp, #16
 800e78a:	af00      	add	r7, sp, #0
 800e78c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e78e:	2300      	movs	r3, #0
 800e790:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e792:	2300      	movs	r3, #0
 800e794:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e79c:	4618      	mov	r0, r3
 800e79e:	f7f5 f99a 	bl	8003ad6 <HAL_HCD_Stop>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e7a6:	7bfb      	ldrb	r3, [r7, #15]
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f000 f96d 	bl	800ea88 <USBH_Get_USB_Status>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3710      	adds	r7, #16
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}

0800e7bc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b084      	sub	sp, #16
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f7f5 f9e4 	bl	8003b9c <HAL_HCD_GetCurrentSpeed>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	2b02      	cmp	r3, #2
 800e7d8:	d00c      	beq.n	800e7f4 <USBH_LL_GetSpeed+0x38>
 800e7da:	2b02      	cmp	r3, #2
 800e7dc:	d80d      	bhi.n	800e7fa <USBH_LL_GetSpeed+0x3e>
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d002      	beq.n	800e7e8 <USBH_LL_GetSpeed+0x2c>
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	d003      	beq.n	800e7ee <USBH_LL_GetSpeed+0x32>
 800e7e6:	e008      	b.n	800e7fa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	73fb      	strb	r3, [r7, #15]
    break;
 800e7ec:	e008      	b.n	800e800 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	73fb      	strb	r3, [r7, #15]
    break;
 800e7f2:	e005      	b.n	800e800 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e7f4:	2302      	movs	r3, #2
 800e7f6:	73fb      	strb	r3, [r7, #15]
    break;
 800e7f8:	e002      	b.n	800e800 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	73fb      	strb	r3, [r7, #15]
    break;
 800e7fe:	bf00      	nop
  }
  return  speed;
 800e800:	7bfb      	ldrb	r3, [r7, #15]
}
 800e802:	4618      	mov	r0, r3
 800e804:	3710      	adds	r7, #16
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}

0800e80a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e80a:	b580      	push	{r7, lr}
 800e80c:	b084      	sub	sp, #16
 800e80e:	af00      	add	r7, sp, #0
 800e810:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e812:	2300      	movs	r3, #0
 800e814:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e816:	2300      	movs	r3, #0
 800e818:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e820:	4618      	mov	r0, r3
 800e822:	f7f5 f975 	bl	8003b10 <HAL_HCD_ResetPort>
 800e826:	4603      	mov	r3, r0
 800e828:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e82a:	7bfb      	ldrb	r3, [r7, #15]
 800e82c:	4618      	mov	r0, r3
 800e82e:	f000 f92b 	bl	800ea88 <USBH_Get_USB_Status>
 800e832:	4603      	mov	r3, r0
 800e834:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e836:	7bbb      	ldrb	r3, [r7, #14]
}
 800e838:	4618      	mov	r0, r3
 800e83a:	3710      	adds	r7, #16
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b082      	sub	sp, #8
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	460b      	mov	r3, r1
 800e84a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e852:	78fa      	ldrb	r2, [r7, #3]
 800e854:	4611      	mov	r1, r2
 800e856:	4618      	mov	r0, r3
 800e858:	f7f5 f97d 	bl	8003b56 <HAL_HCD_HC_GetXferCount>
 800e85c:	4603      	mov	r3, r0
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3708      	adds	r7, #8
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}

0800e866 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e866:	b590      	push	{r4, r7, lr}
 800e868:	b089      	sub	sp, #36	; 0x24
 800e86a:	af04      	add	r7, sp, #16
 800e86c:	6078      	str	r0, [r7, #4]
 800e86e:	4608      	mov	r0, r1
 800e870:	4611      	mov	r1, r2
 800e872:	461a      	mov	r2, r3
 800e874:	4603      	mov	r3, r0
 800e876:	70fb      	strb	r3, [r7, #3]
 800e878:	460b      	mov	r3, r1
 800e87a:	70bb      	strb	r3, [r7, #2]
 800e87c:	4613      	mov	r3, r2
 800e87e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e880:	2300      	movs	r3, #0
 800e882:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e884:	2300      	movs	r3, #0
 800e886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e88e:	787c      	ldrb	r4, [r7, #1]
 800e890:	78ba      	ldrb	r2, [r7, #2]
 800e892:	78f9      	ldrb	r1, [r7, #3]
 800e894:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e896:	9302      	str	r3, [sp, #8]
 800e898:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e89c:	9301      	str	r3, [sp, #4]
 800e89e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e8a2:	9300      	str	r3, [sp, #0]
 800e8a4:	4623      	mov	r3, r4
 800e8a6:	f7f4 fd69 	bl	800337c <HAL_HCD_HC_Init>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e8ae:	7bfb      	ldrb	r3, [r7, #15]
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f000 f8e9 	bl	800ea88 <USBH_Get_USB_Status>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e8ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3714      	adds	r7, #20
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd90      	pop	{r4, r7, pc}

0800e8c4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b084      	sub	sp, #16
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
 800e8cc:	460b      	mov	r3, r1
 800e8ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e8de:	78fa      	ldrb	r2, [r7, #3]
 800e8e0:	4611      	mov	r1, r2
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7f4 fe02 	bl	80034ec <HAL_HCD_HC_Halt>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e8ec:	7bfb      	ldrb	r3, [r7, #15]
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f000 f8ca 	bl	800ea88 <USBH_Get_USB_Status>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e8f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3710      	adds	r7, #16
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}

0800e902 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e902:	b590      	push	{r4, r7, lr}
 800e904:	b089      	sub	sp, #36	; 0x24
 800e906:	af04      	add	r7, sp, #16
 800e908:	6078      	str	r0, [r7, #4]
 800e90a:	4608      	mov	r0, r1
 800e90c:	4611      	mov	r1, r2
 800e90e:	461a      	mov	r2, r3
 800e910:	4603      	mov	r3, r0
 800e912:	70fb      	strb	r3, [r7, #3]
 800e914:	460b      	mov	r3, r1
 800e916:	70bb      	strb	r3, [r7, #2]
 800e918:	4613      	mov	r3, r2
 800e91a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e91c:	2300      	movs	r3, #0
 800e91e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e920:	2300      	movs	r3, #0
 800e922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e92a:	787c      	ldrb	r4, [r7, #1]
 800e92c:	78ba      	ldrb	r2, [r7, #2]
 800e92e:	78f9      	ldrb	r1, [r7, #3]
 800e930:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e934:	9303      	str	r3, [sp, #12]
 800e936:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e938:	9302      	str	r3, [sp, #8]
 800e93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e93c:	9301      	str	r3, [sp, #4]
 800e93e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e942:	9300      	str	r3, [sp, #0]
 800e944:	4623      	mov	r3, r4
 800e946:	f7f4 fdf5 	bl	8003534 <HAL_HCD_HC_SubmitRequest>
 800e94a:	4603      	mov	r3, r0
 800e94c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e94e:	7bfb      	ldrb	r3, [r7, #15]
 800e950:	4618      	mov	r0, r3
 800e952:	f000 f899 	bl	800ea88 <USBH_Get_USB_Status>
 800e956:	4603      	mov	r3, r0
 800e958:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e95a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3714      	adds	r7, #20
 800e960:	46bd      	mov	sp, r7
 800e962:	bd90      	pop	{r4, r7, pc}

0800e964 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b082      	sub	sp, #8
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	460b      	mov	r3, r1
 800e96e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e976:	78fa      	ldrb	r2, [r7, #3]
 800e978:	4611      	mov	r1, r2
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7f5 f8d6 	bl	8003b2c <HAL_HCD_HC_GetURBState>
 800e980:	4603      	mov	r3, r0
}
 800e982:	4618      	mov	r0, r3
 800e984:	3708      	adds	r7, #8
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}

0800e98a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e98a:	b580      	push	{r7, lr}
 800e98c:	b082      	sub	sp, #8
 800e98e:	af00      	add	r7, sp, #0
 800e990:	6078      	str	r0, [r7, #4]
 800e992:	460b      	mov	r3, r1
 800e994:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800e996:	20c8      	movs	r0, #200	; 0xc8
 800e998:	f7f3 fb38 	bl	800200c <HAL_Delay>
  return USBH_OK;
 800e99c:	2300      	movs	r3, #0
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3708      	adds	r7, #8
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}

0800e9a6 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e9a6:	b480      	push	{r7}
 800e9a8:	b085      	sub	sp, #20
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	6078      	str	r0, [r7, #4]
 800e9ae:	460b      	mov	r3, r1
 800e9b0:	70fb      	strb	r3, [r7, #3]
 800e9b2:	4613      	mov	r3, r2
 800e9b4:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e9bc:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e9be:	78fa      	ldrb	r2, [r7, #3]
 800e9c0:	68f9      	ldr	r1, [r7, #12]
 800e9c2:	4613      	mov	r3, r2
 800e9c4:	011b      	lsls	r3, r3, #4
 800e9c6:	1a9b      	subs	r3, r3, r2
 800e9c8:	009b      	lsls	r3, r3, #2
 800e9ca:	440b      	add	r3, r1
 800e9cc:	3317      	adds	r3, #23
 800e9ce:	781b      	ldrb	r3, [r3, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d00a      	beq.n	800e9ea <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e9d4:	78fa      	ldrb	r2, [r7, #3]
 800e9d6:	68f9      	ldr	r1, [r7, #12]
 800e9d8:	4613      	mov	r3, r2
 800e9da:	011b      	lsls	r3, r3, #4
 800e9dc:	1a9b      	subs	r3, r3, r2
 800e9de:	009b      	lsls	r3, r3, #2
 800e9e0:	440b      	add	r3, r1
 800e9e2:	333c      	adds	r3, #60	; 0x3c
 800e9e4:	78ba      	ldrb	r2, [r7, #2]
 800e9e6:	701a      	strb	r2, [r3, #0]
 800e9e8:	e009      	b.n	800e9fe <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e9ea:	78fa      	ldrb	r2, [r7, #3]
 800e9ec:	68f9      	ldr	r1, [r7, #12]
 800e9ee:	4613      	mov	r3, r2
 800e9f0:	011b      	lsls	r3, r3, #4
 800e9f2:	1a9b      	subs	r3, r3, r2
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	440b      	add	r3, r1
 800e9f8:	333d      	adds	r3, #61	; 0x3d
 800e9fa:	78ba      	ldrb	r2, [r7, #2]
 800e9fc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e9fe:	2300      	movs	r3, #0
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3714      	adds	r7, #20
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr

0800ea0c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b085      	sub	sp, #20
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
 800ea14:	460b      	mov	r3, r1
 800ea16:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ea22:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800ea24:	78fa      	ldrb	r2, [r7, #3]
 800ea26:	68b9      	ldr	r1, [r7, #8]
 800ea28:	4613      	mov	r3, r2
 800ea2a:	011b      	lsls	r3, r3, #4
 800ea2c:	1a9b      	subs	r3, r3, r2
 800ea2e:	009b      	lsls	r3, r3, #2
 800ea30:	440b      	add	r3, r1
 800ea32:	3317      	adds	r3, #23
 800ea34:	781b      	ldrb	r3, [r3, #0]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d00a      	beq.n	800ea50 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800ea3a:	78fa      	ldrb	r2, [r7, #3]
 800ea3c:	68b9      	ldr	r1, [r7, #8]
 800ea3e:	4613      	mov	r3, r2
 800ea40:	011b      	lsls	r3, r3, #4
 800ea42:	1a9b      	subs	r3, r3, r2
 800ea44:	009b      	lsls	r3, r3, #2
 800ea46:	440b      	add	r3, r1
 800ea48:	333c      	adds	r3, #60	; 0x3c
 800ea4a:	781b      	ldrb	r3, [r3, #0]
 800ea4c:	73fb      	strb	r3, [r7, #15]
 800ea4e:	e009      	b.n	800ea64 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800ea50:	78fa      	ldrb	r2, [r7, #3]
 800ea52:	68b9      	ldr	r1, [r7, #8]
 800ea54:	4613      	mov	r3, r2
 800ea56:	011b      	lsls	r3, r3, #4
 800ea58:	1a9b      	subs	r3, r3, r2
 800ea5a:	009b      	lsls	r3, r3, #2
 800ea5c:	440b      	add	r3, r1
 800ea5e:	333d      	adds	r3, #61	; 0x3d
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800ea64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	3714      	adds	r7, #20
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea70:	4770      	bx	lr

0800ea72 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ea72:	b580      	push	{r7, lr}
 800ea74:	b082      	sub	sp, #8
 800ea76:	af00      	add	r7, sp, #0
 800ea78:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f7f3 fac6 	bl	800200c <HAL_Delay>
}
 800ea80:	bf00      	nop
 800ea82:	3708      	adds	r7, #8
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}

0800ea88 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b085      	sub	sp, #20
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	4603      	mov	r3, r0
 800ea90:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ea92:	2300      	movs	r3, #0
 800ea94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ea96:	79fb      	ldrb	r3, [r7, #7]
 800ea98:	2b03      	cmp	r3, #3
 800ea9a:	d817      	bhi.n	800eacc <USBH_Get_USB_Status+0x44>
 800ea9c:	a201      	add	r2, pc, #4	; (adr r2, 800eaa4 <USBH_Get_USB_Status+0x1c>)
 800ea9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaa2:	bf00      	nop
 800eaa4:	0800eab5 	.word	0x0800eab5
 800eaa8:	0800eabb 	.word	0x0800eabb
 800eaac:	0800eac1 	.word	0x0800eac1
 800eab0:	0800eac7 	.word	0x0800eac7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800eab4:	2300      	movs	r3, #0
 800eab6:	73fb      	strb	r3, [r7, #15]
    break;
 800eab8:	e00b      	b.n	800ead2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800eaba:	2302      	movs	r3, #2
 800eabc:	73fb      	strb	r3, [r7, #15]
    break;
 800eabe:	e008      	b.n	800ead2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800eac0:	2301      	movs	r3, #1
 800eac2:	73fb      	strb	r3, [r7, #15]
    break;
 800eac4:	e005      	b.n	800ead2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800eac6:	2302      	movs	r3, #2
 800eac8:	73fb      	strb	r3, [r7, #15]
    break;
 800eaca:	e002      	b.n	800ead2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800eacc:	2302      	movs	r3, #2
 800eace:	73fb      	strb	r3, [r7, #15]
    break;
 800ead0:	bf00      	nop
  }
  return usb_status;
 800ead2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3714      	adds	r7, #20
 800ead8:	46bd      	mov	sp, r7
 800eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eade:	4770      	bx	lr

0800eae0 <GetAddressRange>:
    DARK_COUNT_START_ADDR,
    CURVED_START_ADDR,
    BACKGROUND_START_ADDR
};

static void GetAddressRange(DataType type, uint32_t* start, uint32_t* end) {
 800eae0:	b480      	push	{r7}
 800eae2:	b085      	sub	sp, #20
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	4603      	mov	r3, r0
 800eae8:	60b9      	str	r1, [r7, #8]
 800eaea:	607a      	str	r2, [r7, #4]
 800eaec:	73fb      	strb	r3, [r7, #15]
    switch (type) {
 800eaee:	7bfb      	ldrb	r3, [r7, #15]
 800eaf0:	2b06      	cmp	r3, #6
 800eaf2:	d842      	bhi.n	800eb7a <GetAddressRange+0x9a>
 800eaf4:	a201      	add	r2, pc, #4	; (adr r2, 800eafc <GetAddressRange+0x1c>)
 800eaf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eafa:	bf00      	nop
 800eafc:	0800eb19 	.word	0x0800eb19
 800eb00:	0800eb27 	.word	0x0800eb27
 800eb04:	0800eb35 	.word	0x0800eb35
 800eb08:	0800eb43 	.word	0x0800eb43
 800eb0c:	0800eb51 	.word	0x0800eb51
 800eb10:	0800eb5f 	.word	0x0800eb5f
 800eb14:	0800eb6d 	.word	0x0800eb6d
        case DATA_TYPE_ERROR_CODES:
            *start = ERROR_CODES_START_ADDR;
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	4a1e      	ldr	r2, [pc, #120]	; (800eb94 <GetAddressRange+0xb4>)
 800eb1c:	601a      	str	r2, [r3, #0]
            *end = ERROR_CODES_START_ADDR + ERROR_CODES_SIZE;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	4a1d      	ldr	r2, [pc, #116]	; (800eb98 <GetAddressRange+0xb8>)
 800eb22:	601a      	str	r2, [r3, #0]
            break;
 800eb24:	e030      	b.n	800eb88 <GetAddressRange+0xa8>
        case DATA_TYPE_GENERAL_DATA:
            *start = GENERAL_DATA_START_ADDR;
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	4a1b      	ldr	r2, [pc, #108]	; (800eb98 <GetAddressRange+0xb8>)
 800eb2a:	601a      	str	r2, [r3, #0]
            *end = GENERAL_DATA_START_ADDR + GENERAL_DATA_SIZE;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	4a1b      	ldr	r2, [pc, #108]	; (800eb9c <GetAddressRange+0xbc>)
 800eb30:	601a      	str	r2, [r3, #0]
            break;
 800eb32:	e029      	b.n	800eb88 <GetAddressRange+0xa8>
        case DATA_TYPE_PRODUCT_INFO:
            *start = PRODUCT_INFO_START_ADDR;
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	4a1a      	ldr	r2, [pc, #104]	; (800eba0 <GetAddressRange+0xc0>)
 800eb38:	601a      	str	r2, [r3, #0]
            *end = PRODUCT_INFO_START_ADDR + PRODUCT_INFO_SIZE;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	4a19      	ldr	r2, [pc, #100]	; (800eba4 <GetAddressRange+0xc4>)
 800eb3e:	601a      	str	r2, [r3, #0]
            break;
 800eb40:	e022      	b.n	800eb88 <GetAddressRange+0xa8>
        case DATA_TYPE_LIGHT_CHECK:
            *start = LIGHT_CHECK_START_ADDR;
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	4a15      	ldr	r2, [pc, #84]	; (800eb9c <GetAddressRange+0xbc>)
 800eb46:	601a      	str	r2, [r3, #0]
            *end = LIGHT_CHECK_START_ADDR + LIGHT_CHECK_SIZE;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	4a17      	ldr	r2, [pc, #92]	; (800eba8 <GetAddressRange+0xc8>)
 800eb4c:	601a      	str	r2, [r3, #0]
            break;
 800eb4e:	e01b      	b.n	800eb88 <GetAddressRange+0xa8>
        case DATA_TYPE_DARK_COUNT:
            *start = DARK_COUNT_START_ADDR;
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	4a15      	ldr	r2, [pc, #84]	; (800eba8 <GetAddressRange+0xc8>)
 800eb54:	601a      	str	r2, [r3, #0]
            *end = DARK_COUNT_START_ADDR + DARK_COUNT_SIZE;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	4a14      	ldr	r2, [pc, #80]	; (800ebac <GetAddressRange+0xcc>)
 800eb5a:	601a      	str	r2, [r3, #0]
            break;
 800eb5c:	e014      	b.n	800eb88 <GetAddressRange+0xa8>
        case DATA_TYPE_CURVED:
            *start = CURVED_START_ADDR;
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	4a12      	ldr	r2, [pc, #72]	; (800ebac <GetAddressRange+0xcc>)
 800eb62:	601a      	str	r2, [r3, #0]
            *end = CURVED_START_ADDR + CURVED_SIZE;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	4a12      	ldr	r2, [pc, #72]	; (800ebb0 <GetAddressRange+0xd0>)
 800eb68:	601a      	str	r2, [r3, #0]
            break;
 800eb6a:	e00d      	b.n	800eb88 <GetAddressRange+0xa8>
        case DATA_TYPE_BACKGROUND:
            *start = BACKGROUND_START_ADDR;
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	4a10      	ldr	r2, [pc, #64]	; (800ebb0 <GetAddressRange+0xd0>)
 800eb70:	601a      	str	r2, [r3, #0]
            *end = BACKGROUND_START_ADDR + BACKGROUND_SIZE;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	4a0a      	ldr	r2, [pc, #40]	; (800eba0 <GetAddressRange+0xc0>)
 800eb76:	601a      	str	r2, [r3, #0]
        break;
 800eb78:	e006      	b.n	800eb88 <GetAddressRange+0xa8>
        default:
            *start = 0;
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	601a      	str	r2, [r3, #0]
            *end = 0;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2200      	movs	r2, #0
 800eb84:	601a      	str	r2, [r3, #0]
    }
}
 800eb86:	bf00      	nop
 800eb88:	bf00      	nop
 800eb8a:	3714      	adds	r7, #20
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr
 800eb94:	08060000 	.word	0x08060000
 800eb98:	08064000 	.word	0x08064000
 800eb9c:	08074000 	.word	0x08074000
 800eba0:	08080000 	.word	0x08080000
 800eba4:	08084000 	.word	0x08084000
 800eba8:	08076000 	.word	0x08076000
 800ebac:	08078000 	.word	0x08078000
 800ebb0:	0807f000 	.word	0x0807f000

0800ebb4 <EraseFlashSector>:

static HAL_StatusTypeDef EraseFlashSector(uint32_t sector) {
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b088      	sub	sp, #32
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
    FLASH_EraseInitTypeDef EraseInitStruct = {0};
 800ebbc:	f107 030c 	add.w	r3, r7, #12
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	601a      	str	r2, [r3, #0]
 800ebc4:	605a      	str	r2, [r3, #4]
 800ebc6:	609a      	str	r2, [r3, #8]
 800ebc8:	60da      	str	r2, [r3, #12]
 800ebca:	611a      	str	r2, [r3, #16]
    uint32_t SectorError = 0;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	60bb      	str	r3, [r7, #8]

    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800ebd4:	2302      	movs	r3, #2
 800ebd6:	61fb      	str	r3, [r7, #28]
    EraseInitStruct.Sector = sector;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	617b      	str	r3, [r7, #20]
    EraseInitStruct.NbSectors = 1;
 800ebdc:	2301      	movs	r3, #1
 800ebde:	61bb      	str	r3, [r7, #24]

    return HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 800ebe0:	f107 0208 	add.w	r2, r7, #8
 800ebe4:	f107 030c 	add.w	r3, r7, #12
 800ebe8:	4611      	mov	r1, r2
 800ebea:	4618      	mov	r0, r3
 800ebec:	f7f4 f878 	bl	8002ce0 <HAL_FLASHEx_Erase>
 800ebf0:	4603      	mov	r3, r0
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3720      	adds	r7, #32
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}

0800ebfa <WriteToFlashAddress>:

HAL_StatusTypeDef WriteToFlashAddress(uint32_t address, const uint8_t* data, uint32_t size) {
 800ebfa:	b5b0      	push	{r4, r5, r7, lr}
 800ebfc:	b088      	sub	sp, #32
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	60f8      	str	r0, [r7, #12]
 800ec02:	60b9      	str	r1, [r7, #8]
 800ec04:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 800ec06:	2300      	movs	r3, #0
 800ec08:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Unlock();
 800ec0a:	f7f3 fef7 	bl	80029fc <HAL_FLASH_Unlock>

    for (uint32_t i = 0; i < size; i += 4) {
 800ec0e:	2300      	movs	r3, #0
 800ec10:	61bb      	str	r3, [r7, #24]
 800ec12:	e018      	b.n	800ec46 <WriteToFlashAddress+0x4c>
        uint32_t data_word = *(uint32_t*)&data[i];
 800ec14:	68ba      	ldr	r2, [r7, #8]
 800ec16:	69bb      	ldr	r3, [r7, #24]
 800ec18:	4413      	add	r3, r2
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	617b      	str	r3, [r7, #20]
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i, data_word);
 800ec1e:	68fa      	ldr	r2, [r7, #12]
 800ec20:	69bb      	ldr	r3, [r7, #24]
 800ec22:	18d1      	adds	r1, r2, r3
 800ec24:	697b      	ldr	r3, [r7, #20]
 800ec26:	2200      	movs	r2, #0
 800ec28:	461c      	mov	r4, r3
 800ec2a:	4615      	mov	r5, r2
 800ec2c:	4622      	mov	r2, r4
 800ec2e:	462b      	mov	r3, r5
 800ec30:	2002      	movs	r0, #2
 800ec32:	f7f3 fe8f 	bl	8002954 <HAL_FLASH_Program>
 800ec36:	4603      	mov	r3, r0
 800ec38:	77fb      	strb	r3, [r7, #31]
        if (status != HAL_OK) {
 800ec3a:	7ffb      	ldrb	r3, [r7, #31]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d107      	bne.n	800ec50 <WriteToFlashAddress+0x56>
    for (uint32_t i = 0; i < size; i += 4) {
 800ec40:	69bb      	ldr	r3, [r7, #24]
 800ec42:	3304      	adds	r3, #4
 800ec44:	61bb      	str	r3, [r7, #24]
 800ec46:	69ba      	ldr	r2, [r7, #24]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d3e2      	bcc.n	800ec14 <WriteToFlashAddress+0x1a>
 800ec4e:	e000      	b.n	800ec52 <WriteToFlashAddress+0x58>
            break;
 800ec50:	bf00      	nop
        }
    }

    HAL_FLASH_Lock();
 800ec52:	f7f3 fef5 	bl	8002a40 <HAL_FLASH_Lock>
    return status;
 800ec56:	7ffb      	ldrb	r3, [r7, #31]
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3720      	adds	r7, #32
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bdb0      	pop	{r4, r5, r7, pc}

0800ec60 <ReadFromFlashAddress>:

void ReadFromFlashAddress(uint32_t address, uint8_t* data, uint32_t size) {
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b084      	sub	sp, #16
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	60f8      	str	r0, [r7, #12]
 800ec68:	60b9      	str	r1, [r7, #8]
 800ec6a:	607a      	str	r2, [r7, #4]
    memcpy(data, (void*)address, size);
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	687a      	ldr	r2, [r7, #4]
 800ec70:	4619      	mov	r1, r3
 800ec72:	68b8      	ldr	r0, [r7, #8]
 800ec74:	f001 fc64 	bl	8010540 <memcpy>
}
 800ec78:	bf00      	nop
 800ec7a:	3710      	adds	r7, #16
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}

0800ec80 <GetSectorForAddress>:

uint32_t GetSectorForAddress(uint32_t address) {
 800ec80:	b480      	push	{r7}
 800ec82:	b083      	sub	sp, #12
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
    if (address >= 0x08060000 && address < 0x0807FFFF) return FLASH_SECTOR_7;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	4a08      	ldr	r2, [pc, #32]	; (800ecac <GetSectorForAddress+0x2c>)
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d905      	bls.n	800ec9c <GetSectorForAddress+0x1c>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	4a07      	ldr	r2, [pc, #28]	; (800ecb0 <GetSectorForAddress+0x30>)
 800ec94:	4293      	cmp	r3, r2
 800ec96:	d201      	bcs.n	800ec9c <GetSectorForAddress+0x1c>
 800ec98:	2307      	movs	r3, #7
 800ec9a:	e001      	b.n	800eca0 <GetSectorForAddress+0x20>
    return 0xFFFFFFFF; // Invalid sector
 800ec9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	370c      	adds	r7, #12
 800eca4:	46bd      	mov	sp, r7
 800eca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecaa:	4770      	bx	lr
 800ecac:	0805ffff 	.word	0x0805ffff
 800ecb0:	0807ffff 	.word	0x0807ffff

0800ecb4 <WriteDataToFlash>:

HAL_StatusTypeDef WriteDataToFlash(uint32_t address, const uint8_t* data, uint32_t size) {
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b08a      	sub	sp, #40	; 0x28
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	60f8      	str	r0, [r7, #12]
 800ecbc:	60b9      	str	r1, [r7, #8]
 800ecbe:	607a      	str	r2, [r7, #4]
    uint32_t sector = GetSectorForAddress(address);
 800ecc0:	68f8      	ldr	r0, [r7, #12]
 800ecc2:	f7ff ffdd 	bl	800ec80 <GetSectorForAddress>
 800ecc6:	61f8      	str	r0, [r7, #28]
    if (sector == 0xFFFFFFFF) {
 800ecc8:	69fb      	ldr	r3, [r7, #28]
 800ecca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecce:	d101      	bne.n	800ecd4 <WriteDataToFlash+0x20>
        return HAL_ERROR; // Invalid address
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	e030      	b.n	800ed36 <WriteDataToFlash+0x82>
    }

    HAL_StatusTypeDef status;

    uint32_t* flash_ptr = (uint32_t*)address;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	61bb      	str	r3, [r7, #24]
    bool needs_erase = false;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for (uint32_t i = 0; i < (size + 3) / 4; i++) {
 800ecde:	2300      	movs	r3, #0
 800ece0:	623b      	str	r3, [r7, #32]
 800ece2:	e00e      	b.n	800ed02 <WriteDataToFlash+0x4e>
        if (flash_ptr[i] != 0xFFFFFFFF) {
 800ece4:	6a3b      	ldr	r3, [r7, #32]
 800ece6:	009b      	lsls	r3, r3, #2
 800ece8:	69ba      	ldr	r2, [r7, #24]
 800ecea:	4413      	add	r3, r2
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecf2:	d003      	beq.n	800ecfc <WriteDataToFlash+0x48>
            needs_erase = true;
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800ecfa:	e008      	b.n	800ed0e <WriteDataToFlash+0x5a>
    for (uint32_t i = 0; i < (size + 3) / 4; i++) {
 800ecfc:	6a3b      	ldr	r3, [r7, #32]
 800ecfe:	3301      	adds	r3, #1
 800ed00:	623b      	str	r3, [r7, #32]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	3303      	adds	r3, #3
 800ed06:	089b      	lsrs	r3, r3, #2
 800ed08:	6a3a      	ldr	r2, [r7, #32]
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d3ea      	bcc.n	800ece4 <WriteDataToFlash+0x30>
        }
    }

    if (needs_erase) {
 800ed0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d009      	beq.n	800ed2a <WriteDataToFlash+0x76>
        status = EraseFlashSector(sector);
 800ed16:	69f8      	ldr	r0, [r7, #28]
 800ed18:	f7ff ff4c 	bl	800ebb4 <EraseFlashSector>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	75fb      	strb	r3, [r7, #23]
        if (status != HAL_OK) {
 800ed20:	7dfb      	ldrb	r3, [r7, #23]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d001      	beq.n	800ed2a <WriteDataToFlash+0x76>
            return status;
 800ed26:	7dfb      	ldrb	r3, [r7, #23]
 800ed28:	e005      	b.n	800ed36 <WriteDataToFlash+0x82>
        }
    }

    return WriteToFlashAddress(address, data, size);
 800ed2a:	687a      	ldr	r2, [r7, #4]
 800ed2c:	68b9      	ldr	r1, [r7, #8]
 800ed2e:	68f8      	ldr	r0, [r7, #12]
 800ed30:	f7ff ff63 	bl	800ebfa <WriteToFlashAddress>
 800ed34:	4603      	mov	r3, r0
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3728      	adds	r7, #40	; 0x28
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}
	...

0800ed40 <FindNextWriteAddress>:

static HAL_StatusTypeDef FindNextWriteAddress(DataType type) {
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b08a      	sub	sp, #40	; 0x28
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	4603      	mov	r3, r0
 800ed48:	71fb      	strb	r3, [r7, #7]
    uint32_t start, end;
    GetAddressRange(type, &start, &end);
 800ed4a:	f107 021c 	add.w	r2, r7, #28
 800ed4e:	f107 0120 	add.w	r1, r7, #32
 800ed52:	79fb      	ldrb	r3, [r7, #7]
 800ed54:	4618      	mov	r0, r3
 800ed56:	f7ff fec3 	bl	800eae0 <GetAddressRange>

    uint32_t address = start;
 800ed5a:	6a3b      	ldr	r3, [r7, #32]
 800ed5c:	627b      	str	r3, [r7, #36]	; 0x24
    RecordHeader header;

    while (address < end) {
 800ed5e:	e01b      	b.n	800ed98 <FindNextWriteAddress+0x58>
        ReadFromFlashAddress(address, (uint8_t*)&header, sizeof(RecordHeader));
 800ed60:	f107 0308 	add.w	r3, r7, #8
 800ed64:	2210      	movs	r2, #16
 800ed66:	4619      	mov	r1, r3
 800ed68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed6a:	f7ff ff79 	bl	800ec60 <ReadFromFlashAddress>

        if (header.status == 0xFFFFFFFF) {
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed74:	d106      	bne.n	800ed84 <FindNextWriteAddress+0x44>
            last_write_address[type] = address;
 800ed76:	79fb      	ldrb	r3, [r7, #7]
 800ed78:	490c      	ldr	r1, [pc, #48]	; (800edac <FindNextWriteAddress+0x6c>)
 800ed7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            return HAL_OK;
 800ed80:	2300      	movs	r3, #0
 800ed82:	e00e      	b.n	800eda2 <FindNextWriteAddress+0x62>
        }

        address += RECORD_HEADER_SIZE + header.size;
 800ed84:	68ba      	ldr	r2, [r7, #8]
 800ed86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed88:	4413      	add	r3, r2
 800ed8a:	3310      	adds	r3, #16
 800ed8c:	627b      	str	r3, [r7, #36]	; 0x24
        address = (address + 3) & ~3;
 800ed8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed90:	3303      	adds	r3, #3
 800ed92:	f023 0303 	bic.w	r3, r3, #3
 800ed96:	627b      	str	r3, [r7, #36]	; 0x24
    while (address < end) {
 800ed98:	69fb      	ldr	r3, [r7, #28]
 800ed9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d3df      	bcc.n	800ed60 <FindNextWriteAddress+0x20>
    }

    return HAL_ERROR;
 800eda0:	2301      	movs	r3, #1
}
 800eda2:	4618      	mov	r0, r3
 800eda4:	3728      	adds	r7, #40	; 0x28
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}
 800edaa:	bf00      	nop
 800edac:	2000002c 	.word	0x2000002c

0800edb0 <AppendData>:

HAL_StatusTypeDef AppendData(DataType type, const uint8_t* data, uint32_t size) {
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b08a      	sub	sp, #40	; 0x28
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	4603      	mov	r3, r0
 800edb8:	60b9      	str	r1, [r7, #8]
 800edba:	607a      	str	r2, [r7, #4]
 800edbc:	73fb      	strb	r3, [r7, #15]
    if (size > RECORD_MAX_SIZE) {
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800edc4:	d901      	bls.n	800edca <AppendData+0x1a>
        return HAL_ERROR;
 800edc6:	2301      	movs	r3, #1
 800edc8:	e061      	b.n	800ee8e <AppendData+0xde>
    }

    if (FindNextWriteAddress(type) != HAL_OK) {
 800edca:	7bfb      	ldrb	r3, [r7, #15]
 800edcc:	4618      	mov	r0, r3
 800edce:	f7ff ffb7 	bl	800ed40 <FindNextWriteAddress>
 800edd2:	4603      	mov	r3, r0
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d011      	beq.n	800edfc <AppendData+0x4c>
        if (PerformGarbageCollection(type) != HAL_OK) {
 800edd8:	7bfb      	ldrb	r3, [r7, #15]
 800edda:	4618      	mov	r0, r3
 800eddc:	f000 f85e 	bl	800ee9c <PerformGarbageCollection>
 800ede0:	4603      	mov	r3, r0
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d001      	beq.n	800edea <AppendData+0x3a>
            return HAL_ERROR;
 800ede6:	2301      	movs	r3, #1
 800ede8:	e051      	b.n	800ee8e <AppendData+0xde>
        }
        if (FindNextWriteAddress(type) != HAL_OK) {
 800edea:	7bfb      	ldrb	r3, [r7, #15]
 800edec:	4618      	mov	r0, r3
 800edee:	f7ff ffa7 	bl	800ed40 <FindNextWriteAddress>
 800edf2:	4603      	mov	r3, r0
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d001      	beq.n	800edfc <AppendData+0x4c>
            return HAL_ERROR;
 800edf8:	2301      	movs	r3, #1
 800edfa:	e048      	b.n	800ee8e <AppendData+0xde>
        }
    }

    RecordHeader header = {
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	613b      	str	r3, [r7, #16]
 800ee00:	2300      	movs	r3, #0
 800ee02:	617b      	str	r3, [r7, #20]
        .size = size,
        .status = 0x00000000,
        .timestamp = GetCurrentTimestamp()
 800ee04:	f000 f8e8 	bl	800efd8 <GetCurrentTimestamp>
 800ee08:	4602      	mov	r2, r0
 800ee0a:	460b      	mov	r3, r1
    RecordHeader header = {
 800ee0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    };

    HAL_StatusTypeDef status = WriteDataToFlash(last_write_address[type], (uint8_t*)&header, sizeof(RecordHeader));
 800ee10:	7bfb      	ldrb	r3, [r7, #15]
 800ee12:	4a21      	ldr	r2, [pc, #132]	; (800ee98 <AppendData+0xe8>)
 800ee14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee18:	f107 0110 	add.w	r1, r7, #16
 800ee1c:	2210      	movs	r2, #16
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7ff ff48 	bl	800ecb4 <WriteDataToFlash>
 800ee24:	4603      	mov	r3, r0
 800ee26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (status != HAL_OK) {
 800ee2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d002      	beq.n	800ee38 <AppendData+0x88>
        return status;
 800ee32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee36:	e02a      	b.n	800ee8e <AppendData+0xde>
    }

    status = WriteDataToFlash(last_write_address[type] + sizeof(RecordHeader), data, size);
 800ee38:	7bfb      	ldrb	r3, [r7, #15]
 800ee3a:	4a17      	ldr	r2, [pc, #92]	; (800ee98 <AppendData+0xe8>)
 800ee3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee40:	3310      	adds	r3, #16
 800ee42:	687a      	ldr	r2, [r7, #4]
 800ee44:	68b9      	ldr	r1, [r7, #8]
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7ff ff34 	bl	800ecb4 <WriteDataToFlash>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (status != HAL_OK) {
 800ee52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d002      	beq.n	800ee60 <AppendData+0xb0>
        return status;
 800ee5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee5e:	e016      	b.n	800ee8e <AppendData+0xde>
    }

    last_write_address[type] += RECORD_HEADER_SIZE + size;
 800ee60:	7bfb      	ldrb	r3, [r7, #15]
 800ee62:	4a0d      	ldr	r2, [pc, #52]	; (800ee98 <AppendData+0xe8>)
 800ee64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	441a      	add	r2, r3
 800ee6c:	7bfb      	ldrb	r3, [r7, #15]
 800ee6e:	3210      	adds	r2, #16
 800ee70:	4909      	ldr	r1, [pc, #36]	; (800ee98 <AppendData+0xe8>)
 800ee72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    last_write_address[type] = (last_write_address[type] + 3) & ~3;
 800ee76:	7bfb      	ldrb	r3, [r7, #15]
 800ee78:	4a07      	ldr	r2, [pc, #28]	; (800ee98 <AppendData+0xe8>)
 800ee7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee7e:	1cda      	adds	r2, r3, #3
 800ee80:	7bfb      	ldrb	r3, [r7, #15]
 800ee82:	f022 0203 	bic.w	r2, r2, #3
 800ee86:	4904      	ldr	r1, [pc, #16]	; (800ee98 <AppendData+0xe8>)
 800ee88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return HAL_OK;
 800ee8c:	2300      	movs	r3, #0
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3728      	adds	r7, #40	; 0x28
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}
 800ee96:	bf00      	nop
 800ee98:	2000002c 	.word	0x2000002c

0800ee9c <PerformGarbageCollection>:
    }

    return HAL_ERROR;
}

HAL_StatusTypeDef PerformGarbageCollection(DataType type) {
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	4602      	mov	r2, r0
 800eea6:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eeaa:	f2a3 4329 	subw	r3, r3, #1065	; 0x429
 800eeae:	701a      	strb	r2, [r3, #0]
    uint32_t start, end;
    GetAddressRange(type, &start, &end);
 800eeb0:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 800eeb4:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 800eeb8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800eebc:	f2a3 4329 	subw	r3, r3, #1065	; 0x429
 800eec0:	781b      	ldrb	r3, [r3, #0]
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7ff fe0c 	bl	800eae0 <GetAddressRange>

    uint32_t read_address = start;
 800eec8:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800eecc:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    uint32_t write_address = start;
 800eed0:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800eed4:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
    RecordHeader header;

    while (read_address < end) {
 800eed8:	e04b      	b.n	800ef72 <PerformGarbageCollection+0xd6>
        ReadFromFlashAddress(read_address, (uint8_t*)&header, sizeof(RecordHeader));
 800eeda:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800eede:	2210      	movs	r2, #16
 800eee0:	4619      	mov	r1, r3
 800eee2:	f8d7 042c 	ldr.w	r0, [r7, #1068]	; 0x42c
 800eee6:	f7ff febb 	bl	800ec60 <ReadFromFlashAddress>

        if (header.status == 0x00000000) {
 800eeea:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d130      	bne.n	800ef54 <PerformGarbageCollection+0xb8>
            if (read_address != write_address) {
 800eef2:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 800eef6:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d01b      	beq.n	800ef36 <PerformGarbageCollection+0x9a>
                uint8_t buffer[RECORD_MAX_SIZE];
                ReadFromFlashAddress(read_address + sizeof(RecordHeader), buffer, header.size);
 800eefe:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 800ef02:	3310      	adds	r3, #16
 800ef04:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 800ef08:	f107 0108 	add.w	r1, r7, #8
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7ff fea7 	bl	800ec60 <ReadFromFlashAddress>

                WriteDataToFlash(write_address, (uint8_t*)&header, sizeof(RecordHeader));
 800ef12:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800ef16:	2210      	movs	r2, #16
 800ef18:	4619      	mov	r1, r3
 800ef1a:	f8d7 0428 	ldr.w	r0, [r7, #1064]	; 0x428
 800ef1e:	f7ff fec9 	bl	800ecb4 <WriteDataToFlash>
                WriteDataToFlash(write_address + sizeof(RecordHeader), buffer, header.size);
 800ef22:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800ef26:	3310      	adds	r3, #16
 800ef28:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 800ef2c:	f107 0108 	add.w	r1, r7, #8
 800ef30:	4618      	mov	r0, r3
 800ef32:	f7ff febf 	bl	800ecb4 <WriteDataToFlash>
            }
            write_address += RECORD_HEADER_SIZE + header.size;
 800ef36:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 800ef3a:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800ef3e:	4413      	add	r3, r2
 800ef40:	3310      	adds	r3, #16
 800ef42:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
            write_address = (write_address + 3) & ~3;
 800ef46:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800ef4a:	3303      	adds	r3, #3
 800ef4c:	f023 0303 	bic.w	r3, r3, #3
 800ef50:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
        }

        read_address += RECORD_HEADER_SIZE + header.size;
 800ef54:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 800ef58:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 800ef5c:	4413      	add	r3, r2
 800ef5e:	3310      	adds	r3, #16
 800ef60:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
        read_address = (read_address + 3) & ~3;
 800ef64:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 800ef68:	3303      	adds	r3, #3
 800ef6a:	f023 0303 	bic.w	r3, r3, #3
 800ef6e:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    while (read_address < end) {
 800ef72:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800ef76:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d3ad      	bcc.n	800eeda <PerformGarbageCollection+0x3e>
    }

    uint32_t sector = GetSectorForAddress(write_address);
 800ef7e:	f8d7 0428 	ldr.w	r0, [r7, #1064]	; 0x428
 800ef82:	f7ff fe7d 	bl	800ec80 <GetSectorForAddress>
 800ef86:	f8c7 0424 	str.w	r0, [r7, #1060]	; 0x424
    while (sector <= GetSectorForAddress(end - 1)) {
 800ef8a:	e008      	b.n	800ef9e <PerformGarbageCollection+0x102>
        EraseFlashSector(sector);
 800ef8c:	f8d7 0424 	ldr.w	r0, [r7, #1060]	; 0x424
 800ef90:	f7ff fe10 	bl	800ebb4 <EraseFlashSector>
        sector++;
 800ef94:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800ef98:	3301      	adds	r3, #1
 800ef9a:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
    while (sector <= GetSectorForAddress(end - 1)) {
 800ef9e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800efa2:	3b01      	subs	r3, #1
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7ff fe6b 	bl	800ec80 <GetSectorForAddress>
 800efaa:	4602      	mov	r2, r0
 800efac:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800efb0:	4293      	cmp	r3, r2
 800efb2:	d9eb      	bls.n	800ef8c <PerformGarbageCollection+0xf0>
    }

    last_write_address[type] = write_address;
 800efb4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800efb8:	f2a3 4329 	subw	r3, r3, #1065	; 0x429
 800efbc:	781b      	ldrb	r3, [r3, #0]
 800efbe:	4905      	ldr	r1, [pc, #20]	; (800efd4 <PerformGarbageCollection+0x138>)
 800efc0:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 800efc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return HAL_OK;
 800efc8:	2300      	movs	r3, #0
}
 800efca:	4618      	mov	r0, r3
 800efcc:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}
 800efd4:	2000002c 	.word	0x2000002c

0800efd8 <GetCurrentTimestamp>:

TimeStamp GetCurrentTimestamp(void) {
 800efd8:	b490      	push	{r4, r7}
 800efda:	af00      	add	r7, sp, #0
    static TimeStamp placeholder_timestamp = 0;
    return placeholder_timestamp++;
 800efdc:	4b06      	ldr	r3, [pc, #24]	; (800eff8 <GetCurrentTimestamp+0x20>)
 800efde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efe2:	1c50      	adds	r0, r2, #1
 800efe4:	f143 0100 	adc.w	r1, r3, #0
 800efe8:	4c03      	ldr	r4, [pc, #12]	; (800eff8 <GetCurrentTimestamp+0x20>)
 800efea:	e9c4 0100 	strd	r0, r1, [r4]
}
 800efee:	4610      	mov	r0, r2
 800eff0:	4619      	mov	r1, r3
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bc90      	pop	{r4, r7}
 800eff6:	4770      	bx	lr
 800eff8:	200010e8 	.word	0x200010e8

0800effc <WriteLightCheck>:

HAL_StatusTypeDef WriteLightCheck(uint32_t light_check) {
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
    return AppendData(DATA_TYPE_LIGHT_CHECK, (uint8_t*)&light_check, sizeof(uint32_t));
 800f004:	1d3b      	adds	r3, r7, #4
 800f006:	2204      	movs	r2, #4
 800f008:	4619      	mov	r1, r3
 800f00a:	2003      	movs	r0, #3
 800f00c:	f7ff fed0 	bl	800edb0 <AppendData>
 800f010:	4603      	mov	r3, r0
}
 800f012:	4618      	mov	r0, r3
 800f014:	3708      	adds	r7, #8
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}

0800f01a <WriteDarkCount>:
    }

    return HAL_ERROR;
}

HAL_StatusTypeDef WriteDarkCount(uint32_t dark_count) {
 800f01a:	b580      	push	{r7, lr}
 800f01c:	b082      	sub	sp, #8
 800f01e:	af00      	add	r7, sp, #0
 800f020:	6078      	str	r0, [r7, #4]
    return AppendData(DATA_TYPE_DARK_COUNT, (uint8_t*)&dark_count, sizeof(uint32_t));
 800f022:	1d3b      	adds	r3, r7, #4
 800f024:	2204      	movs	r2, #4
 800f026:	4619      	mov	r1, r3
 800f028:	2004      	movs	r0, #4
 800f02a:	f7ff fec1 	bl	800edb0 <AppendData>
 800f02e:	4603      	mov	r3, r0
}
 800f030:	4618      	mov	r0, r3
 800f032:	3708      	adds	r7, #8
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}

0800f038 <WriteBackground>:
    }

    return HAL_ERROR;
}

HAL_StatusTypeDef WriteBackground(uint32_t newBackground) {
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
    return AppendData(DATA_TYPE_BACKGROUND, (uint8_t*)&newBackground, sizeof(uint32_t));
 800f040:	1d3b      	adds	r3, r7, #4
 800f042:	2204      	movs	r2, #4
 800f044:	4619      	mov	r1, r3
 800f046:	2006      	movs	r0, #6
 800f048:	f7ff feb2 	bl	800edb0 <AppendData>
 800f04c:	4603      	mov	r3, r0
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3708      	adds	r7, #8
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}

0800f056 <initLevelSense_SingleEnded>:
 */
#include "levelSense.h"


// Single ended configuration
HAL_StatusTypeDef initLevelSense_SingleEnded(I2C_HandleTypeDef *hi2c, uint8_t measChnl, uint8_t measConfig, bool capdac, uint8_t capdacVal ){
 800f056:	b580      	push	{r7, lr}
 800f058:	b086      	sub	sp, #24
 800f05a:	af02      	add	r7, sp, #8
 800f05c:	6078      	str	r0, [r7, #4]
 800f05e:	4608      	mov	r0, r1
 800f060:	4611      	mov	r1, r2
 800f062:	461a      	mov	r2, r3
 800f064:	4603      	mov	r3, r0
 800f066:	70fb      	strb	r3, [r7, #3]
 800f068:	460b      	mov	r3, r1
 800f06a:	70bb      	strb	r3, [r7, #2]
 800f06c:	4613      	mov	r3, r2
 800f06e:	707b      	strb	r3, [r7, #1]

	// Checking for invalid parameter input
	if(measChnl < 1 || measChnl > 4 || measConfig < 1 || measConfig > 4){
 800f070:	78fb      	ldrb	r3, [r7, #3]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d008      	beq.n	800f088 <initLevelSense_SingleEnded+0x32>
 800f076:	78fb      	ldrb	r3, [r7, #3]
 800f078:	2b04      	cmp	r3, #4
 800f07a:	d805      	bhi.n	800f088 <initLevelSense_SingleEnded+0x32>
 800f07c:	78bb      	ldrb	r3, [r7, #2]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d002      	beq.n	800f088 <initLevelSense_SingleEnded+0x32>
 800f082:	78bb      	ldrb	r3, [r7, #2]
 800f084:	2b04      	cmp	r3, #4
 800f086:	d901      	bls.n	800f08c <initLevelSense_SingleEnded+0x36>
		return HAL_ERROR;
 800f088:	2301      	movs	r3, #1
 800f08a:	e035      	b.n	800f0f8 <initLevelSense_SingleEnded+0xa2>
	}

	if(capdac && (capdacVal > 0x1F)){
 800f08c:	787b      	ldrb	r3, [r7, #1]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d004      	beq.n	800f09c <initLevelSense_SingleEnded+0x46>
 800f092:	7e3b      	ldrb	r3, [r7, #24]
 800f094:	2b1f      	cmp	r3, #31
 800f096:	d901      	bls.n	800f09c <initLevelSense_SingleEnded+0x46>
		return HAL_ERROR;
 800f098:	2301      	movs	r3, #1
 800f09a:	e02d      	b.n	800f0f8 <initLevelSense_SingleEnded+0xa2>
	}

	// Calculate address of config register
	uint8_t config_reg = CONF_MEAS1 + (measConfig-1);
 800f09c:	78bb      	ldrb	r3, [r7, #2]
 800f09e:	3307      	adds	r3, #7
 800f0a0:	73bb      	strb	r3, [r7, #14]

	// Configuration for the initialization
	uint8_t config_Value = 0;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	73fb      	strb	r3, [r7, #15]

	// Set the CHA field (bits [15:13]) for the positive input pin
	config_Value |= (measChnl-1) << 13;
 800f0a6:	78fb      	ldrb	r3, [r7, #3]
 800f0a8:	3b01      	subs	r3, #1
 800f0aa:	035b      	lsls	r3, r3, #13
 800f0ac:	b25a      	sxtb	r2, r3
 800f0ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0b2:	4313      	orrs	r3, r2
 800f0b4:	b25b      	sxtb	r3, r3
 800f0b6:	73fb      	strb	r3, [r7, #15]

    // Set the CAPDAC field (bits [9:5]) if capdac is true
    if (capdac) {
 800f0b8:	787b      	ldrb	r3, [r7, #1]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d009      	beq.n	800f0d2 <initLevelSense_SingleEnded+0x7c>
        // Setting capdac value
        uint8_t capdac_value = capdacVal; // Example CAPDAC value
 800f0be:	7e3b      	ldrb	r3, [r7, #24]
 800f0c0:	737b      	strb	r3, [r7, #13]
        config_Value |= (capdac_value << 5);
 800f0c2:	7b7b      	ldrb	r3, [r7, #13]
 800f0c4:	015b      	lsls	r3, r3, #5
 800f0c6:	b25a      	sxtb	r2, r3
 800f0c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0cc:	4313      	orrs	r3, r2
 800f0ce:	b25b      	sxtb	r3, r3
 800f0d0:	73fb      	strb	r3, [r7, #15]
    }

    // Buffer for sending i2c (High byte first)
    uint8_t data_Buffer[3];
    data_Buffer[0] = config_reg & 0xFF;
 800f0d2:	7bbb      	ldrb	r3, [r7, #14]
 800f0d4:	723b      	strb	r3, [r7, #8]
    data_Buffer[1] = (config_Value>>8) & 0xFF;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	727b      	strb	r3, [r7, #9]
    data_Buffer[2] = config_Value & 0xFF;
 800f0da:	7bfb      	ldrb	r3, [r7, #15]
 800f0dc:	72bb      	strb	r3, [r7, #10]

    // Sending on I2C
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(hi2c, (FDC1004_ADDR<<1) , data_Buffer, 3, HAL_MAX_DELAY);
 800f0de:	f107 0208 	add.w	r2, r7, #8
 800f0e2:	f04f 33ff 	mov.w	r3, #4294967295
 800f0e6:	9300      	str	r3, [sp, #0]
 800f0e8:	2303      	movs	r3, #3
 800f0ea:	21a0      	movs	r1, #160	; 0xa0
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f7f6 fb3d 	bl	800576c <HAL_I2C_Master_Transmit>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	733b      	strb	r3, [r7, #12]
    return status;
 800f0f6:	7b3b      	ldrb	r3, [r7, #12]
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	3710      	adds	r7, #16
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}

0800f100 <readValue_singleEnded>:

// function to read a single value from the IC for specified config
HAL_StatusTypeDef readValue_singleEnded(I2C_HandleTypeDef *hi2c, uint8_t measConfig, uint16_t* measVal){
 800f100:	b580      	push	{r7, lr}
 800f102:	b08a      	sub	sp, #40	; 0x28
 800f104:	af02      	add	r7, sp, #8
 800f106:	60f8      	str	r0, [r7, #12]
 800f108:	460b      	mov	r3, r1
 800f10a:	607a      	str	r2, [r7, #4]
 800f10c:	72fb      	strb	r3, [r7, #11]
	// data buffer for data
    uint8_t msb_data[2];
    uint8_t lsb_data[2];

    // Wait for measurement completion (polling done flag)
    uint8_t reg = FDC_CONF;
 800f10e:	230c      	movs	r3, #12
 800f110:	74fb      	strb	r3, [r7, #19]
    uint8_t status[2];

    data_Buffer[0] = FDC_CONF & 0xFF;
 800f112:	230c      	movs	r3, #12
 800f114:	773b      	strb	r3, [r7, #28]
    data_Buffer[1] = 0x00;  // REPEAT disabled, RATE = 100S/s
 800f116:	2300      	movs	r3, #0
 800f118:	777b      	strb	r3, [r7, #29]
    data_Buffer[2] = (0x01 << 7) >> (measConfig-1);  // MEAS1 enabled
 800f11a:	7afb      	ldrb	r3, [r7, #11]
 800f11c:	3b01      	subs	r3, #1
 800f11e:	2280      	movs	r2, #128	; 0x80
 800f120:	fa42 f303 	asr.w	r3, r2, r3
 800f124:	b2db      	uxtb	r3, r3
 800f126:	77bb      	strb	r3, [r7, #30]

    HAL_I2C_Master_Transmit(hi2c, (FDC1004_ADDR<<1) , data_Buffer, 3, HAL_MAX_DELAY);
 800f128:	f107 021c 	add.w	r2, r7, #28
 800f12c:	f04f 33ff 	mov.w	r3, #4294967295
 800f130:	9300      	str	r3, [sp, #0]
 800f132:	2303      	movs	r3, #3
 800f134:	21a0      	movs	r1, #160	; 0xa0
 800f136:	68f8      	ldr	r0, [r7, #12]
 800f138:	f7f6 fb18 	bl	800576c <HAL_I2C_Master_Transmit>

    do {
            if (HAL_I2C_Master_Transmit(hi2c, (FDC1004_ADDR<<1), &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 800f13c:	f107 0213 	add.w	r2, r7, #19
 800f140:	f04f 33ff 	mov.w	r3, #4294967295
 800f144:	9300      	str	r3, [sp, #0]
 800f146:	2301      	movs	r3, #1
 800f148:	21a0      	movs	r1, #160	; 0xa0
 800f14a:	68f8      	ldr	r0, [r7, #12]
 800f14c:	f7f6 fb0e 	bl	800576c <HAL_I2C_Master_Transmit>
 800f150:	4603      	mov	r3, r0
 800f152:	2b00      	cmp	r3, #0
 800f154:	d001      	beq.n	800f15a <readValue_singleEnded+0x5a>
                return HAL_ERROR;
 800f156:	2301      	movs	r3, #1
 800f158:	e06a      	b.n	800f230 <readValue_singleEnded+0x130>
            }
            if (HAL_I2C_Master_Receive(hi2c, (FDC1004_ADDR<<1), status, 2, HAL_MAX_DELAY) != HAL_OK) {
 800f15a:	f107 0210 	add.w	r2, r7, #16
 800f15e:	f04f 33ff 	mov.w	r3, #4294967295
 800f162:	9300      	str	r3, [sp, #0]
 800f164:	2302      	movs	r3, #2
 800f166:	21a0      	movs	r1, #160	; 0xa0
 800f168:	68f8      	ldr	r0, [r7, #12]
 800f16a:	f7f6 fbfd 	bl	8005968 <HAL_I2C_Master_Receive>
 800f16e:	4603      	mov	r3, r0
 800f170:	2b00      	cmp	r3, #0
 800f172:	d001      	beq.n	800f178 <readValue_singleEnded+0x78>
                return HAL_ERROR;
 800f174:	2301      	movs	r3, #1
 800f176:	e05b      	b.n	800f230 <readValue_singleEnded+0x130>
            }
        } while ((status[1] & (0x01 << (4 - measConfig))) == 0);  // Check DONE_n Flag
 800f178:	7c7b      	ldrb	r3, [r7, #17]
 800f17a:	461a      	mov	r2, r3
 800f17c:	7afb      	ldrb	r3, [r7, #11]
 800f17e:	f1c3 0304 	rsb	r3, r3, #4
 800f182:	fa42 f303 	asr.w	r3, r2, r3
 800f186:	f003 0301 	and.w	r3, r3, #1
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d0d6      	beq.n	800f13c <readValue_singleEnded+0x3c>

    reg = MEAS1_MSB + (2 * (measConfig - 1));
 800f18e:	7afb      	ldrb	r3, [r7, #11]
 800f190:	3b01      	subs	r3, #1
 800f192:	b2db      	uxtb	r3, r3
 800f194:	005b      	lsls	r3, r3, #1
 800f196:	b2db      	uxtb	r3, r3
 800f198:	74fb      	strb	r3, [r7, #19]


    // Getting MSB of the measured Data
    if (HAL_I2C_Master_Transmit(hi2c, FDC1004_ADDR, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 800f19a:	f107 0213 	add.w	r2, r7, #19
 800f19e:	f04f 33ff 	mov.w	r3, #4294967295
 800f1a2:	9300      	str	r3, [sp, #0]
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	2150      	movs	r1, #80	; 0x50
 800f1a8:	68f8      	ldr	r0, [r7, #12]
 800f1aa:	f7f6 fadf 	bl	800576c <HAL_I2C_Master_Transmit>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d001      	beq.n	800f1b8 <readValue_singleEnded+0xb8>
        return HAL_ERROR;
 800f1b4:	2301      	movs	r3, #1
 800f1b6:	e03b      	b.n	800f230 <readValue_singleEnded+0x130>
    }
    if (HAL_I2C_Master_Receive(hi2c, FDC1004_ADDR, msb_data, 2, HAL_MAX_DELAY) != HAL_OK) {
 800f1b8:	f107 0218 	add.w	r2, r7, #24
 800f1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800f1c0:	9300      	str	r3, [sp, #0]
 800f1c2:	2302      	movs	r3, #2
 800f1c4:	2150      	movs	r1, #80	; 0x50
 800f1c6:	68f8      	ldr	r0, [r7, #12]
 800f1c8:	f7f6 fbce 	bl	8005968 <HAL_I2C_Master_Receive>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d001      	beq.n	800f1d6 <readValue_singleEnded+0xd6>
        return HAL_ERROR;
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	e02c      	b.n	800f230 <readValue_singleEnded+0x130>
    }

    reg += 1;
 800f1d6:	7cfb      	ldrb	r3, [r7, #19]
 800f1d8:	3301      	adds	r3, #1
 800f1da:	b2db      	uxtb	r3, r3
 800f1dc:	74fb      	strb	r3, [r7, #19]

    // Getting LSB of the measured Data
    if (HAL_I2C_Master_Transmit(hi2c, FDC1004_ADDR, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 800f1de:	f107 0213 	add.w	r2, r7, #19
 800f1e2:	f04f 33ff 	mov.w	r3, #4294967295
 800f1e6:	9300      	str	r3, [sp, #0]
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	2150      	movs	r1, #80	; 0x50
 800f1ec:	68f8      	ldr	r0, [r7, #12]
 800f1ee:	f7f6 fabd 	bl	800576c <HAL_I2C_Master_Transmit>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d001      	beq.n	800f1fc <readValue_singleEnded+0xfc>
            return HAL_ERROR;
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	e019      	b.n	800f230 <readValue_singleEnded+0x130>
        }
        if (HAL_I2C_Master_Receive(hi2c, FDC1004_ADDR, lsb_data, 2, HAL_MAX_DELAY) != HAL_OK) {
 800f1fc:	f107 0214 	add.w	r2, r7, #20
 800f200:	f04f 33ff 	mov.w	r3, #4294967295
 800f204:	9300      	str	r3, [sp, #0]
 800f206:	2302      	movs	r3, #2
 800f208:	2150      	movs	r1, #80	; 0x50
 800f20a:	68f8      	ldr	r0, [r7, #12]
 800f20c:	f7f6 fbac 	bl	8005968 <HAL_I2C_Master_Receive>
 800f210:	4603      	mov	r3, r0
 800f212:	2b00      	cmp	r3, #0
 800f214:	d001      	beq.n	800f21a <readValue_singleEnded+0x11a>
            return HAL_ERROR;
 800f216:	2301      	movs	r3, #1
 800f218:	e00a      	b.n	800f230 <readValue_singleEnded+0x130>
        }

    // Combine MSB and LSB to form the 24-bit result
    *measVal = ((uint32_t)msb_data[0] << 16) | ((uint32_t)msb_data[1] << 8) | lsb_data[0];
 800f21a:	7e7b      	ldrb	r3, [r7, #25]
 800f21c:	b29b      	uxth	r3, r3
 800f21e:	021b      	lsls	r3, r3, #8
 800f220:	b29a      	uxth	r2, r3
 800f222:	7d3b      	ldrb	r3, [r7, #20]
 800f224:	b29b      	uxth	r3, r3
 800f226:	4313      	orrs	r3, r2
 800f228:	b29a      	uxth	r2, r3
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 800f22e:	2300      	movs	r3, #0

}
 800f230:	4618      	mov	r0, r3
 800f232:	3720      	adds	r7, #32
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}

0800f238 <initLevelSensors>:

HAL_StatusTypeDef initLevelSensors(I2C_HandleTypeDef *hi2c) {
 800f238:	b580      	push	{r7, lr}
 800f23a:	b086      	sub	sp, #24
 800f23c:	af02      	add	r7, sp, #8
 800f23e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    // Setup measurement 1 for channel 1
    status = initLevelSense_SingleEnded(hi2c, 1, 1, false, 0);
 800f240:	2300      	movs	r3, #0
 800f242:	9300      	str	r3, [sp, #0]
 800f244:	2300      	movs	r3, #0
 800f246:	2201      	movs	r2, #1
 800f248:	2101      	movs	r1, #1
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f7ff ff03 	bl	800f056 <initLevelSense_SingleEnded>
 800f250:	4603      	mov	r3, r0
 800f252:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 800f254:	7bfb      	ldrb	r3, [r7, #15]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d001      	beq.n	800f25e <initLevelSensors+0x26>
 800f25a:	7bfb      	ldrb	r3, [r7, #15]
 800f25c:	e01e      	b.n	800f29c <initLevelSensors+0x64>

    // Setup measurement 2 for channel 2
    status = initLevelSense_SingleEnded(hi2c, 2, 2, false, 0);
 800f25e:	2300      	movs	r3, #0
 800f260:	9300      	str	r3, [sp, #0]
 800f262:	2300      	movs	r3, #0
 800f264:	2202      	movs	r2, #2
 800f266:	2102      	movs	r1, #2
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f7ff fef4 	bl	800f056 <initLevelSense_SingleEnded>
 800f26e:	4603      	mov	r3, r0
 800f270:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 800f272:	7bfb      	ldrb	r3, [r7, #15]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d001      	beq.n	800f27c <initLevelSensors+0x44>
 800f278:	7bfb      	ldrb	r3, [r7, #15]
 800f27a:	e00f      	b.n	800f29c <initLevelSensors+0x64>

    // Setup measurement 3 for channel 3
    status = initLevelSense_SingleEnded(hi2c, 3, 3, false, 0);
 800f27c:	2300      	movs	r3, #0
 800f27e:	9300      	str	r3, [sp, #0]
 800f280:	2300      	movs	r3, #0
 800f282:	2203      	movs	r2, #3
 800f284:	2103      	movs	r1, #3
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f7ff fee5 	bl	800f056 <initLevelSense_SingleEnded>
 800f28c:	4603      	mov	r3, r0
 800f28e:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 800f290:	7bfb      	ldrb	r3, [r7, #15]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d001      	beq.n	800f29a <initLevelSensors+0x62>
 800f296:	7bfb      	ldrb	r3, [r7, #15]
 800f298:	e000      	b.n	800f29c <initLevelSensors+0x64>

    return HAL_OK;
 800f29a:	2300      	movs	r3, #0
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	3710      	adds	r7, #16
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}

0800f2a4 <readLevelSensors>:

HAL_StatusTypeDef readLevelSensors(I2C_HandleTypeDef *hi2c, float *channel1, float *channel2, float *channel3) {
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b08a      	sub	sp, #40	; 0x28
 800f2a8:	af02      	add	r7, sp, #8
 800f2aa:	60f8      	str	r0, [r7, #12]
 800f2ac:	60b9      	str	r1, [r7, #8]
 800f2ae:	607a      	str	r2, [r7, #4]
 800f2b0:	603b      	str	r3, [r7, #0]
    HAL_StatusTypeDef status;

    // Trigger measurements
    uint8_t fdc_conf[3] = {FDC_CONF, 0x04, 0x07}; // 100S/s, MEAS_1, MEAS_2, and MEAS_3 enabled
 800f2b2:	4a51      	ldr	r2, [pc, #324]	; (800f3f8 <readLevelSensors+0x154>)
 800f2b4:	f107 031c 	add.w	r3, r7, #28
 800f2b8:	6812      	ldr	r2, [r2, #0]
 800f2ba:	4611      	mov	r1, r2
 800f2bc:	8019      	strh	r1, [r3, #0]
 800f2be:	3302      	adds	r3, #2
 800f2c0:	0c12      	lsrs	r2, r2, #16
 800f2c2:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Master_Transmit(hi2c, (FDC1004_ADDR<<1), fdc_conf, 3, HAL_MAX_DELAY);
 800f2c4:	f107 021c 	add.w	r2, r7, #28
 800f2c8:	f04f 33ff 	mov.w	r3, #4294967295
 800f2cc:	9300      	str	r3, [sp, #0]
 800f2ce:	2303      	movs	r3, #3
 800f2d0:	21a0      	movs	r1, #160	; 0xa0
 800f2d2:	68f8      	ldr	r0, [r7, #12]
 800f2d4:	f7f6 fa4a 	bl	800576c <HAL_I2C_Master_Transmit>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) return status;
 800f2dc:	7ffb      	ldrb	r3, [r7, #31]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d001      	beq.n	800f2e6 <readLevelSensors+0x42>
 800f2e2:	7ffb      	ldrb	r3, [r7, #31]
 800f2e4:	e083      	b.n	800f3ee <readLevelSensors+0x14a>

    // Wait for measurements to complete
    uint8_t status_reg[2];
    do {
        uint8_t reg = FDC_CONF;
 800f2e6:	230c      	movs	r3, #12
 800f2e8:	757b      	strb	r3, [r7, #21]
        status = HAL_I2C_Master_Transmit(hi2c, (FDC1004_ADDR<<1), &reg, 1, HAL_MAX_DELAY);
 800f2ea:	f107 0215 	add.w	r2, r7, #21
 800f2ee:	f04f 33ff 	mov.w	r3, #4294967295
 800f2f2:	9300      	str	r3, [sp, #0]
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	21a0      	movs	r1, #160	; 0xa0
 800f2f8:	68f8      	ldr	r0, [r7, #12]
 800f2fa:	f7f6 fa37 	bl	800576c <HAL_I2C_Master_Transmit>
 800f2fe:	4603      	mov	r3, r0
 800f300:	77fb      	strb	r3, [r7, #31]
        if (status != HAL_OK) return status;
 800f302:	7ffb      	ldrb	r3, [r7, #31]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d001      	beq.n	800f30c <readLevelSensors+0x68>
 800f308:	7ffb      	ldrb	r3, [r7, #31]
 800f30a:	e070      	b.n	800f3ee <readLevelSensors+0x14a>
        
        status = HAL_I2C_Master_Receive(hi2c, (FDC1004_ADDR<<1), status_reg, 2, HAL_MAX_DELAY);
 800f30c:	f107 0218 	add.w	r2, r7, #24
 800f310:	f04f 33ff 	mov.w	r3, #4294967295
 800f314:	9300      	str	r3, [sp, #0]
 800f316:	2302      	movs	r3, #2
 800f318:	21a0      	movs	r1, #160	; 0xa0
 800f31a:	68f8      	ldr	r0, [r7, #12]
 800f31c:	f7f6 fb24 	bl	8005968 <HAL_I2C_Master_Receive>
 800f320:	4603      	mov	r3, r0
 800f322:	77fb      	strb	r3, [r7, #31]
        if (status != HAL_OK) return status;
 800f324:	7ffb      	ldrb	r3, [r7, #31]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d001      	beq.n	800f32e <readLevelSensors+0x8a>
 800f32a:	7ffb      	ldrb	r3, [r7, #31]
 800f32c:	e05f      	b.n	800f3ee <readLevelSensors+0x14a>
    } while ((status_reg[1] & 0x07) != 0x07); // Wait for DONE_1, DONE_2, and DONE_3
 800f32e:	7e7b      	ldrb	r3, [r7, #25]
 800f330:	f003 0307 	and.w	r3, r3, #7
 800f334:	2b07      	cmp	r3, #7
 800f336:	d1d6      	bne.n	800f2e6 <readLevelSensors+0x42>

    // Read values
    uint16_t raw_value;
    
    status = readValue_singleEnded(hi2c, 1, &raw_value);
 800f338:	f107 0316 	add.w	r3, r7, #22
 800f33c:	461a      	mov	r2, r3
 800f33e:	2101      	movs	r1, #1
 800f340:	68f8      	ldr	r0, [r7, #12]
 800f342:	f7ff fedd 	bl	800f100 <readValue_singleEnded>
 800f346:	4603      	mov	r3, r0
 800f348:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) return status;
 800f34a:	7ffb      	ldrb	r3, [r7, #31]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d001      	beq.n	800f354 <readLevelSensors+0xb0>
 800f350:	7ffb      	ldrb	r3, [r7, #31]
 800f352:	e04c      	b.n	800f3ee <readLevelSensors+0x14a>
    *channel1 = ((float)raw_value / 524288.0f) - 16.0f;
 800f354:	8afb      	ldrh	r3, [r7, #22]
 800f356:	ee07 3a90 	vmov	s15, r3
 800f35a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f35e:	eddf 6a27 	vldr	s13, [pc, #156]	; 800f3fc <readLevelSensors+0x158>
 800f362:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f366:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800f36a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	edc3 7a00 	vstr	s15, [r3]

    status = readValue_singleEnded(hi2c, 2, &raw_value);
 800f374:	f107 0316 	add.w	r3, r7, #22
 800f378:	461a      	mov	r2, r3
 800f37a:	2102      	movs	r1, #2
 800f37c:	68f8      	ldr	r0, [r7, #12]
 800f37e:	f7ff febf 	bl	800f100 <readValue_singleEnded>
 800f382:	4603      	mov	r3, r0
 800f384:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) return status;
 800f386:	7ffb      	ldrb	r3, [r7, #31]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d001      	beq.n	800f390 <readLevelSensors+0xec>
 800f38c:	7ffb      	ldrb	r3, [r7, #31]
 800f38e:	e02e      	b.n	800f3ee <readLevelSensors+0x14a>
    *channel2 = ((float)raw_value / 524288.0f) - 16.0f;
 800f390:	8afb      	ldrh	r3, [r7, #22]
 800f392:	ee07 3a90 	vmov	s15, r3
 800f396:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f39a:	eddf 6a18 	vldr	s13, [pc, #96]	; 800f3fc <readLevelSensors+0x158>
 800f39e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f3a2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800f3a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	edc3 7a00 	vstr	s15, [r3]

    status = readValue_singleEnded(hi2c, 3, &raw_value);
 800f3b0:	f107 0316 	add.w	r3, r7, #22
 800f3b4:	461a      	mov	r2, r3
 800f3b6:	2103      	movs	r1, #3
 800f3b8:	68f8      	ldr	r0, [r7, #12]
 800f3ba:	f7ff fea1 	bl	800f100 <readValue_singleEnded>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) return status;
 800f3c2:	7ffb      	ldrb	r3, [r7, #31]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d001      	beq.n	800f3cc <readLevelSensors+0x128>
 800f3c8:	7ffb      	ldrb	r3, [r7, #31]
 800f3ca:	e010      	b.n	800f3ee <readLevelSensors+0x14a>
    *channel3 = ((float)raw_value / 524288.0f) - 16.0f;
 800f3cc:	8afb      	ldrh	r3, [r7, #22]
 800f3ce:	ee07 3a90 	vmov	s15, r3
 800f3d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f3d6:	eddf 6a09 	vldr	s13, [pc, #36]	; 800f3fc <readLevelSensors+0x158>
 800f3da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f3de:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800f3e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	edc3 7a00 	vstr	s15, [r3]

    return HAL_OK;
 800f3ec:	2300      	movs	r3, #0
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3720      	adds	r7, #32
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	08010c84 	.word	0x08010c84
 800f3fc:	49000000 	.word	0x49000000

0800f400 <calculate_level>:

uint8_t calculate_level(I2C_HandleTypeDef *hi2c){
 800f400:	b580      	push	{r7, lr}
 800f402:	b086      	sub	sp, #24
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
    
    float channel1, channel2, channel3;
    uint8_t level = 0;
 800f408:	2300      	movs	r3, #0
 800f40a:	75fb      	strb	r3, [r7, #23]
    // Get the three readings
    readLevelSensors(hi2c,&channel1,&channel2,&channel3);
 800f40c:	f107 0308 	add.w	r3, r7, #8
 800f410:	f107 020c 	add.w	r2, r7, #12
 800f414:	f107 0110 	add.w	r1, r7, #16
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f7ff ff43 	bl	800f2a4 <readLevelSensors>

    // CH1 - LEV, CH2 - RE, CH3 - RL
    // (lev - lev0)/(rl - re)
    
    level = (channel1 - CLEV0)/(channel3 - channel2);
 800f41e:	edd7 7a04 	vldr	s15, [r7, #16]
 800f422:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800f450 <calculate_level+0x50>
 800f426:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800f42a:	ed97 7a02 	vldr	s14, [r7, #8]
 800f42e:	edd7 7a03 	vldr	s15, [r7, #12]
 800f432:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f43a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f43e:	edc7 7a00 	vstr	s15, [r7]
 800f442:	783b      	ldrb	r3, [r7, #0]
 800f444:	75fb      	strb	r3, [r7, #23]

    return level;
 800f446:	7dfb      	ldrb	r3, [r7, #23]

}
 800f448:	4618      	mov	r0, r3
 800f44a:	3718      	adds	r7, #24
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}
 800f450:	43fa0000 	.word	0x43fa0000

0800f454 <main_app>:
StateMachine_t StateMachine;



void main_app(void)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	af00      	add	r7, sp, #0
    // Initialize the state machine
    StateMachine.eState = ST_INIT;
 800f458:	4b05      	ldr	r3, [pc, #20]	; (800f470 <main_app+0x1c>)
 800f45a:	2200      	movs	r2, #0
 800f45c:	701a      	strb	r2, [r3, #0]
    StateMachine.eEvent = NO_EVENT;
 800f45e:	4b04      	ldr	r3, [pc, #16]	; (800f470 <main_app+0x1c>)
 800f460:	2200      	movs	r2, #0
 800f462:	705a      	strb	r2, [r3, #1]
    StateMachine.bEventOccurred = false;
 800f464:	4b02      	ldr	r3, [pc, #8]	; (800f470 <main_app+0x1c>)
 800f466:	2200      	movs	r2, #0
 800f468:	709a      	strb	r2, [r3, #2]

    // Main loop
    while (1)
    {
        // Run the state machine
        StateTransition();
 800f46a:	f000 f943 	bl	800f6f4 <StateTransition>
 800f46e:	e7fc      	b.n	800f46a <main_app+0x16>
 800f470:	200010f0 	.word	0x200010f0

0800f474 <HMI_changepage>:
        // Other system tasks can be performed here
    }
}


HAL_StatusTypeDef HMI_changepage(UART_HandleTypeDef *uart, uint16_t pagenum){
 800f474:	b580      	push	{r7, lr}
 800f476:	b086      	sub	sp, #24
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	460b      	mov	r3, r1
 800f47e:	807b      	strh	r3, [r7, #2]

	uint8_t buffer[10];  // Buffer to hold all bytes to be sent

    // Prepare the buffer
    buffer[0] = 0x5A;
 800f480:	235a      	movs	r3, #90	; 0x5a
 800f482:	733b      	strb	r3, [r7, #12]
    buffer[1] = 0xA5;
 800f484:	23a5      	movs	r3, #165	; 0xa5
 800f486:	737b      	strb	r3, [r7, #13]
    buffer[2] = 0x07;
 800f488:	2307      	movs	r3, #7
 800f48a:	73bb      	strb	r3, [r7, #14]
    buffer[3] = 0x82;
 800f48c:	2382      	movs	r3, #130	; 0x82
 800f48e:	73fb      	strb	r3, [r7, #15]
    buffer[4] = 0x00;
 800f490:	2300      	movs	r3, #0
 800f492:	743b      	strb	r3, [r7, #16]
    buffer[5] = 0x84;
 800f494:	2384      	movs	r3, #132	; 0x84
 800f496:	747b      	strb	r3, [r7, #17]
    buffer[6] = 0x5A;
 800f498:	235a      	movs	r3, #90	; 0x5a
 800f49a:	74bb      	strb	r3, [r7, #18]
    buffer[7] = 0x01;
 800f49c:	2301      	movs	r3, #1
 800f49e:	74fb      	strb	r3, [r7, #19]

    // Add PAGE_MENU as two bytes (16 bits)
    buffer[8] = (pagenum >> 8) & 0xFF;  // High byte
 800f4a0:	887b      	ldrh	r3, [r7, #2]
 800f4a2:	0a1b      	lsrs	r3, r3, #8
 800f4a4:	b29b      	uxth	r3, r3
 800f4a6:	b2db      	uxtb	r3, r3
 800f4a8:	753b      	strb	r3, [r7, #20]
    buffer[9] = pagenum & 0xFF;         // Low byte
 800f4aa:	887b      	ldrh	r3, [r7, #2]
 800f4ac:	b2db      	uxtb	r3, r3
 800f4ae:	757b      	strb	r3, [r7, #21]

    // Changes page to menu
    HAL_UART_Transmit(uart, buffer, 10 , HAL_MAX_DELAY);
 800f4b0:	f107 010c 	add.w	r1, r7, #12
 800f4b4:	f04f 33ff 	mov.w	r3, #4294967295
 800f4b8:	220a      	movs	r2, #10
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f7f9 fe8e 	bl	80091dc <HAL_UART_Transmit>

    return HAL_OK;
 800f4c0:	2300      	movs	r3, #0
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	3718      	adds	r7, #24
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd80      	pop	{r7, pc}

0800f4ca <HMI_writeString>:



HAL_StatusTypeDef HMI_writeString(UART_HandleTypeDef *uart, uint16_t vpAddr, const char* string) {
 800f4ca:	b580      	push	{r7, lr}
 800f4cc:	b088      	sub	sp, #32
 800f4ce:	af00      	add	r7, sp, #0
 800f4d0:	60f8      	str	r0, [r7, #12]
 800f4d2:	460b      	mov	r3, r1
 800f4d4:	607a      	str	r2, [r7, #4]
 800f4d6:	817b      	strh	r3, [r7, #10]

    uint8_t *clearBuffer = (uint8_t*)malloc(6);
 800f4d8:	2006      	movs	r0, #6
 800f4da:	f000 ff11 	bl	8010300 <malloc>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	61fb      	str	r3, [r7, #28]
    clearBuffer[0] = 0x5A;
 800f4e2:	69fb      	ldr	r3, [r7, #28]
 800f4e4:	225a      	movs	r2, #90	; 0x5a
 800f4e6:	701a      	strb	r2, [r3, #0]
    clearBuffer[1] = 0xA5;
 800f4e8:	69fb      	ldr	r3, [r7, #28]
 800f4ea:	3301      	adds	r3, #1
 800f4ec:	22a5      	movs	r2, #165	; 0xa5
 800f4ee:	701a      	strb	r2, [r3, #0]
    clearBuffer[2] = 0X03;
 800f4f0:	69fb      	ldr	r3, [r7, #28]
 800f4f2:	3302      	adds	r3, #2
 800f4f4:	2203      	movs	r2, #3
 800f4f6:	701a      	strb	r2, [r3, #0]
    clearBuffer[3] = 0x82;
 800f4f8:	69fb      	ldr	r3, [r7, #28]
 800f4fa:	3303      	adds	r3, #3
 800f4fc:	2282      	movs	r2, #130	; 0x82
 800f4fe:	701a      	strb	r2, [r3, #0]
    clearBuffer[4] = 0x4F;
 800f500:	69fb      	ldr	r3, [r7, #28]
 800f502:	3304      	adds	r3, #4
 800f504:	224f      	movs	r2, #79	; 0x4f
 800f506:	701a      	strb	r2, [r3, #0]
    clearBuffer[5] = 0x4B;
 800f508:	69fb      	ldr	r3, [r7, #28]
 800f50a:	3305      	adds	r3, #5
 800f50c:	224b      	movs	r2, #75	; 0x4b
 800f50e:	701a      	strb	r2, [r3, #0]

    uint16_t stringLength = strlen(string);
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f7f0 fe7d 	bl	8000210 <strlen>
 800f516:	4603      	mov	r3, r0
 800f518:	837b      	strh	r3, [r7, #26]
    uint16_t totalLength = stringLength + 6; // 3 bytes for the header (excluding 5A A5)
 800f51a:	8b7b      	ldrh	r3, [r7, #26]
 800f51c:	3306      	adds	r3, #6
 800f51e:	833b      	strh	r3, [r7, #24]
    if (totalLength > 0xFFFF) {
        return HAL_ERROR;
    }

    // Allocate a buffer for the entire message
    uint8_t* buffer = (uint8_t*)malloc(totalLength + 6); // +4 for the 5A A5 size 82 VV PP
 800f520:	8b3b      	ldrh	r3, [r7, #24]
 800f522:	3306      	adds	r3, #6
 800f524:	4618      	mov	r0, r3
 800f526:	f000 feeb 	bl	8010300 <malloc>
 800f52a:	4603      	mov	r3, r0
 800f52c:	617b      	str	r3, [r7, #20]
    if (buffer == NULL) {
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d101      	bne.n	800f538 <HMI_writeString+0x6e>
        return HAL_ERROR;
 800f534:	2301      	movs	r3, #1
 800f536:	e044      	b.n	800f5c2 <HMI_writeString+0xf8>
    }

    // Prepare the message
    buffer[0] = 0x5A;
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	225a      	movs	r2, #90	; 0x5a
 800f53c:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0xA5;
 800f53e:	697b      	ldr	r3, [r7, #20]
 800f540:	3301      	adds	r3, #1
 800f542:	22a5      	movs	r2, #165	; 0xa5
 800f544:	701a      	strb	r2, [r3, #0]
    buffer[2] = stringLength + 4;
 800f546:	8b7b      	ldrh	r3, [r7, #26]
 800f548:	b2da      	uxtb	r2, r3
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	3302      	adds	r3, #2
 800f54e:	3204      	adds	r2, #4
 800f550:	b2d2      	uxtb	r2, r2
 800f552:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0x82;
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	3303      	adds	r3, #3
 800f558:	2282      	movs	r2, #130	; 0x82
 800f55a:	701a      	strb	r2, [r3, #0]
    buffer[4] = 0x00FF & (vpAddr >> 8);
 800f55c:	897b      	ldrh	r3, [r7, #10]
 800f55e:	0a1b      	lsrs	r3, r3, #8
 800f560:	b29a      	uxth	r2, r3
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	3304      	adds	r3, #4
 800f566:	b2d2      	uxtb	r2, r2
 800f568:	701a      	strb	r2, [r3, #0]
    buffer[5] = 0x00FF & vpAddr;
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	3305      	adds	r3, #5
 800f56e:	897a      	ldrh	r2, [r7, #10]
 800f570:	b2d2      	uxtb	r2, r2
 800f572:	701a      	strb	r2, [r3, #0]

    // Copy the string to the buffer
    memcpy(buffer + 6, string, stringLength);
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	3306      	adds	r3, #6
 800f578:	8b7a      	ldrh	r2, [r7, #26]
 800f57a:	6879      	ldr	r1, [r7, #4]
 800f57c:	4618      	mov	r0, r3
 800f57e:	f000 ffdf 	bl	8010540 <memcpy>

    // Transmit the entire message
    HAL_StatusTypeDef status = HAL_UART_Transmit(uart, buffer, totalLength + 6, HAL_MAX_DELAY);
 800f582:	8b3b      	ldrh	r3, [r7, #24]
 800f584:	3306      	adds	r3, #6
 800f586:	b29a      	uxth	r2, r3
 800f588:	f04f 33ff 	mov.w	r3, #4294967295
 800f58c:	6979      	ldr	r1, [r7, #20]
 800f58e:	68f8      	ldr	r0, [r7, #12]
 800f590:	f7f9 fe24 	bl	80091dc <HAL_UART_Transmit>
 800f594:	4603      	mov	r3, r0
 800f596:	74fb      	strb	r3, [r7, #19]

    // Transmit the clear buffer
    HAL_StatusTypeDef clearStatus = HAL_UART_Transmit(uart, clearBuffer, 6, HAL_MAX_DELAY);
 800f598:	f04f 33ff 	mov.w	r3, #4294967295
 800f59c:	2206      	movs	r2, #6
 800f59e:	69f9      	ldr	r1, [r7, #28]
 800f5a0:	68f8      	ldr	r0, [r7, #12]
 800f5a2:	f7f9 fe1b 	bl	80091dc <HAL_UART_Transmit>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	74bb      	strb	r3, [r7, #18]

    // Free the allocated buffer
    free(buffer);
 800f5aa:	6978      	ldr	r0, [r7, #20]
 800f5ac:	f000 feb0 	bl	8010310 <free>
    free(clearBuffer);
 800f5b0:	69f8      	ldr	r0, [r7, #28]
 800f5b2:	f000 fead 	bl	8010310 <free>

    // Return the status of the first transmission, or the clear transmission if the first was successful
    return (status == HAL_OK) ? clearStatus : status;
 800f5b6:	7cfb      	ldrb	r3, [r7, #19]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d101      	bne.n	800f5c0 <HMI_writeString+0xf6>
 800f5bc:	7cbb      	ldrb	r3, [r7, #18]
 800f5be:	e000      	b.n	800f5c2 <HMI_writeString+0xf8>
 800f5c0:	7cfb      	ldrb	r3, [r7, #19]
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3720      	adds	r7, #32
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}

0800f5ca <HMI_eraseString>:

HAL_StatusTypeDef HMI_eraseString(UART_HandleTypeDef *uart, uint16_t vpAddr){
 800f5ca:	b580      	push	{r7, lr}
 800f5cc:	b086      	sub	sp, #24
 800f5ce:	af00      	add	r7, sp, #0
 800f5d0:	6078      	str	r0, [r7, #4]
 800f5d2:	460b      	mov	r3, r1
 800f5d4:	807b      	strh	r3, [r7, #2]

    uint8_t buffer[6] = {0};
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	60fb      	str	r3, [r7, #12]
 800f5da:	2300      	movs	r3, #0
 800f5dc:	823b      	strh	r3, [r7, #16]
    uint8_t *clearBuffer  = (uint8_t*)malloc(6);
 800f5de:	2006      	movs	r0, #6
 800f5e0:	f000 fe8e 	bl	8010300 <malloc>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	617b      	str	r3, [r7, #20]
    clearBuffer[0] = 0x5A;
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	225a      	movs	r2, #90	; 0x5a
 800f5ec:	701a      	strb	r2, [r3, #0]
    clearBuffer[1] = 0xA5;
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	22a5      	movs	r2, #165	; 0xa5
 800f5f4:	701a      	strb	r2, [r3, #0]
    clearBuffer[2] = 0X03;
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	3302      	adds	r3, #2
 800f5fa:	2203      	movs	r2, #3
 800f5fc:	701a      	strb	r2, [r3, #0]
    clearBuffer[3] = 0x82;
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	3303      	adds	r3, #3
 800f602:	2282      	movs	r2, #130	; 0x82
 800f604:	701a      	strb	r2, [r3, #0]
    clearBuffer[4] = 0x4F;
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	3304      	adds	r3, #4
 800f60a:	224f      	movs	r2, #79	; 0x4f
 800f60c:	701a      	strb	r2, [r3, #0]
    clearBuffer[5] = 0x4B;
 800f60e:	697b      	ldr	r3, [r7, #20]
 800f610:	3305      	adds	r3, #5
 800f612:	224b      	movs	r2, #75	; 0x4b
 800f614:	701a      	strb	r2, [r3, #0]
    // Prepare the message
    buffer[0] = 0x5A;
 800f616:	235a      	movs	r3, #90	; 0x5a
 800f618:	733b      	strb	r3, [r7, #12]
    buffer[1] = 0xA5;
 800f61a:	23a5      	movs	r3, #165	; 0xa5
 800f61c:	737b      	strb	r3, [r7, #13]
    buffer[2] = 0x00;
 800f61e:	2300      	movs	r3, #0
 800f620:	73bb      	strb	r3, [r7, #14]
    buffer[3] = 0x82;
 800f622:	2382      	movs	r3, #130	; 0x82
 800f624:	73fb      	strb	r3, [r7, #15]
    buffer[4] = 0x00FF & (vpAddr >> 8);
 800f626:	887b      	ldrh	r3, [r7, #2]
 800f628:	0a1b      	lsrs	r3, r3, #8
 800f62a:	b29b      	uxth	r3, r3
 800f62c:	b2db      	uxtb	r3, r3
 800f62e:	743b      	strb	r3, [r7, #16]
    buffer[5] = 0x00FF & vpAddr;
 800f630:	887b      	ldrh	r3, [r7, #2]
 800f632:	b2db      	uxtb	r3, r3
 800f634:	747b      	strb	r3, [r7, #17]

        // Transmit the entire message
    HAL_UART_Transmit(uart, buffer, 6, HAL_MAX_DELAY);
 800f636:	f107 010c 	add.w	r1, r7, #12
 800f63a:	f04f 33ff 	mov.w	r3, #4294967295
 800f63e:	2206      	movs	r2, #6
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f7f9 fdcb 	bl	80091dc <HAL_UART_Transmit>
    HAL_UART_Transmit(uart, clearBuffer, 6, HAL_MAX_DELAY);
 800f646:	f04f 33ff 	mov.w	r3, #4294967295
 800f64a:	2206      	movs	r2, #6
 800f64c:	6979      	ldr	r1, [r7, #20]
 800f64e:	6878      	ldr	r0, [r7, #4]
 800f650:	f7f9 fdc4 	bl	80091dc <HAL_UART_Transmit>

    free(clearBuffer);
 800f654:	6978      	ldr	r0, [r7, #20]
 800f656:	f000 fe5b 	bl	8010310 <free>

}
 800f65a:	bf00      	nop
 800f65c:	4618      	mov	r0, r3
 800f65e:	3718      	adds	r7, #24
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}

0800f664 <PULSES_darkcount>:
 */
#include "pulses.h"

volatile uint32_t pulse_count = 0;

uint32_t PULSES_darkcount(TIM_HandleTypeDef *htim) {
 800f664:	b580      	push	{r7, lr}
 800f666:	b084      	sub	sp, #16
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
  // Reset pulse count
  pulse_count = 0;
 800f66c:	4b0d      	ldr	r3, [pc, #52]	; (800f6a4 <PULSES_darkcount+0x40>)
 800f66e:	2200      	movs	r2, #0
 800f670:	601a      	str	r2, [r3, #0]

  // Start timer
  HAL_TIM_IC_Start(htim, TIM_CHANNEL_1);
 800f672:	2100      	movs	r1, #0
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f7f8 fc8d 	bl	8007f94 <HAL_TIM_IC_Start>

  // Wait for 3 seconds
  HAL_Delay(3000);
 800f67a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800f67e:	f7f2 fcc5 	bl	800200c <HAL_Delay>

  // Stop timer
  HAL_TIM_IC_Stop(htim, TIM_CHANNEL_1);
 800f682:	2100      	movs	r1, #0
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f7f8 fd61 	bl	800814c <HAL_TIM_IC_Stop>

  // Calculate average pulses per second
  uint32_t average_pulses = pulse_count / 3;
 800f68a:	4b06      	ldr	r3, [pc, #24]	; (800f6a4 <PULSES_darkcount+0x40>)
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	4a06      	ldr	r2, [pc, #24]	; (800f6a8 <PULSES_darkcount+0x44>)
 800f690:	fba2 2303 	umull	r2, r3, r2, r3
 800f694:	085b      	lsrs	r3, r3, #1
 800f696:	60fb      	str	r3, [r7, #12]

  return average_pulses;
 800f698:	68fb      	ldr	r3, [r7, #12]
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	3710      	adds	r7, #16
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}
 800f6a2:	bf00      	nop
 800f6a4:	200010f4 	.word	0x200010f4
 800f6a8:	aaaaaaab 	.word	0xaaaaaaab

0800f6ac <PULSES_background>:

uint32_t PULSES_background(TIM_HandleTypeDef *htim){
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b084      	sub	sp, #16
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  
  // Reset pulse count
  pulse_count = 0;
 800f6b4:	4b0d      	ldr	r3, [pc, #52]	; (800f6ec <PULSES_background+0x40>)
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	601a      	str	r2, [r3, #0]

  // Start timer
  HAL_TIM_IC_Start(htim, TIM_CHANNEL_1);
 800f6ba:	2100      	movs	r1, #0
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f7f8 fc69 	bl	8007f94 <HAL_TIM_IC_Start>

  // Wait for 3 seconds
  HAL_Delay(3000);
 800f6c2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800f6c6:	f7f2 fca1 	bl	800200c <HAL_Delay>

  // Stop timer
  HAL_TIM_IC_Stop(htim, TIM_CHANNEL_1);
 800f6ca:	2100      	movs	r1, #0
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f7f8 fd3d 	bl	800814c <HAL_TIM_IC_Stop>

  // Calculate average pulses per second
  uint32_t average_pulses = pulse_count / 3;
 800f6d2:	4b06      	ldr	r3, [pc, #24]	; (800f6ec <PULSES_background+0x40>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	4a06      	ldr	r2, [pc, #24]	; (800f6f0 <PULSES_background+0x44>)
 800f6d8:	fba2 2303 	umull	r2, r3, r2, r3
 800f6dc:	085b      	lsrs	r3, r3, #1
 800f6de:	60fb      	str	r3, [r7, #12]

  return average_pulses;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3710      	adds	r7, #16
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}
 800f6ea:	bf00      	nop
 800f6ec:	200010f4 	.word	0x200010f4
 800f6f0:	aaaaaaab 	.word	0xaaaaaaab

0800f6f4 <StateTransition>:
// For example:
// #include "fatfs.h"
// #include "usb_host.h"

void StateTransition(void)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b082      	sub	sp, #8
 800f6f8:	af00      	add	r7, sp, #0
    if (StateMachine.bEventOccurred)
 800f6fa:	4b1e      	ldr	r3, [pc, #120]	; (800f774 <StateTransition+0x80>)
 800f6fc:	789b      	ldrb	r3, [r3, #2]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d02d      	beq.n	800f75e <StateTransition+0x6a>
    {
        StateMachine.bEventOccurred = false;
 800f702:	4b1c      	ldr	r3, [pc, #112]	; (800f774 <StateTransition+0x80>)
 800f704:	2200      	movs	r2, #0
 800f706:	709a      	strb	r2, [r3, #2]
        for (uint32_t idx = 0U; idx < STATE_TABLE_SIZE; idx++)
 800f708:	2300      	movs	r3, #0
 800f70a:	607b      	str	r3, [r7, #4]
 800f70c:	e024      	b.n	800f758 <StateTransition+0x64>
        {
            if ((StateTransitionTable[idx].eCurrState == StateMachine.eState) &&
 800f70e:	491a      	ldr	r1, [pc, #104]	; (800f778 <StateTransition+0x84>)
 800f710:	687a      	ldr	r2, [r7, #4]
 800f712:	4613      	mov	r3, r2
 800f714:	005b      	lsls	r3, r3, #1
 800f716:	4413      	add	r3, r2
 800f718:	440b      	add	r3, r1
 800f71a:	781a      	ldrb	r2, [r3, #0]
 800f71c:	4b15      	ldr	r3, [pc, #84]	; (800f774 <StateTransition+0x80>)
 800f71e:	781b      	ldrb	r3, [r3, #0]
 800f720:	429a      	cmp	r2, r3
 800f722:	d116      	bne.n	800f752 <StateTransition+0x5e>
                (StateTransitionTable[idx].eEvent == StateMachine.eEvent))
 800f724:	4914      	ldr	r1, [pc, #80]	; (800f778 <StateTransition+0x84>)
 800f726:	687a      	ldr	r2, [r7, #4]
 800f728:	4613      	mov	r3, r2
 800f72a:	005b      	lsls	r3, r3, #1
 800f72c:	4413      	add	r3, r2
 800f72e:	440b      	add	r3, r1
 800f730:	3301      	adds	r3, #1
 800f732:	781a      	ldrb	r2, [r3, #0]
 800f734:	4b0f      	ldr	r3, [pc, #60]	; (800f774 <StateTransition+0x80>)
 800f736:	785b      	ldrb	r3, [r3, #1]
            if ((StateTransitionTable[idx].eCurrState == StateMachine.eState) &&
 800f738:	429a      	cmp	r2, r3
 800f73a:	d10a      	bne.n	800f752 <StateTransition+0x5e>
            {
                StateMachine.eState = StateTransitionTable[idx].eNextState;
 800f73c:	490e      	ldr	r1, [pc, #56]	; (800f778 <StateTransition+0x84>)
 800f73e:	687a      	ldr	r2, [r7, #4]
 800f740:	4613      	mov	r3, r2
 800f742:	005b      	lsls	r3, r3, #1
 800f744:	4413      	add	r3, r2
 800f746:	440b      	add	r3, r1
 800f748:	3302      	adds	r3, #2
 800f74a:	781a      	ldrb	r2, [r3, #0]
 800f74c:	4b09      	ldr	r3, [pc, #36]	; (800f774 <StateTransition+0x80>)
 800f74e:	701a      	strb	r2, [r3, #0]
                break;
 800f750:	e005      	b.n	800f75e <StateTransition+0x6a>
        for (uint32_t idx = 0U; idx < STATE_TABLE_SIZE; idx++)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	3301      	adds	r3, #1
 800f756:	607b      	str	r3, [r7, #4]
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2b16      	cmp	r3, #22
 800f75c:	d9d7      	bls.n	800f70e <StateTransition+0x1a>
            }
        }
    }
    StateArray[StateMachine.eState]();
 800f75e:	4b05      	ldr	r3, [pc, #20]	; (800f774 <StateTransition+0x80>)
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	461a      	mov	r2, r3
 800f764:	4b05      	ldr	r3, [pc, #20]	; (800f77c <StateTransition+0x88>)
 800f766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f76a:	4798      	blx	r3
}
 800f76c:	bf00      	nop
 800f76e:	3708      	adds	r7, #8
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}
 800f774:	200010f0 	.word	0x200010f0
 800f778:	08010e24 	.word	0x08010e24
 800f77c:	08010dfc 	.word	0x08010dfc

0800f780 <stateInit>:

void stateInit(void) {
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
    HMI_changepage(&huart2, PAGE_SPASH);
 800f786:	2100      	movs	r1, #0
 800f788:	480c      	ldr	r0, [pc, #48]	; (800f7bc <stateInit+0x3c>)
 800f78a:	f7ff fe73 	bl	800f474 <HMI_changepage>

    HAL_Delay(2000);
 800f78e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800f792:	f7f2 fc3b 	bl	800200c <HAL_Delay>

    // Send command to change screen to system check screen

    HAL_StatusTypeDef status = initLevelSensors(&hi2c1);
 800f796:	480a      	ldr	r0, [pc, #40]	; (800f7c0 <stateInit+0x40>)
 800f798:	f7ff fd4e 	bl	800f238 <initLevelSensors>
 800f79c:	4603      	mov	r3, r0
 800f79e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) {
       // Error_Handler();
    }

    StateMachine.bEventOccurred = true;
 800f7a0:	4b08      	ldr	r3, [pc, #32]	; (800f7c4 <stateInit+0x44>)
 800f7a2:	2201      	movs	r2, #1
 800f7a4:	709a      	strb	r2, [r3, #2]
    StateMachine.eEvent = EVENT_INIT_COMPLETE;
 800f7a6:	4b07      	ldr	r3, [pc, #28]	; (800f7c4 <stateInit+0x44>)
 800f7a8:	2201      	movs	r2, #1
 800f7aa:	705a      	strb	r2, [r3, #1]

    HMI_changepage(&huart2, PAGE_INIT);
 800f7ac:	2101      	movs	r1, #1
 800f7ae:	4803      	ldr	r0, [pc, #12]	; (800f7bc <stateInit+0x3c>)
 800f7b0:	f7ff fe60 	bl	800f474 <HMI_changepage>

    // Exit the state function (the event will be handled in the state transition function)
    return;
 800f7b4:	bf00      	nop
}
 800f7b6:	3708      	adds	r7, #8
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}
 800f7bc:	200003c0 	.word	0x200003c0
 800f7c0:	20000110 	.word	0x20000110
 800f7c4:	200010f0 	.word	0x200010f0

0800f7c8 <stateStartUp>:

void stateStartUp(void) {
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b082      	sub	sp, #8
 800f7cc:	af00      	add	r7, sp, #0

	//uint32_t data
	//ReadData(DATA_TYPE_ERROR_CODES, 1, &data, sizeof(data));

	// Bringing cuvette holder to position TODO: Change it to RESET
	if(HAL_GPIO_ReadPin(LIMIT_SW_1_GPIO_Port, LIMIT_SW_1_Pin) == GPIO_PIN_RESET){
 800f7ce:	2102      	movs	r1, #2
 800f7d0:	4824      	ldr	r0, [pc, #144]	; (800f864 <stateStartUp+0x9c>)
 800f7d2:	f7f3 fd3b 	bl	800324c <HAL_GPIO_ReadPin>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d103      	bne.n	800f7e4 <stateStartUp+0x1c>
		cuvetteRotate(&htim9, &hdac);
 800f7dc:	4922      	ldr	r1, [pc, #136]	; (800f868 <stateStartUp+0xa0>)
 800f7de:	4823      	ldr	r0, [pc, #140]	; (800f86c <stateStartUp+0xa4>)
 800f7e0:	f000 f904 	bl	800f9ec <cuvetteRotate>
	}

	// Dark count
	uint32_t new_dark_count = 0000;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	607b      	str	r3, [r7, #4]
	new_dark_count = PULSES_darkcount(&htim2);
 800f7e8:	4821      	ldr	r0, [pc, #132]	; (800f870 <stateStartUp+0xa8>)
 800f7ea:	f7ff ff3b 	bl	800f664 <PULSES_darkcount>
 800f7ee:	6078      	str	r0, [r7, #4]

    // Comment out
	if (new_dark_count > DARK_THRESH){
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800f7f6:	d906      	bls.n	800f806 <stateStartUp+0x3e>
	    StateMachine.bEventOccurred = true;
 800f7f8:	4b1e      	ldr	r3, [pc, #120]	; (800f874 <stateStartUp+0xac>)
 800f7fa:	2201      	movs	r2, #1
 800f7fc:	709a      	strb	r2, [r3, #2]
	    StateMachine.eEvent = EVENT_STARTUP_FAILED_DARK;
 800f7fe:	4b1d      	ldr	r3, [pc, #116]	; (800f874 <stateStartUp+0xac>)
 800f800:	2203      	movs	r2, #3
 800f802:	705a      	strb	r2, [r3, #1]
       return;
 800f804:	e02a      	b.n	800f85c <stateStartUp+0x94>
	}

	// Saving new dark count
	HAL_StatusTypeDef status = WriteDarkCount(new_dark_count);
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f7ff fc07 	bl	800f01a <WriteDarkCount>
 800f80c:	4603      	mov	r3, r0
 800f80e:	70fb      	strb	r3, [r7, #3]

    // Comment out
	if (status != HAL_OK) {
 800f810:	78fb      	ldrb	r3, [r7, #3]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d006      	beq.n	800f824 <stateStartUp+0x5c>
	    // Handle error
	    StateMachine.bEventOccurred = true;
 800f816:	4b17      	ldr	r3, [pc, #92]	; (800f874 <stateStartUp+0xac>)
 800f818:	2201      	movs	r2, #1
 800f81a:	709a      	strb	r2, [r3, #2]
	    StateMachine.eEvent = EVENT_STARTUP_FAILED_FLASH;
 800f81c:	4b15      	ldr	r3, [pc, #84]	; (800f874 <stateStartUp+0xac>)
 800f81e:	2206      	movs	r2, #6
 800f820:	705a      	strb	r2, [r3, #1]
       return;
 800f822:	e01b      	b.n	800f85c <stateStartUp+0x94>
	}

	// Starter Level
    // Comment out
    if(calculate_level(&hi2c1) < 5 ){
 800f824:	4814      	ldr	r0, [pc, #80]	; (800f878 <stateStartUp+0xb0>)
 800f826:	f7ff fdeb 	bl	800f400 <calculate_level>
 800f82a:	4603      	mov	r3, r0
 800f82c:	2b04      	cmp	r3, #4
 800f82e:	d806      	bhi.n	800f83e <stateStartUp+0x76>
       StateMachine.bEventOccurred = true;
 800f830:	4b10      	ldr	r3, [pc, #64]	; (800f874 <stateStartUp+0xac>)
 800f832:	2201      	movs	r2, #1
 800f834:	709a      	strb	r2, [r3, #2]
       StateMachine.eState = EVENT_STARTUP_FAILED_STARTER;
 800f836:	4b0f      	ldr	r3, [pc, #60]	; (800f874 <stateStartUp+0xac>)
 800f838:	2205      	movs	r2, #5
 800f83a:	701a      	strb	r2, [r3, #0]
       return;
 800f83c:	e00e      	b.n	800f85c <stateStartUp+0x94>
    }


    StateMachine.bEventOccurred = true;
 800f83e:	4b0d      	ldr	r3, [pc, #52]	; (800f874 <stateStartUp+0xac>)
 800f840:	2201      	movs	r2, #1
 800f842:	709a      	strb	r2, [r3, #2]
    StateMachine.eEvent = EVENT_STARTUP_COMPLETE;
 800f844:	4b0b      	ldr	r3, [pc, #44]	; (800f874 <stateStartUp+0xac>)
 800f846:	2202      	movs	r2, #2
 800f848:	705a      	strb	r2, [r3, #1]

    HAL_Delay(2000);
 800f84a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800f84e:	f7f2 fbdd 	bl	800200c <HAL_Delay>
    HMI_changepage(&huart2, PAGE_MENU);
 800f852:	2102      	movs	r1, #2
 800f854:	4809      	ldr	r0, [pc, #36]	; (800f87c <stateStartUp+0xb4>)
 800f856:	f7ff fe0d 	bl	800f474 <HMI_changepage>

    return;
 800f85a:	bf00      	nop

}
 800f85c:	3708      	adds	r7, #8
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}
 800f862:	bf00      	nop
 800f864:	40020c00 	.word	0x40020c00
 800f868:	200000fc 	.word	0x200000fc
 800f86c:	200002e8 	.word	0x200002e8
 800f870:	20000258 	.word	0x20000258
 800f874:	200010f0 	.word	0x200010f0
 800f878:	20000110 	.word	0x20000110
 800f87c:	200003c0 	.word	0x200003c0

0800f880 <stateHomeMenu>:

void stateHomeMenu(void) {
 800f880:	b580      	push	{r7, lr}
 800f882:	b084      	sub	sp, #16
 800f884:	af00      	add	r7, sp, #0
    
    HMI_changepage(&huart2, PAGE_MENU);  // Changing page to menu
 800f886:	2102      	movs	r1, #2
 800f888:	482b      	ldr	r0, [pc, #172]	; (800f938 <stateHomeMenu+0xb8>)
 800f88a:	f7ff fdf3 	bl	800f474 <HMI_changepage>
    
    // Initializing Data Buffer
    uint8_t dataBuffer[10] = {0};
 800f88e:	2300      	movs	r3, #0
 800f890:	607b      	str	r3, [r7, #4]
 800f892:	f107 0308 	add.w	r3, r7, #8
 800f896:	2200      	movs	r2, #0
 800f898:	601a      	str	r2, [r3, #0]
 800f89a:	809a      	strh	r2, [r3, #4]

    // Wait till a valid keypress to avoid random messages
    while(1){

        // Wait till we recieve 10 bytes of data (1 key press)
        if(HAL_UART_Receive(&huart2, dataBuffer, 10, HAL_MAX_DELAY == HAL_OK)){
 800f89c:	1d39      	adds	r1, r7, #4
 800f89e:	2300      	movs	r3, #0
 800f8a0:	220a      	movs	r2, #10
 800f8a2:	4825      	ldr	r0, [pc, #148]	; (800f938 <stateHomeMenu+0xb8>)
 800f8a4:	f7f9 fd25 	bl	80092f2 <HAL_UART_Receive>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d0f6      	beq.n	800f89c <stateHomeMenu+0x1c>
            
            // Check if it is for a key press
            if(dataBuffer[8] == 0xFF){
 800f8ae:	7b3b      	ldrb	r3, [r7, #12]
 800f8b0:	2bff      	cmp	r3, #255	; 0xff
 800f8b2:	d1f3      	bne.n	800f89c <stateHomeMenu+0x1c>
                
                // Switch on keypress and assign right state then return
                switch (dataBuffer[9]){
 800f8b4:	7b7b      	ldrb	r3, [r7, #13]
 800f8b6:	2b05      	cmp	r3, #5
 800f8b8:	d838      	bhi.n	800f92c <stateHomeMenu+0xac>
 800f8ba:	a201      	add	r2, pc, #4	; (adr r2, 800f8c0 <stateHomeMenu+0x40>)
 800f8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8c0:	0800f8d9 	.word	0x0800f8d9
 800f8c4:	0800f8e7 	.word	0x0800f8e7
 800f8c8:	0800f8f5 	.word	0x0800f8f5
 800f8cc:	0800f903 	.word	0x0800f903
 800f8d0:	0800f911 	.word	0x0800f911
 800f8d4:	0800f91f 	.word	0x0800f91f
                    
                    case 0x00:
                        // Measure Menu
                        StateMachine.bEventOccurred = true;
 800f8d8:	4b18      	ldr	r3, [pc, #96]	; (800f93c <stateHomeMenu+0xbc>)
 800f8da:	2201      	movs	r2, #1
 800f8dc:	709a      	strb	r2, [r3, #2]
                        StateMachine.eEvent = EVENT_MENU_MEASURE;                       
 800f8de:	4b17      	ldr	r3, [pc, #92]	; (800f93c <stateHomeMenu+0xbc>)
 800f8e0:	2207      	movs	r2, #7
 800f8e2:	705a      	strb	r2, [r3, #1]
                        break;
 800f8e4:	e023      	b.n	800f92e <stateHomeMenu+0xae>
                    
                    case 0x01:
                        // Test Reports Menu
                        StateMachine.bEventOccurred = true;
 800f8e6:	4b15      	ldr	r3, [pc, #84]	; (800f93c <stateHomeMenu+0xbc>)
 800f8e8:	2201      	movs	r2, #1
 800f8ea:	709a      	strb	r2, [r3, #2]
                        StateMachine.eEvent = EVENT_MENU_TEST_REPORT;  
 800f8ec:	4b13      	ldr	r3, [pc, #76]	; (800f93c <stateHomeMenu+0xbc>)
 800f8ee:	2208      	movs	r2, #8
 800f8f0:	705a      	strb	r2, [r3, #1]
                        break;
 800f8f2:	e01c      	b.n	800f92e <stateHomeMenu+0xae>

                    case 0x02:
                        // QC Reports Menu
                        StateMachine.bEventOccurred = true;
 800f8f4:	4b11      	ldr	r3, [pc, #68]	; (800f93c <stateHomeMenu+0xbc>)
 800f8f6:	2201      	movs	r2, #1
 800f8f8:	709a      	strb	r2, [r3, #2]
                        StateMachine.eEvent = EVENT_MENU_QC_REPORT;  
 800f8fa:	4b10      	ldr	r3, [pc, #64]	; (800f93c <stateHomeMenu+0xbc>)
 800f8fc:	2209      	movs	r2, #9
 800f8fe:	705a      	strb	r2, [r3, #1]
                        break;
 800f900:	e015      	b.n	800f92e <stateHomeMenu+0xae>

                    case 0x03:
                        // Settings Menu
                        StateMachine.bEventOccurred = true;
 800f902:	4b0e      	ldr	r3, [pc, #56]	; (800f93c <stateHomeMenu+0xbc>)
 800f904:	2201      	movs	r2, #1
 800f906:	709a      	strb	r2, [r3, #2]
                        StateMachine.eEvent = EVENT_MENU_SETTINGS;  
 800f908:	4b0c      	ldr	r3, [pc, #48]	; (800f93c <stateHomeMenu+0xbc>)
 800f90a:	220a      	movs	r2, #10
 800f90c:	705a      	strb	r2, [r3, #1]
                        break;
 800f90e:	e00e      	b.n	800f92e <stateHomeMenu+0xae>
                    
                    case 0x04:
                        // System Check Menu
                        StateMachine.bEventOccurred = true;
 800f910:	4b0a      	ldr	r3, [pc, #40]	; (800f93c <stateHomeMenu+0xbc>)
 800f912:	2201      	movs	r2, #1
 800f914:	709a      	strb	r2, [r3, #2]
                        StateMachine.eEvent = EVENT_MENU_SYSTEM_CHECK;  
 800f916:	4b09      	ldr	r3, [pc, #36]	; (800f93c <stateHomeMenu+0xbc>)
 800f918:	220b      	movs	r2, #11
 800f91a:	705a      	strb	r2, [r3, #1]
                        break;
 800f91c:	e007      	b.n	800f92e <stateHomeMenu+0xae>

                    case 0x05:
                        // Services Menu
                        StateMachine.bEventOccurred = true;
 800f91e:	4b07      	ldr	r3, [pc, #28]	; (800f93c <stateHomeMenu+0xbc>)
 800f920:	2201      	movs	r2, #1
 800f922:	709a      	strb	r2, [r3, #2]
                        StateMachine.eEvent = EVENT_MENU_SERVICES;  
 800f924:	4b05      	ldr	r3, [pc, #20]	; (800f93c <stateHomeMenu+0xbc>)
 800f926:	220c      	movs	r2, #12
 800f928:	705a      	strb	r2, [r3, #1]
                        break;
 800f92a:	e000      	b.n	800f92e <stateHomeMenu+0xae>

                    default:
                        break;
 800f92c:	bf00      	nop
                }

                return;
 800f92e:	bf00      	nop
            }
        }
    }
}
 800f930:	3710      	adds	r7, #16
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}
 800f936:	bf00      	nop
 800f938:	200003c0 	.word	0x200003c0
 800f93c:	200010f0 	.word	0x200010f0

0800f940 <stateSystemCheck>:


void stateSystemCheck(void){
 800f940:	b580      	push	{r7, lr}
 800f942:	b084      	sub	sp, #16
 800f944:	af00      	add	r7, sp, #0
    
    // Wait till a valid keypress to avoid random messages
    uint8_t dataBuffer[10] = {0};
 800f946:	2300      	movs	r3, #0
 800f948:	607b      	str	r3, [r7, #4]
 800f94a:	f107 0308 	add.w	r3, r7, #8
 800f94e:	2200      	movs	r2, #0
 800f950:	601a      	str	r2, [r3, #0]
 800f952:	809a      	strh	r2, [r3, #4]

    while(1){

        // Wait till we recieve 10 bytes of data (1 key press)
        if(HAL_UART_Receive(&huart2, dataBuffer, 10, HAL_MAX_DELAY == HAL_OK)){
 800f954:	1d39      	adds	r1, r7, #4
 800f956:	2300      	movs	r3, #0
 800f958:	220a      	movs	r2, #10
 800f95a:	481e      	ldr	r0, [pc, #120]	; (800f9d4 <stateSystemCheck+0x94>)
 800f95c:	f7f9 fcc9 	bl	80092f2 <HAL_UART_Receive>
 800f960:	4603      	mov	r3, r0
 800f962:	2b00      	cmp	r3, #0
 800f964:	d0f6      	beq.n	800f954 <stateSystemCheck+0x14>
            
            // Check if it is for a key press
            if(dataBuffer[8] == 0xFF){
 800f966:	7b3b      	ldrb	r3, [r7, #12]
 800f968:	2bff      	cmp	r3, #255	; 0xff
 800f96a:	d1f3      	bne.n	800f954 <stateSystemCheck+0x14>
                
                // Switch on keypress and assign right state then return
                switch (dataBuffer[9]){
 800f96c:	7b7b      	ldrb	r3, [r7, #13]
 800f96e:	2b44      	cmp	r3, #68	; 0x44
 800f970:	dc12      	bgt.n	800f998 <stateSystemCheck+0x58>
 800f972:	2b40      	cmp	r3, #64	; 0x40
 800f974:	db29      	blt.n	800f9ca <stateSystemCheck+0x8a>
 800f976:	3b40      	subs	r3, #64	; 0x40
 800f978:	2b04      	cmp	r3, #4
 800f97a:	d826      	bhi.n	800f9ca <stateSystemCheck+0x8a>
 800f97c:	a201      	add	r2, pc, #4	; (adr r2, 800f984 <stateSystemCheck+0x44>)
 800f97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f982:	bf00      	nop
 800f984:	0800f99f 	.word	0x0800f99f
 800f988:	0800f9a5 	.word	0x0800f9a5
 800f98c:	0800f9ab 	.word	0x0800f9ab
 800f990:	0800f9b1 	.word	0x0800f9b1
 800f994:	0800f9b7 	.word	0x0800f9b7
 800f998:	2bff      	cmp	r3, #255	; 0xff
 800f99a:	d00f      	beq.n	800f9bc <stateSystemCheck+0x7c>
                        StateMachine.bEventOccurred = true;
                        StateMachine.eEvent = EVENT_BACK; 
                        return;

                    default:
                        break;
 800f99c:	e015      	b.n	800f9ca <stateSystemCheck+0x8a>
                        autoCheck();
 800f99e:	f000 f9e5 	bl	800fd6c <autoCheck>
                        break;
 800f9a2:	e013      	b.n	800f9cc <stateSystemCheck+0x8c>
                        backgroundCheck();
 800f9a4:	f000 fb4c 	bl	8010040 <backgroundCheck>
                        break;
 800f9a8:	e010      	b.n	800f9cc <stateSystemCheck+0x8c>
                        pumpPriming();
 800f9aa:	f000 fb79 	bl	80100a0 <pumpPriming>
                        break;
 800f9ae:	e00d      	b.n	800f9cc <stateSystemCheck+0x8c>
                        darkCheck();
 800f9b0:	f000 fc06 	bl	80101c0 <darkCheck>
                        break;
 800f9b4:	e00a      	b.n	800f9cc <stateSystemCheck+0x8c>
                        lightCheck();
 800f9b6:	f000 fc33 	bl	8010220 <lightCheck>
                        break;
 800f9ba:	e007      	b.n	800f9cc <stateSystemCheck+0x8c>
                        StateMachine.bEventOccurred = true;
 800f9bc:	4b06      	ldr	r3, [pc, #24]	; (800f9d8 <stateSystemCheck+0x98>)
 800f9be:	2201      	movs	r2, #1
 800f9c0:	709a      	strb	r2, [r3, #2]
                        StateMachine.eEvent = EVENT_BACK; 
 800f9c2:	4b05      	ldr	r3, [pc, #20]	; (800f9d8 <stateSystemCheck+0x98>)
 800f9c4:	220d      	movs	r2, #13
 800f9c6:	705a      	strb	r2, [r3, #1]
                        return;
 800f9c8:	e001      	b.n	800f9ce <stateSystemCheck+0x8e>
                        break;
 800f9ca:	bf00      	nop
        if(HAL_UART_Receive(&huart2, dataBuffer, 10, HAL_MAX_DELAY == HAL_OK)){
 800f9cc:	e7c2      	b.n	800f954 <stateSystemCheck+0x14>
                }
            }
        }
    }

}
 800f9ce:	3710      	adds	r7, #16
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}
 800f9d4:	200003c0 	.word	0x200003c0
 800f9d8:	200010f0 	.word	0x200010f0

0800f9dc <stateError>:

void stateError(void) {
 800f9dc:	b480      	push	{r7}
 800f9de:	af00      	add	r7, sp, #0
    // Implement error handling logic here
}
 800f9e0:	bf00      	nop
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e8:	4770      	bx	lr
	...

0800f9ec <cuvetteRotate>:

#include "main_app.h"
#include "stepperDriver.h"


HAL_StatusTypeDef cuvetteRotate(TIM_HandleTypeDef* tim_handle, DAC_HandleTypeDef* dac_handle) {
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b086      	sub	sp, #24
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
 800f9f4:	6039      	str	r1, [r7, #0]

	// Start the PWM
    HAL_TIM_PWM_Start(tim_handle, TIM_CHANNEL_1);
 800f9f6:	2100      	movs	r1, #0
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f7f8 f943 	bl	8007c84 <HAL_TIM_PWM_Start>

    // Set Micro-step
    HAL_GPIO_WritePin(MS1_1_GPIO_Port, MS1_1_Pin, GPIO_PIN_RESET);
 800f9fe:	2200      	movs	r2, #0
 800fa00:	2110      	movs	r1, #16
 800fa02:	482e      	ldr	r0, [pc, #184]	; (800fabc <cuvetteRotate+0xd0>)
 800fa04:	f7f3 fc3a 	bl	800327c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MS2_1_GPIO_Port, MS2_1_Pin, GPIO_PIN_RESET);
 800fa08:	2200      	movs	r2, #0
 800fa0a:	2120      	movs	r1, #32
 800fa0c:	482b      	ldr	r0, [pc, #172]	; (800fabc <cuvetteRotate+0xd0>)
 800fa0e:	f7f3 fc35 	bl	800327c <HAL_GPIO_WritePin>

    if( HAL_DAC_Start(dac_handle, DAC_CHANNEL_1) != HAL_OK){
 800fa12:	2100      	movs	r1, #0
 800fa14:	6838      	ldr	r0, [r7, #0]
 800fa16:	f7f2 fec2 	bl	800279e <HAL_DAC_Start>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d001      	beq.n	800fa24 <cuvetteRotate+0x38>
    	Error_Handler();
 800fa20:	f7f1 fdee 	bl	8001600 <Error_Handler>
    }

    if (HAL_DAC_SetValue(dac_handle, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2000) != HAL_OK){
 800fa24:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800fa28:	2200      	movs	r2, #0
 800fa2a:	2100      	movs	r1, #0
 800fa2c:	6838      	ldr	r0, [r7, #0]
 800fa2e:	f7f2 ff0d 	bl	800284c <HAL_DAC_SetValue>
 800fa32:	4603      	mov	r3, r0
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d001      	beq.n	800fa3c <cuvetteRotate+0x50>
    	Error_Handler();
 800fa38:	f7f1 fde2 	bl	8001600 <Error_Handler>
    }

    // Set Direction
    HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_SET);
 800fa3c:	2201      	movs	r2, #1
 800fa3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fa42:	481e      	ldr	r0, [pc, #120]	; (800fabc <cuvetteRotate+0xd0>)
 800fa44:	f7f3 fc1a 	bl	800327c <HAL_GPIO_WritePin>

    GPIO_PinState lastState = GPIO_PIN_RESET;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	75fb      	strb	r3, [r7, #23]
    GPIO_PinState currentState;
    uint32_t startTime = HAL_GetTick();
 800fa4c:	f7f2 fad2 	bl	8001ff4 <HAL_GetTick>
 800fa50:	6138      	str	r0, [r7, #16]
    uint32_t timeout = 300; // 30 seconds timeout
 800fa52:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800fa56:	60fb      	str	r3, [r7, #12]

    while (1) {
        currentState = HAL_GPIO_ReadPin(LIMIT_SW_1_GPIO_Port, LIMIT_SW_1_Pin);
 800fa58:	2102      	movs	r1, #2
 800fa5a:	4819      	ldr	r0, [pc, #100]	; (800fac0 <cuvetteRotate+0xd4>)
 800fa5c:	f7f3 fbf6 	bl	800324c <HAL_GPIO_ReadPin>
 800fa60:	4603      	mov	r3, r0
 800fa62:	72fb      	strb	r3, [r7, #11]
    	HAL_DAC_SetValue(dac_handle, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0x100);
 800fa64:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fa68:	2200      	movs	r2, #0
 800fa6a:	2100      	movs	r1, #0
 800fa6c:	6838      	ldr	r0, [r7, #0]
 800fa6e:	f7f2 feed 	bl	800284c <HAL_DAC_SetValue>

        // Detect falling edge
        if (lastState == GPIO_PIN_SET && currentState == GPIO_PIN_RESET) {
 800fa72:	7dfb      	ldrb	r3, [r7, #23]
 800fa74:	2b01      	cmp	r3, #1
 800fa76:	d108      	bne.n	800fa8a <cuvetteRotate+0x9e>
 800fa78:	7afb      	ldrb	r3, [r7, #11]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d105      	bne.n	800fa8a <cuvetteRotate+0x9e>
            HAL_TIM_PWM_Stop(tim_handle, TIM_CHANNEL_1);
 800fa7e:	2100      	movs	r1, #0
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f7f8 f9c7 	bl	8007e14 <HAL_TIM_PWM_Stop>
            return HAL_OK;
 800fa86:	2300      	movs	r3, #0
 800fa88:	e013      	b.n	800fab2 <cuvetteRotate+0xc6>
        }

        lastState = currentState;
 800fa8a:	7afb      	ldrb	r3, [r7, #11]
 800fa8c:	75fb      	strb	r3, [r7, #23]

        // Check for timeout
        if (HAL_GetTick() - startTime > timeout) {
 800fa8e:	f7f2 fab1 	bl	8001ff4 <HAL_GetTick>
 800fa92:	4602      	mov	r2, r0
 800fa94:	693b      	ldr	r3, [r7, #16]
 800fa96:	1ad3      	subs	r3, r2, r3
 800fa98:	68fa      	ldr	r2, [r7, #12]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d205      	bcs.n	800faaa <cuvetteRotate+0xbe>
            HAL_TIM_PWM_Stop(tim_handle, TIM_CHANNEL_1);
 800fa9e:	2100      	movs	r1, #0
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f7f8 f9b7 	bl	8007e14 <HAL_TIM_PWM_Stop>
            return HAL_TIMEOUT;
 800faa6:	2303      	movs	r3, #3
 800faa8:	e003      	b.n	800fab2 <cuvetteRotate+0xc6>
        }

        HAL_Delay(10);
 800faaa:	200a      	movs	r0, #10
 800faac:	f7f2 faae 	bl	800200c <HAL_Delay>
        currentState = HAL_GPIO_ReadPin(LIMIT_SW_1_GPIO_Port, LIMIT_SW_1_Pin);
 800fab0:	e7d2      	b.n	800fa58 <cuvetteRotate+0x6c>
    }
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3718      	adds	r7, #24
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}
 800faba:	bf00      	nop
 800fabc:	40020400 	.word	0x40020400
 800fac0:	40020c00 	.word	0x40020c00
 800fac4:	00000000 	.word	0x00000000

0800fac8 <dispenseStarter>:


//
HAL_StatusTypeDef dispenseStarter(TIM_HandleTypeDef* htimHandle, DAC_HandleTypeDef* dac_handle, uint32_t volume, uint8_t pumpNum) {
 800fac8:	b580      	push	{r7, lr}
 800faca:	b086      	sub	sp, #24
 800facc:	af00      	add	r7, sp, #0
 800face:	60f8      	str	r0, [r7, #12]
 800fad0:	60b9      	str	r1, [r7, #8]
 800fad2:	607a      	str	r2, [r7, #4]
 800fad4:	70fb      	strb	r3, [r7, #3]
   uint32_t delay = volume * MSPERUL;
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f7f0 fe5e 	bl	8000798 <__aeabi_ui2d>
 800fadc:	a333      	add	r3, pc, #204	; (adr r3, 800fbac <dispenseStarter+0xe4>)
 800fade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae2:	f7f0 fbed 	bl	80002c0 <__aeabi_dmul>
 800fae6:	4602      	mov	r2, r0
 800fae8:	460b      	mov	r3, r1
 800faea:	4610      	mov	r0, r2
 800faec:	4619      	mov	r1, r3
 800faee:	f7f0 fecd 	bl	800088c <__aeabi_d2uiz>
 800faf2:	4603      	mov	r3, r0
 800faf4:	617b      	str	r3, [r7, #20]
   uint8_t channel = 0;
 800faf6:	2300      	movs	r3, #0
 800faf8:	74fb      	strb	r3, [r7, #19]
    
    if( HAL_DAC_Start(dac_handle, DAC_CHANNEL_2) != HAL_OK){
 800fafa:	2110      	movs	r1, #16
 800fafc:	68b8      	ldr	r0, [r7, #8]
 800fafe:	f7f2 fe4e 	bl	800279e <HAL_DAC_Start>
 800fb02:	4603      	mov	r3, r0
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d001      	beq.n	800fb0c <dispenseStarter+0x44>
    	Error_Handler();
 800fb08:	f7f1 fd7a 	bl	8001600 <Error_Handler>
    }

    if (HAL_DAC_SetValue(dac_handle, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 2000) != HAL_OK){
 800fb0c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800fb10:	2200      	movs	r2, #0
 800fb12:	2110      	movs	r1, #16
 800fb14:	68b8      	ldr	r0, [r7, #8]
 800fb16:	f7f2 fe99 	bl	800284c <HAL_DAC_SetValue>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d001      	beq.n	800fb24 <dispenseStarter+0x5c>
    	Error_Handler();
 800fb20:	f7f1 fd6e 	bl	8001600 <Error_Handler>
    }

   switch (pumpNum) {
 800fb24:	78fb      	ldrb	r3, [r7, #3]
 800fb26:	2b01      	cmp	r3, #1
 800fb28:	d002      	beq.n	800fb30 <dispenseStarter+0x68>
 800fb2a:	2b02      	cmp	r3, #2
 800fb2c:	d013      	beq.n	800fb56 <dispenseStarter+0x8e>
 800fb2e:	e022      	b.n	800fb76 <dispenseStarter+0xae>
       case 1:
           HAL_GPIO_WritePin(MS1_2_GPIO_Port, MS1_2_Pin,GPIO_PIN_RESET );
 800fb30:	2200      	movs	r2, #0
 800fb32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fb36:	481a      	ldr	r0, [pc, #104]	; (800fba0 <dispenseStarter+0xd8>)
 800fb38:	f7f3 fba0 	bl	800327c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MS2_2_GPIO_Port, MS2_2_Pin,GPIO_PIN_RESET );
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fb42:	4817      	ldr	r0, [pc, #92]	; (800fba0 <dispenseStarter+0xd8>)
 800fb44:	f7f3 fb9a 	bl	800327c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin,GPIO_PIN_SET );
 800fb48:	2201      	movs	r2, #1
 800fb4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fb4e:	4814      	ldr	r0, [pc, #80]	; (800fba0 <dispenseStarter+0xd8>)
 800fb50:	f7f3 fb94 	bl	800327c <HAL_GPIO_WritePin>
           break;
 800fb54:	e011      	b.n	800fb7a <dispenseStarter+0xb2>
       case 2:
           HAL_GPIO_WritePin(MS1_3_GPIO_Port, MS1_3_Pin,GPIO_PIN_RESET );
 800fb56:	2200      	movs	r2, #0
 800fb58:	2101      	movs	r1, #1
 800fb5a:	4812      	ldr	r0, [pc, #72]	; (800fba4 <dispenseStarter+0xdc>)
 800fb5c:	f7f3 fb8e 	bl	800327c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(MS2_3_GPIO_Port, MS2_3_Pin,GPIO_PIN_RESET );
 800fb60:	2200      	movs	r2, #0
 800fb62:	2120      	movs	r1, #32
 800fb64:	4810      	ldr	r0, [pc, #64]	; (800fba8 <dispenseStarter+0xe0>)
 800fb66:	f7f3 fb89 	bl	800327c <HAL_GPIO_WritePin>
           HAL_GPIO_WritePin(DIR3_GPIO_Port, DIR3_Pin,GPIO_PIN_SET );
 800fb6a:	2201      	movs	r2, #1
 800fb6c:	2104      	movs	r1, #4
 800fb6e:	480d      	ldr	r0, [pc, #52]	; (800fba4 <dispenseStarter+0xdc>)
 800fb70:	f7f3 fb84 	bl	800327c <HAL_GPIO_WritePin>
           break;
 800fb74:	e001      	b.n	800fb7a <dispenseStarter+0xb2>
       default:
           return HAL_ERROR;
 800fb76:	2301      	movs	r3, #1
 800fb78:	e00b      	b.n	800fb92 <dispenseStarter+0xca>
   }

   // Start the PWM for dispensing
   HAL_TIM_PWM_Start(htimHandle, TIM_CHANNEL_1);
 800fb7a:	2100      	movs	r1, #0
 800fb7c:	68f8      	ldr	r0, [r7, #12]
 800fb7e:	f7f8 f881 	bl	8007c84 <HAL_TIM_PWM_Start>
   
   HAL_Delay(delay); // Simple delay for the volume dispensation
 800fb82:	6978      	ldr	r0, [r7, #20]
 800fb84:	f7f2 fa42 	bl	800200c <HAL_Delay>

   HAL_TIM_PWM_Stop(htimHandle, TIM_CHANNEL_1);
 800fb88:	2100      	movs	r1, #0
 800fb8a:	68f8      	ldr	r0, [r7, #12]
 800fb8c:	f7f8 f942 	bl	8007e14 <HAL_TIM_PWM_Stop>

   return HAL_OK;
 800fb90:	2300      	movs	r3, #0
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	3718      	adds	r7, #24
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
 800fb9a:	bf00      	nop
 800fb9c:	f3af 8000 	nop.w
 800fba0:	40021000 	.word	0x40021000
 800fba4:	40020400 	.word	0x40020400
 800fba8:	40020800 	.word	0x40020800
 800fbac:	f6944674 	.word	0xf6944674
 800fbb0:	40119f06 	.word	0x40119f06

0800fbb4 <primePump>:

HAL_StatusTypeDef primePump(TIM_HandleTypeDef *timPump1, TIM_HandleTypeDef *timPump2, DAC_HandleTypeDef* dac_handle){
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b084      	sub	sp, #16
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	60f8      	str	r0, [r7, #12]
 800fbbc:	60b9      	str	r1, [r7, #8]
 800fbbe:	607a      	str	r2, [r7, #4]

  dispenseStarter(timPump1,dac_handle, 20, 1);
 800fbc0:	2301      	movs	r3, #1
 800fbc2:	2214      	movs	r2, #20
 800fbc4:	6879      	ldr	r1, [r7, #4]
 800fbc6:	68f8      	ldr	r0, [r7, #12]
 800fbc8:	f7ff ff7e 	bl	800fac8 <dispenseStarter>
  dispenseStarter(timPump2,dac_handle, 20, 2);
 800fbcc:	2302      	movs	r3, #2
 800fbce:	2214      	movs	r2, #20
 800fbd0:	6879      	ldr	r1, [r7, #4]
 800fbd2:	68b8      	ldr	r0, [r7, #8]
 800fbd4:	f7ff ff78 	bl	800fac8 <dispenseStarter>
  dispenseStarter(timPump1,dac_handle, 20, 1);
 800fbd8:	2301      	movs	r3, #1
 800fbda:	2214      	movs	r2, #20
 800fbdc:	6879      	ldr	r1, [r7, #4]
 800fbde:	68f8      	ldr	r0, [r7, #12]
 800fbe0:	f7ff ff72 	bl	800fac8 <dispenseStarter>
  dispenseStarter(timPump2,dac_handle, 20, 2);
 800fbe4:	2302      	movs	r3, #2
 800fbe6:	2214      	movs	r2, #20
 800fbe8:	6879      	ldr	r1, [r7, #4]
 800fbea:	68b8      	ldr	r0, [r7, #8]
 800fbec:	f7ff ff6c 	bl	800fac8 <dispenseStarter>
  dispenseStarter(timPump1,dac_handle, 20, 1);
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	2214      	movs	r2, #20
 800fbf4:	6879      	ldr	r1, [r7, #4]
 800fbf6:	68f8      	ldr	r0, [r7, #12]
 800fbf8:	f7ff ff66 	bl	800fac8 <dispenseStarter>
  dispenseStarter(timPump2,dac_handle, 20, 2);
 800fbfc:	2302      	movs	r3, #2
 800fbfe:	2214      	movs	r2, #20
 800fc00:	6879      	ldr	r1, [r7, #4]
 800fc02:	68b8      	ldr	r0, [r7, #8]
 800fc04:	f7ff ff60 	bl	800fac8 <dispenseStarter>

  return HAL_OK;
 800fc08:	2300      	movs	r3, #0
}
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	3710      	adds	r7, #16
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	bd80      	pop	{r7, pc}
 800fc12:	0000      	movs	r0, r0
 800fc14:	0000      	movs	r0, r0
	...

0800fc18 <dispenseStarterSimul>:


HAL_StatusTypeDef dispenseStarterSimul(TIM_HandleTypeDef* timPump1, DAC_HandleTypeDef* dac_handle,TIM_HandleTypeDef* timPump2, uint32_t volume1, uint32_t volume2) {
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b088      	sub	sp, #32
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	60f8      	str	r0, [r7, #12]
 800fc20:	60b9      	str	r1, [r7, #8]
 800fc22:	607a      	str	r2, [r7, #4]
 800fc24:	603b      	str	r3, [r7, #0]

	// wait until cuvette is stopped

        if( HAL_DAC_Start(dac_handle, DAC_CHANNEL_2) != HAL_OK){
 800fc26:	2110      	movs	r1, #16
 800fc28:	68b8      	ldr	r0, [r7, #8]
 800fc2a:	f7f2 fdb8 	bl	800279e <HAL_DAC_Start>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d001      	beq.n	800fc38 <dispenseStarterSimul+0x20>
    	Error_Handler();
 800fc34:	f7f1 fce4 	bl	8001600 <Error_Handler>
    }

    if (HAL_DAC_SetValue(dac_handle, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 2000) != HAL_OK){
 800fc38:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	2110      	movs	r1, #16
 800fc40:	68b8      	ldr	r0, [r7, #8]
 800fc42:	f7f2 fe03 	bl	800284c <HAL_DAC_SetValue>
 800fc46:	4603      	mov	r3, r0
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d001      	beq.n	800fc50 <dispenseStarterSimul+0x38>
    	Error_Handler();
 800fc4c:	f7f1 fcd8 	bl	8001600 <Error_Handler>
    }


   uint32_t time1 = volume1 * MSPERUL;
 800fc50:	6838      	ldr	r0, [r7, #0]
 800fc52:	f7f0 fda1 	bl	8000798 <__aeabi_ui2d>
 800fc56:	a343      	add	r3, pc, #268	; (adr r3, 800fd64 <dispenseStarterSimul+0x14c>)
 800fc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc5c:	f7f0 fb30 	bl	80002c0 <__aeabi_dmul>
 800fc60:	4602      	mov	r2, r0
 800fc62:	460b      	mov	r3, r1
 800fc64:	4610      	mov	r0, r2
 800fc66:	4619      	mov	r1, r3
 800fc68:	f7f0 fe10 	bl	800088c <__aeabi_d2uiz>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	61fb      	str	r3, [r7, #28]
   uint32_t time2 = volume2 * MSPERUL;
 800fc70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc72:	f7f0 fd91 	bl	8000798 <__aeabi_ui2d>
 800fc76:	a33b      	add	r3, pc, #236	; (adr r3, 800fd64 <dispenseStarterSimul+0x14c>)
 800fc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc7c:	f7f0 fb20 	bl	80002c0 <__aeabi_dmul>
 800fc80:	4602      	mov	r2, r0
 800fc82:	460b      	mov	r3, r1
 800fc84:	4610      	mov	r0, r2
 800fc86:	4619      	mov	r1, r3
 800fc88:	f7f0 fe00 	bl	800088c <__aeabi_d2uiz>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	61bb      	str	r3, [r7, #24]
   uint32_t timeToRrun = (time1 > time2) ? time2 : time1;
 800fc90:	69fa      	ldr	r2, [r7, #28]
 800fc92:	69bb      	ldr	r3, [r7, #24]
 800fc94:	4293      	cmp	r3, r2
 800fc96:	bf28      	it	cs
 800fc98:	4613      	movcs	r3, r2
 800fc9a:	617b      	str	r3, [r7, #20]
   uint32_t diff = (time1 > time2) ? (time1 - time2) : (time2 - time1);
 800fc9c:	69fa      	ldr	r2, [r7, #28]
 800fc9e:	69bb      	ldr	r3, [r7, #24]
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d903      	bls.n	800fcac <dispenseStarterSimul+0x94>
 800fca4:	69fa      	ldr	r2, [r7, #28]
 800fca6:	69bb      	ldr	r3, [r7, #24]
 800fca8:	1ad3      	subs	r3, r2, r3
 800fcaa:	e002      	b.n	800fcb2 <dispenseStarterSimul+0x9a>
 800fcac:	69ba      	ldr	r2, [r7, #24]
 800fcae:	69fb      	ldr	r3, [r7, #28]
 800fcb0:	1ad3      	subs	r3, r2, r3
 800fcb2:	613b      	str	r3, [r7, #16]

   // Start the PWM for dispensing
   HAL_TIM_PWM_Start(timPump1, TIM_CHANNEL_1);
 800fcb4:	2100      	movs	r1, #0
 800fcb6:	68f8      	ldr	r0, [r7, #12]
 800fcb8:	f7f7 ffe4 	bl	8007c84 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(timPump2, TIM_CHANNEL_1);
 800fcbc:	2100      	movs	r1, #0
 800fcbe:	6878      	ldr	r0, [r7, #4]
 800fcc0:	f7f7 ffe0 	bl	8007c84 <HAL_TIM_PWM_Start>


   HAL_GPIO_WritePin(MS1_2_GPIO_Port, MS1_2_Pin,GPIO_PIN_RESET );
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fcca:	4823      	ldr	r0, [pc, #140]	; (800fd58 <dispenseStarterSimul+0x140>)
 800fccc:	f7f3 fad6 	bl	800327c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(MS2_2_GPIO_Port, MS2_2_Pin,GPIO_PIN_RESET );
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fcd6:	4820      	ldr	r0, [pc, #128]	; (800fd58 <dispenseStarterSimul+0x140>)
 800fcd8:	f7f3 fad0 	bl	800327c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin,GPIO_PIN_SET );
 800fcdc:	2201      	movs	r2, #1
 800fcde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fce2:	481d      	ldr	r0, [pc, #116]	; (800fd58 <dispenseStarterSimul+0x140>)
 800fce4:	f7f3 faca 	bl	800327c <HAL_GPIO_WritePin>

   HAL_GPIO_WritePin(MS1_3_GPIO_Port, MS1_3_Pin,GPIO_PIN_RESET );
 800fce8:	2200      	movs	r2, #0
 800fcea:	2101      	movs	r1, #1
 800fcec:	481b      	ldr	r0, [pc, #108]	; (800fd5c <dispenseStarterSimul+0x144>)
 800fcee:	f7f3 fac5 	bl	800327c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(MS2_3_GPIO_Port, MS2_3_Pin,GPIO_PIN_RESET );
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	2120      	movs	r1, #32
 800fcf6:	481a      	ldr	r0, [pc, #104]	; (800fd60 <dispenseStarterSimul+0x148>)
 800fcf8:	f7f3 fac0 	bl	800327c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin,GPIO_PIN_SET );
 800fcfc:	2201      	movs	r2, #1
 800fcfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fd02:	4815      	ldr	r0, [pc, #84]	; (800fd58 <dispenseStarterSimul+0x140>)
 800fd04:	f7f3 faba 	bl	800327c <HAL_GPIO_WritePin>

   HAL_Delay(timeToRrun); // Simple delay for the volume dispensation
 800fd08:	6978      	ldr	r0, [r7, #20]
 800fd0a:	f7f2 f97f 	bl	800200c <HAL_Delay>

   // To stop one pump if it has less volume
   if(time1>time2){
 800fd0e:	69fa      	ldr	r2, [r7, #28]
 800fd10:	69bb      	ldr	r3, [r7, #24]
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d904      	bls.n	800fd20 <dispenseStarterSimul+0x108>
   	HAL_TIM_PWM_Stop(timPump2, TIM_CHANNEL_1);
 800fd16:	2100      	movs	r1, #0
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f7f8 f87b 	bl	8007e14 <HAL_TIM_PWM_Stop>
 800fd1e:	e003      	b.n	800fd28 <dispenseStarterSimul+0x110>
   }else{
   	HAL_TIM_PWM_Stop(timPump1, TIM_CHANNEL_1);
 800fd20:	2100      	movs	r1, #0
 800fd22:	68f8      	ldr	r0, [r7, #12]
 800fd24:	f7f8 f876 	bl	8007e14 <HAL_TIM_PWM_Stop>
   }

   // Continuing to dispsense the starter
   HAL_Delay(diff);
 800fd28:	6938      	ldr	r0, [r7, #16]
 800fd2a:	f7f2 f96f 	bl	800200c <HAL_Delay>

   // To stop the remaining pump
   if(time1>time2){
 800fd2e:	69fa      	ldr	r2, [r7, #28]
 800fd30:	69bb      	ldr	r3, [r7, #24]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d904      	bls.n	800fd40 <dispenseStarterSimul+0x128>
   	HAL_TIM_PWM_Stop(timPump1, TIM_CHANNEL_4);
 800fd36:	210c      	movs	r1, #12
 800fd38:	68f8      	ldr	r0, [r7, #12]
 800fd3a:	f7f8 f86b 	bl	8007e14 <HAL_TIM_PWM_Stop>
 800fd3e:	e003      	b.n	800fd48 <dispenseStarterSimul+0x130>
   }else{
   	HAL_TIM_PWM_Stop(timPump2, TIM_CHANNEL_1);
 800fd40:	2100      	movs	r1, #0
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f7f8 f866 	bl	8007e14 <HAL_TIM_PWM_Stop>
   }


   return HAL_OK;
 800fd48:	2300      	movs	r3, #0
}
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	3720      	adds	r7, #32
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd80      	pop	{r7, pc}
 800fd52:	bf00      	nop
 800fd54:	f3af 8000 	nop.w
 800fd58:	40021000 	.word	0x40021000
 800fd5c:	40020400 	.word	0x40020400
 800fd60:	40020800 	.word	0x40020800
 800fd64:	f6944674 	.word	0xf6944674
 800fd68:	40119f06 	.word	0x40119f06

0800fd6c <autoCheck>:


#define BUFFER_SIZE 10
#define STRING_SIZE 100

void autoCheck(void) {
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b08a      	sub	sp, #40	; 0x28
 800fd70:	af02      	add	r7, sp, #8

    uint8_t databuffer[BUFFER_SIZE] = {0};
 800fd72:	2300      	movs	r3, #0
 800fd74:	607b      	str	r3, [r7, #4]
 800fd76:	f107 0308 	add.w	r3, r7, #8
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	601a      	str	r2, [r3, #0]
 800fd7e:	809a      	strh	r2, [r3, #4]

    // Switch page to "place cuvette and press okay"
    char *stringToSend = malloc(STRING_SIZE * sizeof(char));
 800fd80:	2064      	movs	r0, #100	; 0x64
 800fd82:	f000 fabd 	bl	8010300 <malloc>
 800fd86:	4603      	mov	r3, r0
 800fd88:	617b      	str	r3, [r7, #20]
    sprintf(stringToSend, "place cuvette and press continue");
 800fd8a:	499f      	ldr	r1, [pc, #636]	; (8010008 <autoCheck+0x29c>)
 800fd8c:	6978      	ldr	r0, [r7, #20]
 800fd8e:	f000 fb73 	bl	8010478 <siprintf>
    HMI_writeString(&HANDLE_HMI, 0x2100, stringToSend);
 800fd92:	697a      	ldr	r2, [r7, #20]
 800fd94:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 800fd98:	489c      	ldr	r0, [pc, #624]	; (801000c <autoCheck+0x2a0>)
 800fd9a:	f7ff fb96 	bl	800f4ca <HMI_writeString>
    free(stringToSend);
 800fd9e:	6978      	ldr	r0, [r7, #20]
 800fda0:	f000 fab6 	bl	8010310 <free>

    while(HAL_UART_Receive(&HANDLE_HMI, databuffer, BUFFER_SIZE, HAL_MAX_DELAY) != HAL_OK) {
 800fda4:	e000      	b.n	800fda8 <autoCheck+0x3c>
        __NOP();
 800fda6:	bf00      	nop
    while(HAL_UART_Receive(&HANDLE_HMI, databuffer, BUFFER_SIZE, HAL_MAX_DELAY) != HAL_OK) {
 800fda8:	1d39      	adds	r1, r7, #4
 800fdaa:	f04f 33ff 	mov.w	r3, #4294967295
 800fdae:	220a      	movs	r2, #10
 800fdb0:	4896      	ldr	r0, [pc, #600]	; (801000c <autoCheck+0x2a0>)
 800fdb2:	f7f9 fa9e 	bl	80092f2 <HAL_UART_Receive>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d1f4      	bne.n	800fda6 <autoCheck+0x3a>
    }
    HMI_eraseString(&HANDLE_HMI,0x2100);
 800fdbc:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 800fdc0:	4892      	ldr	r0, [pc, #584]	; (801000c <autoCheck+0x2a0>)
 800fdc2:	f7ff fc02 	bl	800f5ca <HMI_eraseString>

    if(databuffer[9] == KEY_BACK){
 800fdc6:	7b7b      	ldrb	r3, [r7, #13]
 800fdc8:	2bff      	cmp	r3, #255	; 0xff
 800fdca:	d104      	bne.n	800fdd6 <autoCheck+0x6a>
        // return back to sys check menu
        HMI_changepage(&huart1, PAGE_SYSTEMS_CHECK);
 800fdcc:	2107      	movs	r1, #7
 800fdce:	4890      	ldr	r0, [pc, #576]	; (8010010 <autoCheck+0x2a4>)
 800fdd0:	f7ff fb50 	bl	800f474 <HMI_changepage>
        return;
 800fdd4:	e114      	b.n	8010000 <autoCheck+0x294>
    }
    else if(databuffer[9] != KEY_YES) {
 800fdd6:	7b7b      	ldrb	r3, [r7, #13]
 800fdd8:	2bee      	cmp	r3, #238	; 0xee
 800fdda:	d006      	beq.n	800fdea <autoCheck+0x7e>
        StateMachine.bEventOccurred = true;
 800fddc:	4b8d      	ldr	r3, [pc, #564]	; (8010014 <autoCheck+0x2a8>)
 800fdde:	2201      	movs	r2, #1
 800fde0:	709a      	strb	r2, [r3, #2]
        StateMachine.eEvent = EVENT_HMI_FALIURE;
 800fde2:	4b8c      	ldr	r3, [pc, #560]	; (8010014 <autoCheck+0x2a8>)
 800fde4:	220e      	movs	r2, #14
 800fde6:	705a      	strb	r2, [r3, #1]
        return;  
 800fde8:	e10a      	b.n	8010000 <autoCheck+0x294>
    }

    // TODO: add correct timer handle
    cuvetteRotate(&HANDLE_CUVETTE, &HANDLE_DAC);
 800fdea:	498b      	ldr	r1, [pc, #556]	; (8010018 <autoCheck+0x2ac>)
 800fdec:	488b      	ldr	r0, [pc, #556]	; (801001c <autoCheck+0x2b0>)
 800fdee:	f7ff fdfd 	bl	800f9ec <cuvetteRotate>

    // Background check
    uint32_t newBackground = PULSES_background(&HANDLE_PULSES);
 800fdf2:	488b      	ldr	r0, [pc, #556]	; (8010020 <autoCheck+0x2b4>)
 800fdf4:	f7ff fc5a 	bl	800f6ac <PULSES_background>
 800fdf8:	6138      	str	r0, [r7, #16]

    // Displaying on screen
    stringToSend = malloc(STRING_SIZE * sizeof(char));
 800fdfa:	2064      	movs	r0, #100	; 0x64
 800fdfc:	f000 fa80 	bl	8010300 <malloc>
 800fe00:	4603      	mov	r3, r0
 800fe02:	617b      	str	r3, [r7, #20]
    sprintf(stringToSend, "the background is %lu units", newBackground);
 800fe04:	693a      	ldr	r2, [r7, #16]
 800fe06:	4987      	ldr	r1, [pc, #540]	; (8010024 <autoCheck+0x2b8>)
 800fe08:	6978      	ldr	r0, [r7, #20]
 800fe0a:	f000 fb35 	bl	8010478 <siprintf>
    HMI_writeString(&HANDLE_HMI, 0x2100, stringToSend);
 800fe0e:	697a      	ldr	r2, [r7, #20]
 800fe10:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 800fe14:	487d      	ldr	r0, [pc, #500]	; (801000c <autoCheck+0x2a0>)
 800fe16:	f7ff fb58 	bl	800f4ca <HMI_writeString>
    free(stringToSend);
 800fe1a:	6978      	ldr	r0, [r7, #20]
 800fe1c:	f000 fa78 	bl	8010310 <free>

    // Write background value to memory
    WriteBackground(newBackground);
 800fe20:	6938      	ldr	r0, [r7, #16]
 800fe22:	f7ff f909 	bl	800f038 <WriteBackground>
    
    HMI_eraseString(&HANDLE_HMI,0x2100);
 800fe26:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 800fe2a:	4878      	ldr	r0, [pc, #480]	; (801000c <autoCheck+0x2a0>)
 800fe2c:	f7ff fbcd 	bl	800f5ca <HMI_eraseString>

    // Wait to erase screen 
    HAL_Delay(3000);
 800fe30:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800fe34:	f7f2 f8ea 	bl	800200c <HAL_Delay>
    HMI_eraseString(&HANDLE_HMI,0x2100);
 800fe38:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 800fe3c:	4873      	ldr	r0, [pc, #460]	; (801000c <autoCheck+0x2a0>)
 800fe3e:	f7ff fbc4 	bl	800f5ca <HMI_eraseString>

    // Press start priming pump
    stringToSend = malloc(STRING_SIZE * sizeof(char));
 800fe42:	2064      	movs	r0, #100	; 0x64
 800fe44:	f000 fa5c 	bl	8010300 <malloc>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	617b      	str	r3, [r7, #20]
    sprintf(stringToSend, "Press continue to do priming");
 800fe4c:	4976      	ldr	r1, [pc, #472]	; (8010028 <autoCheck+0x2bc>)
 800fe4e:	6978      	ldr	r0, [r7, #20]
 800fe50:	f000 fb12 	bl	8010478 <siprintf>
    HMI_writeString(&HANDLE_HMI, 0x2100, stringToSend);
 800fe54:	697a      	ldr	r2, [r7, #20]
 800fe56:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 800fe5a:	486c      	ldr	r0, [pc, #432]	; (801000c <autoCheck+0x2a0>)
 800fe5c:	f7ff fb35 	bl	800f4ca <HMI_writeString>
    free(stringToSend);
 800fe60:	6978      	ldr	r0, [r7, #20]
 800fe62:	f000 fa55 	bl	8010310 <free>

    // Disable yes no button
    bool primed = false;
 800fe66:	2300      	movs	r3, #0
 800fe68:	77fb      	strb	r3, [r7, #31]
    for (int i = 0; i < 2; i++){
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	61bb      	str	r3, [r7, #24]
 800fe6e:	e055      	b.n	800ff1c <autoCheck+0x1b0>
        // loop for primimng the pump
        
        // wait for key press
        while(HAL_UART_Receive(&HANDLE_HMI, databuffer, BUFFER_SIZE, HAL_MAX_DELAY) != HAL_OK) {
            __NOP();
 800fe70:	bf00      	nop
        while(HAL_UART_Receive(&HANDLE_HMI, databuffer, BUFFER_SIZE, HAL_MAX_DELAY) != HAL_OK) {
 800fe72:	1d39      	adds	r1, r7, #4
 800fe74:	f04f 33ff 	mov.w	r3, #4294967295
 800fe78:	220a      	movs	r2, #10
 800fe7a:	4864      	ldr	r0, [pc, #400]	; (801000c <autoCheck+0x2a0>)
 800fe7c:	f7f9 fa39 	bl	80092f2 <HAL_UART_Receive>
 800fe80:	4603      	mov	r3, r0
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d1f4      	bne.n	800fe70 <autoCheck+0x104>
        }
        
        if(databuffer[9] == KEY_BACK) {
 800fe86:	7b7b      	ldrb	r3, [r7, #13]
 800fe88:	2bff      	cmp	r3, #255	; 0xff
 800fe8a:	d104      	bne.n	800fe96 <autoCheck+0x12a>
            // return back to sys check menu
            HMI_changepage(&huart1, PAGE_SYSTEMS_CHECK);
 800fe8c:	2107      	movs	r1, #7
 800fe8e:	4860      	ldr	r0, [pc, #384]	; (8010010 <autoCheck+0x2a4>)
 800fe90:	f7ff faf0 	bl	800f474 <HMI_changepage>
            return;
 800fe94:	e0b4      	b.n	8010000 <autoCheck+0x294>

        } else if(databuffer[9] != KEY_YES){
 800fe96:	7b7b      	ldrb	r3, [r7, #13]
 800fe98:	2bee      	cmp	r3, #238	; 0xee
 800fe9a:	d006      	beq.n	800feaa <autoCheck+0x13e>
            StateMachine.bEventOccurred = true;
 800fe9c:	4b5d      	ldr	r3, [pc, #372]	; (8010014 <autoCheck+0x2a8>)
 800fe9e:	2201      	movs	r2, #1
 800fea0:	709a      	strb	r2, [r3, #2]
            StateMachine.eEvent = EVENT_HMI_FALIURE;
 800fea2:	4b5c      	ldr	r3, [pc, #368]	; (8010014 <autoCheck+0x2a8>)
 800fea4:	220e      	movs	r2, #14
 800fea6:	705a      	strb	r2, [r3, #1]
            return;  
 800fea8:	e0aa      	b.n	8010000 <autoCheck+0x294>
        }

        // TODO : correct handle
        cuvetteRotate(&HANDLE_CUVETTE, &HANDLE_DAC);
 800feaa:	495b      	ldr	r1, [pc, #364]	; (8010018 <autoCheck+0x2ac>)
 800feac:	485b      	ldr	r0, [pc, #364]	; (801001c <autoCheck+0x2b0>)
 800feae:	f7ff fd9d 	bl	800f9ec <cuvetteRotate>
        primePump(&HANDLE_PUMP1, &HANDLE_PUMP2, &HANDLE_DAC);
 800feb2:	4a59      	ldr	r2, [pc, #356]	; (8010018 <autoCheck+0x2ac>)
 800feb4:	495d      	ldr	r1, [pc, #372]	; (801002c <autoCheck+0x2c0>)
 800feb6:	485e      	ldr	r0, [pc, #376]	; (8010030 <autoCheck+0x2c4>)
 800feb8:	f7ff fe7c 	bl	800fbb4 <primePump>
        cuvetteRotate(&HANDLE_CUVETTE, &HANDLE_DAC);
 800febc:	4956      	ldr	r1, [pc, #344]	; (8010018 <autoCheck+0x2ac>)
 800febe:	4857      	ldr	r0, [pc, #348]	; (801001c <autoCheck+0x2b0>)
 800fec0:	f7ff fd94 	bl	800f9ec <cuvetteRotate>
        
        // Check for user input
        HMI_eraseString(&HANDLE_HMI, 0x2100);
 800fec4:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 800fec8:	4850      	ldr	r0, [pc, #320]	; (801000c <autoCheck+0x2a0>)
 800feca:	f7ff fb7e 	bl	800f5ca <HMI_eraseString>
        stringToSend = malloc(STRING_SIZE * sizeof(char));
 800fece:	2064      	movs	r0, #100	; 0x64
 800fed0:	f000 fa16 	bl	8010300 <malloc>
 800fed4:	4603      	mov	r3, r0
 800fed6:	617b      	str	r3, [r7, #20]
        sprintf(stringToSend, "Is there liquid in the cuvette");
 800fed8:	4956      	ldr	r1, [pc, #344]	; (8010034 <autoCheck+0x2c8>)
 800feda:	6978      	ldr	r0, [r7, #20]
 800fedc:	f000 facc 	bl	8010478 <siprintf>
        HMI_writeString(&HANDLE_HMI, 0x2100, stringToSend);
 800fee0:	697a      	ldr	r2, [r7, #20]
 800fee2:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 800fee6:	4849      	ldr	r0, [pc, #292]	; (801000c <autoCheck+0x2a0>)
 800fee8:	f7ff faef 	bl	800f4ca <HMI_writeString>
        free(stringToSend);
 800feec:	6978      	ldr	r0, [r7, #20]
 800feee:	f000 fa0f 	bl	8010310 <free>

        // wait for key press
        while(HAL_UART_Receive(&HANDLE_HMI, databuffer, BUFFER_SIZE, HAL_MAX_DELAY) != HAL_OK) {
 800fef2:	e000      	b.n	800fef6 <autoCheck+0x18a>
            __NOP();
 800fef4:	bf00      	nop
        while(HAL_UART_Receive(&HANDLE_HMI, databuffer, BUFFER_SIZE, HAL_MAX_DELAY) != HAL_OK) {
 800fef6:	1d39      	adds	r1, r7, #4
 800fef8:	f04f 33ff 	mov.w	r3, #4294967295
 800fefc:	220a      	movs	r2, #10
 800fefe:	4843      	ldr	r0, [pc, #268]	; (801000c <autoCheck+0x2a0>)
 800ff00:	f7f9 f9f7 	bl	80092f2 <HAL_UART_Receive>
 800ff04:	4603      	mov	r3, r0
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d1f4      	bne.n	800fef4 <autoCheck+0x188>
        } 

        if(databuffer[9] == KEY_YES) {
 800ff0a:	7b7b      	ldrb	r3, [r7, #13]
 800ff0c:	2bee      	cmp	r3, #238	; 0xee
 800ff0e:	d102      	bne.n	800ff16 <autoCheck+0x1aa>
            primed = true;
 800ff10:	2301      	movs	r3, #1
 800ff12:	77fb      	strb	r3, [r7, #31]
            break;
 800ff14:	e005      	b.n	800ff22 <autoCheck+0x1b6>
    for (int i = 0; i < 2; i++){
 800ff16:	69bb      	ldr	r3, [r7, #24]
 800ff18:	3301      	adds	r3, #1
 800ff1a:	61bb      	str	r3, [r7, #24]
 800ff1c:	69bb      	ldr	r3, [r7, #24]
 800ff1e:	2b01      	cmp	r3, #1
 800ff20:	dda7      	ble.n	800fe72 <autoCheck+0x106>
        }

    }

    if(!primed) {
 800ff22:	7ffb      	ldrb	r3, [r7, #31]
 800ff24:	f083 0301 	eor.w	r3, r3, #1
 800ff28:	b2db      	uxtb	r3, r3
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d006      	beq.n	800ff3c <autoCheck+0x1d0>
        StateMachine.bEventOccurred = true;
 800ff2e:	4b39      	ldr	r3, [pc, #228]	; (8010014 <autoCheck+0x2a8>)
 800ff30:	2201      	movs	r2, #1
 800ff32:	709a      	strb	r2, [r3, #2]
        StateMachine.eEvent = EVENT_SYSCHECK_PRIME_FAILED;
 800ff34:	4b37      	ldr	r3, [pc, #220]	; (8010014 <autoCheck+0x2a8>)
 800ff36:	2210      	movs	r2, #16
 800ff38:	705a      	strb	r2, [r3, #1]
        return;  
 800ff3a:	e061      	b.n	8010000 <autoCheck+0x294>
    }

    HMI_eraseString(&HANDLE_HMI,0x2100);
 800ff3c:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 800ff40:	4832      	ldr	r0, [pc, #200]	; (801000c <autoCheck+0x2a0>)
 800ff42:	f7ff fb42 	bl	800f5ca <HMI_eraseString>

    // Change page to cotinue page

    // Check for user input
    HMI_eraseString(&HANDLE_HMI, 0x2100);
 800ff46:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 800ff4a:	4830      	ldr	r0, [pc, #192]	; (801000c <autoCheck+0x2a0>)
 800ff4c:	f7ff fb3d 	bl	800f5ca <HMI_eraseString>
    stringToSend = malloc(STRING_SIZE * sizeof(char));
 800ff50:	2064      	movs	r0, #100	; 0x64
 800ff52:	f000 f9d5 	bl	8010300 <malloc>
 800ff56:	4603      	mov	r3, r0
 800ff58:	617b      	str	r3, [r7, #20]
    sprintf(stringToSend, "Press continue for light check");
 800ff5a:	4937      	ldr	r1, [pc, #220]	; (8010038 <autoCheck+0x2cc>)
 800ff5c:	6978      	ldr	r0, [r7, #20]
 800ff5e:	f000 fa8b 	bl	8010478 <siprintf>
    HMI_writeString(&HANDLE_HMI, 0x2100, stringToSend);
 800ff62:	697a      	ldr	r2, [r7, #20]
 800ff64:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 800ff68:	4828      	ldr	r0, [pc, #160]	; (801000c <autoCheck+0x2a0>)
 800ff6a:	f7ff faae 	bl	800f4ca <HMI_writeString>
    free(stringToSend);
 800ff6e:	6978      	ldr	r0, [r7, #20]
 800ff70:	f000 f9ce 	bl	8010310 <free>

    // Press start Light Check
    while(HAL_UART_Receive(&HANDLE_HMI, databuffer, BUFFER_SIZE, HAL_MAX_DELAY) != HAL_OK) {
 800ff74:	e000      	b.n	800ff78 <autoCheck+0x20c>
        __NOP();
 800ff76:	bf00      	nop
    while(HAL_UART_Receive(&HANDLE_HMI, databuffer, BUFFER_SIZE, HAL_MAX_DELAY) != HAL_OK) {
 800ff78:	1d39      	adds	r1, r7, #4
 800ff7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ff7e:	220a      	movs	r2, #10
 800ff80:	4822      	ldr	r0, [pc, #136]	; (801000c <autoCheck+0x2a0>)
 800ff82:	f7f9 f9b6 	bl	80092f2 <HAL_UART_Receive>
 800ff86:	4603      	mov	r3, r0
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d1f4      	bne.n	800ff76 <autoCheck+0x20a>
    }

    if(databuffer[9] != 0xAA) {
 800ff8c:	7b7b      	ldrb	r3, [r7, #13]
 800ff8e:	2baa      	cmp	r3, #170	; 0xaa
 800ff90:	d006      	beq.n	800ffa0 <autoCheck+0x234>
        StateMachine.bEventOccurred = true;
 800ff92:	4b20      	ldr	r3, [pc, #128]	; (8010014 <autoCheck+0x2a8>)
 800ff94:	2201      	movs	r2, #1
 800ff96:	709a      	strb	r2, [r3, #2]
        StateMachine.eEvent = EVENT_HMI_FALIURE;
 800ff98:	4b1e      	ldr	r3, [pc, #120]	; (8010014 <autoCheck+0x2a8>)
 800ff9a:	220e      	movs	r2, #14
 800ff9c:	705a      	strb	r2, [r3, #1]
        return;  
 800ff9e:	e02f      	b.n	8010000 <autoCheck+0x294>
    }

    dispenseStarterSimul(&HANDLE_PUMP1, &HANDLE_DAC, &HANDLE_PUMP2, 20, 20);
 800ffa0:	2314      	movs	r3, #20
 800ffa2:	9300      	str	r3, [sp, #0]
 800ffa4:	2314      	movs	r3, #20
 800ffa6:	4a21      	ldr	r2, [pc, #132]	; (801002c <autoCheck+0x2c0>)
 800ffa8:	491b      	ldr	r1, [pc, #108]	; (8010018 <autoCheck+0x2ac>)
 800ffaa:	4821      	ldr	r0, [pc, #132]	; (8010030 <autoCheck+0x2c4>)
 800ffac:	f7ff fe34 	bl	800fc18 <dispenseStarterSimul>
    newBackground = PULSES_background(&htim1);
 800ffb0:	481a      	ldr	r0, [pc, #104]	; (801001c <autoCheck+0x2b0>)
 800ffb2:	f7ff fb7b 	bl	800f6ac <PULSES_background>
 800ffb6:	6138      	str	r0, [r7, #16]
   
   // Displaying on screen
    stringToSend = malloc(STRING_SIZE * sizeof(char));
 800ffb8:	2064      	movs	r0, #100	; 0x64
 800ffba:	f000 f9a1 	bl	8010300 <malloc>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	617b      	str	r3, [r7, #20]
    sprintf(stringToSend, "the lightcheck is %lu units", newBackground);
 800ffc2:	693a      	ldr	r2, [r7, #16]
 800ffc4:	491d      	ldr	r1, [pc, #116]	; (801003c <autoCheck+0x2d0>)
 800ffc6:	6978      	ldr	r0, [r7, #20]
 800ffc8:	f000 fa56 	bl	8010478 <siprintf>
    HMI_writeString(&HANDLE_HMI, 0x2100, stringToSend);
 800ffcc:	697a      	ldr	r2, [r7, #20]
 800ffce:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 800ffd2:	480e      	ldr	r0, [pc, #56]	; (801000c <autoCheck+0x2a0>)
 800ffd4:	f7ff fa79 	bl	800f4ca <HMI_writeString>
    free(stringToSend);
 800ffd8:	6978      	ldr	r0, [r7, #20]
 800ffda:	f000 f999 	bl	8010310 <free>

    WriteLightCheck(newBackground);
 800ffde:	6938      	ldr	r0, [r7, #16]
 800ffe0:	f7ff f80c 	bl	800effc <WriteLightCheck>

    HAL_Delay(3000);
 800ffe4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ffe8:	f7f2 f810 	bl	800200c <HAL_Delay>
    HMI_eraseString(&HANDLE_HMI, 0x2100);
 800ffec:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 800fff0:	4806      	ldr	r0, [pc, #24]	; (801000c <autoCheck+0x2a0>)
 800fff2:	f7ff faea 	bl	800f5ca <HMI_eraseString>
    HMI_changepage(&huart1, PAGE_SYSTEMS_CHECK);
 800fff6:	2107      	movs	r1, #7
 800fff8:	4805      	ldr	r0, [pc, #20]	; (8010010 <autoCheck+0x2a4>)
 800fffa:	f7ff fa3b 	bl	800f474 <HMI_changepage>

    return;
 800fffe:	bf00      	nop

}   
 8010000:	3720      	adds	r7, #32
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}
 8010006:	bf00      	nop
 8010008:	08010c88 	.word	0x08010c88
 801000c:	200003c0 	.word	0x200003c0
 8010010:	20000378 	.word	0x20000378
 8010014:	200010f0 	.word	0x200010f0
 8010018:	200000fc 	.word	0x200000fc
 801001c:	20000210 	.word	0x20000210
 8010020:	20000258 	.word	0x20000258
 8010024:	08010cac 	.word	0x08010cac
 8010028:	08010cc8 	.word	0x08010cc8
 801002c:	200002a0 	.word	0x200002a0
 8010030:	200002e8 	.word	0x200002e8
 8010034:	08010ce8 	.word	0x08010ce8
 8010038:	08010d08 	.word	0x08010d08
 801003c:	08010d28 	.word	0x08010d28

08010040 <backgroundCheck>:

void backgroundCheck(void) {
 8010040:	b580      	push	{r7, lr}
 8010042:	b082      	sub	sp, #8
 8010044:	af00      	add	r7, sp, #0
    // Perform background check
    uint32_t background = PULSES_background(&HANDLE_PULSES);
 8010046:	4813      	ldr	r0, [pc, #76]	; (8010094 <backgroundCheck+0x54>)
 8010048:	f7ff fb30 	bl	800f6ac <PULSES_background>
 801004c:	6078      	str	r0, [r7, #4]

    // Display result
    char *stringToSend = malloc(STRING_SIZE * sizeof(char));
 801004e:	2064      	movs	r0, #100	; 0x64
 8010050:	f000 f956 	bl	8010300 <malloc>
 8010054:	4603      	mov	r3, r0
 8010056:	603b      	str	r3, [r7, #0]
    sprintf(stringToSend, "Background: %lu units", background);
 8010058:	687a      	ldr	r2, [r7, #4]
 801005a:	490f      	ldr	r1, [pc, #60]	; (8010098 <backgroundCheck+0x58>)
 801005c:	6838      	ldr	r0, [r7, #0]
 801005e:	f000 fa0b 	bl	8010478 <siprintf>
    HMI_writeString(&HANDLE_HMI, 0x2100, stringToSend);
 8010062:	683a      	ldr	r2, [r7, #0]
 8010064:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8010068:	480c      	ldr	r0, [pc, #48]	; (801009c <backgroundCheck+0x5c>)
 801006a:	f7ff fa2e 	bl	800f4ca <HMI_writeString>
    free(stringToSend);
 801006e:	6838      	ldr	r0, [r7, #0]
 8010070:	f000 f94e 	bl	8010310 <free>

    // Write background value to memory
    WriteBackground(background);
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f7fe ffdf 	bl	800f038 <WriteBackground>

    HAL_Delay(3000);
 801007a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 801007e:	f7f1 ffc5 	bl	800200c <HAL_Delay>
    HMI_eraseString(&HANDLE_HMI,0x2100);
 8010082:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8010086:	4805      	ldr	r0, [pc, #20]	; (801009c <backgroundCheck+0x5c>)
 8010088:	f7ff fa9f 	bl	800f5ca <HMI_eraseString>

    return ;
 801008c:	bf00      	nop
}
 801008e:	3708      	adds	r7, #8
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}
 8010094:	20000258 	.word	0x20000258
 8010098:	08010d44 	.word	0x08010d44
 801009c:	200003c0 	.word	0x200003c0

080100a0 <pumpPriming>:

void pumpPriming(void) {
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b086      	sub	sp, #24
 80100a4:	af00      	add	r7, sp, #0
    
    
    uint8_t databuffer[BUFFER_SIZE] = {0};
 80100a6:	2300      	movs	r3, #0
 80100a8:	603b      	str	r3, [r7, #0]
 80100aa:	1d3b      	adds	r3, r7, #4
 80100ac:	2200      	movs	r2, #0
 80100ae:	601a      	str	r2, [r3, #0]
 80100b0:	809a      	strh	r2, [r3, #4]
    bool primed = false;
 80100b2:	2300      	movs	r3, #0
 80100b4:	75fb      	strb	r3, [r7, #23]

    for (int i = 0; i < 2; i++) {
 80100b6:	2300      	movs	r3, #0
 80100b8:	613b      	str	r3, [r7, #16]
 80100ba:	e05c      	b.n	8010176 <pumpPriming+0xd6>
        char *stringToSend = malloc(STRING_SIZE * sizeof(char));
 80100bc:	2064      	movs	r0, #100	; 0x64
 80100be:	f000 f91f 	bl	8010300 <malloc>
 80100c2:	4603      	mov	r3, r0
 80100c4:	60fb      	str	r3, [r7, #12]
        sprintf(stringToSend, "Priming attempt %d. Press continue.", i + 1);
 80100c6:	693b      	ldr	r3, [r7, #16]
 80100c8:	3301      	adds	r3, #1
 80100ca:	461a      	mov	r2, r3
 80100cc:	4934      	ldr	r1, [pc, #208]	; (80101a0 <pumpPriming+0x100>)
 80100ce:	68f8      	ldr	r0, [r7, #12]
 80100d0:	f000 f9d2 	bl	8010478 <siprintf>
        HMI_writeString(&HANDLE_HMI, 0x2100, stringToSend);
 80100d4:	68fa      	ldr	r2, [r7, #12]
 80100d6:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 80100da:	4832      	ldr	r0, [pc, #200]	; (80101a4 <pumpPriming+0x104>)
 80100dc:	f7ff f9f5 	bl	800f4ca <HMI_writeString>
        free(stringToSend);
 80100e0:	68f8      	ldr	r0, [r7, #12]
 80100e2:	f000 f915 	bl	8010310 <free>

        while(HAL_UART_Receive(&HANDLE_HMI, databuffer, BUFFER_SIZE, HAL_MAX_DELAY) != HAL_OK) {
 80100e6:	e000      	b.n	80100ea <pumpPriming+0x4a>
            __NOP();
 80100e8:	bf00      	nop
        while(HAL_UART_Receive(&HANDLE_HMI, databuffer, BUFFER_SIZE, HAL_MAX_DELAY) != HAL_OK) {
 80100ea:	4639      	mov	r1, r7
 80100ec:	f04f 33ff 	mov.w	r3, #4294967295
 80100f0:	220a      	movs	r2, #10
 80100f2:	482c      	ldr	r0, [pc, #176]	; (80101a4 <pumpPriming+0x104>)
 80100f4:	f7f9 f8fd 	bl	80092f2 <HAL_UART_Receive>
 80100f8:	4603      	mov	r3, r0
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d1f4      	bne.n	80100e8 <pumpPriming+0x48>
        }

        if(databuffer[9] != 0xAA) {
 80100fe:	7a7b      	ldrb	r3, [r7, #9]
 8010100:	2baa      	cmp	r3, #170	; 0xaa
 8010102:	d13c      	bne.n	801017e <pumpPriming+0xde>
            break;
        }

        cuvetteRotate(&HANDLE_CUVETTE, &HANDLE_DAC);
 8010104:	4928      	ldr	r1, [pc, #160]	; (80101a8 <pumpPriming+0x108>)
 8010106:	4829      	ldr	r0, [pc, #164]	; (80101ac <pumpPriming+0x10c>)
 8010108:	f7ff fc70 	bl	800f9ec <cuvetteRotate>
        primePump(&HANDLE_PUMP1, &HANDLE_PUMP2, &HANDLE_DAC);
 801010c:	4a26      	ldr	r2, [pc, #152]	; (80101a8 <pumpPriming+0x108>)
 801010e:	4928      	ldr	r1, [pc, #160]	; (80101b0 <pumpPriming+0x110>)
 8010110:	4828      	ldr	r0, [pc, #160]	; (80101b4 <pumpPriming+0x114>)
 8010112:	f7ff fd4f 	bl	800fbb4 <primePump>
        cuvetteRotate(&HANDLE_CUVETTE, &HANDLE_DAC);
 8010116:	4924      	ldr	r1, [pc, #144]	; (80101a8 <pumpPriming+0x108>)
 8010118:	4824      	ldr	r0, [pc, #144]	; (80101ac <pumpPriming+0x10c>)
 801011a:	f7ff fc67 	bl	800f9ec <cuvetteRotate>

        HMI_eraseString(&HANDLE_HMI,0x2100);
 801011e:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8010122:	4820      	ldr	r0, [pc, #128]	; (80101a4 <pumpPriming+0x104>)
 8010124:	f7ff fa51 	bl	800f5ca <HMI_eraseString>
        stringToSend = malloc(STRING_SIZE * sizeof(char));
 8010128:	2064      	movs	r0, #100	; 0x64
 801012a:	f000 f8e9 	bl	8010300 <malloc>
 801012e:	4603      	mov	r3, r0
 8010130:	60fb      	str	r3, [r7, #12]
        sprintf(stringToSend, "Is there liquid in the cuvette?");
 8010132:	4921      	ldr	r1, [pc, #132]	; (80101b8 <pumpPriming+0x118>)
 8010134:	68f8      	ldr	r0, [r7, #12]
 8010136:	f000 f99f 	bl	8010478 <siprintf>
        HMI_writeString(&HANDLE_HMI, 0x2100, stringToSend);
 801013a:	68fa      	ldr	r2, [r7, #12]
 801013c:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8010140:	4818      	ldr	r0, [pc, #96]	; (80101a4 <pumpPriming+0x104>)
 8010142:	f7ff f9c2 	bl	800f4ca <HMI_writeString>
        free(stringToSend);
 8010146:	68f8      	ldr	r0, [r7, #12]
 8010148:	f000 f8e2 	bl	8010310 <free>

        while(HAL_UART_Receive(&HANDLE_HMI, databuffer, BUFFER_SIZE, HAL_MAX_DELAY) != HAL_OK) {
 801014c:	e000      	b.n	8010150 <pumpPriming+0xb0>
            __NOP();
 801014e:	bf00      	nop
        while(HAL_UART_Receive(&HANDLE_HMI, databuffer, BUFFER_SIZE, HAL_MAX_DELAY) != HAL_OK) {
 8010150:	4639      	mov	r1, r7
 8010152:	f04f 33ff 	mov.w	r3, #4294967295
 8010156:	220a      	movs	r2, #10
 8010158:	4812      	ldr	r0, [pc, #72]	; (80101a4 <pumpPriming+0x104>)
 801015a:	f7f9 f8ca 	bl	80092f2 <HAL_UART_Receive>
 801015e:	4603      	mov	r3, r0
 8010160:	2b00      	cmp	r3, #0
 8010162:	d1f4      	bne.n	801014e <pumpPriming+0xae>
        }

        if(databuffer[9] == 0xAA) {
 8010164:	7a7b      	ldrb	r3, [r7, #9]
 8010166:	2baa      	cmp	r3, #170	; 0xaa
 8010168:	d102      	bne.n	8010170 <pumpPriming+0xd0>
            primed = true;
 801016a:	2301      	movs	r3, #1
 801016c:	75fb      	strb	r3, [r7, #23]
            break;
 801016e:	e007      	b.n	8010180 <pumpPriming+0xe0>
    for (int i = 0; i < 2; i++) {
 8010170:	693b      	ldr	r3, [r7, #16]
 8010172:	3301      	adds	r3, #1
 8010174:	613b      	str	r3, [r7, #16]
 8010176:	693b      	ldr	r3, [r7, #16]
 8010178:	2b01      	cmp	r3, #1
 801017a:	dd9f      	ble.n	80100bc <pumpPriming+0x1c>
 801017c:	e000      	b.n	8010180 <pumpPriming+0xe0>
            break;
 801017e:	bf00      	nop
        }
    }

    if (!primed) {
 8010180:	7dfb      	ldrb	r3, [r7, #23]
 8010182:	f083 0301 	eor.w	r3, r3, #1
 8010186:	b2db      	uxtb	r3, r3
 8010188:	2b00      	cmp	r3, #0
 801018a:	d005      	beq.n	8010198 <pumpPriming+0xf8>
        StateMachine.bEventOccurred = true;
 801018c:	4b0b      	ldr	r3, [pc, #44]	; (80101bc <pumpPriming+0x11c>)
 801018e:	2201      	movs	r2, #1
 8010190:	709a      	strb	r2, [r3, #2]
        StateMachine.eEvent = EVENT_SYSCHECK_PRIME_FAILED;
 8010192:	4b0a      	ldr	r3, [pc, #40]	; (80101bc <pumpPriming+0x11c>)
 8010194:	2210      	movs	r2, #16
 8010196:	705a      	strb	r2, [r3, #1]
    }
}
 8010198:	bf00      	nop
 801019a:	3718      	adds	r7, #24
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}
 80101a0:	08010d5c 	.word	0x08010d5c
 80101a4:	200003c0 	.word	0x200003c0
 80101a8:	200000fc 	.word	0x200000fc
 80101ac:	20000210 	.word	0x20000210
 80101b0:	200002a0 	.word	0x200002a0
 80101b4:	200002e8 	.word	0x200002e8
 80101b8:	08010d80 	.word	0x08010d80
 80101bc:	200010f0 	.word	0x200010f0

080101c0 <darkCheck>:

void darkCheck(void) {
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b082      	sub	sp, #8
 80101c4:	af00      	add	r7, sp, #0

    uint32_t darkReading = PULSES_background(&HANDLE_PULSES);
 80101c6:	4813      	ldr	r0, [pc, #76]	; (8010214 <darkCheck+0x54>)
 80101c8:	f7ff fa70 	bl	800f6ac <PULSES_background>
 80101cc:	6078      	str	r0, [r7, #4]

    char *stringToSend = malloc(STRING_SIZE * sizeof(char));
 80101ce:	2064      	movs	r0, #100	; 0x64
 80101d0:	f000 f896 	bl	8010300 <malloc>
 80101d4:	4603      	mov	r3, r0
 80101d6:	603b      	str	r3, [r7, #0]
    sprintf(stringToSend, "Dark reading: %lu units", darkReading);
 80101d8:	687a      	ldr	r2, [r7, #4]
 80101da:	490f      	ldr	r1, [pc, #60]	; (8010218 <darkCheck+0x58>)
 80101dc:	6838      	ldr	r0, [r7, #0]
 80101de:	f000 f94b 	bl	8010478 <siprintf>
    HMI_writeString(&HANDLE_HMI, 0x2100, stringToSend);
 80101e2:	683a      	ldr	r2, [r7, #0]
 80101e4:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 80101e8:	480c      	ldr	r0, [pc, #48]	; (801021c <darkCheck+0x5c>)
 80101ea:	f7ff f96e 	bl	800f4ca <HMI_writeString>
    free(stringToSend);
 80101ee:	6838      	ldr	r0, [r7, #0]
 80101f0:	f000 f88e 	bl	8010310 <free>

    WriteDarkCount(darkReading);
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f7fe ff10 	bl	800f01a <WriteDarkCount>

    HAL_Delay(3000);
 80101fa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80101fe:	f7f1 ff05 	bl	800200c <HAL_Delay>
    HMI_eraseString(&HANDLE_HMI,0x2100);
 8010202:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8010206:	4805      	ldr	r0, [pc, #20]	; (801021c <darkCheck+0x5c>)
 8010208:	f7ff f9df 	bl	800f5ca <HMI_eraseString>
}
 801020c:	bf00      	nop
 801020e:	3708      	adds	r7, #8
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}
 8010214:	20000258 	.word	0x20000258
 8010218:	08010da0 	.word	0x08010da0
 801021c:	200003c0 	.word	0x200003c0

08010220 <lightCheck>:

void lightCheck(void) {
 8010220:	b580      	push	{r7, lr}
 8010222:	b088      	sub	sp, #32
 8010224:	af02      	add	r7, sp, #8

    uint8_t databuffer[BUFFER_SIZE] = {0};
 8010226:	2300      	movs	r3, #0
 8010228:	607b      	str	r3, [r7, #4]
 801022a:	f107 0308 	add.w	r3, r7, #8
 801022e:	2200      	movs	r2, #0
 8010230:	601a      	str	r2, [r3, #0]
 8010232:	809a      	strh	r2, [r3, #4]

    char *stringToSend = malloc(STRING_SIZE * sizeof(char));
 8010234:	2064      	movs	r0, #100	; 0x64
 8010236:	f000 f863 	bl	8010300 <malloc>
 801023a:	4603      	mov	r3, r0
 801023c:	617b      	str	r3, [r7, #20]
    sprintf(stringToSend, "Press continue for light check");
 801023e:	4928      	ldr	r1, [pc, #160]	; (80102e0 <lightCheck+0xc0>)
 8010240:	6978      	ldr	r0, [r7, #20]
 8010242:	f000 f919 	bl	8010478 <siprintf>
    HMI_writeString(&HANDLE_HMI, 0x2100, stringToSend);
 8010246:	697a      	ldr	r2, [r7, #20]
 8010248:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 801024c:	4825      	ldr	r0, [pc, #148]	; (80102e4 <lightCheck+0xc4>)
 801024e:	f7ff f93c 	bl	800f4ca <HMI_writeString>
    free(stringToSend);
 8010252:	6978      	ldr	r0, [r7, #20]
 8010254:	f000 f85c 	bl	8010310 <free>

    while(HAL_UART_Receive(&HANDLE_HMI, databuffer, BUFFER_SIZE, HAL_MAX_DELAY) != HAL_OK) {
 8010258:	e000      	b.n	801025c <lightCheck+0x3c>
        __NOP();
 801025a:	bf00      	nop
    while(HAL_UART_Receive(&HANDLE_HMI, databuffer, BUFFER_SIZE, HAL_MAX_DELAY) != HAL_OK) {
 801025c:	1d39      	adds	r1, r7, #4
 801025e:	f04f 33ff 	mov.w	r3, #4294967295
 8010262:	220a      	movs	r2, #10
 8010264:	481f      	ldr	r0, [pc, #124]	; (80102e4 <lightCheck+0xc4>)
 8010266:	f7f9 f844 	bl	80092f2 <HAL_UART_Receive>
 801026a:	4603      	mov	r3, r0
 801026c:	2b00      	cmp	r3, #0
 801026e:	d1f4      	bne.n	801025a <lightCheck+0x3a>
    }

    if(databuffer[9] != 0xAA) {
 8010270:	7b7b      	ldrb	r3, [r7, #13]
 8010272:	2baa      	cmp	r3, #170	; 0xaa
 8010274:	d006      	beq.n	8010284 <lightCheck+0x64>
        StateMachine.bEventOccurred = true;
 8010276:	4b1c      	ldr	r3, [pc, #112]	; (80102e8 <lightCheck+0xc8>)
 8010278:	2201      	movs	r2, #1
 801027a:	709a      	strb	r2, [r3, #2]
        StateMachine.eEvent = EVENT_HMI_FALIURE;
 801027c:	4b1a      	ldr	r3, [pc, #104]	; (80102e8 <lightCheck+0xc8>)
 801027e:	220e      	movs	r2, #14
 8010280:	705a      	strb	r2, [r3, #1]
 8010282:	e02a      	b.n	80102da <lightCheck+0xba>
        return;  
    }

    dispenseStarterSimul(&HANDLE_PUMP1,&HANDLE_DAC,&HANDLE_PUMP2, 20, 20);
 8010284:	2314      	movs	r3, #20
 8010286:	9300      	str	r3, [sp, #0]
 8010288:	2314      	movs	r3, #20
 801028a:	4a18      	ldr	r2, [pc, #96]	; (80102ec <lightCheck+0xcc>)
 801028c:	4918      	ldr	r1, [pc, #96]	; (80102f0 <lightCheck+0xd0>)
 801028e:	4819      	ldr	r0, [pc, #100]	; (80102f4 <lightCheck+0xd4>)
 8010290:	f7ff fcc2 	bl	800fc18 <dispenseStarterSimul>
    uint32_t lightReading = PULSES_background(&HANDLE_PULSES);
 8010294:	4818      	ldr	r0, [pc, #96]	; (80102f8 <lightCheck+0xd8>)
 8010296:	f7ff fa09 	bl	800f6ac <PULSES_background>
 801029a:	6138      	str	r0, [r7, #16]

    stringToSend = malloc(STRING_SIZE * sizeof(char));
 801029c:	2064      	movs	r0, #100	; 0x64
 801029e:	f000 f82f 	bl	8010300 <malloc>
 80102a2:	4603      	mov	r3, r0
 80102a4:	617b      	str	r3, [r7, #20]
    sprintf(stringToSend, "Light check: %lu units", lightReading);
 80102a6:	693a      	ldr	r2, [r7, #16]
 80102a8:	4914      	ldr	r1, [pc, #80]	; (80102fc <lightCheck+0xdc>)
 80102aa:	6978      	ldr	r0, [r7, #20]
 80102ac:	f000 f8e4 	bl	8010478 <siprintf>
    HMI_writeString(&HANDLE_HMI, 0x2100, stringToSend);
 80102b0:	697a      	ldr	r2, [r7, #20]
 80102b2:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 80102b6:	480b      	ldr	r0, [pc, #44]	; (80102e4 <lightCheck+0xc4>)
 80102b8:	f7ff f907 	bl	800f4ca <HMI_writeString>
    free(stringToSend);
 80102bc:	6978      	ldr	r0, [r7, #20]
 80102be:	f000 f827 	bl	8010310 <free>

    WriteLightCheck(lightReading);
 80102c2:	6938      	ldr	r0, [r7, #16]
 80102c4:	f7fe fe9a 	bl	800effc <WriteLightCheck>

    HAL_Delay(3000);
 80102c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80102cc:	f7f1 fe9e 	bl	800200c <HAL_Delay>
    HMI_eraseString(&HANDLE_HMI,0x2100);
 80102d0:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 80102d4:	4803      	ldr	r0, [pc, #12]	; (80102e4 <lightCheck+0xc4>)
 80102d6:	f7ff f978 	bl	800f5ca <HMI_eraseString>
}
 80102da:	3718      	adds	r7, #24
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}
 80102e0:	08010d08 	.word	0x08010d08
 80102e4:	200003c0 	.word	0x200003c0
 80102e8:	200010f0 	.word	0x200010f0
 80102ec:	200002a0 	.word	0x200002a0
 80102f0:	200000fc 	.word	0x200000fc
 80102f4:	200002e8 	.word	0x200002e8
 80102f8:	20000258 	.word	0x20000258
 80102fc:	08010db8 	.word	0x08010db8

08010300 <malloc>:
 8010300:	4b02      	ldr	r3, [pc, #8]	; (801030c <malloc+0xc>)
 8010302:	4601      	mov	r1, r0
 8010304:	6818      	ldr	r0, [r3, #0]
 8010306:	f000 b82b 	b.w	8010360 <_malloc_r>
 801030a:	bf00      	nop
 801030c:	20000094 	.word	0x20000094

08010310 <free>:
 8010310:	4b02      	ldr	r3, [pc, #8]	; (801031c <free+0xc>)
 8010312:	4601      	mov	r1, r0
 8010314:	6818      	ldr	r0, [r3, #0]
 8010316:	f000 b921 	b.w	801055c <_free_r>
 801031a:	bf00      	nop
 801031c:	20000094 	.word	0x20000094

08010320 <sbrk_aligned>:
 8010320:	b570      	push	{r4, r5, r6, lr}
 8010322:	4e0e      	ldr	r6, [pc, #56]	; (801035c <sbrk_aligned+0x3c>)
 8010324:	460c      	mov	r4, r1
 8010326:	6831      	ldr	r1, [r6, #0]
 8010328:	4605      	mov	r5, r0
 801032a:	b911      	cbnz	r1, 8010332 <sbrk_aligned+0x12>
 801032c:	f000 f8cc 	bl	80104c8 <_sbrk_r>
 8010330:	6030      	str	r0, [r6, #0]
 8010332:	4621      	mov	r1, r4
 8010334:	4628      	mov	r0, r5
 8010336:	f000 f8c7 	bl	80104c8 <_sbrk_r>
 801033a:	1c43      	adds	r3, r0, #1
 801033c:	d00a      	beq.n	8010354 <sbrk_aligned+0x34>
 801033e:	1cc4      	adds	r4, r0, #3
 8010340:	f024 0403 	bic.w	r4, r4, #3
 8010344:	42a0      	cmp	r0, r4
 8010346:	d007      	beq.n	8010358 <sbrk_aligned+0x38>
 8010348:	1a21      	subs	r1, r4, r0
 801034a:	4628      	mov	r0, r5
 801034c:	f000 f8bc 	bl	80104c8 <_sbrk_r>
 8010350:	3001      	adds	r0, #1
 8010352:	d101      	bne.n	8010358 <sbrk_aligned+0x38>
 8010354:	f04f 34ff 	mov.w	r4, #4294967295
 8010358:	4620      	mov	r0, r4
 801035a:	bd70      	pop	{r4, r5, r6, pc}
 801035c:	200010fc 	.word	0x200010fc

08010360 <_malloc_r>:
 8010360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010364:	1ccd      	adds	r5, r1, #3
 8010366:	f025 0503 	bic.w	r5, r5, #3
 801036a:	3508      	adds	r5, #8
 801036c:	2d0c      	cmp	r5, #12
 801036e:	bf38      	it	cc
 8010370:	250c      	movcc	r5, #12
 8010372:	2d00      	cmp	r5, #0
 8010374:	4607      	mov	r7, r0
 8010376:	db01      	blt.n	801037c <_malloc_r+0x1c>
 8010378:	42a9      	cmp	r1, r5
 801037a:	d905      	bls.n	8010388 <_malloc_r+0x28>
 801037c:	230c      	movs	r3, #12
 801037e:	603b      	str	r3, [r7, #0]
 8010380:	2600      	movs	r6, #0
 8010382:	4630      	mov	r0, r6
 8010384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010388:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801045c <_malloc_r+0xfc>
 801038c:	f000 f868 	bl	8010460 <__malloc_lock>
 8010390:	f8d8 3000 	ldr.w	r3, [r8]
 8010394:	461c      	mov	r4, r3
 8010396:	bb5c      	cbnz	r4, 80103f0 <_malloc_r+0x90>
 8010398:	4629      	mov	r1, r5
 801039a:	4638      	mov	r0, r7
 801039c:	f7ff ffc0 	bl	8010320 <sbrk_aligned>
 80103a0:	1c43      	adds	r3, r0, #1
 80103a2:	4604      	mov	r4, r0
 80103a4:	d155      	bne.n	8010452 <_malloc_r+0xf2>
 80103a6:	f8d8 4000 	ldr.w	r4, [r8]
 80103aa:	4626      	mov	r6, r4
 80103ac:	2e00      	cmp	r6, #0
 80103ae:	d145      	bne.n	801043c <_malloc_r+0xdc>
 80103b0:	2c00      	cmp	r4, #0
 80103b2:	d048      	beq.n	8010446 <_malloc_r+0xe6>
 80103b4:	6823      	ldr	r3, [r4, #0]
 80103b6:	4631      	mov	r1, r6
 80103b8:	4638      	mov	r0, r7
 80103ba:	eb04 0903 	add.w	r9, r4, r3
 80103be:	f000 f883 	bl	80104c8 <_sbrk_r>
 80103c2:	4581      	cmp	r9, r0
 80103c4:	d13f      	bne.n	8010446 <_malloc_r+0xe6>
 80103c6:	6821      	ldr	r1, [r4, #0]
 80103c8:	1a6d      	subs	r5, r5, r1
 80103ca:	4629      	mov	r1, r5
 80103cc:	4638      	mov	r0, r7
 80103ce:	f7ff ffa7 	bl	8010320 <sbrk_aligned>
 80103d2:	3001      	adds	r0, #1
 80103d4:	d037      	beq.n	8010446 <_malloc_r+0xe6>
 80103d6:	6823      	ldr	r3, [r4, #0]
 80103d8:	442b      	add	r3, r5
 80103da:	6023      	str	r3, [r4, #0]
 80103dc:	f8d8 3000 	ldr.w	r3, [r8]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d038      	beq.n	8010456 <_malloc_r+0xf6>
 80103e4:	685a      	ldr	r2, [r3, #4]
 80103e6:	42a2      	cmp	r2, r4
 80103e8:	d12b      	bne.n	8010442 <_malloc_r+0xe2>
 80103ea:	2200      	movs	r2, #0
 80103ec:	605a      	str	r2, [r3, #4]
 80103ee:	e00f      	b.n	8010410 <_malloc_r+0xb0>
 80103f0:	6822      	ldr	r2, [r4, #0]
 80103f2:	1b52      	subs	r2, r2, r5
 80103f4:	d41f      	bmi.n	8010436 <_malloc_r+0xd6>
 80103f6:	2a0b      	cmp	r2, #11
 80103f8:	d917      	bls.n	801042a <_malloc_r+0xca>
 80103fa:	1961      	adds	r1, r4, r5
 80103fc:	42a3      	cmp	r3, r4
 80103fe:	6025      	str	r5, [r4, #0]
 8010400:	bf18      	it	ne
 8010402:	6059      	strne	r1, [r3, #4]
 8010404:	6863      	ldr	r3, [r4, #4]
 8010406:	bf08      	it	eq
 8010408:	f8c8 1000 	streq.w	r1, [r8]
 801040c:	5162      	str	r2, [r4, r5]
 801040e:	604b      	str	r3, [r1, #4]
 8010410:	4638      	mov	r0, r7
 8010412:	f104 060b 	add.w	r6, r4, #11
 8010416:	f000 f829 	bl	801046c <__malloc_unlock>
 801041a:	f026 0607 	bic.w	r6, r6, #7
 801041e:	1d23      	adds	r3, r4, #4
 8010420:	1af2      	subs	r2, r6, r3
 8010422:	d0ae      	beq.n	8010382 <_malloc_r+0x22>
 8010424:	1b9b      	subs	r3, r3, r6
 8010426:	50a3      	str	r3, [r4, r2]
 8010428:	e7ab      	b.n	8010382 <_malloc_r+0x22>
 801042a:	42a3      	cmp	r3, r4
 801042c:	6862      	ldr	r2, [r4, #4]
 801042e:	d1dd      	bne.n	80103ec <_malloc_r+0x8c>
 8010430:	f8c8 2000 	str.w	r2, [r8]
 8010434:	e7ec      	b.n	8010410 <_malloc_r+0xb0>
 8010436:	4623      	mov	r3, r4
 8010438:	6864      	ldr	r4, [r4, #4]
 801043a:	e7ac      	b.n	8010396 <_malloc_r+0x36>
 801043c:	4634      	mov	r4, r6
 801043e:	6876      	ldr	r6, [r6, #4]
 8010440:	e7b4      	b.n	80103ac <_malloc_r+0x4c>
 8010442:	4613      	mov	r3, r2
 8010444:	e7cc      	b.n	80103e0 <_malloc_r+0x80>
 8010446:	230c      	movs	r3, #12
 8010448:	603b      	str	r3, [r7, #0]
 801044a:	4638      	mov	r0, r7
 801044c:	f000 f80e 	bl	801046c <__malloc_unlock>
 8010450:	e797      	b.n	8010382 <_malloc_r+0x22>
 8010452:	6025      	str	r5, [r4, #0]
 8010454:	e7dc      	b.n	8010410 <_malloc_r+0xb0>
 8010456:	605b      	str	r3, [r3, #4]
 8010458:	deff      	udf	#255	; 0xff
 801045a:	bf00      	nop
 801045c:	200010f8 	.word	0x200010f8

08010460 <__malloc_lock>:
 8010460:	4801      	ldr	r0, [pc, #4]	; (8010468 <__malloc_lock+0x8>)
 8010462:	f000 b86b 	b.w	801053c <__retarget_lock_acquire_recursive>
 8010466:	bf00      	nop
 8010468:	2000123c 	.word	0x2000123c

0801046c <__malloc_unlock>:
 801046c:	4801      	ldr	r0, [pc, #4]	; (8010474 <__malloc_unlock+0x8>)
 801046e:	f000 b866 	b.w	801053e <__retarget_lock_release_recursive>
 8010472:	bf00      	nop
 8010474:	2000123c 	.word	0x2000123c

08010478 <siprintf>:
 8010478:	b40e      	push	{r1, r2, r3}
 801047a:	b500      	push	{lr}
 801047c:	b09c      	sub	sp, #112	; 0x70
 801047e:	ab1d      	add	r3, sp, #116	; 0x74
 8010480:	9002      	str	r0, [sp, #8]
 8010482:	9006      	str	r0, [sp, #24]
 8010484:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010488:	4809      	ldr	r0, [pc, #36]	; (80104b0 <siprintf+0x38>)
 801048a:	9107      	str	r1, [sp, #28]
 801048c:	9104      	str	r1, [sp, #16]
 801048e:	4909      	ldr	r1, [pc, #36]	; (80104b4 <siprintf+0x3c>)
 8010490:	f853 2b04 	ldr.w	r2, [r3], #4
 8010494:	9105      	str	r1, [sp, #20]
 8010496:	6800      	ldr	r0, [r0, #0]
 8010498:	9301      	str	r3, [sp, #4]
 801049a:	a902      	add	r1, sp, #8
 801049c:	f000 f904 	bl	80106a8 <_svfiprintf_r>
 80104a0:	9b02      	ldr	r3, [sp, #8]
 80104a2:	2200      	movs	r2, #0
 80104a4:	701a      	strb	r2, [r3, #0]
 80104a6:	b01c      	add	sp, #112	; 0x70
 80104a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80104ac:	b003      	add	sp, #12
 80104ae:	4770      	bx	lr
 80104b0:	20000094 	.word	0x20000094
 80104b4:	ffff0208 	.word	0xffff0208

080104b8 <memset>:
 80104b8:	4402      	add	r2, r0
 80104ba:	4603      	mov	r3, r0
 80104bc:	4293      	cmp	r3, r2
 80104be:	d100      	bne.n	80104c2 <memset+0xa>
 80104c0:	4770      	bx	lr
 80104c2:	f803 1b01 	strb.w	r1, [r3], #1
 80104c6:	e7f9      	b.n	80104bc <memset+0x4>

080104c8 <_sbrk_r>:
 80104c8:	b538      	push	{r3, r4, r5, lr}
 80104ca:	4d06      	ldr	r5, [pc, #24]	; (80104e4 <_sbrk_r+0x1c>)
 80104cc:	2300      	movs	r3, #0
 80104ce:	4604      	mov	r4, r0
 80104d0:	4608      	mov	r0, r1
 80104d2:	602b      	str	r3, [r5, #0]
 80104d4:	f7f1 fcb6 	bl	8001e44 <_sbrk>
 80104d8:	1c43      	adds	r3, r0, #1
 80104da:	d102      	bne.n	80104e2 <_sbrk_r+0x1a>
 80104dc:	682b      	ldr	r3, [r5, #0]
 80104de:	b103      	cbz	r3, 80104e2 <_sbrk_r+0x1a>
 80104e0:	6023      	str	r3, [r4, #0]
 80104e2:	bd38      	pop	{r3, r4, r5, pc}
 80104e4:	20001238 	.word	0x20001238

080104e8 <__errno>:
 80104e8:	4b01      	ldr	r3, [pc, #4]	; (80104f0 <__errno+0x8>)
 80104ea:	6818      	ldr	r0, [r3, #0]
 80104ec:	4770      	bx	lr
 80104ee:	bf00      	nop
 80104f0:	20000094 	.word	0x20000094

080104f4 <__libc_init_array>:
 80104f4:	b570      	push	{r4, r5, r6, lr}
 80104f6:	4d0d      	ldr	r5, [pc, #52]	; (801052c <__libc_init_array+0x38>)
 80104f8:	4c0d      	ldr	r4, [pc, #52]	; (8010530 <__libc_init_array+0x3c>)
 80104fa:	1b64      	subs	r4, r4, r5
 80104fc:	10a4      	asrs	r4, r4, #2
 80104fe:	2600      	movs	r6, #0
 8010500:	42a6      	cmp	r6, r4
 8010502:	d109      	bne.n	8010518 <__libc_init_array+0x24>
 8010504:	4d0b      	ldr	r5, [pc, #44]	; (8010534 <__libc_init_array+0x40>)
 8010506:	4c0c      	ldr	r4, [pc, #48]	; (8010538 <__libc_init_array+0x44>)
 8010508:	f000 fbae 	bl	8010c68 <_init>
 801050c:	1b64      	subs	r4, r4, r5
 801050e:	10a4      	asrs	r4, r4, #2
 8010510:	2600      	movs	r6, #0
 8010512:	42a6      	cmp	r6, r4
 8010514:	d105      	bne.n	8010522 <__libc_init_array+0x2e>
 8010516:	bd70      	pop	{r4, r5, r6, pc}
 8010518:	f855 3b04 	ldr.w	r3, [r5], #4
 801051c:	4798      	blx	r3
 801051e:	3601      	adds	r6, #1
 8010520:	e7ee      	b.n	8010500 <__libc_init_array+0xc>
 8010522:	f855 3b04 	ldr.w	r3, [r5], #4
 8010526:	4798      	blx	r3
 8010528:	3601      	adds	r6, #1
 801052a:	e7f2      	b.n	8010512 <__libc_init_array+0x1e>
 801052c:	08010ea4 	.word	0x08010ea4
 8010530:	08010ea4 	.word	0x08010ea4
 8010534:	08010ea4 	.word	0x08010ea4
 8010538:	08010ea8 	.word	0x08010ea8

0801053c <__retarget_lock_acquire_recursive>:
 801053c:	4770      	bx	lr

0801053e <__retarget_lock_release_recursive>:
 801053e:	4770      	bx	lr

08010540 <memcpy>:
 8010540:	440a      	add	r2, r1
 8010542:	4291      	cmp	r1, r2
 8010544:	f100 33ff 	add.w	r3, r0, #4294967295
 8010548:	d100      	bne.n	801054c <memcpy+0xc>
 801054a:	4770      	bx	lr
 801054c:	b510      	push	{r4, lr}
 801054e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010552:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010556:	4291      	cmp	r1, r2
 8010558:	d1f9      	bne.n	801054e <memcpy+0xe>
 801055a:	bd10      	pop	{r4, pc}

0801055c <_free_r>:
 801055c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801055e:	2900      	cmp	r1, #0
 8010560:	d044      	beq.n	80105ec <_free_r+0x90>
 8010562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010566:	9001      	str	r0, [sp, #4]
 8010568:	2b00      	cmp	r3, #0
 801056a:	f1a1 0404 	sub.w	r4, r1, #4
 801056e:	bfb8      	it	lt
 8010570:	18e4      	addlt	r4, r4, r3
 8010572:	f7ff ff75 	bl	8010460 <__malloc_lock>
 8010576:	4a1e      	ldr	r2, [pc, #120]	; (80105f0 <_free_r+0x94>)
 8010578:	9801      	ldr	r0, [sp, #4]
 801057a:	6813      	ldr	r3, [r2, #0]
 801057c:	b933      	cbnz	r3, 801058c <_free_r+0x30>
 801057e:	6063      	str	r3, [r4, #4]
 8010580:	6014      	str	r4, [r2, #0]
 8010582:	b003      	add	sp, #12
 8010584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010588:	f7ff bf70 	b.w	801046c <__malloc_unlock>
 801058c:	42a3      	cmp	r3, r4
 801058e:	d908      	bls.n	80105a2 <_free_r+0x46>
 8010590:	6825      	ldr	r5, [r4, #0]
 8010592:	1961      	adds	r1, r4, r5
 8010594:	428b      	cmp	r3, r1
 8010596:	bf01      	itttt	eq
 8010598:	6819      	ldreq	r1, [r3, #0]
 801059a:	685b      	ldreq	r3, [r3, #4]
 801059c:	1949      	addeq	r1, r1, r5
 801059e:	6021      	streq	r1, [r4, #0]
 80105a0:	e7ed      	b.n	801057e <_free_r+0x22>
 80105a2:	461a      	mov	r2, r3
 80105a4:	685b      	ldr	r3, [r3, #4]
 80105a6:	b10b      	cbz	r3, 80105ac <_free_r+0x50>
 80105a8:	42a3      	cmp	r3, r4
 80105aa:	d9fa      	bls.n	80105a2 <_free_r+0x46>
 80105ac:	6811      	ldr	r1, [r2, #0]
 80105ae:	1855      	adds	r5, r2, r1
 80105b0:	42a5      	cmp	r5, r4
 80105b2:	d10b      	bne.n	80105cc <_free_r+0x70>
 80105b4:	6824      	ldr	r4, [r4, #0]
 80105b6:	4421      	add	r1, r4
 80105b8:	1854      	adds	r4, r2, r1
 80105ba:	42a3      	cmp	r3, r4
 80105bc:	6011      	str	r1, [r2, #0]
 80105be:	d1e0      	bne.n	8010582 <_free_r+0x26>
 80105c0:	681c      	ldr	r4, [r3, #0]
 80105c2:	685b      	ldr	r3, [r3, #4]
 80105c4:	6053      	str	r3, [r2, #4]
 80105c6:	440c      	add	r4, r1
 80105c8:	6014      	str	r4, [r2, #0]
 80105ca:	e7da      	b.n	8010582 <_free_r+0x26>
 80105cc:	d902      	bls.n	80105d4 <_free_r+0x78>
 80105ce:	230c      	movs	r3, #12
 80105d0:	6003      	str	r3, [r0, #0]
 80105d2:	e7d6      	b.n	8010582 <_free_r+0x26>
 80105d4:	6825      	ldr	r5, [r4, #0]
 80105d6:	1961      	adds	r1, r4, r5
 80105d8:	428b      	cmp	r3, r1
 80105da:	bf04      	itt	eq
 80105dc:	6819      	ldreq	r1, [r3, #0]
 80105de:	685b      	ldreq	r3, [r3, #4]
 80105e0:	6063      	str	r3, [r4, #4]
 80105e2:	bf04      	itt	eq
 80105e4:	1949      	addeq	r1, r1, r5
 80105e6:	6021      	streq	r1, [r4, #0]
 80105e8:	6054      	str	r4, [r2, #4]
 80105ea:	e7ca      	b.n	8010582 <_free_r+0x26>
 80105ec:	b003      	add	sp, #12
 80105ee:	bd30      	pop	{r4, r5, pc}
 80105f0:	200010f8 	.word	0x200010f8

080105f4 <__ssputs_r>:
 80105f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105f8:	688e      	ldr	r6, [r1, #8]
 80105fa:	461f      	mov	r7, r3
 80105fc:	42be      	cmp	r6, r7
 80105fe:	680b      	ldr	r3, [r1, #0]
 8010600:	4682      	mov	sl, r0
 8010602:	460c      	mov	r4, r1
 8010604:	4690      	mov	r8, r2
 8010606:	d82c      	bhi.n	8010662 <__ssputs_r+0x6e>
 8010608:	898a      	ldrh	r2, [r1, #12]
 801060a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801060e:	d026      	beq.n	801065e <__ssputs_r+0x6a>
 8010610:	6965      	ldr	r5, [r4, #20]
 8010612:	6909      	ldr	r1, [r1, #16]
 8010614:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010618:	eba3 0901 	sub.w	r9, r3, r1
 801061c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010620:	1c7b      	adds	r3, r7, #1
 8010622:	444b      	add	r3, r9
 8010624:	106d      	asrs	r5, r5, #1
 8010626:	429d      	cmp	r5, r3
 8010628:	bf38      	it	cc
 801062a:	461d      	movcc	r5, r3
 801062c:	0553      	lsls	r3, r2, #21
 801062e:	d527      	bpl.n	8010680 <__ssputs_r+0x8c>
 8010630:	4629      	mov	r1, r5
 8010632:	f7ff fe95 	bl	8010360 <_malloc_r>
 8010636:	4606      	mov	r6, r0
 8010638:	b360      	cbz	r0, 8010694 <__ssputs_r+0xa0>
 801063a:	6921      	ldr	r1, [r4, #16]
 801063c:	464a      	mov	r2, r9
 801063e:	f7ff ff7f 	bl	8010540 <memcpy>
 8010642:	89a3      	ldrh	r3, [r4, #12]
 8010644:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801064c:	81a3      	strh	r3, [r4, #12]
 801064e:	6126      	str	r6, [r4, #16]
 8010650:	6165      	str	r5, [r4, #20]
 8010652:	444e      	add	r6, r9
 8010654:	eba5 0509 	sub.w	r5, r5, r9
 8010658:	6026      	str	r6, [r4, #0]
 801065a:	60a5      	str	r5, [r4, #8]
 801065c:	463e      	mov	r6, r7
 801065e:	42be      	cmp	r6, r7
 8010660:	d900      	bls.n	8010664 <__ssputs_r+0x70>
 8010662:	463e      	mov	r6, r7
 8010664:	6820      	ldr	r0, [r4, #0]
 8010666:	4632      	mov	r2, r6
 8010668:	4641      	mov	r1, r8
 801066a:	f000 faab 	bl	8010bc4 <memmove>
 801066e:	68a3      	ldr	r3, [r4, #8]
 8010670:	1b9b      	subs	r3, r3, r6
 8010672:	60a3      	str	r3, [r4, #8]
 8010674:	6823      	ldr	r3, [r4, #0]
 8010676:	4433      	add	r3, r6
 8010678:	6023      	str	r3, [r4, #0]
 801067a:	2000      	movs	r0, #0
 801067c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010680:	462a      	mov	r2, r5
 8010682:	f000 fab9 	bl	8010bf8 <_realloc_r>
 8010686:	4606      	mov	r6, r0
 8010688:	2800      	cmp	r0, #0
 801068a:	d1e0      	bne.n	801064e <__ssputs_r+0x5a>
 801068c:	6921      	ldr	r1, [r4, #16]
 801068e:	4650      	mov	r0, sl
 8010690:	f7ff ff64 	bl	801055c <_free_r>
 8010694:	230c      	movs	r3, #12
 8010696:	f8ca 3000 	str.w	r3, [sl]
 801069a:	89a3      	ldrh	r3, [r4, #12]
 801069c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106a0:	81a3      	strh	r3, [r4, #12]
 80106a2:	f04f 30ff 	mov.w	r0, #4294967295
 80106a6:	e7e9      	b.n	801067c <__ssputs_r+0x88>

080106a8 <_svfiprintf_r>:
 80106a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106ac:	4698      	mov	r8, r3
 80106ae:	898b      	ldrh	r3, [r1, #12]
 80106b0:	061b      	lsls	r3, r3, #24
 80106b2:	b09d      	sub	sp, #116	; 0x74
 80106b4:	4607      	mov	r7, r0
 80106b6:	460d      	mov	r5, r1
 80106b8:	4614      	mov	r4, r2
 80106ba:	d50e      	bpl.n	80106da <_svfiprintf_r+0x32>
 80106bc:	690b      	ldr	r3, [r1, #16]
 80106be:	b963      	cbnz	r3, 80106da <_svfiprintf_r+0x32>
 80106c0:	2140      	movs	r1, #64	; 0x40
 80106c2:	f7ff fe4d 	bl	8010360 <_malloc_r>
 80106c6:	6028      	str	r0, [r5, #0]
 80106c8:	6128      	str	r0, [r5, #16]
 80106ca:	b920      	cbnz	r0, 80106d6 <_svfiprintf_r+0x2e>
 80106cc:	230c      	movs	r3, #12
 80106ce:	603b      	str	r3, [r7, #0]
 80106d0:	f04f 30ff 	mov.w	r0, #4294967295
 80106d4:	e0d0      	b.n	8010878 <_svfiprintf_r+0x1d0>
 80106d6:	2340      	movs	r3, #64	; 0x40
 80106d8:	616b      	str	r3, [r5, #20]
 80106da:	2300      	movs	r3, #0
 80106dc:	9309      	str	r3, [sp, #36]	; 0x24
 80106de:	2320      	movs	r3, #32
 80106e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80106e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80106e8:	2330      	movs	r3, #48	; 0x30
 80106ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010890 <_svfiprintf_r+0x1e8>
 80106ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80106f2:	f04f 0901 	mov.w	r9, #1
 80106f6:	4623      	mov	r3, r4
 80106f8:	469a      	mov	sl, r3
 80106fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106fe:	b10a      	cbz	r2, 8010704 <_svfiprintf_r+0x5c>
 8010700:	2a25      	cmp	r2, #37	; 0x25
 8010702:	d1f9      	bne.n	80106f8 <_svfiprintf_r+0x50>
 8010704:	ebba 0b04 	subs.w	fp, sl, r4
 8010708:	d00b      	beq.n	8010722 <_svfiprintf_r+0x7a>
 801070a:	465b      	mov	r3, fp
 801070c:	4622      	mov	r2, r4
 801070e:	4629      	mov	r1, r5
 8010710:	4638      	mov	r0, r7
 8010712:	f7ff ff6f 	bl	80105f4 <__ssputs_r>
 8010716:	3001      	adds	r0, #1
 8010718:	f000 80a9 	beq.w	801086e <_svfiprintf_r+0x1c6>
 801071c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801071e:	445a      	add	r2, fp
 8010720:	9209      	str	r2, [sp, #36]	; 0x24
 8010722:	f89a 3000 	ldrb.w	r3, [sl]
 8010726:	2b00      	cmp	r3, #0
 8010728:	f000 80a1 	beq.w	801086e <_svfiprintf_r+0x1c6>
 801072c:	2300      	movs	r3, #0
 801072e:	f04f 32ff 	mov.w	r2, #4294967295
 8010732:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010736:	f10a 0a01 	add.w	sl, sl, #1
 801073a:	9304      	str	r3, [sp, #16]
 801073c:	9307      	str	r3, [sp, #28]
 801073e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010742:	931a      	str	r3, [sp, #104]	; 0x68
 8010744:	4654      	mov	r4, sl
 8010746:	2205      	movs	r2, #5
 8010748:	f814 1b01 	ldrb.w	r1, [r4], #1
 801074c:	4850      	ldr	r0, [pc, #320]	; (8010890 <_svfiprintf_r+0x1e8>)
 801074e:	f7ef fd67 	bl	8000220 <memchr>
 8010752:	9a04      	ldr	r2, [sp, #16]
 8010754:	b9d8      	cbnz	r0, 801078e <_svfiprintf_r+0xe6>
 8010756:	06d0      	lsls	r0, r2, #27
 8010758:	bf44      	itt	mi
 801075a:	2320      	movmi	r3, #32
 801075c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010760:	0711      	lsls	r1, r2, #28
 8010762:	bf44      	itt	mi
 8010764:	232b      	movmi	r3, #43	; 0x2b
 8010766:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801076a:	f89a 3000 	ldrb.w	r3, [sl]
 801076e:	2b2a      	cmp	r3, #42	; 0x2a
 8010770:	d015      	beq.n	801079e <_svfiprintf_r+0xf6>
 8010772:	9a07      	ldr	r2, [sp, #28]
 8010774:	4654      	mov	r4, sl
 8010776:	2000      	movs	r0, #0
 8010778:	f04f 0c0a 	mov.w	ip, #10
 801077c:	4621      	mov	r1, r4
 801077e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010782:	3b30      	subs	r3, #48	; 0x30
 8010784:	2b09      	cmp	r3, #9
 8010786:	d94d      	bls.n	8010824 <_svfiprintf_r+0x17c>
 8010788:	b1b0      	cbz	r0, 80107b8 <_svfiprintf_r+0x110>
 801078a:	9207      	str	r2, [sp, #28]
 801078c:	e014      	b.n	80107b8 <_svfiprintf_r+0x110>
 801078e:	eba0 0308 	sub.w	r3, r0, r8
 8010792:	fa09 f303 	lsl.w	r3, r9, r3
 8010796:	4313      	orrs	r3, r2
 8010798:	9304      	str	r3, [sp, #16]
 801079a:	46a2      	mov	sl, r4
 801079c:	e7d2      	b.n	8010744 <_svfiprintf_r+0x9c>
 801079e:	9b03      	ldr	r3, [sp, #12]
 80107a0:	1d19      	adds	r1, r3, #4
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	9103      	str	r1, [sp, #12]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	bfbb      	ittet	lt
 80107aa:	425b      	neglt	r3, r3
 80107ac:	f042 0202 	orrlt.w	r2, r2, #2
 80107b0:	9307      	strge	r3, [sp, #28]
 80107b2:	9307      	strlt	r3, [sp, #28]
 80107b4:	bfb8      	it	lt
 80107b6:	9204      	strlt	r2, [sp, #16]
 80107b8:	7823      	ldrb	r3, [r4, #0]
 80107ba:	2b2e      	cmp	r3, #46	; 0x2e
 80107bc:	d10c      	bne.n	80107d8 <_svfiprintf_r+0x130>
 80107be:	7863      	ldrb	r3, [r4, #1]
 80107c0:	2b2a      	cmp	r3, #42	; 0x2a
 80107c2:	d134      	bne.n	801082e <_svfiprintf_r+0x186>
 80107c4:	9b03      	ldr	r3, [sp, #12]
 80107c6:	1d1a      	adds	r2, r3, #4
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	9203      	str	r2, [sp, #12]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	bfb8      	it	lt
 80107d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80107d4:	3402      	adds	r4, #2
 80107d6:	9305      	str	r3, [sp, #20]
 80107d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80108a0 <_svfiprintf_r+0x1f8>
 80107dc:	7821      	ldrb	r1, [r4, #0]
 80107de:	2203      	movs	r2, #3
 80107e0:	4650      	mov	r0, sl
 80107e2:	f7ef fd1d 	bl	8000220 <memchr>
 80107e6:	b138      	cbz	r0, 80107f8 <_svfiprintf_r+0x150>
 80107e8:	9b04      	ldr	r3, [sp, #16]
 80107ea:	eba0 000a 	sub.w	r0, r0, sl
 80107ee:	2240      	movs	r2, #64	; 0x40
 80107f0:	4082      	lsls	r2, r0
 80107f2:	4313      	orrs	r3, r2
 80107f4:	3401      	adds	r4, #1
 80107f6:	9304      	str	r3, [sp, #16]
 80107f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107fc:	4825      	ldr	r0, [pc, #148]	; (8010894 <_svfiprintf_r+0x1ec>)
 80107fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010802:	2206      	movs	r2, #6
 8010804:	f7ef fd0c 	bl	8000220 <memchr>
 8010808:	2800      	cmp	r0, #0
 801080a:	d038      	beq.n	801087e <_svfiprintf_r+0x1d6>
 801080c:	4b22      	ldr	r3, [pc, #136]	; (8010898 <_svfiprintf_r+0x1f0>)
 801080e:	bb1b      	cbnz	r3, 8010858 <_svfiprintf_r+0x1b0>
 8010810:	9b03      	ldr	r3, [sp, #12]
 8010812:	3307      	adds	r3, #7
 8010814:	f023 0307 	bic.w	r3, r3, #7
 8010818:	3308      	adds	r3, #8
 801081a:	9303      	str	r3, [sp, #12]
 801081c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801081e:	4433      	add	r3, r6
 8010820:	9309      	str	r3, [sp, #36]	; 0x24
 8010822:	e768      	b.n	80106f6 <_svfiprintf_r+0x4e>
 8010824:	fb0c 3202 	mla	r2, ip, r2, r3
 8010828:	460c      	mov	r4, r1
 801082a:	2001      	movs	r0, #1
 801082c:	e7a6      	b.n	801077c <_svfiprintf_r+0xd4>
 801082e:	2300      	movs	r3, #0
 8010830:	3401      	adds	r4, #1
 8010832:	9305      	str	r3, [sp, #20]
 8010834:	4619      	mov	r1, r3
 8010836:	f04f 0c0a 	mov.w	ip, #10
 801083a:	4620      	mov	r0, r4
 801083c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010840:	3a30      	subs	r2, #48	; 0x30
 8010842:	2a09      	cmp	r2, #9
 8010844:	d903      	bls.n	801084e <_svfiprintf_r+0x1a6>
 8010846:	2b00      	cmp	r3, #0
 8010848:	d0c6      	beq.n	80107d8 <_svfiprintf_r+0x130>
 801084a:	9105      	str	r1, [sp, #20]
 801084c:	e7c4      	b.n	80107d8 <_svfiprintf_r+0x130>
 801084e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010852:	4604      	mov	r4, r0
 8010854:	2301      	movs	r3, #1
 8010856:	e7f0      	b.n	801083a <_svfiprintf_r+0x192>
 8010858:	ab03      	add	r3, sp, #12
 801085a:	9300      	str	r3, [sp, #0]
 801085c:	462a      	mov	r2, r5
 801085e:	4b0f      	ldr	r3, [pc, #60]	; (801089c <_svfiprintf_r+0x1f4>)
 8010860:	a904      	add	r1, sp, #16
 8010862:	4638      	mov	r0, r7
 8010864:	f3af 8000 	nop.w
 8010868:	1c42      	adds	r2, r0, #1
 801086a:	4606      	mov	r6, r0
 801086c:	d1d6      	bne.n	801081c <_svfiprintf_r+0x174>
 801086e:	89ab      	ldrh	r3, [r5, #12]
 8010870:	065b      	lsls	r3, r3, #25
 8010872:	f53f af2d 	bmi.w	80106d0 <_svfiprintf_r+0x28>
 8010876:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010878:	b01d      	add	sp, #116	; 0x74
 801087a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801087e:	ab03      	add	r3, sp, #12
 8010880:	9300      	str	r3, [sp, #0]
 8010882:	462a      	mov	r2, r5
 8010884:	4b05      	ldr	r3, [pc, #20]	; (801089c <_svfiprintf_r+0x1f4>)
 8010886:	a904      	add	r1, sp, #16
 8010888:	4638      	mov	r0, r7
 801088a:	f000 f879 	bl	8010980 <_printf_i>
 801088e:	e7eb      	b.n	8010868 <_svfiprintf_r+0x1c0>
 8010890:	08010e69 	.word	0x08010e69
 8010894:	08010e73 	.word	0x08010e73
 8010898:	00000000 	.word	0x00000000
 801089c:	080105f5 	.word	0x080105f5
 80108a0:	08010e6f 	.word	0x08010e6f

080108a4 <_printf_common>:
 80108a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108a8:	4616      	mov	r6, r2
 80108aa:	4699      	mov	r9, r3
 80108ac:	688a      	ldr	r2, [r1, #8]
 80108ae:	690b      	ldr	r3, [r1, #16]
 80108b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80108b4:	4293      	cmp	r3, r2
 80108b6:	bfb8      	it	lt
 80108b8:	4613      	movlt	r3, r2
 80108ba:	6033      	str	r3, [r6, #0]
 80108bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80108c0:	4607      	mov	r7, r0
 80108c2:	460c      	mov	r4, r1
 80108c4:	b10a      	cbz	r2, 80108ca <_printf_common+0x26>
 80108c6:	3301      	adds	r3, #1
 80108c8:	6033      	str	r3, [r6, #0]
 80108ca:	6823      	ldr	r3, [r4, #0]
 80108cc:	0699      	lsls	r1, r3, #26
 80108ce:	bf42      	ittt	mi
 80108d0:	6833      	ldrmi	r3, [r6, #0]
 80108d2:	3302      	addmi	r3, #2
 80108d4:	6033      	strmi	r3, [r6, #0]
 80108d6:	6825      	ldr	r5, [r4, #0]
 80108d8:	f015 0506 	ands.w	r5, r5, #6
 80108dc:	d106      	bne.n	80108ec <_printf_common+0x48>
 80108de:	f104 0a19 	add.w	sl, r4, #25
 80108e2:	68e3      	ldr	r3, [r4, #12]
 80108e4:	6832      	ldr	r2, [r6, #0]
 80108e6:	1a9b      	subs	r3, r3, r2
 80108e8:	42ab      	cmp	r3, r5
 80108ea:	dc26      	bgt.n	801093a <_printf_common+0x96>
 80108ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80108f0:	1e13      	subs	r3, r2, #0
 80108f2:	6822      	ldr	r2, [r4, #0]
 80108f4:	bf18      	it	ne
 80108f6:	2301      	movne	r3, #1
 80108f8:	0692      	lsls	r2, r2, #26
 80108fa:	d42b      	bmi.n	8010954 <_printf_common+0xb0>
 80108fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010900:	4649      	mov	r1, r9
 8010902:	4638      	mov	r0, r7
 8010904:	47c0      	blx	r8
 8010906:	3001      	adds	r0, #1
 8010908:	d01e      	beq.n	8010948 <_printf_common+0xa4>
 801090a:	6823      	ldr	r3, [r4, #0]
 801090c:	6922      	ldr	r2, [r4, #16]
 801090e:	f003 0306 	and.w	r3, r3, #6
 8010912:	2b04      	cmp	r3, #4
 8010914:	bf02      	ittt	eq
 8010916:	68e5      	ldreq	r5, [r4, #12]
 8010918:	6833      	ldreq	r3, [r6, #0]
 801091a:	1aed      	subeq	r5, r5, r3
 801091c:	68a3      	ldr	r3, [r4, #8]
 801091e:	bf0c      	ite	eq
 8010920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010924:	2500      	movne	r5, #0
 8010926:	4293      	cmp	r3, r2
 8010928:	bfc4      	itt	gt
 801092a:	1a9b      	subgt	r3, r3, r2
 801092c:	18ed      	addgt	r5, r5, r3
 801092e:	2600      	movs	r6, #0
 8010930:	341a      	adds	r4, #26
 8010932:	42b5      	cmp	r5, r6
 8010934:	d11a      	bne.n	801096c <_printf_common+0xc8>
 8010936:	2000      	movs	r0, #0
 8010938:	e008      	b.n	801094c <_printf_common+0xa8>
 801093a:	2301      	movs	r3, #1
 801093c:	4652      	mov	r2, sl
 801093e:	4649      	mov	r1, r9
 8010940:	4638      	mov	r0, r7
 8010942:	47c0      	blx	r8
 8010944:	3001      	adds	r0, #1
 8010946:	d103      	bne.n	8010950 <_printf_common+0xac>
 8010948:	f04f 30ff 	mov.w	r0, #4294967295
 801094c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010950:	3501      	adds	r5, #1
 8010952:	e7c6      	b.n	80108e2 <_printf_common+0x3e>
 8010954:	18e1      	adds	r1, r4, r3
 8010956:	1c5a      	adds	r2, r3, #1
 8010958:	2030      	movs	r0, #48	; 0x30
 801095a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801095e:	4422      	add	r2, r4
 8010960:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010964:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010968:	3302      	adds	r3, #2
 801096a:	e7c7      	b.n	80108fc <_printf_common+0x58>
 801096c:	2301      	movs	r3, #1
 801096e:	4622      	mov	r2, r4
 8010970:	4649      	mov	r1, r9
 8010972:	4638      	mov	r0, r7
 8010974:	47c0      	blx	r8
 8010976:	3001      	adds	r0, #1
 8010978:	d0e6      	beq.n	8010948 <_printf_common+0xa4>
 801097a:	3601      	adds	r6, #1
 801097c:	e7d9      	b.n	8010932 <_printf_common+0x8e>
	...

08010980 <_printf_i>:
 8010980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010984:	7e0f      	ldrb	r7, [r1, #24]
 8010986:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010988:	2f78      	cmp	r7, #120	; 0x78
 801098a:	4691      	mov	r9, r2
 801098c:	4680      	mov	r8, r0
 801098e:	460c      	mov	r4, r1
 8010990:	469a      	mov	sl, r3
 8010992:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010996:	d807      	bhi.n	80109a8 <_printf_i+0x28>
 8010998:	2f62      	cmp	r7, #98	; 0x62
 801099a:	d80a      	bhi.n	80109b2 <_printf_i+0x32>
 801099c:	2f00      	cmp	r7, #0
 801099e:	f000 80d4 	beq.w	8010b4a <_printf_i+0x1ca>
 80109a2:	2f58      	cmp	r7, #88	; 0x58
 80109a4:	f000 80c0 	beq.w	8010b28 <_printf_i+0x1a8>
 80109a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80109ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80109b0:	e03a      	b.n	8010a28 <_printf_i+0xa8>
 80109b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80109b6:	2b15      	cmp	r3, #21
 80109b8:	d8f6      	bhi.n	80109a8 <_printf_i+0x28>
 80109ba:	a101      	add	r1, pc, #4	; (adr r1, 80109c0 <_printf_i+0x40>)
 80109bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80109c0:	08010a19 	.word	0x08010a19
 80109c4:	08010a2d 	.word	0x08010a2d
 80109c8:	080109a9 	.word	0x080109a9
 80109cc:	080109a9 	.word	0x080109a9
 80109d0:	080109a9 	.word	0x080109a9
 80109d4:	080109a9 	.word	0x080109a9
 80109d8:	08010a2d 	.word	0x08010a2d
 80109dc:	080109a9 	.word	0x080109a9
 80109e0:	080109a9 	.word	0x080109a9
 80109e4:	080109a9 	.word	0x080109a9
 80109e8:	080109a9 	.word	0x080109a9
 80109ec:	08010b31 	.word	0x08010b31
 80109f0:	08010a59 	.word	0x08010a59
 80109f4:	08010aeb 	.word	0x08010aeb
 80109f8:	080109a9 	.word	0x080109a9
 80109fc:	080109a9 	.word	0x080109a9
 8010a00:	08010b53 	.word	0x08010b53
 8010a04:	080109a9 	.word	0x080109a9
 8010a08:	08010a59 	.word	0x08010a59
 8010a0c:	080109a9 	.word	0x080109a9
 8010a10:	080109a9 	.word	0x080109a9
 8010a14:	08010af3 	.word	0x08010af3
 8010a18:	682b      	ldr	r3, [r5, #0]
 8010a1a:	1d1a      	adds	r2, r3, #4
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	602a      	str	r2, [r5, #0]
 8010a20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a28:	2301      	movs	r3, #1
 8010a2a:	e09f      	b.n	8010b6c <_printf_i+0x1ec>
 8010a2c:	6820      	ldr	r0, [r4, #0]
 8010a2e:	682b      	ldr	r3, [r5, #0]
 8010a30:	0607      	lsls	r7, r0, #24
 8010a32:	f103 0104 	add.w	r1, r3, #4
 8010a36:	6029      	str	r1, [r5, #0]
 8010a38:	d501      	bpl.n	8010a3e <_printf_i+0xbe>
 8010a3a:	681e      	ldr	r6, [r3, #0]
 8010a3c:	e003      	b.n	8010a46 <_printf_i+0xc6>
 8010a3e:	0646      	lsls	r6, r0, #25
 8010a40:	d5fb      	bpl.n	8010a3a <_printf_i+0xba>
 8010a42:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010a46:	2e00      	cmp	r6, #0
 8010a48:	da03      	bge.n	8010a52 <_printf_i+0xd2>
 8010a4a:	232d      	movs	r3, #45	; 0x2d
 8010a4c:	4276      	negs	r6, r6
 8010a4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a52:	485a      	ldr	r0, [pc, #360]	; (8010bbc <_printf_i+0x23c>)
 8010a54:	230a      	movs	r3, #10
 8010a56:	e012      	b.n	8010a7e <_printf_i+0xfe>
 8010a58:	682b      	ldr	r3, [r5, #0]
 8010a5a:	6820      	ldr	r0, [r4, #0]
 8010a5c:	1d19      	adds	r1, r3, #4
 8010a5e:	6029      	str	r1, [r5, #0]
 8010a60:	0605      	lsls	r5, r0, #24
 8010a62:	d501      	bpl.n	8010a68 <_printf_i+0xe8>
 8010a64:	681e      	ldr	r6, [r3, #0]
 8010a66:	e002      	b.n	8010a6e <_printf_i+0xee>
 8010a68:	0641      	lsls	r1, r0, #25
 8010a6a:	d5fb      	bpl.n	8010a64 <_printf_i+0xe4>
 8010a6c:	881e      	ldrh	r6, [r3, #0]
 8010a6e:	4853      	ldr	r0, [pc, #332]	; (8010bbc <_printf_i+0x23c>)
 8010a70:	2f6f      	cmp	r7, #111	; 0x6f
 8010a72:	bf0c      	ite	eq
 8010a74:	2308      	moveq	r3, #8
 8010a76:	230a      	movne	r3, #10
 8010a78:	2100      	movs	r1, #0
 8010a7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010a7e:	6865      	ldr	r5, [r4, #4]
 8010a80:	60a5      	str	r5, [r4, #8]
 8010a82:	2d00      	cmp	r5, #0
 8010a84:	bfa2      	ittt	ge
 8010a86:	6821      	ldrge	r1, [r4, #0]
 8010a88:	f021 0104 	bicge.w	r1, r1, #4
 8010a8c:	6021      	strge	r1, [r4, #0]
 8010a8e:	b90e      	cbnz	r6, 8010a94 <_printf_i+0x114>
 8010a90:	2d00      	cmp	r5, #0
 8010a92:	d04b      	beq.n	8010b2c <_printf_i+0x1ac>
 8010a94:	4615      	mov	r5, r2
 8010a96:	fbb6 f1f3 	udiv	r1, r6, r3
 8010a9a:	fb03 6711 	mls	r7, r3, r1, r6
 8010a9e:	5dc7      	ldrb	r7, [r0, r7]
 8010aa0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010aa4:	4637      	mov	r7, r6
 8010aa6:	42bb      	cmp	r3, r7
 8010aa8:	460e      	mov	r6, r1
 8010aaa:	d9f4      	bls.n	8010a96 <_printf_i+0x116>
 8010aac:	2b08      	cmp	r3, #8
 8010aae:	d10b      	bne.n	8010ac8 <_printf_i+0x148>
 8010ab0:	6823      	ldr	r3, [r4, #0]
 8010ab2:	07de      	lsls	r6, r3, #31
 8010ab4:	d508      	bpl.n	8010ac8 <_printf_i+0x148>
 8010ab6:	6923      	ldr	r3, [r4, #16]
 8010ab8:	6861      	ldr	r1, [r4, #4]
 8010aba:	4299      	cmp	r1, r3
 8010abc:	bfde      	ittt	le
 8010abe:	2330      	movle	r3, #48	; 0x30
 8010ac0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010ac4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010ac8:	1b52      	subs	r2, r2, r5
 8010aca:	6122      	str	r2, [r4, #16]
 8010acc:	f8cd a000 	str.w	sl, [sp]
 8010ad0:	464b      	mov	r3, r9
 8010ad2:	aa03      	add	r2, sp, #12
 8010ad4:	4621      	mov	r1, r4
 8010ad6:	4640      	mov	r0, r8
 8010ad8:	f7ff fee4 	bl	80108a4 <_printf_common>
 8010adc:	3001      	adds	r0, #1
 8010ade:	d14a      	bne.n	8010b76 <_printf_i+0x1f6>
 8010ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ae4:	b004      	add	sp, #16
 8010ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aea:	6823      	ldr	r3, [r4, #0]
 8010aec:	f043 0320 	orr.w	r3, r3, #32
 8010af0:	6023      	str	r3, [r4, #0]
 8010af2:	4833      	ldr	r0, [pc, #204]	; (8010bc0 <_printf_i+0x240>)
 8010af4:	2778      	movs	r7, #120	; 0x78
 8010af6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010afa:	6823      	ldr	r3, [r4, #0]
 8010afc:	6829      	ldr	r1, [r5, #0]
 8010afe:	061f      	lsls	r7, r3, #24
 8010b00:	f851 6b04 	ldr.w	r6, [r1], #4
 8010b04:	d402      	bmi.n	8010b0c <_printf_i+0x18c>
 8010b06:	065f      	lsls	r7, r3, #25
 8010b08:	bf48      	it	mi
 8010b0a:	b2b6      	uxthmi	r6, r6
 8010b0c:	07df      	lsls	r7, r3, #31
 8010b0e:	bf48      	it	mi
 8010b10:	f043 0320 	orrmi.w	r3, r3, #32
 8010b14:	6029      	str	r1, [r5, #0]
 8010b16:	bf48      	it	mi
 8010b18:	6023      	strmi	r3, [r4, #0]
 8010b1a:	b91e      	cbnz	r6, 8010b24 <_printf_i+0x1a4>
 8010b1c:	6823      	ldr	r3, [r4, #0]
 8010b1e:	f023 0320 	bic.w	r3, r3, #32
 8010b22:	6023      	str	r3, [r4, #0]
 8010b24:	2310      	movs	r3, #16
 8010b26:	e7a7      	b.n	8010a78 <_printf_i+0xf8>
 8010b28:	4824      	ldr	r0, [pc, #144]	; (8010bbc <_printf_i+0x23c>)
 8010b2a:	e7e4      	b.n	8010af6 <_printf_i+0x176>
 8010b2c:	4615      	mov	r5, r2
 8010b2e:	e7bd      	b.n	8010aac <_printf_i+0x12c>
 8010b30:	682b      	ldr	r3, [r5, #0]
 8010b32:	6826      	ldr	r6, [r4, #0]
 8010b34:	6961      	ldr	r1, [r4, #20]
 8010b36:	1d18      	adds	r0, r3, #4
 8010b38:	6028      	str	r0, [r5, #0]
 8010b3a:	0635      	lsls	r5, r6, #24
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	d501      	bpl.n	8010b44 <_printf_i+0x1c4>
 8010b40:	6019      	str	r1, [r3, #0]
 8010b42:	e002      	b.n	8010b4a <_printf_i+0x1ca>
 8010b44:	0670      	lsls	r0, r6, #25
 8010b46:	d5fb      	bpl.n	8010b40 <_printf_i+0x1c0>
 8010b48:	8019      	strh	r1, [r3, #0]
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	6123      	str	r3, [r4, #16]
 8010b4e:	4615      	mov	r5, r2
 8010b50:	e7bc      	b.n	8010acc <_printf_i+0x14c>
 8010b52:	682b      	ldr	r3, [r5, #0]
 8010b54:	1d1a      	adds	r2, r3, #4
 8010b56:	602a      	str	r2, [r5, #0]
 8010b58:	681d      	ldr	r5, [r3, #0]
 8010b5a:	6862      	ldr	r2, [r4, #4]
 8010b5c:	2100      	movs	r1, #0
 8010b5e:	4628      	mov	r0, r5
 8010b60:	f7ef fb5e 	bl	8000220 <memchr>
 8010b64:	b108      	cbz	r0, 8010b6a <_printf_i+0x1ea>
 8010b66:	1b40      	subs	r0, r0, r5
 8010b68:	6060      	str	r0, [r4, #4]
 8010b6a:	6863      	ldr	r3, [r4, #4]
 8010b6c:	6123      	str	r3, [r4, #16]
 8010b6e:	2300      	movs	r3, #0
 8010b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b74:	e7aa      	b.n	8010acc <_printf_i+0x14c>
 8010b76:	6923      	ldr	r3, [r4, #16]
 8010b78:	462a      	mov	r2, r5
 8010b7a:	4649      	mov	r1, r9
 8010b7c:	4640      	mov	r0, r8
 8010b7e:	47d0      	blx	sl
 8010b80:	3001      	adds	r0, #1
 8010b82:	d0ad      	beq.n	8010ae0 <_printf_i+0x160>
 8010b84:	6823      	ldr	r3, [r4, #0]
 8010b86:	079b      	lsls	r3, r3, #30
 8010b88:	d413      	bmi.n	8010bb2 <_printf_i+0x232>
 8010b8a:	68e0      	ldr	r0, [r4, #12]
 8010b8c:	9b03      	ldr	r3, [sp, #12]
 8010b8e:	4298      	cmp	r0, r3
 8010b90:	bfb8      	it	lt
 8010b92:	4618      	movlt	r0, r3
 8010b94:	e7a6      	b.n	8010ae4 <_printf_i+0x164>
 8010b96:	2301      	movs	r3, #1
 8010b98:	4632      	mov	r2, r6
 8010b9a:	4649      	mov	r1, r9
 8010b9c:	4640      	mov	r0, r8
 8010b9e:	47d0      	blx	sl
 8010ba0:	3001      	adds	r0, #1
 8010ba2:	d09d      	beq.n	8010ae0 <_printf_i+0x160>
 8010ba4:	3501      	adds	r5, #1
 8010ba6:	68e3      	ldr	r3, [r4, #12]
 8010ba8:	9903      	ldr	r1, [sp, #12]
 8010baa:	1a5b      	subs	r3, r3, r1
 8010bac:	42ab      	cmp	r3, r5
 8010bae:	dcf2      	bgt.n	8010b96 <_printf_i+0x216>
 8010bb0:	e7eb      	b.n	8010b8a <_printf_i+0x20a>
 8010bb2:	2500      	movs	r5, #0
 8010bb4:	f104 0619 	add.w	r6, r4, #25
 8010bb8:	e7f5      	b.n	8010ba6 <_printf_i+0x226>
 8010bba:	bf00      	nop
 8010bbc:	08010e7a 	.word	0x08010e7a
 8010bc0:	08010e8b 	.word	0x08010e8b

08010bc4 <memmove>:
 8010bc4:	4288      	cmp	r0, r1
 8010bc6:	b510      	push	{r4, lr}
 8010bc8:	eb01 0402 	add.w	r4, r1, r2
 8010bcc:	d902      	bls.n	8010bd4 <memmove+0x10>
 8010bce:	4284      	cmp	r4, r0
 8010bd0:	4623      	mov	r3, r4
 8010bd2:	d807      	bhi.n	8010be4 <memmove+0x20>
 8010bd4:	1e43      	subs	r3, r0, #1
 8010bd6:	42a1      	cmp	r1, r4
 8010bd8:	d008      	beq.n	8010bec <memmove+0x28>
 8010bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010be2:	e7f8      	b.n	8010bd6 <memmove+0x12>
 8010be4:	4402      	add	r2, r0
 8010be6:	4601      	mov	r1, r0
 8010be8:	428a      	cmp	r2, r1
 8010bea:	d100      	bne.n	8010bee <memmove+0x2a>
 8010bec:	bd10      	pop	{r4, pc}
 8010bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010bf6:	e7f7      	b.n	8010be8 <memmove+0x24>

08010bf8 <_realloc_r>:
 8010bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bfc:	4680      	mov	r8, r0
 8010bfe:	4614      	mov	r4, r2
 8010c00:	460e      	mov	r6, r1
 8010c02:	b921      	cbnz	r1, 8010c0e <_realloc_r+0x16>
 8010c04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c08:	4611      	mov	r1, r2
 8010c0a:	f7ff bba9 	b.w	8010360 <_malloc_r>
 8010c0e:	b92a      	cbnz	r2, 8010c1c <_realloc_r+0x24>
 8010c10:	f7ff fca4 	bl	801055c <_free_r>
 8010c14:	4625      	mov	r5, r4
 8010c16:	4628      	mov	r0, r5
 8010c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c1c:	f000 f81b 	bl	8010c56 <_malloc_usable_size_r>
 8010c20:	4284      	cmp	r4, r0
 8010c22:	4607      	mov	r7, r0
 8010c24:	d802      	bhi.n	8010c2c <_realloc_r+0x34>
 8010c26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010c2a:	d812      	bhi.n	8010c52 <_realloc_r+0x5a>
 8010c2c:	4621      	mov	r1, r4
 8010c2e:	4640      	mov	r0, r8
 8010c30:	f7ff fb96 	bl	8010360 <_malloc_r>
 8010c34:	4605      	mov	r5, r0
 8010c36:	2800      	cmp	r0, #0
 8010c38:	d0ed      	beq.n	8010c16 <_realloc_r+0x1e>
 8010c3a:	42bc      	cmp	r4, r7
 8010c3c:	4622      	mov	r2, r4
 8010c3e:	4631      	mov	r1, r6
 8010c40:	bf28      	it	cs
 8010c42:	463a      	movcs	r2, r7
 8010c44:	f7ff fc7c 	bl	8010540 <memcpy>
 8010c48:	4631      	mov	r1, r6
 8010c4a:	4640      	mov	r0, r8
 8010c4c:	f7ff fc86 	bl	801055c <_free_r>
 8010c50:	e7e1      	b.n	8010c16 <_realloc_r+0x1e>
 8010c52:	4635      	mov	r5, r6
 8010c54:	e7df      	b.n	8010c16 <_realloc_r+0x1e>

08010c56 <_malloc_usable_size_r>:
 8010c56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c5a:	1f18      	subs	r0, r3, #4
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	bfbc      	itt	lt
 8010c60:	580b      	ldrlt	r3, [r1, r0]
 8010c62:	18c0      	addlt	r0, r0, r3
 8010c64:	4770      	bx	lr
	...

08010c68 <_init>:
 8010c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c6a:	bf00      	nop
 8010c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c6e:	bc08      	pop	{r3}
 8010c70:	469e      	mov	lr, r3
 8010c72:	4770      	bx	lr

08010c74 <_fini>:
 8010c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c76:	bf00      	nop
 8010c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c7a:	bc08      	pop	{r3}
 8010c7c:	469e      	mov	lr, r3
 8010c7e:	4770      	bx	lr
