
prodV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000decc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800e090  0800e090  0001e090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0f4  0800e0f4  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0f4  0800e0f4  0001e0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0fc  0800e0fc  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0fc  0800e0fc  0001e0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e100  0800e100  0001e100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800e104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000119c  2000008c  0800e190  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20001228  0800e190  00021228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002887c  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006091  00000000  00000000  0004897b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e68  00000000  00000000  0004ea10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000178c  00000000  00000000  00050878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ab2f  00000000  00000000  00052004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c761  00000000  00000000  0007cb33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eae08  00000000  00000000  000a9294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000082c0  00000000  00000000  0019409c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0019c35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000008c 	.word	0x2000008c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800e078 	.word	0x0800e078

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000090 	.word	0x20000090
 8000200:	0800e078 	.word	0x0800e078

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f001 f9ac 	bl	8001860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f826 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 fc22 	bl	8000d54 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000510:	f000 f88e 	bl	8000630 <MX_ADC1_Init>
  MX_DAC_Init();
 8000514:	f000 f8de 	bl	80006d4 <MX_DAC_Init>
  MX_I2C1_Init();
 8000518:	f000 f910 	bl	800073c <MX_I2C1_Init>
  MX_I2C3_Init();
 800051c:	f000 f93c 	bl	8000798 <MX_I2C3_Init>
  MX_UART4_Init();
 8000520:	f000 fb68 	bl	8000bf4 <MX_UART4_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000524:	f000 fbe4 	bl	8000cf0 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM2_Init();
 8000528:	f000 fa3a 	bl	80009a0 <MX_TIM2_Init>
  MX_SPI3_Init();
 800052c:	f000 f962 	bl	80007f4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000530:	f000 fb8a 	bl	8000c48 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000534:	f000 fbb2 	bl	8000c9c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000538:	f009 faec 	bl	8009b14 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 800053c:	f00c fd00 	bl	800cf40 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000540:	f000 f98e 	bl	8000860 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000544:	f000 fa7e 	bl	8000a44 <MX_TIM4_Init>
  MX_TIM9_Init();
 8000548:	f000 faf2 	bl	8000b30 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  main_app();
 800054c:	f00d fac4 	bl	800dad8 <main_app>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000550:	f00c fd1c 	bl	800cf8c <MX_USB_HOST_Process>
 8000554:	e7fc      	b.n	8000550 <main+0x50>
	...

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	2234      	movs	r2, #52	; 0x34
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f00d fce8 	bl	800df3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b29      	ldr	r3, [pc, #164]	; (8000628 <SystemClock_Config+0xd0>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a28      	ldr	r2, [pc, #160]	; (8000628 <SystemClock_Config+0xd0>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b26      	ldr	r3, [pc, #152]	; (8000628 <SystemClock_Config+0xd0>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000598:	2300      	movs	r3, #0
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	4b23      	ldr	r3, [pc, #140]	; (800062c <SystemClock_Config+0xd4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a4:	4a21      	ldr	r2, [pc, #132]	; (800062c <SystemClock_Config+0xd4>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <SystemClock_Config+0xd4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005cc:	2304      	movs	r3, #4
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005d0:	2348      	movs	r3, #72	; 0x48
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005d8:	2303      	movs	r3, #3
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005dc:	2302      	movs	r3, #2
 80005de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 031c 	add.w	r3, r7, #28
 80005e4:	4618      	mov	r0, r3
 80005e6:	f005 fd0b 	bl	8006000 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005f0:	f000 fca2 	bl	8000f38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80005f8:	2303      	movs	r3, #3
 80005fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000604:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f004 fe81 	bl	8005318 <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800061c:	f000 fc8c 	bl	8000f38 <Error_Handler>
  }
}
 8000620:	bf00      	nop
 8000622:	3750      	adds	r7, #80	; 0x50
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000636:	463b      	mov	r3, r7
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000644:	4a21      	ldr	r2, [pc, #132]	; (80006cc <MX_ADC1_Init+0x9c>)
 8000646:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <MX_ADC1_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800064e:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800065a:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <MX_ADC1_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000660:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000668:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <MX_ADC1_Init+0x98>)
 800066a:	2200      	movs	r2, #0
 800066c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000670:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <MX_ADC1_Init+0xa0>)
 8000672:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <MX_ADC1_Init+0x98>)
 800067c:	2201      	movs	r2, #1
 800067e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_ADC1_Init+0x98>)
 800068a:	2201      	movs	r2, #1
 800068c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800068e:	480e      	ldr	r0, [pc, #56]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000690:	f001 f97c 	bl	800198c <HAL_ADC_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800069a:	f000 fc4d 	bl	8000f38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800069e:	230b      	movs	r3, #11
 80006a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006a2:	2301      	movs	r3, #1
 80006a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006aa:	463b      	mov	r3, r7
 80006ac:	4619      	mov	r1, r3
 80006ae:	4806      	ldr	r0, [pc, #24]	; (80006c8 <MX_ADC1_Init+0x98>)
 80006b0:	f001 f9b0 	bl	8001a14 <HAL_ADC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006ba:	f000 fc3d 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200000a8 	.word	0x200000a8
 80006cc:	40012000 	.word	0x40012000
 80006d0:	0f000001 	.word	0x0f000001

080006d4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006da:	463b      	mov	r3, r7
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_DAC_Init+0x60>)
 80006e4:	4a14      	ldr	r2, [pc, #80]	; (8000738 <MX_DAC_Init+0x64>)
 80006e6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80006e8:	4812      	ldr	r0, [pc, #72]	; (8000734 <MX_DAC_Init+0x60>)
 80006ea:	f001 fcd2 	bl	8002092 <HAL_DAC_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80006f4:	f000 fc20 	bl	8000f38 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	2200      	movs	r2, #0
 8000704:	4619      	mov	r1, r3
 8000706:	480b      	ldr	r0, [pc, #44]	; (8000734 <MX_DAC_Init+0x60>)
 8000708:	f001 fd66 	bl	80021d8 <HAL_DAC_ConfigChannel>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000712:	f000 fc11 	bl	8000f38 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000716:	463b      	mov	r3, r7
 8000718:	2210      	movs	r2, #16
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_DAC_Init+0x60>)
 800071e:	f001 fd5b 	bl	80021d8 <HAL_DAC_ConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000728:	f000 fc06 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000f0 	.word	0x200000f0
 8000738:	40007400 	.word	0x40007400

0800073c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_I2C1_Init+0x50>)
 8000742:	4a13      	ldr	r2, [pc, #76]	; (8000790 <MX_I2C1_Init+0x54>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_I2C1_Init+0x50>)
 8000748:	4a12      	ldr	r2, [pc, #72]	; (8000794 <MX_I2C1_Init+0x58>)
 800074a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_I2C1_Init+0x50>)
 800075a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800075e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_I2C1_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_I2C1_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_I2C1_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_I2C1_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_I2C1_Init+0x50>)
 800077a:	f004 fb4f 	bl	8004e1c <HAL_I2C_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000784:	f000 fbd8 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000104 	.word	0x20000104
 8000790:	40005400 	.word	0x40005400
 8000794:	000186a0 	.word	0x000186a0

08000798 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_I2C3_Init+0x50>)
 800079e:	4a13      	ldr	r2, [pc, #76]	; (80007ec <MX_I2C3_Init+0x54>)
 80007a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007a4:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <MX_I2C3_Init+0x58>)
 80007a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007d6:	f004 fb21 	bl	8004e1c <HAL_I2C_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007e0:	f000 fbaa 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000158 	.word	0x20000158
 80007ec:	40005c00 	.word	0x40005c00
 80007f0:	000186a0 	.word	0x000186a0

080007f4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_SPI3_Init+0x64>)
 80007fa:	4a18      	ldr	r2, [pc, #96]	; (800085c <MX_SPI3_Init+0x68>)
 80007fc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_SPI3_Init+0x64>)
 8000800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000804:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_SPI3_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_SPI3_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_SPI3_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_SPI3_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_SPI3_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_SPI3_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_SPI3_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_SPI3_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_SPI3_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_SPI3_Init+0x64>)
 800083e:	220a      	movs	r2, #10
 8000840:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_SPI3_Init+0x64>)
 8000844:	f005 fe7a 	bl	800653c <HAL_SPI_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_SPI3_Init+0x5e>
  {
    Error_Handler();
 800084e:	f000 fb73 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200001ac 	.word	0x200001ac
 800085c:	40003c00 	.word	0x40003c00

08000860 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b096      	sub	sp, #88	; 0x58
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000866:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000874:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800087e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
 800088e:	615a      	str	r2, [r3, #20]
 8000890:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2220      	movs	r2, #32
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f00d fb4f 	bl	800df3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800089e:	4b3e      	ldr	r3, [pc, #248]	; (8000998 <MX_TIM1_Init+0x138>)
 80008a0:	4a3e      	ldr	r2, [pc, #248]	; (800099c <MX_TIM1_Init+0x13c>)
 80008a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008a4:	4b3c      	ldr	r3, [pc, #240]	; (8000998 <MX_TIM1_Init+0x138>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008aa:	4b3b      	ldr	r3, [pc, #236]	; (8000998 <MX_TIM1_Init+0x138>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008b0:	4b39      	ldr	r3, [pc, #228]	; (8000998 <MX_TIM1_Init+0x138>)
 80008b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b8:	4b37      	ldr	r3, [pc, #220]	; (8000998 <MX_TIM1_Init+0x138>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008be:	4b36      	ldr	r3, [pc, #216]	; (8000998 <MX_TIM1_Init+0x138>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c4:	4b34      	ldr	r3, [pc, #208]	; (8000998 <MX_TIM1_Init+0x138>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008ca:	4833      	ldr	r0, [pc, #204]	; (8000998 <MX_TIM1_Init+0x138>)
 80008cc:	f005 febf 	bl	800664e <HAL_TIM_Base_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80008d6:	f000 fb2f 	bl	8000f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008e4:	4619      	mov	r1, r3
 80008e6:	482c      	ldr	r0, [pc, #176]	; (8000998 <MX_TIM1_Init+0x138>)
 80008e8:	f006 fc32 	bl	8007150 <HAL_TIM_ConfigClockSource>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008f2:	f000 fb21 	bl	8000f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008f6:	4828      	ldr	r0, [pc, #160]	; (8000998 <MX_TIM1_Init+0x138>)
 80008f8:	f005 ff51 	bl	800679e <HAL_TIM_PWM_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000902:	f000 fb19 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800090e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000912:	4619      	mov	r1, r3
 8000914:	4820      	ldr	r0, [pc, #128]	; (8000998 <MX_TIM1_Init+0x138>)
 8000916:	f007 f929 	bl	8007b6c <HAL_TIMEx_MasterConfigSynchronization>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000920:	f000 fb0a 	bl	8000f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000924:	2360      	movs	r3, #96	; 0x60
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000930:	2300      	movs	r3, #0
 8000932:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000944:	2200      	movs	r2, #0
 8000946:	4619      	mov	r1, r3
 8000948:	4813      	ldr	r0, [pc, #76]	; (8000998 <MX_TIM1_Init+0x138>)
 800094a:	f006 fb3f 	bl	8006fcc <HAL_TIM_PWM_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000954:	f000 faf0 	bl	8000f38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800096c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000970:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	4619      	mov	r1, r3
 800097a:	4807      	ldr	r0, [pc, #28]	; (8000998 <MX_TIM1_Init+0x138>)
 800097c:	f007 f972 	bl	8007c64 <HAL_TIMEx_ConfigBreakDeadTime>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000986:	f000 fad7 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800098a:	4803      	ldr	r0, [pc, #12]	; (8000998 <MX_TIM1_Init+0x138>)
 800098c:	f000 fd28 	bl	80013e0 <HAL_TIM_MspPostInit>

}
 8000990:	bf00      	nop
 8000992:	3758      	adds	r7, #88	; 0x58
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000204 	.word	0x20000204
 800099c:	40010000 	.word	0x40010000

080009a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80009b0:	463b      	mov	r3, r7
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009bc:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <MX_TIM2_Init+0xa0>)
 80009be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009c4:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <MX_TIM2_Init+0xa0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ca:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <MX_TIM2_Init+0xa0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <MX_TIM2_Init+0xa0>)
 80009d2:	f04f 32ff 	mov.w	r2, #4294967295
 80009d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d8:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <MX_TIM2_Init+0xa0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <MX_TIM2_Init+0xa0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80009e4:	4816      	ldr	r0, [pc, #88]	; (8000a40 <MX_TIM2_Init+0xa0>)
 80009e6:	f006 f86b 	bl	8006ac0 <HAL_TIM_IC_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009f0:	f000 faa2 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	4619      	mov	r1, r3
 8000a02:	480f      	ldr	r0, [pc, #60]	; (8000a40 <MX_TIM2_Init+0xa0>)
 8000a04:	f007 f8b2 	bl	8007b6c <HAL_TIMEx_MasterConfigSynchronization>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a0e:	f000 fa93 	bl	8000f38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a16:	2301      	movs	r3, #1
 8000a18:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a22:	463b      	mov	r3, r7
 8000a24:	2200      	movs	r2, #0
 8000a26:	4619      	mov	r1, r3
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_TIM2_Init+0xa0>)
 8000a2a:	f006 fa33 	bl	8006e94 <HAL_TIM_IC_ConfigChannel>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000a34:	f000 fa80 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	2000024c 	.word	0x2000024c

08000a44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08e      	sub	sp, #56	; 0x38
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a58:	f107 0320 	add.w	r3, r7, #32
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	615a      	str	r2, [r3, #20]
 8000a72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a74:	4b2c      	ldr	r3, [pc, #176]	; (8000b28 <MX_TIM4_Init+0xe4>)
 8000a76:	4a2d      	ldr	r2, [pc, #180]	; (8000b2c <MX_TIM4_Init+0xe8>)
 8000a78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a7a:	4b2b      	ldr	r3, [pc, #172]	; (8000b28 <MX_TIM4_Init+0xe4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a80:	4b29      	ldr	r3, [pc, #164]	; (8000b28 <MX_TIM4_Init+0xe4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a86:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <MX_TIM4_Init+0xe4>)
 8000a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8e:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <MX_TIM4_Init+0xe4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a94:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <MX_TIM4_Init+0xe4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a9a:	4823      	ldr	r0, [pc, #140]	; (8000b28 <MX_TIM4_Init+0xe4>)
 8000a9c:	f005 fdd7 	bl	800664e <HAL_TIM_Base_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000aa6:	f000 fa47 	bl	8000f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ab0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	481c      	ldr	r0, [pc, #112]	; (8000b28 <MX_TIM4_Init+0xe4>)
 8000ab8:	f006 fb4a 	bl	8007150 <HAL_TIM_ConfigClockSource>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000ac2:	f000 fa39 	bl	8000f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ac6:	4818      	ldr	r0, [pc, #96]	; (8000b28 <MX_TIM4_Init+0xe4>)
 8000ac8:	f005 fe69 	bl	800679e <HAL_TIM_PWM_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000ad2:	f000 fa31 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ade:	f107 0320 	add.w	r3, r7, #32
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4810      	ldr	r0, [pc, #64]	; (8000b28 <MX_TIM4_Init+0xe4>)
 8000ae6:	f007 f841 	bl	8007b6c <HAL_TIMEx_MasterConfigSynchronization>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000af0:	f000 fa22 	bl	8000f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af4:	2360      	movs	r3, #96	; 0x60
 8000af6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2200      	movs	r2, #0
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4807      	ldr	r0, [pc, #28]	; (8000b28 <MX_TIM4_Init+0xe4>)
 8000b0c:	f006 fa5e 	bl	8006fcc <HAL_TIM_PWM_ConfigChannel>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000b16:	f000 fa0f 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b1a:	4803      	ldr	r0, [pc, #12]	; (8000b28 <MX_TIM4_Init+0xe4>)
 8000b1c:	f000 fc60 	bl	80013e0 <HAL_TIM_MspPostInit>

}
 8000b20:	bf00      	nop
 8000b22:	3738      	adds	r7, #56	; 0x38
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000294 	.word	0x20000294
 8000b2c:	40000800 	.word	0x40000800

08000b30 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	; 0x30
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b36:	f107 0320 	add.w	r3, r7, #32
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]
 8000b52:	615a      	str	r2, [r3, #20]
 8000b54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000b56:	4b25      	ldr	r3, [pc, #148]	; (8000bec <MX_TIM9_Init+0xbc>)
 8000b58:	4a25      	ldr	r2, [pc, #148]	; (8000bf0 <MX_TIM9_Init+0xc0>)
 8000b5a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000b5c:	4b23      	ldr	r3, [pc, #140]	; (8000bec <MX_TIM9_Init+0xbc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b62:	4b22      	ldr	r3, [pc, #136]	; (8000bec <MX_TIM9_Init+0xbc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8000b68:	4b20      	ldr	r3, [pc, #128]	; (8000bec <MX_TIM9_Init+0xbc>)
 8000b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b6e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b70:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <MX_TIM9_Init+0xbc>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b76:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <MX_TIM9_Init+0xbc>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000b7c:	481b      	ldr	r0, [pc, #108]	; (8000bec <MX_TIM9_Init+0xbc>)
 8000b7e:	f005 fd66 	bl	800664e <HAL_TIM_Base_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8000b88:	f000 f9d6 	bl	8000f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b90:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000b92:	f107 0320 	add.w	r3, r7, #32
 8000b96:	4619      	mov	r1, r3
 8000b98:	4814      	ldr	r0, [pc, #80]	; (8000bec <MX_TIM9_Init+0xbc>)
 8000b9a:	f006 fad9 	bl	8007150 <HAL_TIM_ConfigClockSource>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8000ba4:	f000 f9c8 	bl	8000f38 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 8000ba8:	4810      	ldr	r0, [pc, #64]	; (8000bec <MX_TIM9_Init+0xbc>)
 8000baa:	f005 fd9f 	bl	80066ec <HAL_TIM_OC_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8000bb4:	f000 f9c0 	bl	8000f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4807      	ldr	r0, [pc, #28]	; (8000bec <MX_TIM9_Init+0xbc>)
 8000bd0:	f006 f904 	bl	8006ddc <HAL_TIM_OC_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8000bda:	f000 f9ad 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000bde:	4803      	ldr	r0, [pc, #12]	; (8000bec <MX_TIM9_Init+0xbc>)
 8000be0:	f000 fbfe 	bl	80013e0 <HAL_TIM_MspPostInit>

}
 8000be4:	bf00      	nop
 8000be6:	3730      	adds	r7, #48	; 0x30
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200002dc 	.word	0x200002dc
 8000bf0:	40014000 	.word	0x40014000

08000bf4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_UART4_Init+0x4c>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <MX_UART4_Init+0x50>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_UART4_Init+0x4c>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_UART4_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_UART4_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_UART4_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_UART4_Init+0x4c>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_UART4_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_UART4_Init+0x4c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_UART4_Init+0x4c>)
 8000c2c:	f007 f86c 	bl	8007d08 <HAL_UART_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000c36:	f000 f97f 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000324 	.word	0x20000324
 8000c44:	40004c00 	.word	0x40004c00

08000c48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <MX_USART1_UART_Init+0x50>)
 8000c50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c6e:	220c      	movs	r2, #12
 8000c70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c80:	f007 f842 	bl	8007d08 <HAL_UART_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c8a:	f000 f955 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	2000036c 	.word	0x2000036c
 8000c98:	40011000 	.word	0x40011000

08000c9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <MX_USART2_UART_Init+0x50>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cd4:	f007 f818 	bl	8007d08 <HAL_UART_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cde:	f000 f92b 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200003b4 	.word	0x200003b4
 8000cec:	40004400 	.word	0x40004400

08000cf0 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000cf4:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000cf6:	4a16      	ldr	r2, [pc, #88]	; (8000d50 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000cf8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000cfc:	2208      	movs	r2, #8
 8000cfe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d02:	2202      	movs	r2, #2
 8000d04:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d0e:	2202      	movs	r2, #2
 8000d10:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000d24:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d38:	f004 f9b4 	bl	80050a4 <HAL_PCD_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000d42:	f000 f8f9 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200003fc 	.word	0x200003fc
 8000d50:	40040000 	.word	0x40040000

08000d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	; 0x30
 8000d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
 8000d6e:	4b6c      	ldr	r3, [pc, #432]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a6b      	ldr	r2, [pc, #428]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000d74:	f043 0310 	orr.w	r3, r3, #16
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b69      	ldr	r3, [pc, #420]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0310 	and.w	r3, r3, #16
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	4b65      	ldr	r3, [pc, #404]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a64      	ldr	r2, [pc, #400]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000d90:	f043 0304 	orr.w	r3, r3, #4
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b62      	ldr	r3, [pc, #392]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0304 	and.w	r3, r3, #4
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b5e      	ldr	r3, [pc, #376]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a5d      	ldr	r2, [pc, #372]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b5b      	ldr	r3, [pc, #364]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b57      	ldr	r3, [pc, #348]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a56      	ldr	r2, [pc, #344]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b54      	ldr	r3, [pc, #336]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	4b50      	ldr	r3, [pc, #320]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a4f      	ldr	r2, [pc, #316]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b4d      	ldr	r3, [pc, #308]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	4b49      	ldr	r3, [pc, #292]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a48      	ldr	r2, [pc, #288]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000e00:	f043 0308 	orr.w	r3, r3, #8
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b46      	ldr	r3, [pc, #280]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2140      	movs	r1, #64	; 0x40
 8000e16:	4843      	ldr	r0, [pc, #268]	; (8000f24 <MX_GPIO_Init+0x1d0>)
 8000e18:	f001 fecc 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MS2_3_Pin|RFID_RST_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2160      	movs	r1, #96	; 0x60
 8000e20:	4841      	ldr	r0, [pc, #260]	; (8000f28 <MX_GPIO_Init+0x1d4>)
 8000e22:	f001 fec7 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MS1_3_Pin|ENABLE3_Pin|DIR3_Pin|ENABLE2_Pin
 8000e26:	2200      	movs	r2, #0
 8000e28:	f240 613f 	movw	r1, #1599	; 0x63f
 8000e2c:	483f      	ldr	r0, [pc, #252]	; (8000f2c <MX_GPIO_Init+0x1d8>)
 8000e2e:	f001 fec1 	bl	8002bb4 <HAL_GPIO_WritePin>
                          |ENABLE1_Pin|MS1_1_Pin|MS2_1_Pin|DIR1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR2_Pin|MS2_2_Pin|MS1_2_Pin|BUZZER_Pin
 8000e32:	2200      	movs	r2, #0
 8000e34:	f24e 0103 	movw	r1, #57347	; 0xe003
 8000e38:	483d      	ldr	r0, [pc, #244]	; (8000f30 <MX_GPIO_Init+0x1dc>)
 8000e3a:	f001 febb 	bl	8002bb4 <HAL_GPIO_WritePin>
                          |HV_DISABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ESP_RST_Pin */
  GPIO_InitStruct.Pin = ESP_RST_Pin;
 8000e3e:	2340      	movs	r3, #64	; 0x40
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ESP_RST_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	4619      	mov	r1, r3
 8000e54:	4833      	ldr	r0, [pc, #204]	; (8000f24 <MX_GPIO_Init+0x1d0>)
 8000e56:	f001 fd01 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pin : OPTO2_Pin */
  GPIO_InitStruct.Pin = OPTO2_Pin;
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OPTO2_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	482d      	ldr	r0, [pc, #180]	; (8000f24 <MX_GPIO_Init+0x1d0>)
 8000e6e:	f001 fcf5 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pins : MS2_3_Pin RFID_RST_Pin */
  GPIO_InitStruct.Pin = MS2_3_Pin|RFID_RST_Pin;
 8000e72:	2360      	movs	r3, #96	; 0x60
 8000e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4619      	mov	r1, r3
 8000e88:	4827      	ldr	r0, [pc, #156]	; (8000f28 <MX_GPIO_Init+0x1d4>)
 8000e8a:	f001 fce7 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pins : MS1_3_Pin ENABLE3_Pin DIR3_Pin ENABLE2_Pin
                           ENABLE1_Pin MS1_1_Pin MS2_1_Pin DIR1_Pin */
  GPIO_InitStruct.Pin = MS1_3_Pin|ENABLE3_Pin|DIR3_Pin|ENABLE2_Pin
 8000e8e:	f240 633f 	movw	r3, #1599	; 0x63f
 8000e92:	61fb      	str	r3, [r7, #28]
                          |ENABLE1_Pin|MS1_1_Pin|MS2_1_Pin|DIR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4821      	ldr	r0, [pc, #132]	; (8000f2c <MX_GPIO_Init+0x1d8>)
 8000ea8:	f001 fcd8 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pin : OPTO1_Pin */
  GPIO_InitStruct.Pin = OPTO1_Pin;
 8000eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OPTO1_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 031c 	add.w	r3, r7, #28
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	481b      	ldr	r0, [pc, #108]	; (8000f30 <MX_GPIO_Init+0x1dc>)
 8000ec2:	f001 fccb 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin MS2_2_Pin MS1_2_Pin BUZZER_Pin
                           HV_DISABLE_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|MS2_2_Pin|MS1_2_Pin|BUZZER_Pin
 8000ec6:	f24e 0303 	movw	r3, #57347	; 0xe003
 8000eca:	61fb      	str	r3, [r7, #28]
                          |HV_DISABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	4814      	ldr	r0, [pc, #80]	; (8000f30 <MX_GPIO_Init+0x1dc>)
 8000ee0:	f001 fcbc 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000ee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480b      	ldr	r0, [pc, #44]	; (8000f28 <MX_GPIO_Init+0x1d4>)
 8000efa:	f001 fcaf 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pins : TUBE_SEN_Pin LIMIT_SW_1_Pin */
  GPIO_InitStruct.Pin = TUBE_SEN_Pin|LIMIT_SW_1_Pin;
 8000efe:	2303      	movs	r3, #3
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4808      	ldr	r0, [pc, #32]	; (8000f34 <MX_GPIO_Init+0x1e0>)
 8000f12:	f001 fca3 	bl	800285c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f16:	bf00      	nop
 8000f18:	3730      	adds	r7, #48	; 0x30
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020000 	.word	0x40020000
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40020c00 	.word	0x40020c00

08000f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3c:	b672      	cpsid	i
}
 8000f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <Error_Handler+0x8>
	...

08000f44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a0f      	ldr	r2, [pc, #60]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800

08000f94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a17      	ldr	r2, [pc, #92]	; (8001010 <HAL_ADC_MspInit+0x7c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d127      	bne.n	8001006 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <HAL_ADC_MspInit+0x80>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a15      	ldr	r2, [pc, #84]	; (8001014 <HAL_ADC_MspInit+0x80>)
 8000fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <HAL_ADC_MspInit+0x80>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <HAL_ADC_MspInit+0x80>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <HAL_ADC_MspInit+0x80>)
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_ADC_MspInit+0x80>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = NTC_Pin|HV_FB_Pin;
 8000fee:	2306      	movs	r3, #6
 8000ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <HAL_ADC_MspInit+0x84>)
 8001002:	f001 fc2b 	bl	800285c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001006:	bf00      	nop
 8001008:	3728      	adds	r7, #40	; 0x28
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40012000 	.word	0x40012000
 8001014:	40023800 	.word	0x40023800
 8001018:	40020800 	.word	0x40020800

0800101c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a17      	ldr	r2, [pc, #92]	; (8001098 <HAL_DAC_MspInit+0x7c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d127      	bne.n	800108e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <HAL_DAC_MspInit+0x80>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a15      	ldr	r2, [pc, #84]	; (800109c <HAL_DAC_MspInit+0x80>)
 8001048:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <HAL_DAC_MspInit+0x80>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_DAC_MspInit+0x80>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a0e      	ldr	r2, [pc, #56]	; (800109c <HAL_DAC_MspInit+0x80>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_DAC_MspInit+0x80>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = REF1_Pin|REF2_Pin;
 8001076:	2330      	movs	r3, #48	; 0x30
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107a:	2303      	movs	r3, #3
 800107c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <HAL_DAC_MspInit+0x84>)
 800108a:	f001 fbe7 	bl	800285c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40007400 	.word	0x40007400
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020000 	.word	0x40020000

080010a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08c      	sub	sp, #48	; 0x30
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a42      	ldr	r2, [pc, #264]	; (80011cc <HAL_I2C_MspInit+0x128>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d12c      	bne.n	8001120 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
 80010ca:	4b41      	ldr	r3, [pc, #260]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a40      	ldr	r2, [pc, #256]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b3e      	ldr	r3, [pc, #248]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	61bb      	str	r3, [r7, #24]
 80010e0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80010e2:	23c0      	movs	r3, #192	; 0xc0
 80010e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e6:	2312      	movs	r3, #18
 80010e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ee:	2303      	movs	r3, #3
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f2:	2304      	movs	r3, #4
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	4835      	ldr	r0, [pc, #212]	; (80011d4 <HAL_I2C_MspInit+0x130>)
 80010fe:	f001 fbad 	bl	800285c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	4b32      	ldr	r3, [pc, #200]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	4a31      	ldr	r2, [pc, #196]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 800110c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001110:	6413      	str	r3, [r2, #64]	; 0x40
 8001112:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800111e:	e050      	b.n	80011c2 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a2c      	ldr	r2, [pc, #176]	; (80011d8 <HAL_I2C_MspInit+0x134>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d14b      	bne.n	80011c2 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a27      	ldr	r2, [pc, #156]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a20      	ldr	r2, [pc, #128]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SDA1_Pin;
 8001162:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001168:	2312      	movs	r3, #18
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001174:	2304      	movs	r3, #4
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SDA1_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	4619      	mov	r1, r3
 800117e:	4817      	ldr	r0, [pc, #92]	; (80011dc <HAL_I2C_MspInit+0x138>)
 8001180:	f001 fb6c 	bl	800285c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCL1_Pin;
 8001184:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800118a:	2312      	movs	r3, #18
 800118c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001196:	2304      	movs	r3, #4
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCL1_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	4619      	mov	r1, r3
 80011a0:	480f      	ldr	r0, [pc, #60]	; (80011e0 <HAL_I2C_MspInit+0x13c>)
 80011a2:	f001 fb5b 	bl	800285c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 80011b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011b4:	6413      	str	r3, [r2, #64]	; 0x40
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
}
 80011c2:	bf00      	nop
 80011c4:	3730      	adds	r7, #48	; 0x30
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40005400 	.word	0x40005400
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020400 	.word	0x40020400
 80011d8:	40005c00 	.word	0x40005c00
 80011dc:	40020800 	.word	0x40020800
 80011e0:	40020000 	.word	0x40020000

080011e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a29      	ldr	r2, [pc, #164]	; (80012a8 <HAL_SPI_MspInit+0xc4>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d14b      	bne.n	800129e <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	4b28      	ldr	r3, [pc, #160]	; (80012ac <HAL_SPI_MspInit+0xc8>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	4a27      	ldr	r2, [pc, #156]	; (80012ac <HAL_SPI_MspInit+0xc8>)
 8001210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001214:	6413      	str	r3, [r2, #64]	; 0x40
 8001216:	4b25      	ldr	r3, [pc, #148]	; (80012ac <HAL_SPI_MspInit+0xc8>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b21      	ldr	r3, [pc, #132]	; (80012ac <HAL_SPI_MspInit+0xc8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a20      	ldr	r2, [pc, #128]	; (80012ac <HAL_SPI_MspInit+0xc8>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <HAL_SPI_MspInit+0xc8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <HAL_SPI_MspInit+0xc8>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a19      	ldr	r2, [pc, #100]	; (80012ac <HAL_SPI_MspInit+0xc8>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <HAL_SPI_MspInit+0xc8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = SS_Pin;
 800125a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800125e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800126c:	2306      	movs	r3, #6
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SS_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	480e      	ldr	r0, [pc, #56]	; (80012b0 <HAL_SPI_MspInit+0xcc>)
 8001278:	f001 faf0 	bl	800285c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 800127c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800128e:	2306      	movs	r3, #6
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	4806      	ldr	r0, [pc, #24]	; (80012b4 <HAL_SPI_MspInit+0xd0>)
 800129a:	f001 fadf 	bl	800285c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	; 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40003c00 	.word	0x40003c00
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020800 	.word	0x40020800

080012b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a1f      	ldr	r2, [pc, #124]	; (8001344 <HAL_TIM_Base_MspInit+0x8c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d10e      	bne.n	80012e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <HAL_TIM_Base_MspInit+0x90>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <HAL_TIM_Base_MspInit+0x90>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6453      	str	r3, [r2, #68]	; 0x44
 80012da:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <HAL_TIM_Base_MspInit+0x90>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80012e6:	e026      	b.n	8001336 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a17      	ldr	r2, [pc, #92]	; (800134c <HAL_TIM_Base_MspInit+0x94>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d10e      	bne.n	8001310 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <HAL_TIM_Base_MspInit+0x90>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	4a13      	ldr	r2, [pc, #76]	; (8001348 <HAL_TIM_Base_MspInit+0x90>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	6413      	str	r3, [r2, #64]	; 0x40
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_TIM_Base_MspInit+0x90>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
}
 800130e:	e012      	b.n	8001336 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM9)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <HAL_TIM_Base_MspInit+0x98>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d10d      	bne.n	8001336 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <HAL_TIM_Base_MspInit+0x90>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	4a09      	ldr	r2, [pc, #36]	; (8001348 <HAL_TIM_Base_MspInit+0x90>)
 8001324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001328:	6453      	str	r3, [r2, #68]	; 0x44
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <HAL_TIM_Base_MspInit+0x90>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
}
 8001336:	bf00      	nop
 8001338:	371c      	adds	r7, #28
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40010000 	.word	0x40010000
 8001348:	40023800 	.word	0x40023800
 800134c:	40000800 	.word	0x40000800
 8001350:	40014000 	.word	0x40014000

08001354 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001374:	d12c      	bne.n	80013d0 <HAL_TIM_IC_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <HAL_TIM_IC_MspInit+0x84>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	4a16      	ldr	r2, [pc, #88]	; (80013d8 <HAL_TIM_IC_MspInit+0x84>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6413      	str	r3, [r2, #64]	; 0x40
 8001386:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <HAL_TIM_IC_MspInit+0x84>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <HAL_TIM_IC_MspInit+0x84>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <HAL_TIM_IC_MspInit+0x84>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <HAL_TIM_IC_MspInit+0x84>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PULSES_Pin;
 80013ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013c0:	2301      	movs	r3, #1
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PULSES_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	4804      	ldr	r0, [pc, #16]	; (80013dc <HAL_TIM_IC_MspInit+0x88>)
 80013cc:	f001 fa46 	bl	800285c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013d0:	bf00      	nop
 80013d2:	3728      	adds	r7, #40	; 0x28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020400 	.word	0x40020400

080013e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a37      	ldr	r2, [pc, #220]	; (80014dc <HAL_TIM_MspPostInit+0xfc>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d11f      	bne.n	8001442 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <HAL_TIM_MspPostInit+0x100>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a35      	ldr	r2, [pc, #212]	; (80014e0 <HAL_TIM_MspPostInit+0x100>)
 800140c:	f043 0310 	orr.w	r3, r3, #16
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <HAL_TIM_MspPostInit+0x100>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0310 	and.w	r3, r3, #16
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = STEP3_Pin;
 800141e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001430:	2301      	movs	r3, #1
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP3_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	482a      	ldr	r0, [pc, #168]	; (80014e4 <HAL_TIM_MspPostInit+0x104>)
 800143c:	f001 fa0e 	bl	800285c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001440:	e047      	b.n	80014d2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a28      	ldr	r2, [pc, #160]	; (80014e8 <HAL_TIM_MspPostInit+0x108>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d11f      	bne.n	800148c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <HAL_TIM_MspPostInit+0x100>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	4a22      	ldr	r2, [pc, #136]	; (80014e0 <HAL_TIM_MspPostInit+0x100>)
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	6313      	str	r3, [r2, #48]	; 0x30
 800145c:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <HAL_TIM_MspPostInit+0x100>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP2_Pin;
 8001468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800147a:	2302      	movs	r3, #2
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	4819      	ldr	r0, [pc, #100]	; (80014ec <HAL_TIM_MspPostInit+0x10c>)
 8001486:	f001 f9e9 	bl	800285c <HAL_GPIO_Init>
}
 800148a:	e022      	b.n	80014d2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <HAL_TIM_MspPostInit+0x110>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d11d      	bne.n	80014d2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_TIM_MspPostInit+0x100>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <HAL_TIM_MspPostInit+0x100>)
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_TIM_MspPostInit+0x100>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP1_Pin;
 80014b2:	2320      	movs	r3, #32
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80014c2:	2303      	movs	r3, #3
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4805      	ldr	r0, [pc, #20]	; (80014e4 <HAL_TIM_MspPostInit+0x104>)
 80014ce:	f001 f9c5 	bl	800285c <HAL_GPIO_Init>
}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40010000 	.word	0x40010000
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40000800 	.word	0x40000800
 80014ec:	40020c00 	.word	0x40020c00
 80014f0:	40014000 	.word	0x40014000

080014f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08e      	sub	sp, #56	; 0x38
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a4b      	ldr	r2, [pc, #300]	; (8001640 <HAL_UART_MspInit+0x14c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d12c      	bne.n	8001570 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
 800151a:	4b4a      	ldr	r3, [pc, #296]	; (8001644 <HAL_UART_MspInit+0x150>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a49      	ldr	r2, [pc, #292]	; (8001644 <HAL_UART_MspInit+0x150>)
 8001520:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b47      	ldr	r3, [pc, #284]	; (8001644 <HAL_UART_MspInit+0x150>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800152e:	623b      	str	r3, [r7, #32]
 8001530:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
 8001536:	4b43      	ldr	r3, [pc, #268]	; (8001644 <HAL_UART_MspInit+0x150>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a42      	ldr	r2, [pc, #264]	; (8001644 <HAL_UART_MspInit+0x150>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b40      	ldr	r3, [pc, #256]	; (8001644 <HAL_UART_MspInit+0x150>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX2_Pin|RX2_Pin;
 800154e:	2303      	movs	r3, #3
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800155e:	2308      	movs	r3, #8
 8001560:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001566:	4619      	mov	r1, r3
 8001568:	4837      	ldr	r0, [pc, #220]	; (8001648 <HAL_UART_MspInit+0x154>)
 800156a:	f001 f977 	bl	800285c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800156e:	e063      	b.n	8001638 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a35      	ldr	r2, [pc, #212]	; (800164c <HAL_UART_MspInit+0x158>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d12d      	bne.n	80015d6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART1_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
 800157e:	4b31      	ldr	r3, [pc, #196]	; (8001644 <HAL_UART_MspInit+0x150>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	4a30      	ldr	r2, [pc, #192]	; (8001644 <HAL_UART_MspInit+0x150>)
 8001584:	f043 0310 	orr.w	r3, r3, #16
 8001588:	6453      	str	r3, [r2, #68]	; 0x44
 800158a:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <HAL_UART_MspInit+0x150>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f003 0310 	and.w	r3, r3, #16
 8001592:	61bb      	str	r3, [r7, #24]
 8001594:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <HAL_UART_MspInit+0x150>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a29      	ldr	r2, [pc, #164]	; (8001644 <HAL_UART_MspInit+0x150>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b27      	ldr	r3, [pc, #156]	; (8001644 <HAL_UART_MspInit+0x150>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 80015b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015c4:	2307      	movs	r3, #7
 80015c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015cc:	4619      	mov	r1, r3
 80015ce:	481e      	ldr	r0, [pc, #120]	; (8001648 <HAL_UART_MspInit+0x154>)
 80015d0:	f001 f944 	bl	800285c <HAL_GPIO_Init>
}
 80015d4:	e030      	b.n	8001638 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART2)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a1d      	ldr	r2, [pc, #116]	; (8001650 <HAL_UART_MspInit+0x15c>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d12b      	bne.n	8001638 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e0:	2300      	movs	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <HAL_UART_MspInit+0x150>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	4a16      	ldr	r2, [pc, #88]	; (8001644 <HAL_UART_MspInit+0x150>)
 80015ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ee:	6413      	str	r3, [r2, #64]	; 0x40
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <HAL_UART_MspInit+0x150>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	4b10      	ldr	r3, [pc, #64]	; (8001644 <HAL_UART_MspInit+0x150>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	4a0f      	ldr	r2, [pc, #60]	; (8001644 <HAL_UART_MspInit+0x150>)
 8001606:	f043 0308 	orr.w	r3, r3, #8
 800160a:	6313      	str	r3, [r2, #48]	; 0x30
 800160c:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <HAL_UART_MspInit+0x150>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001618:	2360      	movs	r3, #96	; 0x60
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001628:	2307      	movs	r3, #7
 800162a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	4619      	mov	r1, r3
 8001632:	4808      	ldr	r0, [pc, #32]	; (8001654 <HAL_UART_MspInit+0x160>)
 8001634:	f001 f912 	bl	800285c <HAL_GPIO_Init>
}
 8001638:	bf00      	nop
 800163a:	3738      	adds	r7, #56	; 0x38
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40004c00 	.word	0x40004c00
 8001644:	40023800 	.word	0x40023800
 8001648:	40020000 	.word	0x40020000
 800164c:	40011000 	.word	0x40011000
 8001650:	40004400 	.word	0x40004400
 8001654:	40020c00 	.word	0x40020c00

08001658 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b0a0      	sub	sp, #128	; 0x80
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	225c      	movs	r2, #92	; 0x5c
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f00c fc5f 	bl	800df3c <memset>
  if(hpcd->Instance==USB_OTG_HS)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a21      	ldr	r2, [pc, #132]	; (8001708 <HAL_PCD_MspInit+0xb0>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d13b      	bne.n	8001700 <HAL_PCD_MspInit+0xa8>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800168e:	2300      	movs	r3, #0
 8001690:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001692:	f107 0310 	add.w	r3, r7, #16
 8001696:	4618      	mov	r0, r3
 8001698:	f003 ff58 	bl	800554c <HAL_RCCEx_PeriphCLKConfig>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80016a2:	f7ff fc49 	bl	8000f38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_PCD_MspInit+0xb4>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a17      	ldr	r2, [pc, #92]	; (800170c <HAL_PCD_MspInit+0xb4>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <HAL_PCD_MspInit+0xb4>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80016c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80016c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80016d4:	230c      	movs	r3, #12
 80016d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016dc:	4619      	mov	r1, r3
 80016de:	480c      	ldr	r0, [pc, #48]	; (8001710 <HAL_PCD_MspInit+0xb8>)
 80016e0:	f001 f8bc 	bl	800285c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <HAL_PCD_MspInit+0xb4>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	4a07      	ldr	r2, [pc, #28]	; (800170c <HAL_PCD_MspInit+0xb4>)
 80016ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016f2:	6313      	str	r3, [r2, #48]	; 0x30
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <HAL_PCD_MspInit+0xb4>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8001700:	bf00      	nop
 8001702:	3780      	adds	r7, #128	; 0x80
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40040000 	.word	0x40040000
 800170c:	40023800 	.word	0x40023800
 8001710:	40020400 	.word	0x40020400

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001718:	e7fe      	b.n	8001718 <NMI_Handler+0x4>

0800171a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <MemManage_Handler+0x4>

08001726 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <UsageFault_Handler+0x4>

08001732 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001760:	f000 f8d0 	bl	8001904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <OTG_FS_IRQHandler+0x10>)
 800176e:	f001 fd1b 	bl	80031a8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000cf8 	.word	0x20000cf8

0800177c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001784:	4a14      	ldr	r2, [pc, #80]	; (80017d8 <_sbrk+0x5c>)
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <_sbrk+0x60>)
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d102      	bne.n	800179e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <_sbrk+0x64>)
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <_sbrk+0x68>)
 800179c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d207      	bcs.n	80017bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017ac:	f00c fbde 	bl	800df6c <__errno>
 80017b0:	4603      	mov	r3, r0
 80017b2:	220c      	movs	r2, #12
 80017b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ba:	e009      	b.n	80017d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <_sbrk+0x64>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c2:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <_sbrk+0x64>)
 80017cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ce:	68fb      	ldr	r3, [r7, #12]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20020000 	.word	0x20020000
 80017dc:	00000800 	.word	0x00000800
 80017e0:	200008e0 	.word	0x200008e0
 80017e4:	20001228 	.word	0x20001228

080017e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <SystemInit+0x20>)
 80017ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f2:	4a05      	ldr	r2, [pc, #20]	; (8001808 <SystemInit+0x20>)
 80017f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800180c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001844 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001810:	f7ff ffea 	bl	80017e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001814:	480c      	ldr	r0, [pc, #48]	; (8001848 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001816:	490d      	ldr	r1, [pc, #52]	; (800184c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001818:	4a0d      	ldr	r2, [pc, #52]	; (8001850 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800181c:	e002      	b.n	8001824 <LoopCopyDataInit>

0800181e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001822:	3304      	adds	r3, #4

08001824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001828:	d3f9      	bcc.n	800181e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182a:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800182c:	4c0a      	ldr	r4, [pc, #40]	; (8001858 <LoopFillZerobss+0x22>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001830:	e001      	b.n	8001836 <LoopFillZerobss>

08001832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001834:	3204      	adds	r2, #4

08001836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001838:	d3fb      	bcc.n	8001832 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800183a:	f00c fb9d 	bl	800df78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800183e:	f7fe fe5f 	bl	8000500 <main>
  bx  lr    
 8001842:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001844:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800184c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001850:	0800e104 	.word	0x0800e104
  ldr r2, =_sbss
 8001854:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001858:	20001228 	.word	0x20001228

0800185c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800185c:	e7fe      	b.n	800185c <ADC_IRQHandler>
	...

08001860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <HAL_Init+0x40>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0d      	ldr	r2, [pc, #52]	; (80018a0 <HAL_Init+0x40>)
 800186a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800186e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_Init+0x40>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <HAL_Init+0x40>)
 8001876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800187a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <HAL_Init+0x40>)
 8001882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001886:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001888:	2003      	movs	r0, #3
 800188a:	f000 fbc1 	bl	8002010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800188e:	200f      	movs	r0, #15
 8001890:	f000 f808 	bl	80018a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001894:	f7ff fb56 	bl	8000f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023c00 	.word	0x40023c00

080018a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_InitTick+0x54>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_InitTick+0x58>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	4619      	mov	r1, r3
 80018b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80018be:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 fbd9 	bl	800207a <HAL_SYSTICK_Config>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00e      	b.n	80018f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b0f      	cmp	r3, #15
 80018d6:	d80a      	bhi.n	80018ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d8:	2200      	movs	r2, #0
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f000 fba1 	bl	8002026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e4:	4a06      	ldr	r2, [pc, #24]	; (8001900 <HAL_InitTick+0x5c>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	e000      	b.n	80018f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000008 	.word	0x20000008
 8001900:	20000004 	.word	0x20000004

08001904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_IncTick+0x20>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_IncTick+0x24>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4413      	add	r3, r2
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <HAL_IncTick+0x24>)
 8001916:	6013      	str	r3, [r2, #0]
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000008 	.word	0x20000008
 8001928:	200008e4 	.word	0x200008e4

0800192c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return uwTick;
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <HAL_GetTick+0x14>)
 8001932:	681b      	ldr	r3, [r3, #0]
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	200008e4 	.word	0x200008e4

08001944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800194c:	f7ff ffee 	bl	800192c <HAL_GetTick>
 8001950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195c:	d005      	beq.n	800196a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <HAL_Delay+0x44>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4413      	add	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800196a:	bf00      	nop
 800196c:	f7ff ffde 	bl	800192c <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	429a      	cmp	r2, r3
 800197a:	d8f7      	bhi.n	800196c <HAL_Delay+0x28>
  {
  }
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000008 	.word	0x20000008

0800198c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e033      	b.n	8001a0a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d109      	bne.n	80019be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff faf2 	bl	8000f94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f003 0310 	and.w	r3, r3, #16
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d118      	bne.n	80019fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019d2:	f023 0302 	bic.w	r3, r3, #2
 80019d6:	f043 0202 	orr.w	r2, r3, #2
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f94a 	bl	8001c78 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f023 0303 	bic.w	r3, r3, #3
 80019f2:	f043 0201 	orr.w	r2, r3, #1
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	641a      	str	r2, [r3, #64]	; 0x40
 80019fa:	e001      	b.n	8001a00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x1c>
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	e113      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x244>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b09      	cmp	r3, #9
 8001a3e:	d925      	bls.n	8001a8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68d9      	ldr	r1, [r3, #12]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	3b1e      	subs	r3, #30
 8001a56:	2207      	movs	r2, #7
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43da      	mvns	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	400a      	ands	r2, r1
 8001a64:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68d9      	ldr	r1, [r3, #12]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	4618      	mov	r0, r3
 8001a78:	4603      	mov	r3, r0
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4403      	add	r3, r0
 8001a7e:	3b1e      	subs	r3, #30
 8001a80:	409a      	lsls	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	e022      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6919      	ldr	r1, [r3, #16]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	2207      	movs	r2, #7
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	400a      	ands	r2, r1
 8001aae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6919      	ldr	r1, [r3, #16]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4403      	add	r3, r0
 8001ac8:	409a      	lsls	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d824      	bhi.n	8001b24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	3b05      	subs	r3, #5
 8001aec:	221f      	movs	r2, #31
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	400a      	ands	r2, r1
 8001afa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	4618      	mov	r0, r3
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	3b05      	subs	r3, #5
 8001b16:	fa00 f203 	lsl.w	r2, r0, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	635a      	str	r2, [r3, #52]	; 0x34
 8001b22:	e04c      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b0c      	cmp	r3, #12
 8001b2a:	d824      	bhi.n	8001b76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3b23      	subs	r3, #35	; 0x23
 8001b3e:	221f      	movs	r2, #31
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43da      	mvns	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	400a      	ands	r2, r1
 8001b4c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	3b23      	subs	r3, #35	; 0x23
 8001b68:	fa00 f203 	lsl.w	r2, r0, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	631a      	str	r2, [r3, #48]	; 0x30
 8001b74:	e023      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	3b41      	subs	r3, #65	; 0x41
 8001b88:	221f      	movs	r2, #31
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	400a      	ands	r2, r1
 8001b96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	4613      	mov	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	3b41      	subs	r3, #65	; 0x41
 8001bb2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bbe:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <HAL_ADC_ConfigChannel+0x250>)
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a28      	ldr	r2, [pc, #160]	; (8001c68 <HAL_ADC_ConfigChannel+0x254>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d10f      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x1d8>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b12      	cmp	r3, #18
 8001bd2:	d10b      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1d      	ldr	r2, [pc, #116]	; (8001c68 <HAL_ADC_ConfigChannel+0x254>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d12b      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x23a>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a1c      	ldr	r2, [pc, #112]	; (8001c6c <HAL_ADC_ConfigChannel+0x258>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d003      	beq.n	8001c08 <HAL_ADC_ConfigChannel+0x1f4>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b11      	cmp	r3, #17
 8001c06:	d122      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a11      	ldr	r2, [pc, #68]	; (8001c6c <HAL_ADC_ConfigChannel+0x258>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d111      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <HAL_ADC_ConfigChannel+0x25c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a11      	ldr	r2, [pc, #68]	; (8001c74 <HAL_ADC_ConfigChannel+0x260>)
 8001c30:	fba2 2303 	umull	r2, r3, r2, r3
 8001c34:	0c9a      	lsrs	r2, r3, #18
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c40:	e002      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f9      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	40012300 	.word	0x40012300
 8001c68:	40012000 	.word	0x40012000
 8001c6c:	10000012 	.word	0x10000012
 8001c70:	20000000 	.word	0x20000000
 8001c74:	431bde83 	.word	0x431bde83

08001c78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c80:	4b79      	ldr	r3, [pc, #484]	; (8001e68 <ADC_Init+0x1f0>)
 8001c82:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6859      	ldr	r1, [r3, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	021a      	lsls	r2, r3, #8
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001cd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6859      	ldr	r1, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6899      	ldr	r1, [r3, #8]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	4a58      	ldr	r2, [pc, #352]	; (8001e6c <ADC_Init+0x1f4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d022      	beq.n	8001d56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6899      	ldr	r1, [r3, #8]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6899      	ldr	r1, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	e00f      	b.n	8001d76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d74:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0202 	bic.w	r2, r2, #2
 8001d84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6899      	ldr	r1, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7e1b      	ldrb	r3, [r3, #24]
 8001d90:	005a      	lsls	r2, r3, #1
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d01b      	beq.n	8001ddc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001db2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001dc2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6859      	ldr	r1, [r3, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	035a      	lsls	r2, r3, #13
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	e007      	b.n	8001dec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dea:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	051a      	lsls	r2, r3, #20
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6899      	ldr	r1, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e2e:	025a      	lsls	r2, r3, #9
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6899      	ldr	r1, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	029a      	lsls	r2, r3, #10
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	609a      	str	r2, [r3, #8]
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	40012300 	.word	0x40012300
 8001e6c:	0f000001 	.word	0x0f000001

08001e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea2:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	60d3      	str	r3, [r2, #12]
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ebc:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	0a1b      	lsrs	r3, r3, #8
 8001ec2:	f003 0307 	and.w	r3, r3, #7
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	db0b      	blt.n	8001efe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	f003 021f 	and.w	r2, r3, #31
 8001eec:	4907      	ldr	r1, [pc, #28]	; (8001f0c <__NVIC_EnableIRQ+0x38>)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	095b      	lsrs	r3, r3, #5
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8001efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000e100 	.word	0xe000e100

08001f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	6039      	str	r1, [r7, #0]
 8001f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	db0a      	blt.n	8001f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	490c      	ldr	r1, [pc, #48]	; (8001f5c <__NVIC_SetPriority+0x4c>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	0112      	lsls	r2, r2, #4
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	440b      	add	r3, r1
 8001f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f38:	e00a      	b.n	8001f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4908      	ldr	r1, [pc, #32]	; (8001f60 <__NVIC_SetPriority+0x50>)
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	3b04      	subs	r3, #4
 8001f48:	0112      	lsls	r2, r2, #4
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	761a      	strb	r2, [r3, #24]
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000e100 	.word	0xe000e100
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b089      	sub	sp, #36	; 0x24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f1c3 0307 	rsb	r3, r3, #7
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	bf28      	it	cs
 8001f82:	2304      	movcs	r3, #4
 8001f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	2b06      	cmp	r3, #6
 8001f8c:	d902      	bls.n	8001f94 <NVIC_EncodePriority+0x30>
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3b03      	subs	r3, #3
 8001f92:	e000      	b.n	8001f96 <NVIC_EncodePriority+0x32>
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	f04f 32ff 	mov.w	r2, #4294967295
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fac:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	43d9      	mvns	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	4313      	orrs	r3, r2
         );
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3724      	adds	r7, #36	; 0x24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fdc:	d301      	bcc.n	8001fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e00f      	b.n	8002002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	; (800200c <SysTick_Config+0x40>)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fea:	210f      	movs	r1, #15
 8001fec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff0:	f7ff ff8e 	bl	8001f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <SysTick_Config+0x40>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ffa:	4b04      	ldr	r3, [pc, #16]	; (800200c <SysTick_Config+0x40>)
 8001ffc:	2207      	movs	r2, #7
 8001ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	e000e010 	.word	0xe000e010

08002010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ff29 	bl	8001e70 <__NVIC_SetPriorityGrouping>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002026:	b580      	push	{r7, lr}
 8002028:	b086      	sub	sp, #24
 800202a:	af00      	add	r7, sp, #0
 800202c:	4603      	mov	r3, r0
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
 8002032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002038:	f7ff ff3e 	bl	8001eb8 <__NVIC_GetPriorityGrouping>
 800203c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68b9      	ldr	r1, [r7, #8]
 8002042:	6978      	ldr	r0, [r7, #20]
 8002044:	f7ff ff8e 	bl	8001f64 <NVIC_EncodePriority>
 8002048:	4602      	mov	r2, r0
 800204a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff5d 	bl	8001f10 <__NVIC_SetPriority>
}
 8002056:	bf00      	nop
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	4603      	mov	r3, r0
 8002066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff31 	bl	8001ed4 <__NVIC_EnableIRQ>
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff ffa2 	bl	8001fcc <SysTick_Config>
 8002088:	4603      	mov	r3, r0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e014      	b.n	80020ce <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	791b      	ldrb	r3, [r3, #4]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d105      	bne.n	80020ba <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7fe ffb1 	bl	800101c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2202      	movs	r2, #2
 80020be:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e046      	b.n	8002178 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	795b      	ldrb	r3, [r3, #5]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_DAC_Start+0x20>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e040      	b.n	8002178 <HAL_DAC_Start+0xa2>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6819      	ldr	r1, [r3, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	f003 0310 	and.w	r3, r3, #16
 800210e:	2201      	movs	r2, #1
 8002110:	409a      	lsls	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10f      	bne.n	8002140 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800212a:	2b3c      	cmp	r3, #60	; 0x3c
 800212c:	d11d      	bne.n	800216a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	e014      	b.n	800216a <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	f003 0310 	and.w	r3, r3, #16
 8002150:	213c      	movs	r1, #60	; 0x3c
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	429a      	cmp	r2, r3
 8002158:	d107      	bne.n	800216a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f042 0202 	orr.w	r2, r2, #2
 8002168:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002184:	b480      	push	{r7}
 8002186:	b087      	sub	sp, #28
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
 8002190:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e015      	b.n	80021cc <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d105      	bne.n	80021b8 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	3308      	adds	r3, #8
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	e004      	b.n	80021c2 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	3314      	adds	r3, #20
 80021c0:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	461a      	mov	r2, r3
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	371c      	adds	r7, #28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80021d8:	b480      	push	{r7}
 80021da:	b089      	sub	sp, #36	; 0x24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <HAL_DAC_ConfigChannel+0x1c>
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e042      	b.n	800227e <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	795b      	ldrb	r3, [r3, #5]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_DAC_ConfigChannel+0x2c>
 8002200:	2302      	movs	r3, #2
 8002202:	e03c      	b.n	800227e <HAL_DAC_ConfigChannel+0xa6>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2201      	movs	r2, #1
 8002208:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2202      	movs	r2, #2
 800220e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	4313      	orrs	r3, r2
 8002238:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f003 0310 	and.w	r3, r3, #16
 8002260:	22c0      	movs	r2, #192	; 0xc0
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43da      	mvns	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	400a      	ands	r2, r1
 800226e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2201      	movs	r2, #1
 8002274:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800227c:	7ffb      	ldrb	r3, [r7, #31]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3724      	adds	r7, #36	; 0x24
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800229e:	4b23      	ldr	r3, [pc, #140]	; (800232c <HAL_FLASH_Program+0xa0>)
 80022a0:	7e1b      	ldrb	r3, [r3, #24]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_FLASH_Program+0x1e>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e03b      	b.n	8002322 <HAL_FLASH_Program+0x96>
 80022aa:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_FLASH_Program+0xa0>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022b4:	f000 f870 	bl	8002398 <FLASH_WaitForLastOperation>
 80022b8:	4603      	mov	r3, r0
 80022ba:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80022bc:	7dfb      	ldrb	r3, [r7, #23]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d12b      	bne.n	800231a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d105      	bne.n	80022d4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80022c8:	783b      	ldrb	r3, [r7, #0]
 80022ca:	4619      	mov	r1, r3
 80022cc:	68b8      	ldr	r0, [r7, #8]
 80022ce:	f000 f91b 	bl	8002508 <FLASH_Program_Byte>
 80022d2:	e016      	b.n	8002302 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d105      	bne.n	80022e6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80022da:	883b      	ldrh	r3, [r7, #0]
 80022dc:	4619      	mov	r1, r3
 80022de:	68b8      	ldr	r0, [r7, #8]
 80022e0:	f000 f8ee 	bl	80024c0 <FLASH_Program_HalfWord>
 80022e4:	e00d      	b.n	8002302 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d105      	bne.n	80022f8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	4619      	mov	r1, r3
 80022f0:	68b8      	ldr	r0, [r7, #8]
 80022f2:	f000 f8c3 	bl	800247c <FLASH_Program_Word>
 80022f6:	e004      	b.n	8002302 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80022f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022fc:	68b8      	ldr	r0, [r7, #8]
 80022fe:	f000 f88b 	bl	8002418 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002302:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002306:	f000 f847 	bl	8002398 <FLASH_WaitForLastOperation>
 800230a:	4603      	mov	r3, r0
 800230c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <HAL_FLASH_Program+0xa4>)
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	4a07      	ldr	r2, [pc, #28]	; (8002330 <HAL_FLASH_Program+0xa4>)
 8002314:	f023 0301 	bic.w	r3, r3, #1
 8002318:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800231a:	4b04      	ldr	r3, [pc, #16]	; (800232c <HAL_FLASH_Program+0xa0>)
 800231c:	2200      	movs	r2, #0
 800231e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002320:	7dfb      	ldrb	r3, [r7, #23]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200008e8 	.word	0x200008e8
 8002330:	40023c00 	.word	0x40023c00

08002334 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800233e:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_FLASH_Unlock+0x38>)
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b00      	cmp	r3, #0
 8002344:	da0b      	bge.n	800235e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_FLASH_Unlock+0x38>)
 8002348:	4a09      	ldr	r2, [pc, #36]	; (8002370 <HAL_FLASH_Unlock+0x3c>)
 800234a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800234c:	4b07      	ldr	r3, [pc, #28]	; (800236c <HAL_FLASH_Unlock+0x38>)
 800234e:	4a09      	ldr	r2, [pc, #36]	; (8002374 <HAL_FLASH_Unlock+0x40>)
 8002350:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_FLASH_Unlock+0x38>)
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	2b00      	cmp	r3, #0
 8002358:	da01      	bge.n	800235e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800235e:	79fb      	ldrb	r3, [r7, #7]
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	40023c00 	.word	0x40023c00
 8002370:	45670123 	.word	0x45670123
 8002374:	cdef89ab 	.word	0xcdef89ab

08002378 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_FLASH_Lock+0x1c>)
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	4a04      	ldr	r2, [pc, #16]	; (8002394 <HAL_FLASH_Lock+0x1c>)
 8002382:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002386:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	40023c00 	.word	0x40023c00

08002398 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023a4:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <FLASH_WaitForLastOperation+0x78>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80023aa:	f7ff fabf 	bl	800192c <HAL_GetTick>
 80023ae:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80023b0:	e010      	b.n	80023d4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b8:	d00c      	beq.n	80023d4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d007      	beq.n	80023d0 <FLASH_WaitForLastOperation+0x38>
 80023c0:	f7ff fab4 	bl	800192c <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d201      	bcs.n	80023d4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e019      	b.n	8002408 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <FLASH_WaitForLastOperation+0x7c>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1e8      	bne.n	80023b2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80023e0:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <FLASH_WaitForLastOperation+0x7c>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <FLASH_WaitForLastOperation+0x7c>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80023f2:	4b08      	ldr	r3, [pc, #32]	; (8002414 <FLASH_WaitForLastOperation+0x7c>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80023fe:	f000 f8a5 	bl	800254c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002406:	2300      	movs	r3, #0
  
}  
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	200008e8 	.word	0x200008e8
 8002414:	40023c00 	.word	0x40023c00

08002418 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002424:	4b14      	ldr	r3, [pc, #80]	; (8002478 <FLASH_Program_DoubleWord+0x60>)
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	4a13      	ldr	r2, [pc, #76]	; (8002478 <FLASH_Program_DoubleWord+0x60>)
 800242a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800242e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <FLASH_Program_DoubleWord+0x60>)
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	4a10      	ldr	r2, [pc, #64]	; (8002478 <FLASH_Program_DoubleWord+0x60>)
 8002436:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800243a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800243c:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <FLASH_Program_DoubleWord+0x60>)
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	4a0d      	ldr	r2, [pc, #52]	; (8002478 <FLASH_Program_DoubleWord+0x60>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800244e:	f3bf 8f6f 	isb	sy
}
 8002452:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002454:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	000a      	movs	r2, r1
 8002462:	2300      	movs	r3, #0
 8002464:	68f9      	ldr	r1, [r7, #12]
 8002466:	3104      	adds	r1, #4
 8002468:	4613      	mov	r3, r2
 800246a:	600b      	str	r3, [r1, #0]
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40023c00 	.word	0x40023c00

0800247c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002486:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <FLASH_Program_Word+0x40>)
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	4a0c      	ldr	r2, [pc, #48]	; (80024bc <FLASH_Program_Word+0x40>)
 800248c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002490:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <FLASH_Program_Word+0x40>)
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	4a09      	ldr	r2, [pc, #36]	; (80024bc <FLASH_Program_Word+0x40>)
 8002498:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800249c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800249e:	4b07      	ldr	r3, [pc, #28]	; (80024bc <FLASH_Program_Word+0x40>)
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	4a06      	ldr	r2, [pc, #24]	; (80024bc <FLASH_Program_Word+0x40>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	601a      	str	r2, [r3, #0]
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	40023c00 	.word	0x40023c00

080024c0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80024cc:	4b0d      	ldr	r3, [pc, #52]	; (8002504 <FLASH_Program_HalfWord+0x44>)
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	4a0c      	ldr	r2, [pc, #48]	; (8002504 <FLASH_Program_HalfWord+0x44>)
 80024d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80024d8:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <FLASH_Program_HalfWord+0x44>)
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	4a09      	ldr	r2, [pc, #36]	; (8002504 <FLASH_Program_HalfWord+0x44>)
 80024de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80024e4:	4b07      	ldr	r3, [pc, #28]	; (8002504 <FLASH_Program_HalfWord+0x44>)
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	4a06      	ldr	r2, [pc, #24]	; (8002504 <FLASH_Program_HalfWord+0x44>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	887a      	ldrh	r2, [r7, #2]
 80024f4:	801a      	strh	r2, [r3, #0]
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40023c00 	.word	0x40023c00

08002508 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002514:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <FLASH_Program_Byte+0x40>)
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	4a0b      	ldr	r2, [pc, #44]	; (8002548 <FLASH_Program_Byte+0x40>)
 800251a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800251e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002520:	4b09      	ldr	r3, [pc, #36]	; (8002548 <FLASH_Program_Byte+0x40>)
 8002522:	4a09      	ldr	r2, [pc, #36]	; (8002548 <FLASH_Program_Byte+0x40>)
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002528:	4b07      	ldr	r3, [pc, #28]	; (8002548 <FLASH_Program_Byte+0x40>)
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	4a06      	ldr	r2, [pc, #24]	; (8002548 <FLASH_Program_Byte+0x40>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	78fa      	ldrb	r2, [r7, #3]
 8002538:	701a      	strb	r2, [r3, #0]
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40023c00 	.word	0x40023c00

0800254c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002550:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <FLASH_SetErrorCode+0xc4>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800255c:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <FLASH_SetErrorCode+0xc8>)
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	f043 0310 	orr.w	r3, r3, #16
 8002564:	4a2b      	ldr	r2, [pc, #172]	; (8002614 <FLASH_SetErrorCode+0xc8>)
 8002566:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002568:	4b29      	ldr	r3, [pc, #164]	; (8002610 <FLASH_SetErrorCode+0xc4>)
 800256a:	2210      	movs	r2, #16
 800256c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800256e:	4b28      	ldr	r3, [pc, #160]	; (8002610 <FLASH_SetErrorCode+0xc4>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f003 0320 	and.w	r3, r3, #32
 8002576:	2b00      	cmp	r3, #0
 8002578:	d008      	beq.n	800258c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800257a:	4b26      	ldr	r3, [pc, #152]	; (8002614 <FLASH_SetErrorCode+0xc8>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f043 0308 	orr.w	r3, r3, #8
 8002582:	4a24      	ldr	r2, [pc, #144]	; (8002614 <FLASH_SetErrorCode+0xc8>)
 8002584:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002586:	4b22      	ldr	r3, [pc, #136]	; (8002610 <FLASH_SetErrorCode+0xc4>)
 8002588:	2220      	movs	r2, #32
 800258a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800258c:	4b20      	ldr	r3, [pc, #128]	; (8002610 <FLASH_SetErrorCode+0xc4>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002594:	2b00      	cmp	r3, #0
 8002596:	d008      	beq.n	80025aa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002598:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <FLASH_SetErrorCode+0xc8>)
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	f043 0304 	orr.w	r3, r3, #4
 80025a0:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <FLASH_SetErrorCode+0xc8>)
 80025a2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80025a4:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <FLASH_SetErrorCode+0xc4>)
 80025a6:	2240      	movs	r2, #64	; 0x40
 80025a8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80025aa:	4b19      	ldr	r3, [pc, #100]	; (8002610 <FLASH_SetErrorCode+0xc4>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d008      	beq.n	80025c8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80025b6:	4b17      	ldr	r3, [pc, #92]	; (8002614 <FLASH_SetErrorCode+0xc8>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f043 0302 	orr.w	r3, r3, #2
 80025be:	4a15      	ldr	r2, [pc, #84]	; (8002614 <FLASH_SetErrorCode+0xc8>)
 80025c0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80025c2:	4b13      	ldr	r3, [pc, #76]	; (8002610 <FLASH_SetErrorCode+0xc4>)
 80025c4:	2280      	movs	r2, #128	; 0x80
 80025c6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <FLASH_SetErrorCode+0xc4>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d009      	beq.n	80025e8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <FLASH_SetErrorCode+0xc8>)
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	4a0d      	ldr	r2, [pc, #52]	; (8002614 <FLASH_SetErrorCode+0xc8>)
 80025de:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <FLASH_SetErrorCode+0xc4>)
 80025e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025e6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80025e8:	4b09      	ldr	r3, [pc, #36]	; (8002610 <FLASH_SetErrorCode+0xc4>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80025f4:	4b07      	ldr	r3, [pc, #28]	; (8002614 <FLASH_SetErrorCode+0xc8>)
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	f043 0320 	orr.w	r3, r3, #32
 80025fc:	4a05      	ldr	r2, [pc, #20]	; (8002614 <FLASH_SetErrorCode+0xc8>)
 80025fe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <FLASH_SetErrorCode+0xc4>)
 8002602:	2202      	movs	r2, #2
 8002604:	60da      	str	r2, [r3, #12]
  }
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	40023c00 	.word	0x40023c00
 8002614:	200008e8 	.word	0x200008e8

08002618 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800262a:	4b31      	ldr	r3, [pc, #196]	; (80026f0 <HAL_FLASHEx_Erase+0xd8>)
 800262c:	7e1b      	ldrb	r3, [r3, #24]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_FLASHEx_Erase+0x1e>
 8002632:	2302      	movs	r3, #2
 8002634:	e058      	b.n	80026e8 <HAL_FLASHEx_Erase+0xd0>
 8002636:	4b2e      	ldr	r3, [pc, #184]	; (80026f0 <HAL_FLASHEx_Erase+0xd8>)
 8002638:	2201      	movs	r2, #1
 800263a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800263c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002640:	f7ff feaa 	bl	8002398 <FLASH_WaitForLastOperation>
 8002644:	4603      	mov	r3, r0
 8002646:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d148      	bne.n	80026e0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	f04f 32ff 	mov.w	r2, #4294967295
 8002654:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d115      	bne.n	800268a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	b2da      	uxtb	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4619      	mov	r1, r3
 800266a:	4610      	mov	r0, r2
 800266c:	f000 f844 	bl	80026f8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002670:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002674:	f7ff fe90 	bl	8002398 <FLASH_WaitForLastOperation>
 8002678:	4603      	mov	r3, r0
 800267a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800267c:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <HAL_FLASHEx_Erase+0xdc>)
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	4a1c      	ldr	r2, [pc, #112]	; (80026f4 <HAL_FLASHEx_Erase+0xdc>)
 8002682:	f023 0304 	bic.w	r3, r3, #4
 8002686:	6113      	str	r3, [r2, #16]
 8002688:	e028      	b.n	80026dc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	e01c      	b.n	80026cc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	4619      	mov	r1, r3
 800269a:	68b8      	ldr	r0, [r7, #8]
 800269c:	f000 f850 	bl	8002740 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026a4:	f7ff fe78 	bl	8002398 <FLASH_WaitForLastOperation>
 80026a8:	4603      	mov	r3, r0
 80026aa:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80026ac:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <HAL_FLASHEx_Erase+0xdc>)
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	4a10      	ldr	r2, [pc, #64]	; (80026f4 <HAL_FLASHEx_Erase+0xdc>)
 80026b2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80026b6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	601a      	str	r2, [r3, #0]
          break;
 80026c4:	e00a      	b.n	80026dc <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	3301      	adds	r3, #1
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	4413      	add	r3, r2
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d3da      	bcc.n	8002692 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80026dc:	f000 f878 	bl	80027d0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <HAL_FLASHEx_Erase+0xd8>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	761a      	strb	r2, [r3, #24]

  return status;
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	200008e8 	.word	0x200008e8
 80026f4:	40023c00 	.word	0x40023c00

080026f8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	6039      	str	r1, [r7, #0]
 8002702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002704:	4b0d      	ldr	r3, [pc, #52]	; (800273c <FLASH_MassErase+0x44>)
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	4a0c      	ldr	r2, [pc, #48]	; (800273c <FLASH_MassErase+0x44>)
 800270a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800270e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002710:	4b0a      	ldr	r3, [pc, #40]	; (800273c <FLASH_MassErase+0x44>)
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	4a09      	ldr	r2, [pc, #36]	; (800273c <FLASH_MassErase+0x44>)
 8002716:	f043 0304 	orr.w	r3, r3, #4
 800271a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <FLASH_MassErase+0x44>)
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	4313      	orrs	r3, r2
 8002726:	4a05      	ldr	r2, [pc, #20]	; (800273c <FLASH_MassErase+0x44>)
 8002728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272c:	6113      	str	r3, [r2, #16]
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40023c00 	.word	0x40023c00

08002740 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d102      	bne.n	800275c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	e010      	b.n	800277e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d103      	bne.n	800276a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	e009      	b.n	800277e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	2b02      	cmp	r3, #2
 800276e:	d103      	bne.n	8002778 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	e002      	b.n	800277e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002778:	f44f 7340 	mov.w	r3, #768	; 0x300
 800277c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800277e:	4b13      	ldr	r3, [pc, #76]	; (80027cc <FLASH_Erase_Sector+0x8c>)
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	4a12      	ldr	r2, [pc, #72]	; (80027cc <FLASH_Erase_Sector+0x8c>)
 8002784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002788:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <FLASH_Erase_Sector+0x8c>)
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	490f      	ldr	r1, [pc, #60]	; (80027cc <FLASH_Erase_Sector+0x8c>)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002796:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <FLASH_Erase_Sector+0x8c>)
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	4a0c      	ldr	r2, [pc, #48]	; (80027cc <FLASH_Erase_Sector+0x8c>)
 800279c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80027a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <FLASH_Erase_Sector+0x8c>)
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4313      	orrs	r3, r2
 80027ac:	4a07      	ldr	r2, [pc, #28]	; (80027cc <FLASH_Erase_Sector+0x8c>)
 80027ae:	f043 0302 	orr.w	r3, r3, #2
 80027b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <FLASH_Erase_Sector+0x8c>)
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	4a04      	ldr	r2, [pc, #16]	; (80027cc <FLASH_Erase_Sector+0x8c>)
 80027ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027be:	6113      	str	r3, [r2, #16]
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	40023c00 	.word	0x40023c00

080027d0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80027d4:	4b20      	ldr	r3, [pc, #128]	; (8002858 <FLASH_FlushCaches+0x88>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d017      	beq.n	8002810 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80027e0:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <FLASH_FlushCaches+0x88>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <FLASH_FlushCaches+0x88>)
 80027e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027ea:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80027ec:	4b1a      	ldr	r3, [pc, #104]	; (8002858 <FLASH_FlushCaches+0x88>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a19      	ldr	r2, [pc, #100]	; (8002858 <FLASH_FlushCaches+0x88>)
 80027f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	4b17      	ldr	r3, [pc, #92]	; (8002858 <FLASH_FlushCaches+0x88>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a16      	ldr	r2, [pc, #88]	; (8002858 <FLASH_FlushCaches+0x88>)
 80027fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002802:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002804:	4b14      	ldr	r3, [pc, #80]	; (8002858 <FLASH_FlushCaches+0x88>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a13      	ldr	r2, [pc, #76]	; (8002858 <FLASH_FlushCaches+0x88>)
 800280a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800280e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002810:	4b11      	ldr	r3, [pc, #68]	; (8002858 <FLASH_FlushCaches+0x88>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002818:	2b00      	cmp	r3, #0
 800281a:	d017      	beq.n	800284c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800281c:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <FLASH_FlushCaches+0x88>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0d      	ldr	r2, [pc, #52]	; (8002858 <FLASH_FlushCaches+0x88>)
 8002822:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002826:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <FLASH_FlushCaches+0x88>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <FLASH_FlushCaches+0x88>)
 800282e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	4b08      	ldr	r3, [pc, #32]	; (8002858 <FLASH_FlushCaches+0x88>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a07      	ldr	r2, [pc, #28]	; (8002858 <FLASH_FlushCaches+0x88>)
 800283a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800283e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <FLASH_FlushCaches+0x88>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a04      	ldr	r2, [pc, #16]	; (8002858 <FLASH_FlushCaches+0x88>)
 8002846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800284a:	6013      	str	r3, [r2, #0]
  }
}
 800284c:	bf00      	nop
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40023c00 	.word	0x40023c00

0800285c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	; 0x24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	e165      	b.n	8002b44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002878:	2201      	movs	r2, #1
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4013      	ands	r3, r2
 800288a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	429a      	cmp	r2, r3
 8002892:	f040 8154 	bne.w	8002b3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d005      	beq.n	80028ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d130      	bne.n	8002910 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	2203      	movs	r2, #3
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e4:	2201      	movs	r2, #1
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	091b      	lsrs	r3, r3, #4
 80028fa:	f003 0201 	and.w	r2, r3, #1
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	2b03      	cmp	r3, #3
 800291a:	d017      	beq.n	800294c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	2203      	movs	r2, #3
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d123      	bne.n	80029a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	08da      	lsrs	r2, r3, #3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3208      	adds	r2, #8
 8002960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002964:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	220f      	movs	r2, #15
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	08da      	lsrs	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3208      	adds	r2, #8
 800299a:	69b9      	ldr	r1, [r7, #24]
 800299c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	2203      	movs	r2, #3
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 0203 	and.w	r2, r3, #3
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80ae 	beq.w	8002b3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	4b5d      	ldr	r3, [pc, #372]	; (8002b5c <HAL_GPIO_Init+0x300>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	4a5c      	ldr	r2, [pc, #368]	; (8002b5c <HAL_GPIO_Init+0x300>)
 80029ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f0:	6453      	str	r3, [r2, #68]	; 0x44
 80029f2:	4b5a      	ldr	r3, [pc, #360]	; (8002b5c <HAL_GPIO_Init+0x300>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029fe:	4a58      	ldr	r2, [pc, #352]	; (8002b60 <HAL_GPIO_Init+0x304>)
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	089b      	lsrs	r3, r3, #2
 8002a04:	3302      	adds	r3, #2
 8002a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	220f      	movs	r2, #15
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a4f      	ldr	r2, [pc, #316]	; (8002b64 <HAL_GPIO_Init+0x308>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d025      	beq.n	8002a76 <HAL_GPIO_Init+0x21a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a4e      	ldr	r2, [pc, #312]	; (8002b68 <HAL_GPIO_Init+0x30c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d01f      	beq.n	8002a72 <HAL_GPIO_Init+0x216>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a4d      	ldr	r2, [pc, #308]	; (8002b6c <HAL_GPIO_Init+0x310>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d019      	beq.n	8002a6e <HAL_GPIO_Init+0x212>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a4c      	ldr	r2, [pc, #304]	; (8002b70 <HAL_GPIO_Init+0x314>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d013      	beq.n	8002a6a <HAL_GPIO_Init+0x20e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a4b      	ldr	r2, [pc, #300]	; (8002b74 <HAL_GPIO_Init+0x318>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d00d      	beq.n	8002a66 <HAL_GPIO_Init+0x20a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a4a      	ldr	r2, [pc, #296]	; (8002b78 <HAL_GPIO_Init+0x31c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d007      	beq.n	8002a62 <HAL_GPIO_Init+0x206>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a49      	ldr	r2, [pc, #292]	; (8002b7c <HAL_GPIO_Init+0x320>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d101      	bne.n	8002a5e <HAL_GPIO_Init+0x202>
 8002a5a:	2306      	movs	r3, #6
 8002a5c:	e00c      	b.n	8002a78 <HAL_GPIO_Init+0x21c>
 8002a5e:	2307      	movs	r3, #7
 8002a60:	e00a      	b.n	8002a78 <HAL_GPIO_Init+0x21c>
 8002a62:	2305      	movs	r3, #5
 8002a64:	e008      	b.n	8002a78 <HAL_GPIO_Init+0x21c>
 8002a66:	2304      	movs	r3, #4
 8002a68:	e006      	b.n	8002a78 <HAL_GPIO_Init+0x21c>
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e004      	b.n	8002a78 <HAL_GPIO_Init+0x21c>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e002      	b.n	8002a78 <HAL_GPIO_Init+0x21c>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <HAL_GPIO_Init+0x21c>
 8002a76:	2300      	movs	r3, #0
 8002a78:	69fa      	ldr	r2, [r7, #28]
 8002a7a:	f002 0203 	and.w	r2, r2, #3
 8002a7e:	0092      	lsls	r2, r2, #2
 8002a80:	4093      	lsls	r3, r2
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a88:	4935      	ldr	r1, [pc, #212]	; (8002b60 <HAL_GPIO_Init+0x304>)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	089b      	lsrs	r3, r3, #2
 8002a8e:	3302      	adds	r3, #2
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a96:	4b3a      	ldr	r3, [pc, #232]	; (8002b80 <HAL_GPIO_Init+0x324>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aba:	4a31      	ldr	r2, [pc, #196]	; (8002b80 <HAL_GPIO_Init+0x324>)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ac0:	4b2f      	ldr	r3, [pc, #188]	; (8002b80 <HAL_GPIO_Init+0x324>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ae4:	4a26      	ldr	r2, [pc, #152]	; (8002b80 <HAL_GPIO_Init+0x324>)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aea:	4b25      	ldr	r3, [pc, #148]	; (8002b80 <HAL_GPIO_Init+0x324>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b0e:	4a1c      	ldr	r2, [pc, #112]	; (8002b80 <HAL_GPIO_Init+0x324>)
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b14:	4b1a      	ldr	r3, [pc, #104]	; (8002b80 <HAL_GPIO_Init+0x324>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b38:	4a11      	ldr	r2, [pc, #68]	; (8002b80 <HAL_GPIO_Init+0x324>)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3301      	adds	r3, #1
 8002b42:	61fb      	str	r3, [r7, #28]
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	2b0f      	cmp	r3, #15
 8002b48:	f67f ae96 	bls.w	8002878 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b4c:	bf00      	nop
 8002b4e:	bf00      	nop
 8002b50:	3724      	adds	r7, #36	; 0x24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40013800 	.word	0x40013800
 8002b64:	40020000 	.word	0x40020000
 8002b68:	40020400 	.word	0x40020400
 8002b6c:	40020800 	.word	0x40020800
 8002b70:	40020c00 	.word	0x40020c00
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40021400 	.word	0x40021400
 8002b7c:	40021800 	.word	0x40021800
 8002b80:	40013c00 	.word	0x40013c00

08002b84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	887b      	ldrh	r3, [r7, #2]
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
 8002ba0:	e001      	b.n	8002ba6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc4:	787b      	ldrb	r3, [r7, #1]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bd0:	e003      	b.n	8002bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bd2:	887b      	ldrh	r3, [r7, #2]
 8002bd4:	041a      	lsls	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	619a      	str	r2, [r3, #24]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b086      	sub	sp, #24
 8002bea:	af02      	add	r7, sp, #8
 8002bec:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e059      	b.n	8002cac <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d106      	bne.n	8002c18 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f00a f9f2 	bl	800cffc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c26:	d102      	bne.n	8002c2e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f005 fce9 	bl	800860a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	7c1a      	ldrb	r2, [r3, #16]
 8002c40:	f88d 2000 	strb.w	r2, [sp]
 8002c44:	3304      	adds	r3, #4
 8002c46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c48:	f005 fc6a 	bl	8008520 <USB_CoreInit>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2202      	movs	r2, #2
 8002c56:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e026      	b.n	8002cac <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2101      	movs	r1, #1
 8002c64:	4618      	mov	r0, r3
 8002c66:	f005 fce1 	bl	800862c <USB_SetCurrentMode>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e017      	b.n	8002cac <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	7c1a      	ldrb	r2, [r3, #16]
 8002c84:	f88d 2000 	strb.w	r2, [sp]
 8002c88:	3304      	adds	r3, #4
 8002c8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c8c:	f006 f81c 	bl	8008cc8 <USB_HostInit>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d005      	beq.n	8002ca2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2202      	movs	r2, #2
 8002c9a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e004      	b.n	8002cac <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002cb4:	b590      	push	{r4, r7, lr}
 8002cb6:	b08b      	sub	sp, #44	; 0x2c
 8002cb8:	af04      	add	r7, sp, #16
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	4608      	mov	r0, r1
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	70fb      	strb	r3, [r7, #3]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	70bb      	strb	r3, [r7, #2]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002cce:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002cd0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_HCD_HC_Init+0x2c>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e09d      	b.n	8002e1c <HAL_HCD_HC_Init+0x168>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3319      	adds	r3, #25
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	3314      	adds	r3, #20
 8002d0c:	787a      	ldrb	r2, [r7, #1]
 8002d0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3315      	adds	r3, #21
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	3326      	adds	r3, #38	; 0x26
 8002d34:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002d38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002d3a:	78fa      	ldrb	r2, [r7, #3]
 8002d3c:	78bb      	ldrb	r3, [r7, #2]
 8002d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d42:	b2d8      	uxtb	r0, r3
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	1a9b      	subs	r3, r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	3316      	adds	r3, #22
 8002d52:	4602      	mov	r2, r0
 8002d54:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 fbc8 	bl	80034f0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002d60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	da0a      	bge.n	8002d7e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	3317      	adds	r3, #23
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
 8002d7c:	e009      	b.n	8002d92 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3317      	adds	r3, #23
 8002d8e:	2200      	movs	r2, #0
 8002d90:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f006 f8ee 	bl	8008f78 <USB_GetHostSpeed>
 8002d9c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002d9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d10b      	bne.n	8002dbe <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002da6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d107      	bne.n	8002dbe <HAL_HCD_HC_Init+0x10a>
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d104      	bne.n	8002dbe <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	2bbc      	cmp	r3, #188	; 0xbc
 8002db8:	d901      	bls.n	8002dbe <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002dba:	23bc      	movs	r3, #188	; 0xbc
 8002dbc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	3318      	adds	r3, #24
 8002dce:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002dd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	b298      	uxth	r0, r3
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	3328      	adds	r3, #40	; 0x28
 8002de8:	4602      	mov	r2, r0
 8002dea:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	787c      	ldrb	r4, [r7, #1]
 8002df6:	78ba      	ldrb	r2, [r7, #2]
 8002df8:	78f9      	ldrb	r1, [r7, #3]
 8002dfa:	9302      	str	r3, [sp, #8]
 8002dfc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	4623      	mov	r3, r4
 8002e0a:	f006 f8dd 	bl	8008fc8 <USB_HC_Init>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	371c      	adds	r7, #28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd90      	pop	{r4, r7, pc}

08002e24 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_HCD_HC_Halt+0x1e>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e00f      	b.n	8002e62 <HAL_HCD_HC_Halt+0x3e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f006 fc6f 	bl	8009736 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	4608      	mov	r0, r1
 8002e76:	4611      	mov	r1, r2
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	70fb      	strb	r3, [r7, #3]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	70bb      	strb	r3, [r7, #2]
 8002e82:	4613      	mov	r3, r2
 8002e84:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	3317      	adds	r3, #23
 8002e96:	78ba      	ldrb	r2, [r7, #2]
 8002e98:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	1a9b      	subs	r3, r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	3326      	adds	r3, #38	; 0x26
 8002eaa:	787a      	ldrb	r2, [r7, #1]
 8002eac:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002eae:	7c3b      	ldrb	r3, [r7, #16]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d114      	bne.n	8002ede <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	1a9b      	subs	r3, r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	332a      	adds	r3, #42	; 0x2a
 8002ec4:	2203      	movs	r2, #3
 8002ec6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002ec8:	78fa      	ldrb	r2, [r7, #3]
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	3319      	adds	r3, #25
 8002ed8:	7f3a      	ldrb	r2, [r7, #28]
 8002eda:	701a      	strb	r2, [r3, #0]
 8002edc:	e009      	b.n	8002ef2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ede:	78fa      	ldrb	r2, [r7, #3]
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	332a      	adds	r3, #42	; 0x2a
 8002eee:	2202      	movs	r2, #2
 8002ef0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002ef2:	787b      	ldrb	r3, [r7, #1]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	f200 8102 	bhi.w	80030fe <HAL_HCD_HC_SubmitRequest+0x292>
 8002efa:	a201      	add	r2, pc, #4	; (adr r2, 8002f00 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f00:	08002f11 	.word	0x08002f11
 8002f04:	080030e9 	.word	0x080030e9
 8002f08:	08002fd5 	.word	0x08002fd5
 8002f0c:	0800305f 	.word	0x0800305f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002f10:	7c3b      	ldrb	r3, [r7, #16]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	f040 80f5 	bne.w	8003102 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002f18:	78bb      	ldrb	r3, [r7, #2]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d12d      	bne.n	8002f7a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002f1e:	8b3b      	ldrh	r3, [r7, #24]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d109      	bne.n	8002f38 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002f24:	78fa      	ldrb	r2, [r7, #3]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	333d      	adds	r3, #61	; 0x3d
 8002f34:	2201      	movs	r2, #1
 8002f36:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	333d      	adds	r3, #61	; 0x3d
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10a      	bne.n	8002f64 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	332a      	adds	r3, #42	; 0x2a
 8002f5e:	2200      	movs	r2, #0
 8002f60:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002f62:	e0ce      	b.n	8003102 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	332a      	adds	r3, #42	; 0x2a
 8002f74:	2202      	movs	r2, #2
 8002f76:	701a      	strb	r2, [r3, #0]
      break;
 8002f78:	e0c3      	b.n	8003102 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	331a      	adds	r3, #26
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	f040 80b8 	bne.w	8003102 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002f92:	78fa      	ldrb	r2, [r7, #3]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	333c      	adds	r3, #60	; 0x3c
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10a      	bne.n	8002fbe <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fa8:	78fa      	ldrb	r2, [r7, #3]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	332a      	adds	r3, #42	; 0x2a
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
      break;
 8002fbc:	e0a1      	b.n	8003102 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	332a      	adds	r3, #42	; 0x2a
 8002fce:	2202      	movs	r2, #2
 8002fd0:	701a      	strb	r2, [r3, #0]
      break;
 8002fd2:	e096      	b.n	8003102 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002fd4:	78bb      	ldrb	r3, [r7, #2]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d120      	bne.n	800301c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	333d      	adds	r3, #61	; 0x3d
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10a      	bne.n	8003006 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	1a9b      	subs	r3, r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	332a      	adds	r3, #42	; 0x2a
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003004:	e07e      	b.n	8003104 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	1a9b      	subs	r3, r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	332a      	adds	r3, #42	; 0x2a
 8003016:	2202      	movs	r2, #2
 8003018:	701a      	strb	r2, [r3, #0]
      break;
 800301a:	e073      	b.n	8003104 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800301c:	78fa      	ldrb	r2, [r7, #3]
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	333c      	adds	r3, #60	; 0x3c
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10a      	bne.n	8003048 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	332a      	adds	r3, #42	; 0x2a
 8003042:	2200      	movs	r2, #0
 8003044:	701a      	strb	r2, [r3, #0]
      break;
 8003046:	e05d      	b.n	8003104 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003048:	78fa      	ldrb	r2, [r7, #3]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	332a      	adds	r3, #42	; 0x2a
 8003058:	2202      	movs	r2, #2
 800305a:	701a      	strb	r2, [r3, #0]
      break;
 800305c:	e052      	b.n	8003104 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800305e:	78bb      	ldrb	r3, [r7, #2]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d120      	bne.n	80030a6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003064:	78fa      	ldrb	r2, [r7, #3]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	333d      	adds	r3, #61	; 0x3d
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10a      	bne.n	8003090 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	1a9b      	subs	r3, r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	332a      	adds	r3, #42	; 0x2a
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800308e:	e039      	b.n	8003104 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	332a      	adds	r3, #42	; 0x2a
 80030a0:	2202      	movs	r2, #2
 80030a2:	701a      	strb	r2, [r3, #0]
      break;
 80030a4:	e02e      	b.n	8003104 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	333c      	adds	r3, #60	; 0x3c
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10a      	bne.n	80030d2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	332a      	adds	r3, #42	; 0x2a
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
      break;
 80030d0:	e018      	b.n	8003104 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	332a      	adds	r3, #42	; 0x2a
 80030e2:	2202      	movs	r2, #2
 80030e4:	701a      	strb	r2, [r3, #0]
      break;
 80030e6:	e00d      	b.n	8003104 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	332a      	adds	r3, #42	; 0x2a
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
      break;
 80030fc:	e002      	b.n	8003104 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80030fe:	bf00      	nop
 8003100:	e000      	b.n	8003104 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003102:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	332c      	adds	r3, #44	; 0x2c
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003118:	78fa      	ldrb	r2, [r7, #3]
 800311a:	8b39      	ldrh	r1, [r7, #24]
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4403      	add	r3, r0
 8003128:	3334      	adds	r3, #52	; 0x34
 800312a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	334c      	adds	r3, #76	; 0x4c
 800313c:	2200      	movs	r2, #0
 800313e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	3338      	adds	r3, #56	; 0x38
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	3315      	adds	r3, #21
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	334d      	adds	r3, #77	; 0x4d
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6818      	ldr	r0, [r3, #0]
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	4613      	mov	r3, r2
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	3310      	adds	r3, #16
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	4413      	add	r3, r2
 8003190:	1d19      	adds	r1, r3, #4
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	799b      	ldrb	r3, [r3, #6]
 8003196:	461a      	mov	r2, r3
 8003198:	f006 f842 	bl	8009220 <USB_HC_StartXfer>
 800319c:	4603      	mov	r3, r0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop

080031a8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f005 fd42 	bl	8008c48 <USB_GetMode>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	f040 80fb 	bne.w	80033c2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f005 fd05 	bl	8008be0 <USB_ReadInterrupts>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 80f1 	beq.w	80033c0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f005 fcfc 	bl	8008be0 <USB_ReadInterrupts>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031f2:	d104      	bne.n	80031fe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80031fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f005 fcec 	bl	8008be0 <USB_ReadInterrupts>
 8003208:	4603      	mov	r3, r0
 800320a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800320e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003212:	d104      	bne.n	800321e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800321c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f005 fcdc 	bl	8008be0 <USB_ReadInterrupts>
 8003228:	4603      	mov	r3, r0
 800322a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800322e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003232:	d104      	bne.n	800323e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800323c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f005 fccc 	bl	8008be0 <USB_ReadInterrupts>
 8003248:	4603      	mov	r3, r0
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b02      	cmp	r3, #2
 8003250:	d103      	bne.n	800325a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2202      	movs	r2, #2
 8003258:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f005 fcbe 	bl	8008be0 <USB_ReadInterrupts>
 8003264:	4603      	mov	r3, r0
 8003266:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800326a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800326e:	d120      	bne.n	80032b2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003278:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d113      	bne.n	80032b2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800328a:	2110      	movs	r1, #16
 800328c:	6938      	ldr	r0, [r7, #16]
 800328e:	f005 fb77 	bl	8008980 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003292:	6938      	ldr	r0, [r7, #16]
 8003294:	f005 fba6 	bl	80089e4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	7a5b      	ldrb	r3, [r3, #9]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d105      	bne.n	80032ac <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2101      	movs	r1, #1
 80032a6:	4618      	mov	r0, r3
 80032a8:	f005 fdc6 	bl	8008e38 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f009 ff2b 	bl	800d108 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f005 fc92 	bl	8008be0 <USB_ReadInterrupts>
 80032bc:	4603      	mov	r3, r0
 80032be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032c6:	d102      	bne.n	80032ce <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f001 fd33 	bl	8004d34 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f005 fc84 	bl	8008be0 <USB_ReadInterrupts>
 80032d8:	4603      	mov	r3, r0
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d106      	bne.n	80032f0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f009 fef4 	bl	800d0d0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2208      	movs	r2, #8
 80032ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f005 fc73 	bl	8008be0 <USB_ReadInterrupts>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003300:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003304:	d139      	bne.n	800337a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f006 fa02 	bl	8009714 <USB_HC_ReadInterrupt>
 8003310:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	e025      	b.n	8003364 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	fa22 f303 	lsr.w	r3, r2, r3
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d018      	beq.n	800335e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4413      	add	r3, r2
 8003334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800333e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003342:	d106      	bne.n	8003352 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	4619      	mov	r1, r3
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f905 	bl	800355a <HCD_HC_IN_IRQHandler>
 8003350:	e005      	b.n	800335e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	4619      	mov	r1, r3
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 ff67 	bl	800422c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	3301      	adds	r3, #1
 8003362:	617b      	str	r3, [r7, #20]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	795b      	ldrb	r3, [r3, #5]
 8003368:	461a      	mov	r2, r3
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	4293      	cmp	r3, r2
 800336e:	d3d3      	bcc.n	8003318 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003378:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f005 fc2e 	bl	8008be0 <USB_ReadInterrupts>
 8003384:	4603      	mov	r3, r0
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b10      	cmp	r3, #16
 800338c:	d101      	bne.n	8003392 <HAL_HCD_IRQHandler+0x1ea>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <HAL_HCD_IRQHandler+0x1ec>
 8003392:	2300      	movs	r3, #0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d014      	beq.n	80033c2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699a      	ldr	r2, [r3, #24]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0210 	bic.w	r2, r2, #16
 80033a6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f001 fbe4 	bl	8004b76 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699a      	ldr	r2, [r3, #24]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0210 	orr.w	r2, r2, #16
 80033bc:	619a      	str	r2, [r3, #24]
 80033be:	e000      	b.n	80033c2 <HAL_HCD_IRQHandler+0x21a>
      return;
 80033c0:	bf00      	nop
    }
  }
}
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_HCD_Start+0x16>
 80033da:	2302      	movs	r3, #2
 80033dc:	e013      	b.n	8003406 <HAL_HCD_Start+0x3e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2101      	movs	r1, #1
 80033ec:	4618      	mov	r0, r3
 80033ee:	f005 fd8a 	bl	8008f06 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f005 f8f6 	bl	80085e8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_HCD_Stop+0x16>
 8003420:	2302      	movs	r3, #2
 8003422:	e00d      	b.n	8003440 <HAL_HCD_Stop+0x32>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f006 fadd 	bl	80099f0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f005 fd2c 	bl	8008eb2 <USB_ResetPort>
 800345a:	4603      	mov	r3, r0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	334c      	adds	r3, #76	; 0x4c
 8003480:	781b      	ldrb	r3, [r3, #0]
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	460b      	mov	r3, r1
 8003498:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	3338      	adds	r3, #56	; 0x38
 80034aa:	681b      	ldr	r3, [r3, #0]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f005 fd6e 	bl	8008fa6 <USB_GetCurrentFrame>
 80034ca:	4603      	mov	r3, r0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f005 fd49 	bl	8008f78 <USB_GetHostSpeed>
 80034e6:	4603      	mov	r3, r0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	331a      	adds	r3, #26
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	331b      	adds	r3, #27
 8003520:	2200      	movs	r2, #0
 8003522:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	3325      	adds	r3, #37	; 0x25
 8003534:	2200      	movs	r2, #0
 8003536:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	3324      	adds	r3, #36	; 0x24
 8003548:	2200      	movs	r2, #0
 800354a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b086      	sub	sp, #24
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	460b      	mov	r3, r1
 8003564:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	4611      	mov	r1, r2
 8003578:	4618      	mov	r0, r3
 800357a:	f005 fb44 	bl	8008c06 <USB_ReadChInterrupts>
 800357e:	4603      	mov	r3, r0
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b04      	cmp	r3, #4
 8003586:	d11a      	bne.n	80035be <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4413      	add	r3, r2
 8003590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003594:	461a      	mov	r2, r3
 8003596:	2304      	movs	r3, #4
 8003598:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800359a:	78fa      	ldrb	r2, [r7, #3]
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	334d      	adds	r3, #77	; 0x4d
 80035aa:	2207      	movs	r2, #7
 80035ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	78fa      	ldrb	r2, [r7, #3]
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f006 f8bd 	bl	8009736 <USB_HC_Halt>
 80035bc:	e09e      	b.n	80036fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	78fa      	ldrb	r2, [r7, #3]
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f005 fb1d 	bl	8008c06 <USB_ReadChInterrupts>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d6:	d11b      	bne.n	8003610 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80035d8:	78fb      	ldrb	r3, [r7, #3]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e4:	461a      	mov	r2, r3
 80035e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	334d      	adds	r3, #77	; 0x4d
 80035fc:	2208      	movs	r2, #8
 80035fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	78fa      	ldrb	r2, [r7, #3]
 8003606:	4611      	mov	r1, r2
 8003608:	4618      	mov	r0, r3
 800360a:	f006 f894 	bl	8009736 <USB_HC_Halt>
 800360e:	e075      	b.n	80036fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	78fa      	ldrb	r2, [r7, #3]
 8003616:	4611      	mov	r1, r2
 8003618:	4618      	mov	r0, r3
 800361a:	f005 faf4 	bl	8008c06 <USB_ReadChInterrupts>
 800361e:	4603      	mov	r3, r0
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b08      	cmp	r3, #8
 8003626:	d11a      	bne.n	800365e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4413      	add	r3, r2
 8003630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003634:	461a      	mov	r2, r3
 8003636:	2308      	movs	r3, #8
 8003638:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	334d      	adds	r3, #77	; 0x4d
 800364a:	2206      	movs	r2, #6
 800364c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	4611      	mov	r1, r2
 8003656:	4618      	mov	r0, r3
 8003658:	f006 f86d 	bl	8009736 <USB_HC_Halt>
 800365c:	e04e      	b.n	80036fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	78fa      	ldrb	r2, [r7, #3]
 8003664:	4611      	mov	r1, r2
 8003666:	4618      	mov	r0, r3
 8003668:	f005 facd 	bl	8008c06 <USB_ReadChInterrupts>
 800366c:	4603      	mov	r3, r0
 800366e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003676:	d11b      	bne.n	80036b0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4413      	add	r3, r2
 8003680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003684:	461a      	mov	r2, r3
 8003686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800368a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800368c:	78fa      	ldrb	r2, [r7, #3]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	334d      	adds	r3, #77	; 0x4d
 800369c:	2209      	movs	r2, #9
 800369e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	78fa      	ldrb	r2, [r7, #3]
 80036a6:	4611      	mov	r1, r2
 80036a8:	4618      	mov	r0, r3
 80036aa:	f006 f844 	bl	8009736 <USB_HC_Halt>
 80036ae:	e025      	b.n	80036fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	78fa      	ldrb	r2, [r7, #3]
 80036b6:	4611      	mov	r1, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f005 faa4 	bl	8008c06 <USB_ReadChInterrupts>
 80036be:	4603      	mov	r3, r0
 80036c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c4:	2b80      	cmp	r3, #128	; 0x80
 80036c6:	d119      	bne.n	80036fc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	015a      	lsls	r2, r3, #5
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d4:	461a      	mov	r2, r3
 80036d6:	2380      	movs	r3, #128	; 0x80
 80036d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	334d      	adds	r3, #77	; 0x4d
 80036ea:	2207      	movs	r2, #7
 80036ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	4611      	mov	r1, r2
 80036f6:	4618      	mov	r0, r3
 80036f8:	f006 f81d 	bl	8009736 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f005 fa7e 	bl	8008c06 <USB_ReadChInterrupts>
 800370a:	4603      	mov	r3, r0
 800370c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003714:	d112      	bne.n	800373c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	78fa      	ldrb	r2, [r7, #3]
 800371c:	4611      	mov	r1, r2
 800371e:	4618      	mov	r0, r3
 8003720:	f006 f809 	bl	8009736 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003724:	78fb      	ldrb	r3, [r7, #3]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4413      	add	r3, r2
 800372c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003730:	461a      	mov	r2, r3
 8003732:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003736:	6093      	str	r3, [r2, #8]
 8003738:	f000 bd75 	b.w	8004226 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	78fa      	ldrb	r2, [r7, #3]
 8003742:	4611      	mov	r1, r2
 8003744:	4618      	mov	r0, r3
 8003746:	f005 fa5e 	bl	8008c06 <USB_ReadChInterrupts>
 800374a:	4603      	mov	r3, r0
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b01      	cmp	r3, #1
 8003752:	f040 8128 	bne.w	80039a6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	4413      	add	r3, r2
 800375e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003762:	461a      	mov	r2, r3
 8003764:	2320      	movs	r3, #32
 8003766:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003768:	78fa      	ldrb	r2, [r7, #3]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	331b      	adds	r3, #27
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d119      	bne.n	80037b2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800377e:	78fa      	ldrb	r2, [r7, #3]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	331b      	adds	r3, #27
 800378e:	2200      	movs	r2, #0
 8003790:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003792:	78fb      	ldrb	r3, [r7, #3]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4413      	add	r3, r2
 800379a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	78fa      	ldrb	r2, [r7, #3]
 80037a2:	0151      	lsls	r1, r2, #5
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	440a      	add	r2, r1
 80037a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	799b      	ldrb	r3, [r3, #6]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d01b      	beq.n	80037f2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80037ba:	78fa      	ldrb	r2, [r7, #3]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	3330      	adds	r3, #48	; 0x30
 80037ca:	6819      	ldr	r1, [r3, #0]
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037de:	78fa      	ldrb	r2, [r7, #3]
 80037e0:	1ac9      	subs	r1, r1, r3
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4403      	add	r3, r0
 80037ee:	3338      	adds	r3, #56	; 0x38
 80037f0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80037f2:	78fa      	ldrb	r2, [r7, #3]
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	1a9b      	subs	r3, r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	334d      	adds	r3, #77	; 0x4d
 8003802:	2201      	movs	r2, #1
 8003804:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003806:	78fa      	ldrb	r2, [r7, #3]
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	1a9b      	subs	r3, r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	3344      	adds	r3, #68	; 0x44
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	4413      	add	r3, r2
 8003822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003826:	461a      	mov	r2, r3
 8003828:	2301      	movs	r3, #1
 800382a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800382c:	78fa      	ldrb	r2, [r7, #3]
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	3326      	adds	r3, #38	; 0x26
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003842:	78fa      	ldrb	r2, [r7, #3]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	3326      	adds	r3, #38	; 0x26
 8003852:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003854:	2b02      	cmp	r3, #2
 8003856:	d110      	bne.n	800387a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	78fa      	ldrb	r2, [r7, #3]
 800385e:	4611      	mov	r1, r2
 8003860:	4618      	mov	r0, r3
 8003862:	f005 ff68 	bl	8009736 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003866:	78fb      	ldrb	r3, [r7, #3]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4413      	add	r3, r2
 800386e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003872:	461a      	mov	r2, r3
 8003874:	2310      	movs	r3, #16
 8003876:	6093      	str	r3, [r2, #8]
 8003878:	e03d      	b.n	80038f6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	4613      	mov	r3, r2
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	1a9b      	subs	r3, r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	3326      	adds	r3, #38	; 0x26
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b03      	cmp	r3, #3
 800388e:	d00a      	beq.n	80038a6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003890:	78fa      	ldrb	r2, [r7, #3]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	3326      	adds	r3, #38	; 0x26
 80038a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d127      	bne.n	80038f6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80038a6:	78fb      	ldrb	r3, [r7, #3]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	78fa      	ldrb	r2, [r7, #3]
 80038b6:	0151      	lsls	r1, r2, #5
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	440a      	add	r2, r1
 80038bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038c4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80038c6:	78fa      	ldrb	r2, [r7, #3]
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	4613      	mov	r3, r2
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	1a9b      	subs	r3, r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	334c      	adds	r3, #76	; 0x4c
 80038d6:	2201      	movs	r2, #1
 80038d8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80038da:	78fa      	ldrb	r2, [r7, #3]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	1a9b      	subs	r3, r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	334c      	adds	r3, #76	; 0x4c
 80038ea:	781a      	ldrb	r2, [r3, #0]
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	4619      	mov	r1, r3
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f009 fc17 	bl	800d124 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	799b      	ldrb	r3, [r3, #6]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d13b      	bne.n	8003976 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80038fe:	78fa      	ldrb	r2, [r7, #3]
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	1a9b      	subs	r3, r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	3338      	adds	r3, #56	; 0x38
 800390e:	6819      	ldr	r1, [r3, #0]
 8003910:	78fa      	ldrb	r2, [r7, #3]
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	4613      	mov	r3, r2
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	1a9b      	subs	r3, r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4403      	add	r3, r0
 800391e:	3328      	adds	r3, #40	; 0x28
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	440b      	add	r3, r1
 8003924:	1e59      	subs	r1, r3, #1
 8003926:	78fa      	ldrb	r2, [r7, #3]
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4403      	add	r3, r0
 8003934:	3328      	adds	r3, #40	; 0x28
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	fbb1 f3f3 	udiv	r3, r1, r3
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8470 	beq.w	8004226 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003946:	78fa      	ldrb	r2, [r7, #3]
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	1a9b      	subs	r3, r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	333c      	adds	r3, #60	; 0x3c
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	f083 0301 	eor.w	r3, r3, #1
 800395e:	b2d8      	uxtb	r0, r3
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	333c      	adds	r3, #60	; 0x3c
 800396e:	4602      	mov	r2, r0
 8003970:	701a      	strb	r2, [r3, #0]
 8003972:	f000 bc58 	b.w	8004226 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003976:	78fa      	ldrb	r2, [r7, #3]
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	1a9b      	subs	r3, r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	333c      	adds	r3, #60	; 0x3c
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	78fa      	ldrb	r2, [r7, #3]
 800398a:	f083 0301 	eor.w	r3, r3, #1
 800398e:	b2d8      	uxtb	r0, r3
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	440b      	add	r3, r1
 800399c:	333c      	adds	r3, #60	; 0x3c
 800399e:	4602      	mov	r2, r0
 80039a0:	701a      	strb	r2, [r3, #0]
 80039a2:	f000 bc40 	b.w	8004226 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	78fa      	ldrb	r2, [r7, #3]
 80039ac:	4611      	mov	r1, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f005 f929 	bl	8008c06 <USB_ReadChInterrupts>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	d131      	bne.n	8003a22 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ca:	461a      	mov	r2, r3
 80039cc:	2320      	movs	r3, #32
 80039ce:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80039d0:	78fa      	ldrb	r2, [r7, #3]
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	1a9b      	subs	r3, r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	331a      	adds	r3, #26
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	f040 841f 	bne.w	8004226 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80039e8:	78fa      	ldrb	r2, [r7, #3]
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	4613      	mov	r3, r2
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	1a9b      	subs	r3, r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	331b      	adds	r3, #27
 80039f8:	2201      	movs	r2, #1
 80039fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80039fc:	78fa      	ldrb	r2, [r7, #3]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	334d      	adds	r3, #77	; 0x4d
 8003a0c:	2203      	movs	r2, #3
 8003a0e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	78fa      	ldrb	r2, [r7, #3]
 8003a16:	4611      	mov	r1, r2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f005 fe8c 	bl	8009736 <USB_HC_Halt>
 8003a1e:	f000 bc02 	b.w	8004226 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	78fa      	ldrb	r2, [r7, #3]
 8003a28:	4611      	mov	r1, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f005 f8eb 	bl	8008c06 <USB_ReadChInterrupts>
 8003a30:	4603      	mov	r3, r0
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	f040 8305 	bne.w	8004046 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	334d      	adds	r3, #77	; 0x4d
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d114      	bne.n	8003a8e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	1a9b      	subs	r3, r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	334d      	adds	r3, #77	; 0x4d
 8003a74:	2202      	movs	r2, #2
 8003a76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003a78:	78fa      	ldrb	r2, [r7, #3]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	334c      	adds	r3, #76	; 0x4c
 8003a88:	2201      	movs	r2, #1
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	e2cc      	b.n	8004028 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	334d      	adds	r3, #77	; 0x4d
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b06      	cmp	r3, #6
 8003aa2:	d114      	bne.n	8003ace <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003aa4:	78fa      	ldrb	r2, [r7, #3]
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	334d      	adds	r3, #77	; 0x4d
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003ab8:	78fa      	ldrb	r2, [r7, #3]
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	334c      	adds	r3, #76	; 0x4c
 8003ac8:	2205      	movs	r2, #5
 8003aca:	701a      	strb	r2, [r3, #0]
 8003acc:	e2ac      	b.n	8004028 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003ace:	78fa      	ldrb	r2, [r7, #3]
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	1a9b      	subs	r3, r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	440b      	add	r3, r1
 8003adc:	334d      	adds	r3, #77	; 0x4d
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b07      	cmp	r3, #7
 8003ae2:	d00b      	beq.n	8003afc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003ae4:	78fa      	ldrb	r2, [r7, #3]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	1a9b      	subs	r3, r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	334d      	adds	r3, #77	; 0x4d
 8003af4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003af6:	2b09      	cmp	r3, #9
 8003af8:	f040 80a6 	bne.w	8003c48 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003afc:	78fa      	ldrb	r2, [r7, #3]
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	1a9b      	subs	r3, r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	334d      	adds	r3, #77	; 0x4d
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	3344      	adds	r3, #68	; 0x44
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	1c59      	adds	r1, r3, #1
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4403      	add	r3, r0
 8003b30:	3344      	adds	r3, #68	; 0x44
 8003b32:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b34:	78fa      	ldrb	r2, [r7, #3]
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	1a9b      	subs	r3, r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	3344      	adds	r3, #68	; 0x44
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d943      	bls.n	8003bd2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	1a9b      	subs	r3, r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	3344      	adds	r3, #68	; 0x44
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003b5e:	78fa      	ldrb	r2, [r7, #3]
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	331a      	adds	r3, #26
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d123      	bne.n	8003bbc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003b74:	78fa      	ldrb	r2, [r7, #3]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	331b      	adds	r3, #27
 8003b84:	2200      	movs	r2, #0
 8003b86:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	331c      	adds	r3, #28
 8003b98:	2200      	movs	r2, #0
 8003b9a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	0151      	lsls	r1, r2, #5
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	440a      	add	r2, r1
 8003bb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bba:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003bbc:	78fa      	ldrb	r2, [r7, #3]
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	334c      	adds	r3, #76	; 0x4c
 8003bcc:	2204      	movs	r2, #4
 8003bce:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003bd0:	e229      	b.n	8004026 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	334c      	adds	r3, #76	; 0x4c
 8003be2:	2202      	movs	r2, #2
 8003be4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	3326      	adds	r3, #38	; 0x26
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00b      	beq.n	8003c14 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003bfc:	78fa      	ldrb	r2, [r7, #3]
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	1a9b      	subs	r3, r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	3326      	adds	r3, #38	; 0x26
 8003c0c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	f040 8209 	bne.w	8004026 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c2a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c32:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c40:	461a      	mov	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c46:	e1ee      	b.n	8004026 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003c48:	78fa      	ldrb	r2, [r7, #3]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	334d      	adds	r3, #77	; 0x4d
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b05      	cmp	r3, #5
 8003c5c:	f040 80c8 	bne.w	8003df0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	334d      	adds	r3, #77	; 0x4d
 8003c70:	2202      	movs	r2, #2
 8003c72:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003c74:	78fa      	ldrb	r2, [r7, #3]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	331b      	adds	r3, #27
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	f040 81ce 	bne.w	8004028 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003c8c:	78fa      	ldrb	r2, [r7, #3]
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	4613      	mov	r3, r2
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	1a9b      	subs	r3, r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	3326      	adds	r3, #38	; 0x26
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d16b      	bne.n	8003d7a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003ca2:	78fa      	ldrb	r2, [r7, #3]
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	3348      	adds	r3, #72	; 0x48
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	1c59      	adds	r1, r3, #1
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4403      	add	r3, r0
 8003cc2:	3348      	adds	r3, #72	; 0x48
 8003cc4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003cc6:	78fa      	ldrb	r2, [r7, #3]
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	1a9b      	subs	r3, r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	3348      	adds	r3, #72	; 0x48
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d943      	bls.n	8003d64 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	3348      	adds	r3, #72	; 0x48
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003cf0:	78fa      	ldrb	r2, [r7, #3]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	331b      	adds	r3, #27
 8003d00:	2200      	movs	r2, #0
 8003d02:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	3344      	adds	r3, #68	; 0x44
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d809      	bhi.n	8003d2e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	331c      	adds	r3, #28
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d2e:	78fb      	ldrb	r3, [r7, #3]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	78fa      	ldrb	r2, [r7, #3]
 8003d3e:	0151      	lsls	r1, r2, #5
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	440a      	add	r2, r1
 8003d44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d4e:	78fa      	ldrb	r2, [r7, #3]
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	1a9b      	subs	r3, r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	334c      	adds	r3, #76	; 0x4c
 8003d5e:	2204      	movs	r2, #4
 8003d60:	701a      	strb	r2, [r3, #0]
 8003d62:	e014      	b.n	8003d8e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d64:	78fa      	ldrb	r2, [r7, #3]
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	334c      	adds	r3, #76	; 0x4c
 8003d74:	2202      	movs	r2, #2
 8003d76:	701a      	strb	r2, [r3, #0]
 8003d78:	e009      	b.n	8003d8e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	334c      	adds	r3, #76	; 0x4c
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	3326      	adds	r3, #38	; 0x26
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00b      	beq.n	8003dbc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003da4:	78fa      	ldrb	r2, [r7, #3]
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	4613      	mov	r3, r2
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	3326      	adds	r3, #38	; 0x26
 8003db4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	f040 8136 	bne.w	8004028 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003dd2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003dda:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de8:	461a      	mov	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	e11b      	b.n	8004028 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003df0:	78fa      	ldrb	r2, [r7, #3]
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	4613      	mov	r3, r2
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	1a9b      	subs	r3, r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	334d      	adds	r3, #77	; 0x4d
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	f040 8081 	bne.w	8003f0a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e08:	78fa      	ldrb	r2, [r7, #3]
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	1a9b      	subs	r3, r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	334d      	adds	r3, #77	; 0x4d
 8003e18:	2202      	movs	r2, #2
 8003e1a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e1c:	78fa      	ldrb	r2, [r7, #3]
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	1a9b      	subs	r3, r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	331b      	adds	r3, #27
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	f040 80fa 	bne.w	8004028 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e34:	78fa      	ldrb	r2, [r7, #3]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	334c      	adds	r3, #76	; 0x4c
 8003e44:	2202      	movs	r2, #2
 8003e46:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003e48:	78fb      	ldrb	r3, [r7, #3]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	78fa      	ldrb	r2, [r7, #3]
 8003e58:	0151      	lsls	r1, r2, #5
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	440a      	add	r2, r1
 8003e5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e66:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	78fa      	ldrb	r2, [r7, #3]
 8003e78:	0151      	lsls	r1, r2, #5
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	440a      	add	r2, r1
 8003e7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e86:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	78fa      	ldrb	r2, [r7, #3]
 8003e98:	0151      	lsls	r1, r2, #5
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	440a      	add	r2, r1
 8003e9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ea2:	f023 0320 	bic.w	r3, r3, #32
 8003ea6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	3326      	adds	r3, #38	; 0x26
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00b      	beq.n	8003ed6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ebe:	78fa      	ldrb	r2, [r7, #3]
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	3326      	adds	r3, #38	; 0x26
 8003ece:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	f040 80a9 	bne.w	8004028 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ed6:	78fb      	ldrb	r3, [r7, #3]
 8003ed8:	015a      	lsls	r2, r3, #5
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	4413      	add	r3, r2
 8003ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003eec:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ef4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ef6:	78fb      	ldrb	r3, [r7, #3]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f02:	461a      	mov	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	e08e      	b.n	8004028 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003f0a:	78fa      	ldrb	r2, [r7, #3]
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	334d      	adds	r3, #77	; 0x4d
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d143      	bne.n	8003fa8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f20:	78fa      	ldrb	r2, [r7, #3]
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	334d      	adds	r3, #77	; 0x4d
 8003f30:	2202      	movs	r2, #2
 8003f32:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f34:	78fa      	ldrb	r2, [r7, #3]
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	1a9b      	subs	r3, r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	334c      	adds	r3, #76	; 0x4c
 8003f44:	2202      	movs	r2, #2
 8003f46:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f48:	78fa      	ldrb	r2, [r7, #3]
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	1a9b      	subs	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	3326      	adds	r3, #38	; 0x26
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003f5e:	78fa      	ldrb	r2, [r7, #3]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	1a9b      	subs	r3, r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	3326      	adds	r3, #38	; 0x26
 8003f6e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d159      	bne.n	8004028 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f74:	78fb      	ldrb	r3, [r7, #3]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f8a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f92:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	e03f      	b.n	8004028 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003fa8:	78fa      	ldrb	r2, [r7, #3]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	1a9b      	subs	r3, r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	334d      	adds	r3, #77	; 0x4d
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d126      	bne.n	800400c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003fbe:	78fa      	ldrb	r2, [r7, #3]
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	1a9b      	subs	r3, r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	334d      	adds	r3, #77	; 0x4d
 8003fce:	2202      	movs	r2, #2
 8003fd0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003fd2:	78fa      	ldrb	r2, [r7, #3]
 8003fd4:	6879      	ldr	r1, [r7, #4]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	1a9b      	subs	r3, r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	440b      	add	r3, r1
 8003fe0:	3344      	adds	r3, #68	; 0x44
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	1c59      	adds	r1, r3, #1
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	1a9b      	subs	r3, r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4403      	add	r3, r0
 8003ff2:	3344      	adds	r3, #68	; 0x44
 8003ff4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ff6:	78fa      	ldrb	r2, [r7, #3]
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	1a9b      	subs	r3, r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	334c      	adds	r3, #76	; 0x4c
 8004006:	2204      	movs	r2, #4
 8004008:	701a      	strb	r2, [r3, #0]
 800400a:	e00d      	b.n	8004028 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800400c:	78fa      	ldrb	r2, [r7, #3]
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	4613      	mov	r3, r2
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	334d      	adds	r3, #77	; 0x4d
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b02      	cmp	r3, #2
 8004020:	f000 8100 	beq.w	8004224 <HCD_HC_IN_IRQHandler+0xcca>
 8004024:	e000      	b.n	8004028 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004026:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004028:	78fa      	ldrb	r2, [r7, #3]
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	334c      	adds	r3, #76	; 0x4c
 8004038:	781a      	ldrb	r2, [r3, #0]
 800403a:	78fb      	ldrb	r3, [r7, #3]
 800403c:	4619      	mov	r1, r3
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f009 f870 	bl	800d124 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004044:	e0ef      	b.n	8004226 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	4611      	mov	r1, r2
 800404e:	4618      	mov	r0, r3
 8004050:	f004 fdd9 	bl	8008c06 <USB_ReadChInterrupts>
 8004054:	4603      	mov	r3, r0
 8004056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405a:	2b40      	cmp	r3, #64	; 0x40
 800405c:	d12f      	bne.n	80040be <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	4413      	add	r3, r2
 8004066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800406a:	461a      	mov	r2, r3
 800406c:	2340      	movs	r3, #64	; 0x40
 800406e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004070:	78fa      	ldrb	r2, [r7, #3]
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	1a9b      	subs	r3, r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	334d      	adds	r3, #77	; 0x4d
 8004080:	2205      	movs	r2, #5
 8004082:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004084:	78fa      	ldrb	r2, [r7, #3]
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	4613      	mov	r3, r2
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	1a9b      	subs	r3, r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	331a      	adds	r3, #26
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800409a:	78fa      	ldrb	r2, [r7, #3]
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	4613      	mov	r3, r2
 80040a0:	011b      	lsls	r3, r3, #4
 80040a2:	1a9b      	subs	r3, r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	3344      	adds	r3, #68	; 0x44
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	78fa      	ldrb	r2, [r7, #3]
 80040b4:	4611      	mov	r1, r2
 80040b6:	4618      	mov	r0, r3
 80040b8:	f005 fb3d 	bl	8009736 <USB_HC_Halt>
 80040bc:	e0b3      	b.n	8004226 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	78fa      	ldrb	r2, [r7, #3]
 80040c4:	4611      	mov	r1, r2
 80040c6:	4618      	mov	r0, r3
 80040c8:	f004 fd9d 	bl	8008c06 <USB_ReadChInterrupts>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f003 0310 	and.w	r3, r3, #16
 80040d2:	2b10      	cmp	r3, #16
 80040d4:	f040 80a7 	bne.w	8004226 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80040d8:	78fa      	ldrb	r2, [r7, #3]
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	4613      	mov	r3, r2
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	3326      	adds	r3, #38	; 0x26
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d11b      	bne.n	8004126 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80040ee:	78fa      	ldrb	r2, [r7, #3]
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	4613      	mov	r3, r2
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	3344      	adds	r3, #68	; 0x44
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004102:	78fa      	ldrb	r2, [r7, #3]
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	334d      	adds	r3, #77	; 0x4d
 8004112:	2204      	movs	r2, #4
 8004114:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	78fa      	ldrb	r2, [r7, #3]
 800411c:	4611      	mov	r1, r2
 800411e:	4618      	mov	r0, r3
 8004120:	f005 fb09 	bl	8009736 <USB_HC_Halt>
 8004124:	e03f      	b.n	80041a6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004126:	78fa      	ldrb	r2, [r7, #3]
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	3326      	adds	r3, #38	; 0x26
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800413c:	78fa      	ldrb	r2, [r7, #3]
 800413e:	6879      	ldr	r1, [r7, #4]
 8004140:	4613      	mov	r3, r2
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	440b      	add	r3, r1
 800414a:	3326      	adds	r3, #38	; 0x26
 800414c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800414e:	2b02      	cmp	r3, #2
 8004150:	d129      	bne.n	80041a6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004152:	78fa      	ldrb	r2, [r7, #3]
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	4613      	mov	r3, r2
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	1a9b      	subs	r3, r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	440b      	add	r3, r1
 8004160:	3344      	adds	r3, #68	; 0x44
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	799b      	ldrb	r3, [r3, #6]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <HCD_HC_IN_IRQHandler+0xc2a>
 800416e:	78fa      	ldrb	r2, [r7, #3]
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	4613      	mov	r3, r2
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	331b      	adds	r3, #27
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d110      	bne.n	80041a6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004184:	78fa      	ldrb	r2, [r7, #3]
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	4613      	mov	r3, r2
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	1a9b      	subs	r3, r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	334d      	adds	r3, #77	; 0x4d
 8004194:	2204      	movs	r2, #4
 8004196:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	78fa      	ldrb	r2, [r7, #3]
 800419e:	4611      	mov	r1, r2
 80041a0:	4618      	mov	r0, r3
 80041a2:	f005 fac8 	bl	8009736 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80041a6:	78fa      	ldrb	r2, [r7, #3]
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	1a9b      	subs	r3, r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	331b      	adds	r3, #27
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d129      	bne.n	8004210 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80041bc:	78fa      	ldrb	r2, [r7, #3]
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	4613      	mov	r3, r2
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	1a9b      	subs	r3, r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	331b      	adds	r3, #27
 80041cc:	2200      	movs	r2, #0
 80041ce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	78fa      	ldrb	r2, [r7, #3]
 80041e0:	0151      	lsls	r1, r2, #5
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	440a      	add	r2, r1
 80041e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ee:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	78fa      	ldrb	r2, [r7, #3]
 8004200:	0151      	lsls	r1, r2, #5
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	440a      	add	r2, r1
 8004206:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800420a:	f043 0320 	orr.w	r3, r3, #32
 800420e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	4413      	add	r3, r2
 8004218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800421c:	461a      	mov	r2, r3
 800421e:	2310      	movs	r3, #16
 8004220:	6093      	str	r3, [r2, #8]
 8004222:	e000      	b.n	8004226 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004224:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	78fa      	ldrb	r2, [r7, #3]
 8004248:	4611      	mov	r1, r2
 800424a:	4618      	mov	r0, r3
 800424c:	f004 fcdb 	bl	8008c06 <USB_ReadChInterrupts>
 8004250:	4603      	mov	r3, r0
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b04      	cmp	r3, #4
 8004258:	d11b      	bne.n	8004292 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	4413      	add	r3, r2
 8004262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004266:	461a      	mov	r2, r3
 8004268:	2304      	movs	r3, #4
 800426a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800426c:	78fa      	ldrb	r2, [r7, #3]
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	4613      	mov	r3, r2
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	1a9b      	subs	r3, r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	334d      	adds	r3, #77	; 0x4d
 800427c:	2207      	movs	r2, #7
 800427e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	78fa      	ldrb	r2, [r7, #3]
 8004286:	4611      	mov	r1, r2
 8004288:	4618      	mov	r0, r3
 800428a:	f005 fa54 	bl	8009736 <USB_HC_Halt>
 800428e:	f000 bc6f 	b.w	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	78fa      	ldrb	r2, [r7, #3]
 8004298:	4611      	mov	r1, r2
 800429a:	4618      	mov	r0, r3
 800429c:	f004 fcb3 	bl	8008c06 <USB_ReadChInterrupts>
 80042a0:	4603      	mov	r3, r0
 80042a2:	f003 0320 	and.w	r3, r3, #32
 80042a6:	2b20      	cmp	r3, #32
 80042a8:	f040 8082 	bne.w	80043b0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b8:	461a      	mov	r2, r3
 80042ba:	2320      	movs	r3, #32
 80042bc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80042be:	78fa      	ldrb	r2, [r7, #3]
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	1a9b      	subs	r3, r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	3319      	adds	r3, #25
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d124      	bne.n	800431e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	3319      	adds	r3, #25
 80042e4:	2200      	movs	r2, #0
 80042e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042e8:	78fa      	ldrb	r2, [r7, #3]
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	1a9b      	subs	r3, r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	334c      	adds	r3, #76	; 0x4c
 80042f8:	2202      	movs	r2, #2
 80042fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80042fc:	78fa      	ldrb	r2, [r7, #3]
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	1a9b      	subs	r3, r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	334d      	adds	r3, #77	; 0x4d
 800430c:	2203      	movs	r2, #3
 800430e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	4611      	mov	r1, r2
 8004318:	4618      	mov	r0, r3
 800431a:	f005 fa0c 	bl	8009736 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800431e:	78fa      	ldrb	r2, [r7, #3]
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	1a9b      	subs	r3, r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	440b      	add	r3, r1
 800432c:	331a      	adds	r3, #26
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b01      	cmp	r3, #1
 8004332:	f040 841d 	bne.w	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
 8004336:	78fa      	ldrb	r2, [r7, #3]
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	1a9b      	subs	r3, r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	331b      	adds	r3, #27
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	f040 8411 	bne.w	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800434e:	78fa      	ldrb	r2, [r7, #3]
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	1a9b      	subs	r3, r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	3326      	adds	r3, #38	; 0x26
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d009      	beq.n	8004378 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004364:	78fa      	ldrb	r2, [r7, #3]
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	331b      	adds	r3, #27
 8004374:	2201      	movs	r2, #1
 8004376:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004378:	78fa      	ldrb	r2, [r7, #3]
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	4613      	mov	r3, r2
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	1a9b      	subs	r3, r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	334d      	adds	r3, #77	; 0x4d
 8004388:	2203      	movs	r2, #3
 800438a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	78fa      	ldrb	r2, [r7, #3]
 8004392:	4611      	mov	r1, r2
 8004394:	4618      	mov	r0, r3
 8004396:	f005 f9ce 	bl	8009736 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800439a:	78fa      	ldrb	r2, [r7, #3]
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	4613      	mov	r3, r2
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	1a9b      	subs	r3, r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	3344      	adds	r3, #68	; 0x44
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	e3df      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	78fa      	ldrb	r2, [r7, #3]
 80043b6:	4611      	mov	r1, r2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f004 fc24 	bl	8008c06 <USB_ReadChInterrupts>
 80043be:	4603      	mov	r3, r0
 80043c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c8:	d111      	bne.n	80043ee <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80043ca:	78fb      	ldrb	r3, [r7, #3]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d6:	461a      	mov	r2, r3
 80043d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043dc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	78fa      	ldrb	r2, [r7, #3]
 80043e4:	4611      	mov	r1, r2
 80043e6:	4618      	mov	r0, r3
 80043e8:	f005 f9a5 	bl	8009736 <USB_HC_Halt>
 80043ec:	e3c0      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	78fa      	ldrb	r2, [r7, #3]
 80043f4:	4611      	mov	r1, r2
 80043f6:	4618      	mov	r0, r3
 80043f8:	f004 fc05 	bl	8008c06 <USB_ReadChInterrupts>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b01      	cmp	r3, #1
 8004404:	d168      	bne.n	80044d8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004406:	78fa      	ldrb	r2, [r7, #3]
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	4613      	mov	r3, r2
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	1a9b      	subs	r3, r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	440b      	add	r3, r1
 8004414:	3344      	adds	r3, #68	; 0x44
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	78fa      	ldrb	r2, [r7, #3]
 8004420:	4611      	mov	r1, r2
 8004422:	4618      	mov	r0, r3
 8004424:	f004 fbef 	bl	8008c06 <USB_ReadChInterrupts>
 8004428:	4603      	mov	r3, r0
 800442a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442e:	2b40      	cmp	r3, #64	; 0x40
 8004430:	d112      	bne.n	8004458 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004432:	78fa      	ldrb	r2, [r7, #3]
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	440b      	add	r3, r1
 8004440:	3319      	adds	r3, #25
 8004442:	2201      	movs	r2, #1
 8004444:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004446:	78fb      	ldrb	r3, [r7, #3]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	4413      	add	r3, r2
 800444e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004452:	461a      	mov	r2, r3
 8004454:	2340      	movs	r3, #64	; 0x40
 8004456:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004458:	78fa      	ldrb	r2, [r7, #3]
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	331b      	adds	r3, #27
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d019      	beq.n	80044a2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800446e:	78fa      	ldrb	r2, [r7, #3]
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	1a9b      	subs	r3, r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	331b      	adds	r3, #27
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004482:	78fb      	ldrb	r3, [r7, #3]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4413      	add	r3, r2
 800448a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	78fa      	ldrb	r2, [r7, #3]
 8004492:	0151      	lsls	r1, r2, #5
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	440a      	add	r2, r1
 8004498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800449c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80044a2:	78fb      	ldrb	r3, [r7, #3]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ae:	461a      	mov	r2, r3
 80044b0:	2301      	movs	r3, #1
 80044b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80044b4:	78fa      	ldrb	r2, [r7, #3]
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	4613      	mov	r3, r2
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	1a9b      	subs	r3, r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	334d      	adds	r3, #77	; 0x4d
 80044c4:	2201      	movs	r2, #1
 80044c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	78fa      	ldrb	r2, [r7, #3]
 80044ce:	4611      	mov	r1, r2
 80044d0:	4618      	mov	r0, r3
 80044d2:	f005 f930 	bl	8009736 <USB_HC_Halt>
 80044d6:	e34b      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	4611      	mov	r1, r2
 80044e0:	4618      	mov	r0, r3
 80044e2:	f004 fb90 	bl	8008c06 <USB_ReadChInterrupts>
 80044e6:	4603      	mov	r3, r0
 80044e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ec:	2b40      	cmp	r3, #64	; 0x40
 80044ee:	d139      	bne.n	8004564 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80044f0:	78fa      	ldrb	r2, [r7, #3]
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	334d      	adds	r3, #77	; 0x4d
 8004500:	2205      	movs	r2, #5
 8004502:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004504:	78fa      	ldrb	r2, [r7, #3]
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	331a      	adds	r3, #26
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d109      	bne.n	800452e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800451a:	78fa      	ldrb	r2, [r7, #3]
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	3319      	adds	r3, #25
 800452a:	2201      	movs	r2, #1
 800452c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800452e:	78fa      	ldrb	r2, [r7, #3]
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	1a9b      	subs	r3, r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	3344      	adds	r3, #68	; 0x44
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	78fa      	ldrb	r2, [r7, #3]
 8004548:	4611      	mov	r1, r2
 800454a:	4618      	mov	r0, r3
 800454c:	f005 f8f3 	bl	8009736 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004550:	78fb      	ldrb	r3, [r7, #3]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	4413      	add	r3, r2
 8004558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455c:	461a      	mov	r2, r3
 800455e:	2340      	movs	r3, #64	; 0x40
 8004560:	6093      	str	r3, [r2, #8]
 8004562:	e305      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	78fa      	ldrb	r2, [r7, #3]
 800456a:	4611      	mov	r1, r2
 800456c:	4618      	mov	r0, r3
 800456e:	f004 fb4a 	bl	8008c06 <USB_ReadChInterrupts>
 8004572:	4603      	mov	r3, r0
 8004574:	f003 0308 	and.w	r3, r3, #8
 8004578:	2b08      	cmp	r3, #8
 800457a:	d11a      	bne.n	80045b2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800457c:	78fb      	ldrb	r3, [r7, #3]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4413      	add	r3, r2
 8004584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004588:	461a      	mov	r2, r3
 800458a:	2308      	movs	r3, #8
 800458c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	1a9b      	subs	r3, r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	334d      	adds	r3, #77	; 0x4d
 800459e:	2206      	movs	r2, #6
 80045a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	78fa      	ldrb	r2, [r7, #3]
 80045a8:	4611      	mov	r1, r2
 80045aa:	4618      	mov	r0, r3
 80045ac:	f005 f8c3 	bl	8009736 <USB_HC_Halt>
 80045b0:	e2de      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	78fa      	ldrb	r2, [r7, #3]
 80045b8:	4611      	mov	r1, r2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f004 fb23 	bl	8008c06 <USB_ReadChInterrupts>
 80045c0:	4603      	mov	r3, r0
 80045c2:	f003 0310 	and.w	r3, r3, #16
 80045c6:	2b10      	cmp	r3, #16
 80045c8:	d144      	bne.n	8004654 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80045ca:	78fa      	ldrb	r2, [r7, #3]
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	3344      	adds	r3, #68	; 0x44
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80045de:	78fa      	ldrb	r2, [r7, #3]
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	334d      	adds	r3, #77	; 0x4d
 80045ee:	2204      	movs	r2, #4
 80045f0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80045f2:	78fa      	ldrb	r2, [r7, #3]
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	3319      	adds	r3, #25
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d114      	bne.n	8004632 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004608:	78fa      	ldrb	r2, [r7, #3]
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	1a9b      	subs	r3, r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	3318      	adds	r3, #24
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800461e:	78fa      	ldrb	r2, [r7, #3]
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	4613      	mov	r3, r2
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	1a9b      	subs	r3, r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	440b      	add	r3, r1
 800462c:	3319      	adds	r3, #25
 800462e:	2201      	movs	r2, #1
 8004630:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	78fa      	ldrb	r2, [r7, #3]
 8004638:	4611      	mov	r1, r2
 800463a:	4618      	mov	r0, r3
 800463c:	f005 f87b 	bl	8009736 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	4413      	add	r3, r2
 8004648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464c:	461a      	mov	r2, r3
 800464e:	2310      	movs	r3, #16
 8004650:	6093      	str	r3, [r2, #8]
 8004652:	e28d      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	78fa      	ldrb	r2, [r7, #3]
 800465a:	4611      	mov	r1, r2
 800465c:	4618      	mov	r0, r3
 800465e:	f004 fad2 	bl	8008c06 <USB_ReadChInterrupts>
 8004662:	4603      	mov	r3, r0
 8004664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004668:	2b80      	cmp	r3, #128	; 0x80
 800466a:	d169      	bne.n	8004740 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	799b      	ldrb	r3, [r3, #6]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d111      	bne.n	8004698 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004674:	78fa      	ldrb	r2, [r7, #3]
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	1a9b      	subs	r3, r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	334d      	adds	r3, #77	; 0x4d
 8004684:	2207      	movs	r2, #7
 8004686:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	78fa      	ldrb	r2, [r7, #3]
 800468e:	4611      	mov	r1, r2
 8004690:	4618      	mov	r0, r3
 8004692:	f005 f850 	bl	8009736 <USB_HC_Halt>
 8004696:	e049      	b.n	800472c <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004698:	78fa      	ldrb	r2, [r7, #3]
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	3344      	adds	r3, #68	; 0x44
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	1c59      	adds	r1, r3, #1
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	4613      	mov	r3, r2
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	1a9b      	subs	r3, r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4403      	add	r3, r0
 80046b8:	3344      	adds	r3, #68	; 0x44
 80046ba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046bc:	78fa      	ldrb	r2, [r7, #3]
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	3344      	adds	r3, #68	; 0x44
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d922      	bls.n	8004718 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80046d2:	78fa      	ldrb	r2, [r7, #3]
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	1a9b      	subs	r3, r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	440b      	add	r3, r1
 80046e0:	3344      	adds	r3, #68	; 0x44
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80046e6:	78fa      	ldrb	r2, [r7, #3]
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	1a9b      	subs	r3, r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	440b      	add	r3, r1
 80046f4:	334c      	adds	r3, #76	; 0x4c
 80046f6:	2204      	movs	r2, #4
 80046f8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80046fa:	78fa      	ldrb	r2, [r7, #3]
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	4613      	mov	r3, r2
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	1a9b      	subs	r3, r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	440b      	add	r3, r1
 8004708:	334c      	adds	r3, #76	; 0x4c
 800470a:	781a      	ldrb	r2, [r3, #0]
 800470c:	78fb      	ldrb	r3, [r7, #3]
 800470e:	4619      	mov	r1, r3
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f008 fd07 	bl	800d124 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004716:	e009      	b.n	800472c <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004718:	78fa      	ldrb	r2, [r7, #3]
 800471a:	6879      	ldr	r1, [r7, #4]
 800471c:	4613      	mov	r3, r2
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	1a9b      	subs	r3, r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	334c      	adds	r3, #76	; 0x4c
 8004728:	2202      	movs	r2, #2
 800472a:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800472c:	78fb      	ldrb	r3, [r7, #3]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	4413      	add	r3, r2
 8004734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004738:	461a      	mov	r2, r3
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	6093      	str	r3, [r2, #8]
 800473e:	e217      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	78fa      	ldrb	r2, [r7, #3]
 8004746:	4611      	mov	r1, r2
 8004748:	4618      	mov	r0, r3
 800474a:	f004 fa5c 	bl	8008c06 <USB_ReadChInterrupts>
 800474e:	4603      	mov	r3, r0
 8004750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004758:	d11b      	bne.n	8004792 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800475a:	78fa      	ldrb	r2, [r7, #3]
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	4613      	mov	r3, r2
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	1a9b      	subs	r3, r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	440b      	add	r3, r1
 8004768:	334d      	adds	r3, #77	; 0x4d
 800476a:	2209      	movs	r2, #9
 800476c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	78fa      	ldrb	r2, [r7, #3]
 8004774:	4611      	mov	r1, r2
 8004776:	4618      	mov	r0, r3
 8004778:	f004 ffdd 	bl	8009736 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	4413      	add	r3, r2
 8004784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004788:	461a      	mov	r2, r3
 800478a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800478e:	6093      	str	r3, [r2, #8]
 8004790:	e1ee      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	78fa      	ldrb	r2, [r7, #3]
 8004798:	4611      	mov	r1, r2
 800479a:	4618      	mov	r0, r3
 800479c:	f004 fa33 	bl	8008c06 <USB_ReadChInterrupts>
 80047a0:	4603      	mov	r3, r0
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	f040 81df 	bne.w	8004b6a <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b8:	461a      	mov	r2, r3
 80047ba:	2302      	movs	r3, #2
 80047bc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80047be:	78fa      	ldrb	r2, [r7, #3]
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	1a9b      	subs	r3, r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	334d      	adds	r3, #77	; 0x4d
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	f040 8093 	bne.w	80048fc <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047d6:	78fa      	ldrb	r2, [r7, #3]
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	4613      	mov	r3, r2
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	1a9b      	subs	r3, r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	440b      	add	r3, r1
 80047e4:	334d      	adds	r3, #77	; 0x4d
 80047e6:	2202      	movs	r2, #2
 80047e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80047ea:	78fa      	ldrb	r2, [r7, #3]
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	4613      	mov	r3, r2
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	1a9b      	subs	r3, r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	334c      	adds	r3, #76	; 0x4c
 80047fa:	2201      	movs	r2, #1
 80047fc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80047fe:	78fa      	ldrb	r2, [r7, #3]
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	4613      	mov	r3, r2
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	1a9b      	subs	r3, r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	440b      	add	r3, r1
 800480c:	3326      	adds	r3, #38	; 0x26
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b02      	cmp	r3, #2
 8004812:	d00b      	beq.n	800482c <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004814:	78fa      	ldrb	r2, [r7, #3]
 8004816:	6879      	ldr	r1, [r7, #4]
 8004818:	4613      	mov	r3, r2
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	1a9b      	subs	r3, r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	3326      	adds	r3, #38	; 0x26
 8004824:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004826:	2b03      	cmp	r3, #3
 8004828:	f040 8190 	bne.w	8004b4c <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	799b      	ldrb	r3, [r3, #6]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d115      	bne.n	8004860 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004834:	78fa      	ldrb	r2, [r7, #3]
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	4613      	mov	r3, r2
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	1a9b      	subs	r3, r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	333d      	adds	r3, #61	; 0x3d
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	78fa      	ldrb	r2, [r7, #3]
 8004848:	f083 0301 	eor.w	r3, r3, #1
 800484c:	b2d8      	uxtb	r0, r3
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	4613      	mov	r3, r2
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	333d      	adds	r3, #61	; 0x3d
 800485c:	4602      	mov	r2, r0
 800485e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	799b      	ldrb	r3, [r3, #6]
 8004864:	2b01      	cmp	r3, #1
 8004866:	f040 8171 	bne.w	8004b4c <HCD_HC_OUT_IRQHandler+0x920>
 800486a:	78fa      	ldrb	r2, [r7, #3]
 800486c:	6879      	ldr	r1, [r7, #4]
 800486e:	4613      	mov	r3, r2
 8004870:	011b      	lsls	r3, r3, #4
 8004872:	1a9b      	subs	r3, r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	440b      	add	r3, r1
 8004878:	3334      	adds	r3, #52	; 0x34
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 8165 	beq.w	8004b4c <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004882:	78fa      	ldrb	r2, [r7, #3]
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	440b      	add	r3, r1
 8004890:	3334      	adds	r3, #52	; 0x34
 8004892:	6819      	ldr	r1, [r3, #0]
 8004894:	78fa      	ldrb	r2, [r7, #3]
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	4613      	mov	r3, r2
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4403      	add	r3, r0
 80048a2:	3328      	adds	r3, #40	; 0x28
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	440b      	add	r3, r1
 80048a8:	1e59      	subs	r1, r3, #1
 80048aa:	78fa      	ldrb	r2, [r7, #3]
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	4613      	mov	r3, r2
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	1a9b      	subs	r3, r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4403      	add	r3, r0
 80048b8:	3328      	adds	r3, #40	; 0x28
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80048c0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 813f 	beq.w	8004b4c <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80048ce:	78fa      	ldrb	r2, [r7, #3]
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	4613      	mov	r3, r2
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	1a9b      	subs	r3, r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	440b      	add	r3, r1
 80048dc:	333d      	adds	r3, #61	; 0x3d
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	78fa      	ldrb	r2, [r7, #3]
 80048e2:	f083 0301 	eor.w	r3, r3, #1
 80048e6:	b2d8      	uxtb	r0, r3
 80048e8:	6879      	ldr	r1, [r7, #4]
 80048ea:	4613      	mov	r3, r2
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	1a9b      	subs	r3, r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	440b      	add	r3, r1
 80048f4:	333d      	adds	r3, #61	; 0x3d
 80048f6:	4602      	mov	r2, r0
 80048f8:	701a      	strb	r2, [r3, #0]
 80048fa:	e127      	b.n	8004b4c <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80048fc:	78fa      	ldrb	r2, [r7, #3]
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	4613      	mov	r3, r2
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	1a9b      	subs	r3, r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	334d      	adds	r3, #77	; 0x4d
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b03      	cmp	r3, #3
 8004910:	d120      	bne.n	8004954 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004912:	78fa      	ldrb	r2, [r7, #3]
 8004914:	6879      	ldr	r1, [r7, #4]
 8004916:	4613      	mov	r3, r2
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	1a9b      	subs	r3, r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	440b      	add	r3, r1
 8004920:	334d      	adds	r3, #77	; 0x4d
 8004922:	2202      	movs	r2, #2
 8004924:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004926:	78fa      	ldrb	r2, [r7, #3]
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	4613      	mov	r3, r2
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	1a9b      	subs	r3, r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	440b      	add	r3, r1
 8004934:	331b      	adds	r3, #27
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b01      	cmp	r3, #1
 800493a:	f040 8107 	bne.w	8004b4c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800493e:	78fa      	ldrb	r2, [r7, #3]
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	4613      	mov	r3, r2
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	440b      	add	r3, r1
 800494c:	334c      	adds	r3, #76	; 0x4c
 800494e:	2202      	movs	r2, #2
 8004950:	701a      	strb	r2, [r3, #0]
 8004952:	e0fb      	b.n	8004b4c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004954:	78fa      	ldrb	r2, [r7, #3]
 8004956:	6879      	ldr	r1, [r7, #4]
 8004958:	4613      	mov	r3, r2
 800495a:	011b      	lsls	r3, r3, #4
 800495c:	1a9b      	subs	r3, r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	440b      	add	r3, r1
 8004962:	334d      	adds	r3, #77	; 0x4d
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b04      	cmp	r3, #4
 8004968:	d13a      	bne.n	80049e0 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800496a:	78fa      	ldrb	r2, [r7, #3]
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	4613      	mov	r3, r2
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	1a9b      	subs	r3, r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	440b      	add	r3, r1
 8004978:	334d      	adds	r3, #77	; 0x4d
 800497a:	2202      	movs	r2, #2
 800497c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800497e:	78fa      	ldrb	r2, [r7, #3]
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	1a9b      	subs	r3, r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	334c      	adds	r3, #76	; 0x4c
 800498e:	2202      	movs	r2, #2
 8004990:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004992:	78fa      	ldrb	r2, [r7, #3]
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	4613      	mov	r3, r2
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	1a9b      	subs	r3, r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	440b      	add	r3, r1
 80049a0:	331b      	adds	r3, #27
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	f040 80d1 	bne.w	8004b4c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80049aa:	78fa      	ldrb	r2, [r7, #3]
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	4613      	mov	r3, r2
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	1a9b      	subs	r3, r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	440b      	add	r3, r1
 80049b8:	331b      	adds	r3, #27
 80049ba:	2200      	movs	r2, #0
 80049bc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80049be:	78fb      	ldrb	r3, [r7, #3]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	78fa      	ldrb	r2, [r7, #3]
 80049ce:	0151      	lsls	r1, r2, #5
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	440a      	add	r2, r1
 80049d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049dc:	6053      	str	r3, [r2, #4]
 80049de:	e0b5      	b.n	8004b4c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80049e0:	78fa      	ldrb	r2, [r7, #3]
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	4613      	mov	r3, r2
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	1a9b      	subs	r3, r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	334d      	adds	r3, #77	; 0x4d
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	2b05      	cmp	r3, #5
 80049f4:	d114      	bne.n	8004a20 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049f6:	78fa      	ldrb	r2, [r7, #3]
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	4613      	mov	r3, r2
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	334d      	adds	r3, #77	; 0x4d
 8004a06:	2202      	movs	r2, #2
 8004a08:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004a0a:	78fa      	ldrb	r2, [r7, #3]
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	1a9b      	subs	r3, r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	440b      	add	r3, r1
 8004a18:	334c      	adds	r3, #76	; 0x4c
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	e095      	b.n	8004b4c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004a20:	78fa      	ldrb	r2, [r7, #3]
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	4613      	mov	r3, r2
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	334d      	adds	r3, #77	; 0x4d
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b06      	cmp	r3, #6
 8004a34:	d114      	bne.n	8004a60 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a36:	78fa      	ldrb	r2, [r7, #3]
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	011b      	lsls	r3, r3, #4
 8004a3e:	1a9b      	subs	r3, r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	440b      	add	r3, r1
 8004a44:	334d      	adds	r3, #77	; 0x4d
 8004a46:	2202      	movs	r2, #2
 8004a48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004a4a:	78fa      	ldrb	r2, [r7, #3]
 8004a4c:	6879      	ldr	r1, [r7, #4]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	1a9b      	subs	r3, r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	440b      	add	r3, r1
 8004a58:	334c      	adds	r3, #76	; 0x4c
 8004a5a:	2205      	movs	r2, #5
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	e075      	b.n	8004b4c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004a60:	78fa      	ldrb	r2, [r7, #3]
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	4613      	mov	r3, r2
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	334d      	adds	r3, #77	; 0x4d
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	2b07      	cmp	r3, #7
 8004a74:	d00a      	beq.n	8004a8c <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004a76:	78fa      	ldrb	r2, [r7, #3]
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	1a9b      	subs	r3, r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	440b      	add	r3, r1
 8004a84:	334d      	adds	r3, #77	; 0x4d
 8004a86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004a88:	2b09      	cmp	r3, #9
 8004a8a:	d170      	bne.n	8004b6e <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a8c:	78fa      	ldrb	r2, [r7, #3]
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	334d      	adds	r3, #77	; 0x4d
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004aa0:	78fa      	ldrb	r2, [r7, #3]
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	1a9b      	subs	r3, r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	440b      	add	r3, r1
 8004aae:	3344      	adds	r3, #68	; 0x44
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	1c59      	adds	r1, r3, #1
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	1a9b      	subs	r3, r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4403      	add	r3, r0
 8004ac0:	3344      	adds	r3, #68	; 0x44
 8004ac2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004ac4:	78fa      	ldrb	r2, [r7, #3]
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	1a9b      	subs	r3, r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	3344      	adds	r3, #68	; 0x44
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d914      	bls.n	8004b04 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004ada:	78fa      	ldrb	r2, [r7, #3]
 8004adc:	6879      	ldr	r1, [r7, #4]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	1a9b      	subs	r3, r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	3344      	adds	r3, #68	; 0x44
 8004aea:	2200      	movs	r2, #0
 8004aec:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004aee:	78fa      	ldrb	r2, [r7, #3]
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	4613      	mov	r3, r2
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	1a9b      	subs	r3, r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	440b      	add	r3, r1
 8004afc:	334c      	adds	r3, #76	; 0x4c
 8004afe:	2204      	movs	r2, #4
 8004b00:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b02:	e022      	b.n	8004b4a <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b04:	78fa      	ldrb	r2, [r7, #3]
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	334c      	adds	r3, #76	; 0x4c
 8004b14:	2202      	movs	r2, #2
 8004b16:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b18:	78fb      	ldrb	r3, [r7, #3]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b2e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b36:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b38:	78fb      	ldrb	r3, [r7, #3]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b44:	461a      	mov	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b4a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b4c:	78fa      	ldrb	r2, [r7, #3]
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	1a9b      	subs	r3, r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	334c      	adds	r3, #76	; 0x4c
 8004b5c:	781a      	ldrb	r2, [r3, #0]
 8004b5e:	78fb      	ldrb	r3, [r7, #3]
 8004b60:	4619      	mov	r1, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f008 fade 	bl	800d124 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b68:	e002      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004b6a:	bf00      	nop
 8004b6c:	e000      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004b6e:	bf00      	nop
  }
}
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b08a      	sub	sp, #40	; 0x28
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	0c5b      	lsrs	r3, r3, #17
 8004b9c:	f003 030f 	and.w	r3, r3, #15
 8004ba0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	091b      	lsrs	r3, r3, #4
 8004ba6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004baa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d004      	beq.n	8004bbc <HCD_RXQLVL_IRQHandler+0x46>
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b05      	cmp	r3, #5
 8004bb6:	f000 80b6 	beq.w	8004d26 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004bba:	e0b7      	b.n	8004d2c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 80b3 	beq.w	8004d2a <HCD_RXQLVL_IRQHandler+0x1b4>
 8004bc4:	6879      	ldr	r1, [r7, #4]
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	1a9b      	subs	r3, r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	332c      	adds	r3, #44	; 0x2c
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 80a7 	beq.w	8004d2a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	4613      	mov	r3, r2
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	1a9b      	subs	r3, r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	3338      	adds	r3, #56	; 0x38
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	18d1      	adds	r1, r2, r3
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	1a9b      	subs	r3, r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4403      	add	r3, r0
 8004c00:	3334      	adds	r3, #52	; 0x34
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4299      	cmp	r1, r3
 8004c06:	f200 8083 	bhi.w	8004d10 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	4613      	mov	r3, r2
 8004c14:	011b      	lsls	r3, r3, #4
 8004c16:	1a9b      	subs	r3, r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	332c      	adds	r3, #44	; 0x2c
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	b292      	uxth	r2, r2
 8004c24:	4619      	mov	r1, r3
 8004c26:	f003 ff62 	bl	8008aee <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	1a9b      	subs	r3, r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	440b      	add	r3, r1
 8004c38:	332c      	adds	r3, #44	; 0x2c
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	18d1      	adds	r1, r2, r3
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	4613      	mov	r3, r2
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	1a9b      	subs	r3, r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4403      	add	r3, r0
 8004c4e:	332c      	adds	r3, #44	; 0x2c
 8004c50:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	4613      	mov	r3, r2
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	1a9b      	subs	r3, r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	440b      	add	r3, r1
 8004c60:	3338      	adds	r3, #56	; 0x38
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	18d1      	adds	r1, r2, r3
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	1a9b      	subs	r3, r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4403      	add	r3, r0
 8004c76:	3338      	adds	r3, #56	; 0x38
 8004c78:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	0cdb      	lsrs	r3, r3, #19
 8004c8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c8e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	4613      	mov	r3, r2
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	1a9b      	subs	r3, r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	3328      	adds	r3, #40	; 0x28
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d13f      	bne.n	8004d2a <HCD_RXQLVL_IRQHandler+0x1b4>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d03c      	beq.n	8004d2a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004cc6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cce:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cdc:	461a      	mov	r2, r3
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	1a9b      	subs	r3, r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	440b      	add	r3, r1
 8004cf0:	333c      	adds	r3, #60	; 0x3c
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	f083 0301 	eor.w	r3, r3, #1
 8004cf8:	b2d8      	uxtb	r0, r3
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	1a9b      	subs	r3, r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	440b      	add	r3, r1
 8004d08:	333c      	adds	r3, #60	; 0x3c
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	701a      	strb	r2, [r3, #0]
      break;
 8004d0e:	e00c      	b.n	8004d2a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004d10:	6879      	ldr	r1, [r7, #4]
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	4613      	mov	r3, r2
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	1a9b      	subs	r3, r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	334c      	adds	r3, #76	; 0x4c
 8004d20:	2204      	movs	r2, #4
 8004d22:	701a      	strb	r2, [r3, #0]
      break;
 8004d24:	e001      	b.n	8004d2a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004d26:	bf00      	nop
 8004d28:	e000      	b.n	8004d2c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004d2a:	bf00      	nop
  }
}
 8004d2c:	bf00      	nop
 8004d2e:	3728      	adds	r7, #40	; 0x28
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d60:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d10b      	bne.n	8004d84 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d102      	bne.n	8004d7c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f008 f9b8 	bl	800d0ec <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f043 0302 	orr.w	r3, r3, #2
 8004d82:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b08      	cmp	r3, #8
 8004d8c:	d132      	bne.n	8004df4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f043 0308 	orr.w	r3, r3, #8
 8004d94:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d126      	bne.n	8004dee <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	7a5b      	ldrb	r3, [r3, #9]
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d113      	bne.n	8004dd0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004dae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004db2:	d106      	bne.n	8004dc2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2102      	movs	r1, #2
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f004 f83c 	bl	8008e38 <USB_InitFSLSPClkSel>
 8004dc0:	e011      	b.n	8004de6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f004 f835 	bl	8008e38 <USB_InitFSLSPClkSel>
 8004dce:	e00a      	b.n	8004de6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	79db      	ldrb	r3, [r3, #7]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d106      	bne.n	8004de6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dde:	461a      	mov	r2, r3
 8004de0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004de4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f008 f9aa 	bl	800d140 <HAL_HCD_PortEnabled_Callback>
 8004dec:	e002      	b.n	8004df4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f008 f9b4 	bl	800d15c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b20      	cmp	r3, #32
 8004dfc:	d103      	bne.n	8004e06 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f043 0320 	orr.w	r3, r3, #32
 8004e04:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	6013      	str	r3, [r2, #0]
}
 8004e12:	bf00      	nop
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e12b      	b.n	8005086 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fc f92e 	bl	80010a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2224      	movs	r2, #36	; 0x24
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0201 	bic.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e80:	f000 fb3c 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
 8004e84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	4a81      	ldr	r2, [pc, #516]	; (8005090 <HAL_I2C_Init+0x274>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d807      	bhi.n	8004ea0 <HAL_I2C_Init+0x84>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4a80      	ldr	r2, [pc, #512]	; (8005094 <HAL_I2C_Init+0x278>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	bf94      	ite	ls
 8004e98:	2301      	movls	r3, #1
 8004e9a:	2300      	movhi	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	e006      	b.n	8004eae <HAL_I2C_Init+0x92>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4a7d      	ldr	r2, [pc, #500]	; (8005098 <HAL_I2C_Init+0x27c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	bf94      	ite	ls
 8004ea8:	2301      	movls	r3, #1
 8004eaa:	2300      	movhi	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e0e7      	b.n	8005086 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4a78      	ldr	r2, [pc, #480]	; (800509c <HAL_I2C_Init+0x280>)
 8004eba:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebe:	0c9b      	lsrs	r3, r3, #18
 8004ec0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	4a6a      	ldr	r2, [pc, #424]	; (8005090 <HAL_I2C_Init+0x274>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d802      	bhi.n	8004ef0 <HAL_I2C_Init+0xd4>
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	3301      	adds	r3, #1
 8004eee:	e009      	b.n	8004f04 <HAL_I2C_Init+0xe8>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ef6:	fb02 f303 	mul.w	r3, r2, r3
 8004efa:	4a69      	ldr	r2, [pc, #420]	; (80050a0 <HAL_I2C_Init+0x284>)
 8004efc:	fba2 2303 	umull	r2, r3, r2, r3
 8004f00:	099b      	lsrs	r3, r3, #6
 8004f02:	3301      	adds	r3, #1
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6812      	ldr	r2, [r2, #0]
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	495c      	ldr	r1, [pc, #368]	; (8005090 <HAL_I2C_Init+0x274>)
 8004f20:	428b      	cmp	r3, r1
 8004f22:	d819      	bhi.n	8004f58 <HAL_I2C_Init+0x13c>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	1e59      	subs	r1, r3, #1
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f32:	1c59      	adds	r1, r3, #1
 8004f34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f38:	400b      	ands	r3, r1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_I2C_Init+0x138>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	1e59      	subs	r1, r3, #1
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f52:	e051      	b.n	8004ff8 <HAL_I2C_Init+0x1dc>
 8004f54:	2304      	movs	r3, #4
 8004f56:	e04f      	b.n	8004ff8 <HAL_I2C_Init+0x1dc>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d111      	bne.n	8004f84 <HAL_I2C_Init+0x168>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	1e58      	subs	r0, r3, #1
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6859      	ldr	r1, [r3, #4]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	440b      	add	r3, r1
 8004f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f72:	3301      	adds	r3, #1
 8004f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	bf0c      	ite	eq
 8004f7c:	2301      	moveq	r3, #1
 8004f7e:	2300      	movne	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	e012      	b.n	8004faa <HAL_I2C_Init+0x18e>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	1e58      	subs	r0, r3, #1
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6859      	ldr	r1, [r3, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	0099      	lsls	r1, r3, #2
 8004f94:	440b      	add	r3, r1
 8004f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	bf0c      	ite	eq
 8004fa4:	2301      	moveq	r3, #1
 8004fa6:	2300      	movne	r3, #0
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <HAL_I2C_Init+0x196>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e022      	b.n	8004ff8 <HAL_I2C_Init+0x1dc>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10e      	bne.n	8004fd8 <HAL_I2C_Init+0x1bc>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	1e58      	subs	r0, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6859      	ldr	r1, [r3, #4]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	440b      	add	r3, r1
 8004fc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fcc:	3301      	adds	r3, #1
 8004fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd6:	e00f      	b.n	8004ff8 <HAL_I2C_Init+0x1dc>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	1e58      	subs	r0, r3, #1
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6859      	ldr	r1, [r3, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	0099      	lsls	r1, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fee:	3301      	adds	r3, #1
 8004ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ff4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ff8:	6879      	ldr	r1, [r7, #4]
 8004ffa:	6809      	ldr	r1, [r1, #0]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	69da      	ldr	r2, [r3, #28]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005026:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6911      	ldr	r1, [r2, #16]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	68d2      	ldr	r2, [r2, #12]
 8005032:	4311      	orrs	r1, r2
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6812      	ldr	r2, [r2, #0]
 8005038:	430b      	orrs	r3, r1
 800503a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	695a      	ldr	r2, [r3, #20]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0201 	orr.w	r2, r2, #1
 8005066:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2220      	movs	r2, #32
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	000186a0 	.word	0x000186a0
 8005094:	001e847f 	.word	0x001e847f
 8005098:	003d08ff 	.word	0x003d08ff
 800509c:	431bde83 	.word	0x431bde83
 80050a0:	10624dd3 	.word	0x10624dd3

080050a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e108      	b.n	80052c8 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d106      	bne.n	80050d6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7fc fac1 	bl	8001658 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2203      	movs	r2, #3
 80050da:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050e4:	d102      	bne.n	80050ec <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f003 fa8a 	bl	800860a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6818      	ldr	r0, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	7c1a      	ldrb	r2, [r3, #16]
 80050fe:	f88d 2000 	strb.w	r2, [sp]
 8005102:	3304      	adds	r3, #4
 8005104:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005106:	f003 fa0b 	bl	8008520 <USB_CoreInit>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d005      	beq.n	800511c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e0d5      	b.n	80052c8 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2100      	movs	r1, #0
 8005122:	4618      	mov	r0, r3
 8005124:	f003 fa82 	bl	800862c <USB_SetCurrentMode>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d005      	beq.n	800513a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2202      	movs	r2, #2
 8005132:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e0c6      	b.n	80052c8 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800513a:	2300      	movs	r3, #0
 800513c:	73fb      	strb	r3, [r7, #15]
 800513e:	e04a      	b.n	80051d6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005140:	7bfa      	ldrb	r2, [r7, #15]
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	3315      	adds	r3, #21
 8005150:	2201      	movs	r2, #1
 8005152:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005154:	7bfa      	ldrb	r2, [r7, #15]
 8005156:	6879      	ldr	r1, [r7, #4]
 8005158:	4613      	mov	r3, r2
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	4413      	add	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	3314      	adds	r3, #20
 8005164:	7bfa      	ldrb	r2, [r7, #15]
 8005166:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005168:	7bfa      	ldrb	r2, [r7, #15]
 800516a:	7bfb      	ldrb	r3, [r7, #15]
 800516c:	b298      	uxth	r0, r3
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	4613      	mov	r3, r2
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	4413      	add	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	332e      	adds	r3, #46	; 0x2e
 800517c:	4602      	mov	r2, r0
 800517e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005180:	7bfa      	ldrb	r2, [r7, #15]
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	3318      	adds	r3, #24
 8005190:	2200      	movs	r2, #0
 8005192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005194:	7bfa      	ldrb	r2, [r7, #15]
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	4613      	mov	r3, r2
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	4413      	add	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	331c      	adds	r3, #28
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80051a8:	7bfa      	ldrb	r2, [r7, #15]
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	4613      	mov	r3, r2
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	3320      	adds	r3, #32
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80051bc:	7bfa      	ldrb	r2, [r7, #15]
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	4613      	mov	r3, r2
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	440b      	add	r3, r1
 80051ca:	3324      	adds	r3, #36	; 0x24
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
 80051d2:	3301      	adds	r3, #1
 80051d4:	73fb      	strb	r3, [r7, #15]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	791b      	ldrb	r3, [r3, #4]
 80051da:	7bfa      	ldrb	r2, [r7, #15]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d3af      	bcc.n	8005140 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051e0:	2300      	movs	r3, #0
 80051e2:	73fb      	strb	r3, [r7, #15]
 80051e4:	e044      	b.n	8005270 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80051e6:	7bfa      	ldrb	r2, [r7, #15]
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	4413      	add	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	440b      	add	r3, r1
 80051f4:	f203 2355 	addw	r3, r3, #597	; 0x255
 80051f8:	2200      	movs	r2, #0
 80051fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80051fc:	7bfa      	ldrb	r2, [r7, #15]
 80051fe:	6879      	ldr	r1, [r7, #4]
 8005200:	4613      	mov	r3, r2
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	4413      	add	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	440b      	add	r3, r1
 800520a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800520e:	7bfa      	ldrb	r2, [r7, #15]
 8005210:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005212:	7bfa      	ldrb	r2, [r7, #15]
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	4613      	mov	r3, r2
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	440b      	add	r3, r1
 8005220:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005224:	2200      	movs	r2, #0
 8005226:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005228:	7bfa      	ldrb	r2, [r7, #15]
 800522a:	6879      	ldr	r1, [r7, #4]
 800522c:	4613      	mov	r3, r2
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	4413      	add	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	440b      	add	r3, r1
 8005236:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800523e:	7bfa      	ldrb	r2, [r7, #15]
 8005240:	6879      	ldr	r1, [r7, #4]
 8005242:	4613      	mov	r3, r2
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	440b      	add	r3, r1
 800524c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005254:	7bfa      	ldrb	r2, [r7, #15]
 8005256:	6879      	ldr	r1, [r7, #4]
 8005258:	4613      	mov	r3, r2
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	440b      	add	r3, r1
 8005262:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800526a:	7bfb      	ldrb	r3, [r7, #15]
 800526c:	3301      	adds	r3, #1
 800526e:	73fb      	strb	r3, [r7, #15]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	791b      	ldrb	r3, [r3, #4]
 8005274:	7bfa      	ldrb	r2, [r7, #15]
 8005276:	429a      	cmp	r2, r3
 8005278:	d3b5      	bcc.n	80051e6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6818      	ldr	r0, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	7c1a      	ldrb	r2, [r3, #16]
 8005282:	f88d 2000 	strb.w	r2, [sp]
 8005286:	3304      	adds	r3, #4
 8005288:	cb0e      	ldmia	r3, {r1, r2, r3}
 800528a:	f003 fa1b 	bl	80086c4 <USB_DevInit>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d005      	beq.n	80052a0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e013      	b.n	80052c8 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	7b1b      	ldrb	r3, [r3, #12]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d102      	bne.n	80052bc <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f80a 	bl	80052d0 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f003 fc6c 	bl	8008b9e <USB_DevDisconnect>

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005302:	f043 0303 	orr.w	r3, r3, #3
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e0cc      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800532c:	4b68      	ldr	r3, [pc, #416]	; (80054d0 <HAL_RCC_ClockConfig+0x1b8>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 030f 	and.w	r3, r3, #15
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d90c      	bls.n	8005354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533a:	4b65      	ldr	r3, [pc, #404]	; (80054d0 <HAL_RCC_ClockConfig+0x1b8>)
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005342:	4b63      	ldr	r3, [pc, #396]	; (80054d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d001      	beq.n	8005354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e0b8      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d020      	beq.n	80053a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800536c:	4b59      	ldr	r3, [pc, #356]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	4a58      	ldr	r2, [pc, #352]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005372:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005376:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0308 	and.w	r3, r3, #8
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005384:	4b53      	ldr	r3, [pc, #332]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	4a52      	ldr	r2, [pc, #328]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800538e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005390:	4b50      	ldr	r3, [pc, #320]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	494d      	ldr	r1, [pc, #308]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d044      	beq.n	8005438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d107      	bne.n	80053c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053b6:	4b47      	ldr	r3, [pc, #284]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d119      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e07f      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d003      	beq.n	80053d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d107      	bne.n	80053e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053d6:	4b3f      	ldr	r3, [pc, #252]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d109      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e06f      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e6:	4b3b      	ldr	r3, [pc, #236]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e067      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053f6:	4b37      	ldr	r3, [pc, #220]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f023 0203 	bic.w	r2, r3, #3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	4934      	ldr	r1, [pc, #208]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005404:	4313      	orrs	r3, r2
 8005406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005408:	f7fc fa90 	bl	800192c <HAL_GetTick>
 800540c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800540e:	e00a      	b.n	8005426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005410:	f7fc fa8c 	bl	800192c <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	f241 3288 	movw	r2, #5000	; 0x1388
 800541e:	4293      	cmp	r3, r2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e04f      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005426:	4b2b      	ldr	r3, [pc, #172]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 020c 	and.w	r2, r3, #12
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	429a      	cmp	r2, r3
 8005436:	d1eb      	bne.n	8005410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005438:	4b25      	ldr	r3, [pc, #148]	; (80054d0 <HAL_RCC_ClockConfig+0x1b8>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 030f 	and.w	r3, r3, #15
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	429a      	cmp	r2, r3
 8005444:	d20c      	bcs.n	8005460 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005446:	4b22      	ldr	r3, [pc, #136]	; (80054d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	b2d2      	uxtb	r2, r2
 800544c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800544e:	4b20      	ldr	r3, [pc, #128]	; (80054d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	429a      	cmp	r2, r3
 800545a:	d001      	beq.n	8005460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e032      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d008      	beq.n	800547e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800546c:	4b19      	ldr	r3, [pc, #100]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	4916      	ldr	r1, [pc, #88]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800547a:	4313      	orrs	r3, r2
 800547c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0308 	and.w	r3, r3, #8
 8005486:	2b00      	cmp	r3, #0
 8005488:	d009      	beq.n	800549e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800548a:	4b12      	ldr	r3, [pc, #72]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	490e      	ldr	r1, [pc, #56]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800549a:	4313      	orrs	r3, r2
 800549c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800549e:	f000 fb7f 	bl	8005ba0 <HAL_RCC_GetSysClockFreq>
 80054a2:	4602      	mov	r2, r0
 80054a4:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	091b      	lsrs	r3, r3, #4
 80054aa:	f003 030f 	and.w	r3, r3, #15
 80054ae:	490a      	ldr	r1, [pc, #40]	; (80054d8 <HAL_RCC_ClockConfig+0x1c0>)
 80054b0:	5ccb      	ldrb	r3, [r1, r3]
 80054b2:	fa22 f303 	lsr.w	r3, r2, r3
 80054b6:	4a09      	ldr	r2, [pc, #36]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 80054b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054ba:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <HAL_RCC_ClockConfig+0x1c8>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fc f9f0 	bl	80018a4 <HAL_InitTick>

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40023c00 	.word	0x40023c00
 80054d4:	40023800 	.word	0x40023800
 80054d8:	0800e094 	.word	0x0800e094
 80054dc:	20000000 	.word	0x20000000
 80054e0:	20000004 	.word	0x20000004

080054e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054e8:	4b03      	ldr	r3, [pc, #12]	; (80054f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054ea:	681b      	ldr	r3, [r3, #0]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	20000000 	.word	0x20000000

080054fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005500:	f7ff fff0 	bl	80054e4 <HAL_RCC_GetHCLKFreq>
 8005504:	4602      	mov	r2, r0
 8005506:	4b05      	ldr	r3, [pc, #20]	; (800551c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	0a9b      	lsrs	r3, r3, #10
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	4903      	ldr	r1, [pc, #12]	; (8005520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005512:	5ccb      	ldrb	r3, [r1, r3]
 8005514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005518:	4618      	mov	r0, r3
 800551a:	bd80      	pop	{r7, pc}
 800551c:	40023800 	.word	0x40023800
 8005520:	0800e0a4 	.word	0x0800e0a4

08005524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005528:	f7ff ffdc 	bl	80054e4 <HAL_RCC_GetHCLKFreq>
 800552c:	4602      	mov	r2, r0
 800552e:	4b05      	ldr	r3, [pc, #20]	; (8005544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	0b5b      	lsrs	r3, r3, #13
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	4903      	ldr	r1, [pc, #12]	; (8005548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800553a:	5ccb      	ldrb	r3, [r1, r3]
 800553c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005540:	4618      	mov	r0, r3
 8005542:	bd80      	pop	{r7, pc}
 8005544:	40023800 	.word	0x40023800
 8005548:	0800e0a4 	.word	0x0800e0a4

0800554c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08c      	sub	sp, #48	; 0x30
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d010      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005584:	4b6f      	ldr	r3, [pc, #444]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005586:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800558a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005592:	496c      	ldr	r1, [pc, #432]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005594:	4313      	orrs	r3, r2
 8005596:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80055a2:	2301      	movs	r3, #1
 80055a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d010      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80055b2:	4b64      	ldr	r3, [pc, #400]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80055b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c0:	4960      	ldr	r1, [pc, #384]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80055d0:	2301      	movs	r3, #1
 80055d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d017      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055e0:	4b58      	ldr	r3, [pc, #352]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80055e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ee:	4955      	ldr	r1, [pc, #340]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055fe:	d101      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005600:	2301      	movs	r3, #1
 8005602:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800560c:	2301      	movs	r3, #1
 800560e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0308 	and.w	r3, r3, #8
 8005618:	2b00      	cmp	r3, #0
 800561a:	d017      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800561c:	4b49      	ldr	r3, [pc, #292]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800561e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005622:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562a:	4946      	ldr	r1, [pc, #280]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800563a:	d101      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800563c:	2301      	movs	r3, #1
 800563e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005648:	2301      	movs	r3, #1
 800564a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 808a 	beq.w	800576e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800565a:	2300      	movs	r3, #0
 800565c:	60bb      	str	r3, [r7, #8]
 800565e:	4b39      	ldr	r3, [pc, #228]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	4a38      	ldr	r2, [pc, #224]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005668:	6413      	str	r3, [r2, #64]	; 0x40
 800566a:	4b36      	ldr	r3, [pc, #216]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005672:	60bb      	str	r3, [r7, #8]
 8005674:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005676:	4b34      	ldr	r3, [pc, #208]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a33      	ldr	r2, [pc, #204]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800567c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005680:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005682:	f7fc f953 	bl	800192c <HAL_GetTick>
 8005686:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005688:	e008      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800568a:	f7fc f94f 	bl	800192c <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d901      	bls.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e278      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800569c:	4b2a      	ldr	r3, [pc, #168]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d0f0      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056a8:	4b26      	ldr	r3, [pc, #152]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80056aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d02f      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056c0:	6a3a      	ldr	r2, [r7, #32]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d028      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056c6:	4b1f      	ldr	r3, [pc, #124]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80056c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ce:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056d0:	4b1e      	ldr	r3, [pc, #120]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80056d2:	2201      	movs	r2, #1
 80056d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056d6:	4b1d      	ldr	r3, [pc, #116]	; (800574c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80056dc:	4a19      	ldr	r2, [pc, #100]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056e2:	4b18      	ldr	r3, [pc, #96]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80056e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d114      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80056ee:	f7fc f91d 	bl	800192c <HAL_GetTick>
 80056f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f4:	e00a      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056f6:	f7fc f919 	bl	800192c <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	f241 3288 	movw	r2, #5000	; 0x1388
 8005704:	4293      	cmp	r3, r2
 8005706:	d901      	bls.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e240      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800570c:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800570e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0ee      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005720:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005724:	d114      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005726:	4b07      	ldr	r3, [pc, #28]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800573a:	4902      	ldr	r1, [pc, #8]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800573c:	4313      	orrs	r3, r2
 800573e:	608b      	str	r3, [r1, #8]
 8005740:	e00c      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005742:	bf00      	nop
 8005744:	40023800 	.word	0x40023800
 8005748:	40007000 	.word	0x40007000
 800574c:	42470e40 	.word	0x42470e40
 8005750:	4b4a      	ldr	r3, [pc, #296]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	4a49      	ldr	r2, [pc, #292]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005756:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800575a:	6093      	str	r3, [r2, #8]
 800575c:	4b47      	ldr	r3, [pc, #284]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800575e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005768:	4944      	ldr	r1, [pc, #272]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800576a:	4313      	orrs	r3, r2
 800576c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	2b00      	cmp	r3, #0
 8005778:	d004      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8005780:	4b3f      	ldr	r3, [pc, #252]	; (8005880 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005782:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005790:	4b3a      	ldr	r3, [pc, #232]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005796:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800579e:	4937      	ldr	r1, [pc, #220]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057b2:	4b32      	ldr	r3, [pc, #200]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80057b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057b8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057c0:	492e      	ldr	r1, [pc, #184]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d011      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80057d4:	4b29      	ldr	r3, [pc, #164]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80057d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057da:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e2:	4926      	ldr	r1, [pc, #152]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057f2:	d101      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80057f4:	2301      	movs	r3, #1
 80057f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00a      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005804:	4b1d      	ldr	r3, [pc, #116]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800580a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005812:	491a      	ldr	r1, [pc, #104]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005814:	4313      	orrs	r3, r2
 8005816:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005822:	2b00      	cmp	r3, #0
 8005824:	d011      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005826:	4b15      	ldr	r3, [pc, #84]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800582c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005834:	4911      	ldr	r1, [pc, #68]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005836:	4313      	orrs	r3, r2
 8005838:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005844:	d101      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005846:	2301      	movs	r3, #1
 8005848:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800584a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584c:	2b01      	cmp	r3, #1
 800584e:	d005      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005858:	f040 80ff 	bne.w	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800585c:	4b09      	ldr	r3, [pc, #36]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005862:	f7fc f863 	bl	800192c <HAL_GetTick>
 8005866:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005868:	e00e      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800586a:	f7fc f85f 	bl	800192c <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d907      	bls.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e188      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800587c:	40023800 	.word	0x40023800
 8005880:	424711e0 	.word	0x424711e0
 8005884:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005888:	4b7e      	ldr	r3, [pc, #504]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1ea      	bne.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d009      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d028      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d124      	bne.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80058bc:	4b71      	ldr	r3, [pc, #452]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80058be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058c2:	0c1b      	lsrs	r3, r3, #16
 80058c4:	f003 0303 	and.w	r3, r3, #3
 80058c8:	3301      	adds	r3, #1
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80058ce:	4b6d      	ldr	r3, [pc, #436]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80058d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058d4:	0e1b      	lsrs	r3, r3, #24
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	019b      	lsls	r3, r3, #6
 80058e6:	431a      	orrs	r2, r3
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	085b      	lsrs	r3, r3, #1
 80058ec:	3b01      	subs	r3, #1
 80058ee:	041b      	lsls	r3, r3, #16
 80058f0:	431a      	orrs	r2, r3
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	061b      	lsls	r3, r3, #24
 80058f6:	431a      	orrs	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	071b      	lsls	r3, r3, #28
 80058fe:	4961      	ldr	r1, [pc, #388]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005900:	4313      	orrs	r3, r2
 8005902:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0304 	and.w	r3, r3, #4
 800590e:	2b00      	cmp	r3, #0
 8005910:	d004      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800591a:	d00a      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005924:	2b00      	cmp	r3, #0
 8005926:	d035      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005930:	d130      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005932:	4b54      	ldr	r3, [pc, #336]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005938:	0c1b      	lsrs	r3, r3, #16
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	3301      	adds	r3, #1
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005944:	4b4f      	ldr	r3, [pc, #316]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800594a:	0f1b      	lsrs	r3, r3, #28
 800594c:	f003 0307 	and.w	r3, r3, #7
 8005950:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	019b      	lsls	r3, r3, #6
 800595c:	431a      	orrs	r2, r3
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	085b      	lsrs	r3, r3, #1
 8005962:	3b01      	subs	r3, #1
 8005964:	041b      	lsls	r3, r3, #16
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	061b      	lsls	r3, r3, #24
 800596e:	431a      	orrs	r2, r3
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	071b      	lsls	r3, r3, #28
 8005974:	4943      	ldr	r1, [pc, #268]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005976:	4313      	orrs	r3, r2
 8005978:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800597c:	4b41      	ldr	r3, [pc, #260]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800597e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005982:	f023 021f 	bic.w	r2, r3, #31
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598a:	3b01      	subs	r3, #1
 800598c:	493d      	ldr	r1, [pc, #244]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800598e:	4313      	orrs	r3, r2
 8005990:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800599c:	2b00      	cmp	r3, #0
 800599e:	d029      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059a8:	d124      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80059aa:	4b36      	ldr	r3, [pc, #216]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80059ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059b0:	0c1b      	lsrs	r3, r3, #16
 80059b2:	f003 0303 	and.w	r3, r3, #3
 80059b6:	3301      	adds	r3, #1
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059bc:	4b31      	ldr	r3, [pc, #196]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80059be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059c2:	0f1b      	lsrs	r3, r3, #28
 80059c4:	f003 0307 	and.w	r3, r3, #7
 80059c8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	019b      	lsls	r3, r3, #6
 80059d4:	431a      	orrs	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	085b      	lsrs	r3, r3, #1
 80059dc:	3b01      	subs	r3, #1
 80059de:	041b      	lsls	r3, r3, #16
 80059e0:	431a      	orrs	r2, r3
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	061b      	lsls	r3, r3, #24
 80059e6:	431a      	orrs	r2, r3
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	071b      	lsls	r3, r3, #28
 80059ec:	4925      	ldr	r1, [pc, #148]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d016      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	019b      	lsls	r3, r3, #6
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	085b      	lsrs	r3, r3, #1
 8005a12:	3b01      	subs	r3, #1
 8005a14:	041b      	lsls	r3, r3, #16
 8005a16:	431a      	orrs	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	061b      	lsls	r3, r3, #24
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	071b      	lsls	r3, r3, #28
 8005a26:	4917      	ldr	r1, [pc, #92]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a2e:	4b16      	ldr	r3, [pc, #88]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005a30:	2201      	movs	r2, #1
 8005a32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a34:	f7fb ff7a 	bl	800192c <HAL_GetTick>
 8005a38:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a3c:	f7fb ff76 	bl	800192c <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e09f      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a4e:	4b0d      	ldr	r3, [pc, #52]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0f0      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8005a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	f040 8095 	bne.w	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a62:	4b0a      	ldr	r3, [pc, #40]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a68:	f7fb ff60 	bl	800192c <HAL_GetTick>
 8005a6c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a6e:	e00f      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005a70:	f7fb ff5c 	bl	800192c <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d908      	bls.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e085      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005a82:	bf00      	nop
 8005a84:	40023800 	.word	0x40023800
 8005a88:	42470068 	.word	0x42470068
 8005a8c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a90:	4b41      	ldr	r3, [pc, #260]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a9c:	d0e8      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0304 	and.w	r3, r3, #4
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d009      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d02b      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d127      	bne.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005ac6:	4b34      	ldr	r3, [pc, #208]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005acc:	0c1b      	lsrs	r3, r3, #16
 8005ace:	f003 0303 	and.w	r3, r3, #3
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699a      	ldr	r2, [r3, #24]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	019b      	lsls	r3, r3, #6
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	085b      	lsrs	r3, r3, #1
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	041b      	lsls	r3, r3, #16
 8005aec:	431a      	orrs	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	061b      	lsls	r3, r3, #24
 8005af4:	4928      	ldr	r1, [pc, #160]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005afc:	4b26      	ldr	r3, [pc, #152]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b02:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	021b      	lsls	r3, r3, #8
 8005b0e:	4922      	ldr	r1, [pc, #136]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d01d      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b2a:	d118      	bne.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b2c:	4b1a      	ldr	r3, [pc, #104]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b32:	0e1b      	lsrs	r3, r3, #24
 8005b34:	f003 030f 	and.w	r3, r3, #15
 8005b38:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	019b      	lsls	r3, r3, #6
 8005b44:	431a      	orrs	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	085b      	lsrs	r3, r3, #1
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	041b      	lsls	r3, r3, #16
 8005b50:	431a      	orrs	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	061b      	lsls	r3, r3, #24
 8005b56:	4910      	ldr	r1, [pc, #64]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b5e:	4b0f      	ldr	r3, [pc, #60]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005b60:	2201      	movs	r2, #1
 8005b62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b64:	f7fb fee2 	bl	800192c <HAL_GetTick>
 8005b68:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005b6c:	f7fb fede 	bl	800192c <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e007      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b7e:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b8a:	d1ef      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3730      	adds	r7, #48	; 0x30
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	40023800 	.word	0x40023800
 8005b9c:	42470070 	.word	0x42470070

08005ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ba4:	b0ae      	sub	sp, #184	; 0xb8
 8005ba6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bc6:	4bcb      	ldr	r3, [pc, #812]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 030c 	and.w	r3, r3, #12
 8005bce:	2b0c      	cmp	r3, #12
 8005bd0:	f200 8206 	bhi.w	8005fe0 <HAL_RCC_GetSysClockFreq+0x440>
 8005bd4:	a201      	add	r2, pc, #4	; (adr r2, 8005bdc <HAL_RCC_GetSysClockFreq+0x3c>)
 8005bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bda:	bf00      	nop
 8005bdc:	08005c11 	.word	0x08005c11
 8005be0:	08005fe1 	.word	0x08005fe1
 8005be4:	08005fe1 	.word	0x08005fe1
 8005be8:	08005fe1 	.word	0x08005fe1
 8005bec:	08005c19 	.word	0x08005c19
 8005bf0:	08005fe1 	.word	0x08005fe1
 8005bf4:	08005fe1 	.word	0x08005fe1
 8005bf8:	08005fe1 	.word	0x08005fe1
 8005bfc:	08005c21 	.word	0x08005c21
 8005c00:	08005fe1 	.word	0x08005fe1
 8005c04:	08005fe1 	.word	0x08005fe1
 8005c08:	08005fe1 	.word	0x08005fe1
 8005c0c:	08005e11 	.word	0x08005e11
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c10:	4bb9      	ldr	r3, [pc, #740]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0x358>)
 8005c12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005c16:	e1e7      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c18:	4bb8      	ldr	r3, [pc, #736]	; (8005efc <HAL_RCC_GetSysClockFreq+0x35c>)
 8005c1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005c1e:	e1e3      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c20:	4bb4      	ldr	r3, [pc, #720]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c2c:	4bb1      	ldr	r3, [pc, #708]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d071      	beq.n	8005d1c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c38:	4bae      	ldr	r3, [pc, #696]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	099b      	lsrs	r3, r3, #6
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c44:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c54:	2300      	movs	r3, #0
 8005c56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005c5e:	4622      	mov	r2, r4
 8005c60:	462b      	mov	r3, r5
 8005c62:	f04f 0000 	mov.w	r0, #0
 8005c66:	f04f 0100 	mov.w	r1, #0
 8005c6a:	0159      	lsls	r1, r3, #5
 8005c6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c70:	0150      	lsls	r0, r2, #5
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	4621      	mov	r1, r4
 8005c78:	1a51      	subs	r1, r2, r1
 8005c7a:	6439      	str	r1, [r7, #64]	; 0x40
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	eb63 0301 	sbc.w	r3, r3, r1
 8005c82:	647b      	str	r3, [r7, #68]	; 0x44
 8005c84:	f04f 0200 	mov.w	r2, #0
 8005c88:	f04f 0300 	mov.w	r3, #0
 8005c8c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005c90:	4649      	mov	r1, r9
 8005c92:	018b      	lsls	r3, r1, #6
 8005c94:	4641      	mov	r1, r8
 8005c96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c9a:	4641      	mov	r1, r8
 8005c9c:	018a      	lsls	r2, r1, #6
 8005c9e:	4641      	mov	r1, r8
 8005ca0:	1a51      	subs	r1, r2, r1
 8005ca2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ca4:	4649      	mov	r1, r9
 8005ca6:	eb63 0301 	sbc.w	r3, r3, r1
 8005caa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cac:	f04f 0200 	mov.w	r2, #0
 8005cb0:	f04f 0300 	mov.w	r3, #0
 8005cb4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005cb8:	4649      	mov	r1, r9
 8005cba:	00cb      	lsls	r3, r1, #3
 8005cbc:	4641      	mov	r1, r8
 8005cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cc2:	4641      	mov	r1, r8
 8005cc4:	00ca      	lsls	r2, r1, #3
 8005cc6:	4610      	mov	r0, r2
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4603      	mov	r3, r0
 8005ccc:	4622      	mov	r2, r4
 8005cce:	189b      	adds	r3, r3, r2
 8005cd0:	633b      	str	r3, [r7, #48]	; 0x30
 8005cd2:	462b      	mov	r3, r5
 8005cd4:	460a      	mov	r2, r1
 8005cd6:	eb42 0303 	adc.w	r3, r2, r3
 8005cda:	637b      	str	r3, [r7, #52]	; 0x34
 8005cdc:	f04f 0200 	mov.w	r2, #0
 8005ce0:	f04f 0300 	mov.w	r3, #0
 8005ce4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005ce8:	4629      	mov	r1, r5
 8005cea:	024b      	lsls	r3, r1, #9
 8005cec:	4621      	mov	r1, r4
 8005cee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	024a      	lsls	r2, r1, #9
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d08:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005d0c:	f7fa fa7a 	bl	8000204 <__aeabi_uldivmod>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4613      	mov	r3, r2
 8005d16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d1a:	e067      	b.n	8005dec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d1c:	4b75      	ldr	r3, [pc, #468]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	099b      	lsrs	r3, r3, #6
 8005d22:	2200      	movs	r2, #0
 8005d24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d28:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005d2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d34:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d36:	2300      	movs	r3, #0
 8005d38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005d3a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005d3e:	4622      	mov	r2, r4
 8005d40:	462b      	mov	r3, r5
 8005d42:	f04f 0000 	mov.w	r0, #0
 8005d46:	f04f 0100 	mov.w	r1, #0
 8005d4a:	0159      	lsls	r1, r3, #5
 8005d4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d50:	0150      	lsls	r0, r2, #5
 8005d52:	4602      	mov	r2, r0
 8005d54:	460b      	mov	r3, r1
 8005d56:	4621      	mov	r1, r4
 8005d58:	1a51      	subs	r1, r2, r1
 8005d5a:	62b9      	str	r1, [r7, #40]	; 0x28
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	eb63 0301 	sbc.w	r3, r3, r1
 8005d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d64:	f04f 0200 	mov.w	r2, #0
 8005d68:	f04f 0300 	mov.w	r3, #0
 8005d6c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005d70:	4649      	mov	r1, r9
 8005d72:	018b      	lsls	r3, r1, #6
 8005d74:	4641      	mov	r1, r8
 8005d76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d7a:	4641      	mov	r1, r8
 8005d7c:	018a      	lsls	r2, r1, #6
 8005d7e:	4641      	mov	r1, r8
 8005d80:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d84:	4649      	mov	r1, r9
 8005d86:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d8a:	f04f 0200 	mov.w	r2, #0
 8005d8e:	f04f 0300 	mov.w	r3, #0
 8005d92:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d96:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d9e:	4692      	mov	sl, r2
 8005da0:	469b      	mov	fp, r3
 8005da2:	4623      	mov	r3, r4
 8005da4:	eb1a 0303 	adds.w	r3, sl, r3
 8005da8:	623b      	str	r3, [r7, #32]
 8005daa:	462b      	mov	r3, r5
 8005dac:	eb4b 0303 	adc.w	r3, fp, r3
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
 8005db2:	f04f 0200 	mov.w	r2, #0
 8005db6:	f04f 0300 	mov.w	r3, #0
 8005dba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005dbe:	4629      	mov	r1, r5
 8005dc0:	028b      	lsls	r3, r1, #10
 8005dc2:	4621      	mov	r1, r4
 8005dc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005dc8:	4621      	mov	r1, r4
 8005dca:	028a      	lsls	r2, r1, #10
 8005dcc:	4610      	mov	r0, r2
 8005dce:	4619      	mov	r1, r3
 8005dd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	673b      	str	r3, [r7, #112]	; 0x70
 8005dd8:	677a      	str	r2, [r7, #116]	; 0x74
 8005dda:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005dde:	f7fa fa11 	bl	8000204 <__aeabi_uldivmod>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	4613      	mov	r3, r2
 8005de8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005dec:	4b41      	ldr	r3, [pc, #260]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	0c1b      	lsrs	r3, r3, #16
 8005df2:	f003 0303 	and.w	r3, r3, #3
 8005df6:	3301      	adds	r3, #1
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005dfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005e0e:	e0eb      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e10:	4b38      	ldr	r3, [pc, #224]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e1c:	4b35      	ldr	r3, [pc, #212]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d06b      	beq.n	8005f00 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e28:	4b32      	ldr	r3, [pc, #200]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	099b      	lsrs	r3, r3, #6
 8005e2e:	2200      	movs	r2, #0
 8005e30:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3a:	663b      	str	r3, [r7, #96]	; 0x60
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	667b      	str	r3, [r7, #100]	; 0x64
 8005e40:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005e44:	4622      	mov	r2, r4
 8005e46:	462b      	mov	r3, r5
 8005e48:	f04f 0000 	mov.w	r0, #0
 8005e4c:	f04f 0100 	mov.w	r1, #0
 8005e50:	0159      	lsls	r1, r3, #5
 8005e52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e56:	0150      	lsls	r0, r2, #5
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	1a51      	subs	r1, r2, r1
 8005e60:	61b9      	str	r1, [r7, #24]
 8005e62:	4629      	mov	r1, r5
 8005e64:	eb63 0301 	sbc.w	r3, r3, r1
 8005e68:	61fb      	str	r3, [r7, #28]
 8005e6a:	f04f 0200 	mov.w	r2, #0
 8005e6e:	f04f 0300 	mov.w	r3, #0
 8005e72:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005e76:	4659      	mov	r1, fp
 8005e78:	018b      	lsls	r3, r1, #6
 8005e7a:	4651      	mov	r1, sl
 8005e7c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e80:	4651      	mov	r1, sl
 8005e82:	018a      	lsls	r2, r1, #6
 8005e84:	4651      	mov	r1, sl
 8005e86:	ebb2 0801 	subs.w	r8, r2, r1
 8005e8a:	4659      	mov	r1, fp
 8005e8c:	eb63 0901 	sbc.w	r9, r3, r1
 8005e90:	f04f 0200 	mov.w	r2, #0
 8005e94:	f04f 0300 	mov.w	r3, #0
 8005e98:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e9c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ea0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ea4:	4690      	mov	r8, r2
 8005ea6:	4699      	mov	r9, r3
 8005ea8:	4623      	mov	r3, r4
 8005eaa:	eb18 0303 	adds.w	r3, r8, r3
 8005eae:	613b      	str	r3, [r7, #16]
 8005eb0:	462b      	mov	r3, r5
 8005eb2:	eb49 0303 	adc.w	r3, r9, r3
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	f04f 0200 	mov.w	r2, #0
 8005ebc:	f04f 0300 	mov.w	r3, #0
 8005ec0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	024b      	lsls	r3, r1, #9
 8005ec8:	4621      	mov	r1, r4
 8005eca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ece:	4621      	mov	r1, r4
 8005ed0:	024a      	lsls	r2, r1, #9
 8005ed2:	4610      	mov	r0, r2
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005eda:	2200      	movs	r2, #0
 8005edc:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ede:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005ee0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ee4:	f7fa f98e 	bl	8000204 <__aeabi_uldivmod>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4613      	mov	r3, r2
 8005eee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ef2:	e065      	b.n	8005fc0 <HAL_RCC_GetSysClockFreq+0x420>
 8005ef4:	40023800 	.word	0x40023800
 8005ef8:	00f42400 	.word	0x00f42400
 8005efc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f00:	4b3d      	ldr	r3, [pc, #244]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x458>)
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	099b      	lsrs	r3, r3, #6
 8005f06:	2200      	movs	r2, #0
 8005f08:	4618      	mov	r0, r3
 8005f0a:	4611      	mov	r1, r2
 8005f0c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f10:	653b      	str	r3, [r7, #80]	; 0x50
 8005f12:	2300      	movs	r3, #0
 8005f14:	657b      	str	r3, [r7, #84]	; 0x54
 8005f16:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005f1a:	4642      	mov	r2, r8
 8005f1c:	464b      	mov	r3, r9
 8005f1e:	f04f 0000 	mov.w	r0, #0
 8005f22:	f04f 0100 	mov.w	r1, #0
 8005f26:	0159      	lsls	r1, r3, #5
 8005f28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f2c:	0150      	lsls	r0, r2, #5
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	4641      	mov	r1, r8
 8005f34:	1a51      	subs	r1, r2, r1
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	4649      	mov	r1, r9
 8005f3a:	eb63 0301 	sbc.w	r3, r3, r1
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	f04f 0200 	mov.w	r2, #0
 8005f44:	f04f 0300 	mov.w	r3, #0
 8005f48:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005f4c:	4659      	mov	r1, fp
 8005f4e:	018b      	lsls	r3, r1, #6
 8005f50:	4651      	mov	r1, sl
 8005f52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f56:	4651      	mov	r1, sl
 8005f58:	018a      	lsls	r2, r1, #6
 8005f5a:	4651      	mov	r1, sl
 8005f5c:	1a54      	subs	r4, r2, r1
 8005f5e:	4659      	mov	r1, fp
 8005f60:	eb63 0501 	sbc.w	r5, r3, r1
 8005f64:	f04f 0200 	mov.w	r2, #0
 8005f68:	f04f 0300 	mov.w	r3, #0
 8005f6c:	00eb      	lsls	r3, r5, #3
 8005f6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f72:	00e2      	lsls	r2, r4, #3
 8005f74:	4614      	mov	r4, r2
 8005f76:	461d      	mov	r5, r3
 8005f78:	4643      	mov	r3, r8
 8005f7a:	18e3      	adds	r3, r4, r3
 8005f7c:	603b      	str	r3, [r7, #0]
 8005f7e:	464b      	mov	r3, r9
 8005f80:	eb45 0303 	adc.w	r3, r5, r3
 8005f84:	607b      	str	r3, [r7, #4]
 8005f86:	f04f 0200 	mov.w	r2, #0
 8005f8a:	f04f 0300 	mov.w	r3, #0
 8005f8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f92:	4629      	mov	r1, r5
 8005f94:	028b      	lsls	r3, r1, #10
 8005f96:	4621      	mov	r1, r4
 8005f98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	028a      	lsls	r2, r1, #10
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fa8:	2200      	movs	r2, #0
 8005faa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fac:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005fae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005fb2:	f7fa f927 	bl	8000204 <__aeabi_uldivmod>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4613      	mov	r3, r2
 8005fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005fc0:	4b0d      	ldr	r3, [pc, #52]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x458>)
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	0f1b      	lsrs	r3, r3, #28
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005fce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005fd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005fde:	e003      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fe0:	4b06      	ldr	r3, [pc, #24]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x45c>)
 8005fe2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005fe6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fe8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	37b8      	adds	r7, #184	; 0xb8
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ff6:	bf00      	nop
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	00f42400 	.word	0x00f42400

08006000 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e28d      	b.n	800652e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 8083 	beq.w	8006126 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006020:	4b94      	ldr	r3, [pc, #592]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f003 030c 	and.w	r3, r3, #12
 8006028:	2b04      	cmp	r3, #4
 800602a:	d019      	beq.n	8006060 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800602c:	4b91      	ldr	r3, [pc, #580]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006034:	2b08      	cmp	r3, #8
 8006036:	d106      	bne.n	8006046 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006038:	4b8e      	ldr	r3, [pc, #568]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006040:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006044:	d00c      	beq.n	8006060 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006046:	4b8b      	ldr	r3, [pc, #556]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800604e:	2b0c      	cmp	r3, #12
 8006050:	d112      	bne.n	8006078 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006052:	4b88      	ldr	r3, [pc, #544]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800605a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800605e:	d10b      	bne.n	8006078 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006060:	4b84      	ldr	r3, [pc, #528]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d05b      	beq.n	8006124 <HAL_RCC_OscConfig+0x124>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d157      	bne.n	8006124 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e25a      	b.n	800652e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006080:	d106      	bne.n	8006090 <HAL_RCC_OscConfig+0x90>
 8006082:	4b7c      	ldr	r3, [pc, #496]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a7b      	ldr	r2, [pc, #492]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800608c:	6013      	str	r3, [r2, #0]
 800608e:	e01d      	b.n	80060cc <HAL_RCC_OscConfig+0xcc>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006098:	d10c      	bne.n	80060b4 <HAL_RCC_OscConfig+0xb4>
 800609a:	4b76      	ldr	r3, [pc, #472]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a75      	ldr	r2, [pc, #468]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80060a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	4b73      	ldr	r3, [pc, #460]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a72      	ldr	r2, [pc, #456]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80060ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	e00b      	b.n	80060cc <HAL_RCC_OscConfig+0xcc>
 80060b4:	4b6f      	ldr	r3, [pc, #444]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a6e      	ldr	r2, [pc, #440]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80060ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060be:	6013      	str	r3, [r2, #0]
 80060c0:	4b6c      	ldr	r3, [pc, #432]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a6b      	ldr	r2, [pc, #428]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80060c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d013      	beq.n	80060fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d4:	f7fb fc2a 	bl	800192c <HAL_GetTick>
 80060d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060dc:	f7fb fc26 	bl	800192c <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b64      	cmp	r3, #100	; 0x64
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e21f      	b.n	800652e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ee:	4b61      	ldr	r3, [pc, #388]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d0f0      	beq.n	80060dc <HAL_RCC_OscConfig+0xdc>
 80060fa:	e014      	b.n	8006126 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060fc:	f7fb fc16 	bl	800192c <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006102:	e008      	b.n	8006116 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006104:	f7fb fc12 	bl	800192c <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b64      	cmp	r3, #100	; 0x64
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e20b      	b.n	800652e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006116:	4b57      	ldr	r3, [pc, #348]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1f0      	bne.n	8006104 <HAL_RCC_OscConfig+0x104>
 8006122:	e000      	b.n	8006126 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d06f      	beq.n	8006212 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006132:	4b50      	ldr	r3, [pc, #320]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f003 030c 	and.w	r3, r3, #12
 800613a:	2b00      	cmp	r3, #0
 800613c:	d017      	beq.n	800616e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800613e:	4b4d      	ldr	r3, [pc, #308]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006146:	2b08      	cmp	r3, #8
 8006148:	d105      	bne.n	8006156 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800614a:	4b4a      	ldr	r3, [pc, #296]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00b      	beq.n	800616e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006156:	4b47      	ldr	r3, [pc, #284]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800615e:	2b0c      	cmp	r3, #12
 8006160:	d11c      	bne.n	800619c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006162:	4b44      	ldr	r3, [pc, #272]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d116      	bne.n	800619c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800616e:	4b41      	ldr	r3, [pc, #260]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d005      	beq.n	8006186 <HAL_RCC_OscConfig+0x186>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d001      	beq.n	8006186 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e1d3      	b.n	800652e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006186:	4b3b      	ldr	r3, [pc, #236]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	4937      	ldr	r1, [pc, #220]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006196:	4313      	orrs	r3, r2
 8006198:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800619a:	e03a      	b.n	8006212 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d020      	beq.n	80061e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061a4:	4b34      	ldr	r3, [pc, #208]	; (8006278 <HAL_RCC_OscConfig+0x278>)
 80061a6:	2201      	movs	r2, #1
 80061a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061aa:	f7fb fbbf 	bl	800192c <HAL_GetTick>
 80061ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061b0:	e008      	b.n	80061c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061b2:	f7fb fbbb 	bl	800192c <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d901      	bls.n	80061c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e1b4      	b.n	800652e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061c4:	4b2b      	ldr	r3, [pc, #172]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d0f0      	beq.n	80061b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061d0:	4b28      	ldr	r3, [pc, #160]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	00db      	lsls	r3, r3, #3
 80061de:	4925      	ldr	r1, [pc, #148]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	600b      	str	r3, [r1, #0]
 80061e4:	e015      	b.n	8006212 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061e6:	4b24      	ldr	r3, [pc, #144]	; (8006278 <HAL_RCC_OscConfig+0x278>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ec:	f7fb fb9e 	bl	800192c <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061f4:	f7fb fb9a 	bl	800192c <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e193      	b.n	800652e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006206:	4b1b      	ldr	r3, [pc, #108]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1f0      	bne.n	80061f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0308 	and.w	r3, r3, #8
 800621a:	2b00      	cmp	r3, #0
 800621c:	d036      	beq.n	800628c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d016      	beq.n	8006254 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006226:	4b15      	ldr	r3, [pc, #84]	; (800627c <HAL_RCC_OscConfig+0x27c>)
 8006228:	2201      	movs	r2, #1
 800622a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800622c:	f7fb fb7e 	bl	800192c <HAL_GetTick>
 8006230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006232:	e008      	b.n	8006246 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006234:	f7fb fb7a 	bl	800192c <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d901      	bls.n	8006246 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e173      	b.n	800652e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006246:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <HAL_RCC_OscConfig+0x274>)
 8006248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0f0      	beq.n	8006234 <HAL_RCC_OscConfig+0x234>
 8006252:	e01b      	b.n	800628c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006254:	4b09      	ldr	r3, [pc, #36]	; (800627c <HAL_RCC_OscConfig+0x27c>)
 8006256:	2200      	movs	r2, #0
 8006258:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800625a:	f7fb fb67 	bl	800192c <HAL_GetTick>
 800625e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006260:	e00e      	b.n	8006280 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006262:	f7fb fb63 	bl	800192c <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b02      	cmp	r3, #2
 800626e:	d907      	bls.n	8006280 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e15c      	b.n	800652e <HAL_RCC_OscConfig+0x52e>
 8006274:	40023800 	.word	0x40023800
 8006278:	42470000 	.word	0x42470000
 800627c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006280:	4b8a      	ldr	r3, [pc, #552]	; (80064ac <HAL_RCC_OscConfig+0x4ac>)
 8006282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1ea      	bne.n	8006262 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0304 	and.w	r3, r3, #4
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 8097 	beq.w	80063c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800629a:	2300      	movs	r3, #0
 800629c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800629e:	4b83      	ldr	r3, [pc, #524]	; (80064ac <HAL_RCC_OscConfig+0x4ac>)
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10f      	bne.n	80062ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062aa:	2300      	movs	r3, #0
 80062ac:	60bb      	str	r3, [r7, #8]
 80062ae:	4b7f      	ldr	r3, [pc, #508]	; (80064ac <HAL_RCC_OscConfig+0x4ac>)
 80062b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b2:	4a7e      	ldr	r2, [pc, #504]	; (80064ac <HAL_RCC_OscConfig+0x4ac>)
 80062b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062b8:	6413      	str	r3, [r2, #64]	; 0x40
 80062ba:	4b7c      	ldr	r3, [pc, #496]	; (80064ac <HAL_RCC_OscConfig+0x4ac>)
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062c2:	60bb      	str	r3, [r7, #8]
 80062c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062c6:	2301      	movs	r3, #1
 80062c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062ca:	4b79      	ldr	r3, [pc, #484]	; (80064b0 <HAL_RCC_OscConfig+0x4b0>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d118      	bne.n	8006308 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062d6:	4b76      	ldr	r3, [pc, #472]	; (80064b0 <HAL_RCC_OscConfig+0x4b0>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a75      	ldr	r2, [pc, #468]	; (80064b0 <HAL_RCC_OscConfig+0x4b0>)
 80062dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062e2:	f7fb fb23 	bl	800192c <HAL_GetTick>
 80062e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062e8:	e008      	b.n	80062fc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062ea:	f7fb fb1f 	bl	800192c <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d901      	bls.n	80062fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e118      	b.n	800652e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062fc:	4b6c      	ldr	r3, [pc, #432]	; (80064b0 <HAL_RCC_OscConfig+0x4b0>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006304:	2b00      	cmp	r3, #0
 8006306:	d0f0      	beq.n	80062ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d106      	bne.n	800631e <HAL_RCC_OscConfig+0x31e>
 8006310:	4b66      	ldr	r3, [pc, #408]	; (80064ac <HAL_RCC_OscConfig+0x4ac>)
 8006312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006314:	4a65      	ldr	r2, [pc, #404]	; (80064ac <HAL_RCC_OscConfig+0x4ac>)
 8006316:	f043 0301 	orr.w	r3, r3, #1
 800631a:	6713      	str	r3, [r2, #112]	; 0x70
 800631c:	e01c      	b.n	8006358 <HAL_RCC_OscConfig+0x358>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	2b05      	cmp	r3, #5
 8006324:	d10c      	bne.n	8006340 <HAL_RCC_OscConfig+0x340>
 8006326:	4b61      	ldr	r3, [pc, #388]	; (80064ac <HAL_RCC_OscConfig+0x4ac>)
 8006328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632a:	4a60      	ldr	r2, [pc, #384]	; (80064ac <HAL_RCC_OscConfig+0x4ac>)
 800632c:	f043 0304 	orr.w	r3, r3, #4
 8006330:	6713      	str	r3, [r2, #112]	; 0x70
 8006332:	4b5e      	ldr	r3, [pc, #376]	; (80064ac <HAL_RCC_OscConfig+0x4ac>)
 8006334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006336:	4a5d      	ldr	r2, [pc, #372]	; (80064ac <HAL_RCC_OscConfig+0x4ac>)
 8006338:	f043 0301 	orr.w	r3, r3, #1
 800633c:	6713      	str	r3, [r2, #112]	; 0x70
 800633e:	e00b      	b.n	8006358 <HAL_RCC_OscConfig+0x358>
 8006340:	4b5a      	ldr	r3, [pc, #360]	; (80064ac <HAL_RCC_OscConfig+0x4ac>)
 8006342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006344:	4a59      	ldr	r2, [pc, #356]	; (80064ac <HAL_RCC_OscConfig+0x4ac>)
 8006346:	f023 0301 	bic.w	r3, r3, #1
 800634a:	6713      	str	r3, [r2, #112]	; 0x70
 800634c:	4b57      	ldr	r3, [pc, #348]	; (80064ac <HAL_RCC_OscConfig+0x4ac>)
 800634e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006350:	4a56      	ldr	r2, [pc, #344]	; (80064ac <HAL_RCC_OscConfig+0x4ac>)
 8006352:	f023 0304 	bic.w	r3, r3, #4
 8006356:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d015      	beq.n	800638c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006360:	f7fb fae4 	bl	800192c <HAL_GetTick>
 8006364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006366:	e00a      	b.n	800637e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006368:	f7fb fae0 	bl	800192c <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	f241 3288 	movw	r2, #5000	; 0x1388
 8006376:	4293      	cmp	r3, r2
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e0d7      	b.n	800652e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800637e:	4b4b      	ldr	r3, [pc, #300]	; (80064ac <HAL_RCC_OscConfig+0x4ac>)
 8006380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b00      	cmp	r3, #0
 8006388:	d0ee      	beq.n	8006368 <HAL_RCC_OscConfig+0x368>
 800638a:	e014      	b.n	80063b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800638c:	f7fb face 	bl	800192c <HAL_GetTick>
 8006390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006392:	e00a      	b.n	80063aa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006394:	f7fb faca 	bl	800192c <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	f241 3288 	movw	r2, #5000	; 0x1388
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e0c1      	b.n	800652e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063aa:	4b40      	ldr	r3, [pc, #256]	; (80064ac <HAL_RCC_OscConfig+0x4ac>)
 80063ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1ee      	bne.n	8006394 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063b6:	7dfb      	ldrb	r3, [r7, #23]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d105      	bne.n	80063c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063bc:	4b3b      	ldr	r3, [pc, #236]	; (80064ac <HAL_RCC_OscConfig+0x4ac>)
 80063be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c0:	4a3a      	ldr	r2, [pc, #232]	; (80064ac <HAL_RCC_OscConfig+0x4ac>)
 80063c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 80ad 	beq.w	800652c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063d2:	4b36      	ldr	r3, [pc, #216]	; (80064ac <HAL_RCC_OscConfig+0x4ac>)
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f003 030c 	and.w	r3, r3, #12
 80063da:	2b08      	cmp	r3, #8
 80063dc:	d060      	beq.n	80064a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d145      	bne.n	8006472 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063e6:	4b33      	ldr	r3, [pc, #204]	; (80064b4 <HAL_RCC_OscConfig+0x4b4>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ec:	f7fb fa9e 	bl	800192c <HAL_GetTick>
 80063f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063f2:	e008      	b.n	8006406 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063f4:	f7fb fa9a 	bl	800192c <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e093      	b.n	800652e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006406:	4b29      	ldr	r3, [pc, #164]	; (80064ac <HAL_RCC_OscConfig+0x4ac>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1f0      	bne.n	80063f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	69da      	ldr	r2, [r3, #28]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	431a      	orrs	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	019b      	lsls	r3, r3, #6
 8006422:	431a      	orrs	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006428:	085b      	lsrs	r3, r3, #1
 800642a:	3b01      	subs	r3, #1
 800642c:	041b      	lsls	r3, r3, #16
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006434:	061b      	lsls	r3, r3, #24
 8006436:	431a      	orrs	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643c:	071b      	lsls	r3, r3, #28
 800643e:	491b      	ldr	r1, [pc, #108]	; (80064ac <HAL_RCC_OscConfig+0x4ac>)
 8006440:	4313      	orrs	r3, r2
 8006442:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006444:	4b1b      	ldr	r3, [pc, #108]	; (80064b4 <HAL_RCC_OscConfig+0x4b4>)
 8006446:	2201      	movs	r2, #1
 8006448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800644a:	f7fb fa6f 	bl	800192c <HAL_GetTick>
 800644e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006450:	e008      	b.n	8006464 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006452:	f7fb fa6b 	bl	800192c <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d901      	bls.n	8006464 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e064      	b.n	800652e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006464:	4b11      	ldr	r3, [pc, #68]	; (80064ac <HAL_RCC_OscConfig+0x4ac>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d0f0      	beq.n	8006452 <HAL_RCC_OscConfig+0x452>
 8006470:	e05c      	b.n	800652c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006472:	4b10      	ldr	r3, [pc, #64]	; (80064b4 <HAL_RCC_OscConfig+0x4b4>)
 8006474:	2200      	movs	r2, #0
 8006476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006478:	f7fb fa58 	bl	800192c <HAL_GetTick>
 800647c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800647e:	e008      	b.n	8006492 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006480:	f7fb fa54 	bl	800192c <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b02      	cmp	r3, #2
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e04d      	b.n	800652e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006492:	4b06      	ldr	r3, [pc, #24]	; (80064ac <HAL_RCC_OscConfig+0x4ac>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1f0      	bne.n	8006480 <HAL_RCC_OscConfig+0x480>
 800649e:	e045      	b.n	800652c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d107      	bne.n	80064b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e040      	b.n	800652e <HAL_RCC_OscConfig+0x52e>
 80064ac:	40023800 	.word	0x40023800
 80064b0:	40007000 	.word	0x40007000
 80064b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064b8:	4b1f      	ldr	r3, [pc, #124]	; (8006538 <HAL_RCC_OscConfig+0x538>)
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d030      	beq.n	8006528 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d129      	bne.n	8006528 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064de:	429a      	cmp	r2, r3
 80064e0:	d122      	bne.n	8006528 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80064e8:	4013      	ands	r3, r2
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80064ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d119      	bne.n	8006528 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fe:	085b      	lsrs	r3, r3, #1
 8006500:	3b01      	subs	r3, #1
 8006502:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006504:	429a      	cmp	r2, r3
 8006506:	d10f      	bne.n	8006528 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006512:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006514:	429a      	cmp	r2, r3
 8006516:	d107      	bne.n	8006528 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006522:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006524:	429a      	cmp	r2, r3
 8006526:	d001      	beq.n	800652c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e000      	b.n	800652e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	40023800 	.word	0x40023800

0800653c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e07b      	b.n	8006646 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006552:	2b00      	cmp	r3, #0
 8006554:	d108      	bne.n	8006568 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800655e:	d009      	beq.n	8006574 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	61da      	str	r2, [r3, #28]
 8006566:	e005      	b.n	8006574 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d106      	bne.n	8006594 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7fa fe28 	bl	80011e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80065bc:	431a      	orrs	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c6:	431a      	orrs	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	431a      	orrs	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	431a      	orrs	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065e4:	431a      	orrs	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f8:	ea42 0103 	orr.w	r1, r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006600:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	0c1b      	lsrs	r3, r3, #16
 8006612:	f003 0104 	and.w	r1, r3, #4
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661a:	f003 0210 	and.w	r2, r3, #16
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	69da      	ldr	r2, [r3, #28]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006634:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b082      	sub	sp, #8
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e041      	b.n	80066e4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	d106      	bne.n	800667a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f7fa fe1f 	bl	80012b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2202      	movs	r2, #2
 800667e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	3304      	adds	r3, #4
 800668a:	4619      	mov	r1, r3
 800668c:	4610      	mov	r0, r2
 800668e:	f000 fe27 	bl	80072e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e041      	b.n	8006782 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d106      	bne.n	8006718 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f839 	bl	800678a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3304      	adds	r3, #4
 8006728:	4619      	mov	r1, r3
 800672a:	4610      	mov	r0, r2
 800672c:	f000 fdd8 	bl	80072e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b082      	sub	sp, #8
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d101      	bne.n	80067b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e041      	b.n	8006834 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d106      	bne.n	80067ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f839 	bl	800683c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2202      	movs	r2, #2
 80067ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	3304      	adds	r3, #4
 80067da:	4619      	mov	r1, r3
 80067dc:	4610      	mov	r0, r2
 80067de:	f000 fd7f 	bl	80072e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d109      	bne.n	8006874 <HAL_TIM_PWM_Start+0x24>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b01      	cmp	r3, #1
 800686a:	bf14      	ite	ne
 800686c:	2301      	movne	r3, #1
 800686e:	2300      	moveq	r3, #0
 8006870:	b2db      	uxtb	r3, r3
 8006872:	e022      	b.n	80068ba <HAL_TIM_PWM_Start+0x6a>
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2b04      	cmp	r3, #4
 8006878:	d109      	bne.n	800688e <HAL_TIM_PWM_Start+0x3e>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b01      	cmp	r3, #1
 8006884:	bf14      	ite	ne
 8006886:	2301      	movne	r3, #1
 8006888:	2300      	moveq	r3, #0
 800688a:	b2db      	uxtb	r3, r3
 800688c:	e015      	b.n	80068ba <HAL_TIM_PWM_Start+0x6a>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2b08      	cmp	r3, #8
 8006892:	d109      	bne.n	80068a8 <HAL_TIM_PWM_Start+0x58>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b01      	cmp	r3, #1
 800689e:	bf14      	ite	ne
 80068a0:	2301      	movne	r3, #1
 80068a2:	2300      	moveq	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	e008      	b.n	80068ba <HAL_TIM_PWM_Start+0x6a>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	bf14      	ite	ne
 80068b4:	2301      	movne	r3, #1
 80068b6:	2300      	moveq	r3, #0
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e07c      	b.n	80069bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d104      	bne.n	80068d2 <HAL_TIM_PWM_Start+0x82>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068d0:	e013      	b.n	80068fa <HAL_TIM_PWM_Start+0xaa>
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	d104      	bne.n	80068e2 <HAL_TIM_PWM_Start+0x92>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068e0:	e00b      	b.n	80068fa <HAL_TIM_PWM_Start+0xaa>
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d104      	bne.n	80068f2 <HAL_TIM_PWM_Start+0xa2>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068f0:	e003      	b.n	80068fa <HAL_TIM_PWM_Start+0xaa>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2202      	movs	r2, #2
 80068f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2201      	movs	r2, #1
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	4618      	mov	r0, r3
 8006904:	f001 f90c 	bl	8007b20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a2d      	ldr	r2, [pc, #180]	; (80069c4 <HAL_TIM_PWM_Start+0x174>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d004      	beq.n	800691c <HAL_TIM_PWM_Start+0xcc>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a2c      	ldr	r2, [pc, #176]	; (80069c8 <HAL_TIM_PWM_Start+0x178>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d101      	bne.n	8006920 <HAL_TIM_PWM_Start+0xd0>
 800691c:	2301      	movs	r3, #1
 800691e:	e000      	b.n	8006922 <HAL_TIM_PWM_Start+0xd2>
 8006920:	2300      	movs	r3, #0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d007      	beq.n	8006936 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006934:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a22      	ldr	r2, [pc, #136]	; (80069c4 <HAL_TIM_PWM_Start+0x174>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d022      	beq.n	8006986 <HAL_TIM_PWM_Start+0x136>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006948:	d01d      	beq.n	8006986 <HAL_TIM_PWM_Start+0x136>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a1f      	ldr	r2, [pc, #124]	; (80069cc <HAL_TIM_PWM_Start+0x17c>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d018      	beq.n	8006986 <HAL_TIM_PWM_Start+0x136>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a1d      	ldr	r2, [pc, #116]	; (80069d0 <HAL_TIM_PWM_Start+0x180>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d013      	beq.n	8006986 <HAL_TIM_PWM_Start+0x136>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a1c      	ldr	r2, [pc, #112]	; (80069d4 <HAL_TIM_PWM_Start+0x184>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d00e      	beq.n	8006986 <HAL_TIM_PWM_Start+0x136>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a16      	ldr	r2, [pc, #88]	; (80069c8 <HAL_TIM_PWM_Start+0x178>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d009      	beq.n	8006986 <HAL_TIM_PWM_Start+0x136>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a18      	ldr	r2, [pc, #96]	; (80069d8 <HAL_TIM_PWM_Start+0x188>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d004      	beq.n	8006986 <HAL_TIM_PWM_Start+0x136>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a16      	ldr	r2, [pc, #88]	; (80069dc <HAL_TIM_PWM_Start+0x18c>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d111      	bne.n	80069aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f003 0307 	and.w	r3, r3, #7
 8006990:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b06      	cmp	r3, #6
 8006996:	d010      	beq.n	80069ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f042 0201 	orr.w	r2, r2, #1
 80069a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a8:	e007      	b.n	80069ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f042 0201 	orr.w	r2, r2, #1
 80069b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	40010000 	.word	0x40010000
 80069c8:	40010400 	.word	0x40010400
 80069cc:	40000400 	.word	0x40000400
 80069d0:	40000800 	.word	0x40000800
 80069d4:	40000c00 	.word	0x40000c00
 80069d8:	40014000 	.word	0x40014000
 80069dc:	40001800 	.word	0x40001800

080069e0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2200      	movs	r2, #0
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f001 f894 	bl	8007b20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a2e      	ldr	r2, [pc, #184]	; (8006ab8 <HAL_TIM_PWM_Stop+0xd8>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d004      	beq.n	8006a0c <HAL_TIM_PWM_Stop+0x2c>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a2d      	ldr	r2, [pc, #180]	; (8006abc <HAL_TIM_PWM_Stop+0xdc>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d101      	bne.n	8006a10 <HAL_TIM_PWM_Stop+0x30>
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e000      	b.n	8006a12 <HAL_TIM_PWM_Stop+0x32>
 8006a10:	2300      	movs	r3, #0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d017      	beq.n	8006a46 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6a1a      	ldr	r2, [r3, #32]
 8006a1c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a20:	4013      	ands	r3, r2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10f      	bne.n	8006a46 <HAL_TIM_PWM_Stop+0x66>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6a1a      	ldr	r2, [r3, #32]
 8006a2c:	f240 4344 	movw	r3, #1092	; 0x444
 8006a30:	4013      	ands	r3, r2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d107      	bne.n	8006a46 <HAL_TIM_PWM_Stop+0x66>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6a1a      	ldr	r2, [r3, #32]
 8006a4c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a50:	4013      	ands	r3, r2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10f      	bne.n	8006a76 <HAL_TIM_PWM_Stop+0x96>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6a1a      	ldr	r2, [r3, #32]
 8006a5c:	f240 4344 	movw	r3, #1092	; 0x444
 8006a60:	4013      	ands	r3, r2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d107      	bne.n	8006a76 <HAL_TIM_PWM_Stop+0x96>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 0201 	bic.w	r2, r2, #1
 8006a74:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d104      	bne.n	8006a86 <HAL_TIM_PWM_Stop+0xa6>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a84:	e013      	b.n	8006aae <HAL_TIM_PWM_Stop+0xce>
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2b04      	cmp	r3, #4
 8006a8a:	d104      	bne.n	8006a96 <HAL_TIM_PWM_Stop+0xb6>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a94:	e00b      	b.n	8006aae <HAL_TIM_PWM_Stop+0xce>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d104      	bne.n	8006aa6 <HAL_TIM_PWM_Stop+0xc6>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006aa4:	e003      	b.n	8006aae <HAL_TIM_PWM_Stop+0xce>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	40010000 	.word	0x40010000
 8006abc:	40010400 	.word	0x40010400

08006ac0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d101      	bne.n	8006ad2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e041      	b.n	8006b56 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d106      	bne.n	8006aec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7fa fc34 	bl	8001354 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2202      	movs	r2, #2
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	3304      	adds	r3, #4
 8006afc:	4619      	mov	r1, r3
 8006afe:	4610      	mov	r0, r2
 8006b00:	f000 fbee 	bl	80072e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
	...

08006b60 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d104      	bne.n	8006b7a <HAL_TIM_IC_Start+0x1a>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	e013      	b.n	8006ba2 <HAL_TIM_IC_Start+0x42>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b04      	cmp	r3, #4
 8006b7e:	d104      	bne.n	8006b8a <HAL_TIM_IC_Start+0x2a>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	e00b      	b.n	8006ba2 <HAL_TIM_IC_Start+0x42>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b08      	cmp	r3, #8
 8006b8e:	d104      	bne.n	8006b9a <HAL_TIM_IC_Start+0x3a>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	e003      	b.n	8006ba2 <HAL_TIM_IC_Start+0x42>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d104      	bne.n	8006bb4 <HAL_TIM_IC_Start+0x54>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	e013      	b.n	8006bdc <HAL_TIM_IC_Start+0x7c>
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d104      	bne.n	8006bc4 <HAL_TIM_IC_Start+0x64>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	e00b      	b.n	8006bdc <HAL_TIM_IC_Start+0x7c>
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	2b08      	cmp	r3, #8
 8006bc8:	d104      	bne.n	8006bd4 <HAL_TIM_IC_Start+0x74>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	e003      	b.n	8006bdc <HAL_TIM_IC_Start+0x7c>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d102      	bne.n	8006bea <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006be4:	7bbb      	ldrb	r3, [r7, #14]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d001      	beq.n	8006bee <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e081      	b.n	8006cf2 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d104      	bne.n	8006bfe <HAL_TIM_IC_Start+0x9e>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bfc:	e013      	b.n	8006c26 <HAL_TIM_IC_Start+0xc6>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b04      	cmp	r3, #4
 8006c02:	d104      	bne.n	8006c0e <HAL_TIM_IC_Start+0xae>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c0c:	e00b      	b.n	8006c26 <HAL_TIM_IC_Start+0xc6>
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b08      	cmp	r3, #8
 8006c12:	d104      	bne.n	8006c1e <HAL_TIM_IC_Start+0xbe>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c1c:	e003      	b.n	8006c26 <HAL_TIM_IC_Start+0xc6>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2202      	movs	r2, #2
 8006c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d104      	bne.n	8006c36 <HAL_TIM_IC_Start+0xd6>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c34:	e013      	b.n	8006c5e <HAL_TIM_IC_Start+0xfe>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b04      	cmp	r3, #4
 8006c3a:	d104      	bne.n	8006c46 <HAL_TIM_IC_Start+0xe6>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c44:	e00b      	b.n	8006c5e <HAL_TIM_IC_Start+0xfe>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b08      	cmp	r3, #8
 8006c4a:	d104      	bne.n	8006c56 <HAL_TIM_IC_Start+0xf6>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c54:	e003      	b.n	8006c5e <HAL_TIM_IC_Start+0xfe>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2202      	movs	r2, #2
 8006c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2201      	movs	r2, #1
 8006c64:	6839      	ldr	r1, [r7, #0]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 ff5a 	bl	8007b20 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a22      	ldr	r2, [pc, #136]	; (8006cfc <HAL_TIM_IC_Start+0x19c>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d022      	beq.n	8006cbc <HAL_TIM_IC_Start+0x15c>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c7e:	d01d      	beq.n	8006cbc <HAL_TIM_IC_Start+0x15c>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a1e      	ldr	r2, [pc, #120]	; (8006d00 <HAL_TIM_IC_Start+0x1a0>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d018      	beq.n	8006cbc <HAL_TIM_IC_Start+0x15c>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a1d      	ldr	r2, [pc, #116]	; (8006d04 <HAL_TIM_IC_Start+0x1a4>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d013      	beq.n	8006cbc <HAL_TIM_IC_Start+0x15c>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a1b      	ldr	r2, [pc, #108]	; (8006d08 <HAL_TIM_IC_Start+0x1a8>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d00e      	beq.n	8006cbc <HAL_TIM_IC_Start+0x15c>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a1a      	ldr	r2, [pc, #104]	; (8006d0c <HAL_TIM_IC_Start+0x1ac>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d009      	beq.n	8006cbc <HAL_TIM_IC_Start+0x15c>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a18      	ldr	r2, [pc, #96]	; (8006d10 <HAL_TIM_IC_Start+0x1b0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d004      	beq.n	8006cbc <HAL_TIM_IC_Start+0x15c>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a17      	ldr	r2, [pc, #92]	; (8006d14 <HAL_TIM_IC_Start+0x1b4>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d111      	bne.n	8006ce0 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2b06      	cmp	r3, #6
 8006ccc:	d010      	beq.n	8006cf0 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f042 0201 	orr.w	r2, r2, #1
 8006cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cde:	e007      	b.n	8006cf0 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f042 0201 	orr.w	r2, r2, #1
 8006cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	40010000 	.word	0x40010000
 8006d00:	40000400 	.word	0x40000400
 8006d04:	40000800 	.word	0x40000800
 8006d08:	40000c00 	.word	0x40000c00
 8006d0c:	40010400 	.word	0x40010400
 8006d10:	40014000 	.word	0x40014000
 8006d14:	40001800 	.word	0x40001800

08006d18 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2200      	movs	r2, #0
 8006d28:	6839      	ldr	r1, [r7, #0]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 fef8 	bl	8007b20 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6a1a      	ldr	r2, [r3, #32]
 8006d36:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10f      	bne.n	8006d60 <HAL_TIM_IC_Stop+0x48>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6a1a      	ldr	r2, [r3, #32]
 8006d46:	f240 4344 	movw	r3, #1092	; 0x444
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d107      	bne.n	8006d60 <HAL_TIM_IC_Stop+0x48>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0201 	bic.w	r2, r2, #1
 8006d5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d104      	bne.n	8006d70 <HAL_TIM_IC_Stop+0x58>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d6e:	e013      	b.n	8006d98 <HAL_TIM_IC_Stop+0x80>
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	d104      	bne.n	8006d80 <HAL_TIM_IC_Stop+0x68>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d7e:	e00b      	b.n	8006d98 <HAL_TIM_IC_Stop+0x80>
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2b08      	cmp	r3, #8
 8006d84:	d104      	bne.n	8006d90 <HAL_TIM_IC_Stop+0x78>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d8e:	e003      	b.n	8006d98 <HAL_TIM_IC_Stop+0x80>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d104      	bne.n	8006da8 <HAL_TIM_IC_Stop+0x90>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006da6:	e013      	b.n	8006dd0 <HAL_TIM_IC_Stop+0xb8>
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	2b04      	cmp	r3, #4
 8006dac:	d104      	bne.n	8006db8 <HAL_TIM_IC_Stop+0xa0>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006db6:	e00b      	b.n	8006dd0 <HAL_TIM_IC_Stop+0xb8>
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2b08      	cmp	r3, #8
 8006dbc:	d104      	bne.n	8006dc8 <HAL_TIM_IC_Stop+0xb0>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dc6:	e003      	b.n	8006dd0 <HAL_TIM_IC_Stop+0xb8>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
	...

08006ddc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d101      	bne.n	8006dfa <HAL_TIM_OC_ConfigChannel+0x1e>
 8006df6:	2302      	movs	r3, #2
 8006df8:	e048      	b.n	8006e8c <HAL_TIM_OC_ConfigChannel+0xb0>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b0c      	cmp	r3, #12
 8006e06:	d839      	bhi.n	8006e7c <HAL_TIM_OC_ConfigChannel+0xa0>
 8006e08:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0e:	bf00      	nop
 8006e10:	08006e45 	.word	0x08006e45
 8006e14:	08006e7d 	.word	0x08006e7d
 8006e18:	08006e7d 	.word	0x08006e7d
 8006e1c:	08006e7d 	.word	0x08006e7d
 8006e20:	08006e53 	.word	0x08006e53
 8006e24:	08006e7d 	.word	0x08006e7d
 8006e28:	08006e7d 	.word	0x08006e7d
 8006e2c:	08006e7d 	.word	0x08006e7d
 8006e30:	08006e61 	.word	0x08006e61
 8006e34:	08006e7d 	.word	0x08006e7d
 8006e38:	08006e7d 	.word	0x08006e7d
 8006e3c:	08006e7d 	.word	0x08006e7d
 8006e40:	08006e6f 	.word	0x08006e6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68b9      	ldr	r1, [r7, #8]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 faf4 	bl	8007438 <TIM_OC1_SetConfig>
      break;
 8006e50:	e017      	b.n	8006e82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68b9      	ldr	r1, [r7, #8]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 fb5d 	bl	8007518 <TIM_OC2_SetConfig>
      break;
 8006e5e:	e010      	b.n	8006e82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68b9      	ldr	r1, [r7, #8]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f000 fbcc 	bl	8007604 <TIM_OC3_SetConfig>
      break;
 8006e6c:	e009      	b.n	8006e82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68b9      	ldr	r1, [r7, #8]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 fc39 	bl	80076ec <TIM_OC4_SetConfig>
      break;
 8006e7a:	e002      	b.n	8006e82 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3718      	adds	r7, #24
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d101      	bne.n	8006eb2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006eae:	2302      	movs	r3, #2
 8006eb0:	e088      	b.n	8006fc4 <HAL_TIM_IC_ConfigChannel+0x130>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d11b      	bne.n	8006ef8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006ed0:	f000 fc62 	bl	8007798 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	699a      	ldr	r2, [r3, #24]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 020c 	bic.w	r2, r2, #12
 8006ee2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6999      	ldr	r1, [r3, #24]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	689a      	ldr	r2, [r3, #8]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	619a      	str	r2, [r3, #24]
 8006ef6:	e060      	b.n	8006fba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	d11c      	bne.n	8006f38 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006f0e:	f000 fce6 	bl	80078de <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	699a      	ldr	r2, [r3, #24]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006f20:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	6999      	ldr	r1, [r3, #24]
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	021a      	lsls	r2, r3, #8
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	619a      	str	r2, [r3, #24]
 8006f36:	e040      	b.n	8006fba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b08      	cmp	r3, #8
 8006f3c:	d11b      	bne.n	8006f76 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006f4e:	f000 fd33 	bl	80079b8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	69da      	ldr	r2, [r3, #28]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f022 020c 	bic.w	r2, r2, #12
 8006f60:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	69d9      	ldr	r1, [r3, #28]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	689a      	ldr	r2, [r3, #8]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	430a      	orrs	r2, r1
 8006f72:	61da      	str	r2, [r3, #28]
 8006f74:	e021      	b.n	8006fba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b0c      	cmp	r3, #12
 8006f7a:	d11c      	bne.n	8006fb6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006f8c:	f000 fd50 	bl	8007a30 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	69da      	ldr	r2, [r3, #28]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006f9e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	69d9      	ldr	r1, [r3, #28]
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	021a      	lsls	r2, r3, #8
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	61da      	str	r2, [r3, #28]
 8006fb4:	e001      	b.n	8006fba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3718      	adds	r7, #24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d101      	bne.n	8006fea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	e0ae      	b.n	8007148 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b0c      	cmp	r3, #12
 8006ff6:	f200 809f 	bhi.w	8007138 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006ffa:	a201      	add	r2, pc, #4	; (adr r2, 8007000 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007000:	08007035 	.word	0x08007035
 8007004:	08007139 	.word	0x08007139
 8007008:	08007139 	.word	0x08007139
 800700c:	08007139 	.word	0x08007139
 8007010:	08007075 	.word	0x08007075
 8007014:	08007139 	.word	0x08007139
 8007018:	08007139 	.word	0x08007139
 800701c:	08007139 	.word	0x08007139
 8007020:	080070b7 	.word	0x080070b7
 8007024:	08007139 	.word	0x08007139
 8007028:	08007139 	.word	0x08007139
 800702c:	08007139 	.word	0x08007139
 8007030:	080070f7 	.word	0x080070f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68b9      	ldr	r1, [r7, #8]
 800703a:	4618      	mov	r0, r3
 800703c:	f000 f9fc 	bl	8007438 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	699a      	ldr	r2, [r3, #24]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f042 0208 	orr.w	r2, r2, #8
 800704e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	699a      	ldr	r2, [r3, #24]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f022 0204 	bic.w	r2, r2, #4
 800705e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6999      	ldr	r1, [r3, #24]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	691a      	ldr	r2, [r3, #16]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	430a      	orrs	r2, r1
 8007070:	619a      	str	r2, [r3, #24]
      break;
 8007072:	e064      	b.n	800713e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68b9      	ldr	r1, [r7, #8]
 800707a:	4618      	mov	r0, r3
 800707c:	f000 fa4c 	bl	8007518 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	699a      	ldr	r2, [r3, #24]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800708e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	699a      	ldr	r2, [r3, #24]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800709e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6999      	ldr	r1, [r3, #24]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	021a      	lsls	r2, r3, #8
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	430a      	orrs	r2, r1
 80070b2:	619a      	str	r2, [r3, #24]
      break;
 80070b4:	e043      	b.n	800713e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68b9      	ldr	r1, [r7, #8]
 80070bc:	4618      	mov	r0, r3
 80070be:	f000 faa1 	bl	8007604 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69da      	ldr	r2, [r3, #28]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f042 0208 	orr.w	r2, r2, #8
 80070d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	69da      	ldr	r2, [r3, #28]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f022 0204 	bic.w	r2, r2, #4
 80070e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	69d9      	ldr	r1, [r3, #28]
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	691a      	ldr	r2, [r3, #16]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	430a      	orrs	r2, r1
 80070f2:	61da      	str	r2, [r3, #28]
      break;
 80070f4:	e023      	b.n	800713e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68b9      	ldr	r1, [r7, #8]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 faf5 	bl	80076ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	69da      	ldr	r2, [r3, #28]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	69da      	ldr	r2, [r3, #28]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	69d9      	ldr	r1, [r3, #28]
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	021a      	lsls	r2, r3, #8
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	430a      	orrs	r2, r1
 8007134:	61da      	str	r2, [r3, #28]
      break;
 8007136:	e002      	b.n	800713e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	75fb      	strb	r3, [r7, #23]
      break;
 800713c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007146:	7dfb      	ldrb	r3, [r7, #23]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3718      	adds	r7, #24
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007164:	2b01      	cmp	r3, #1
 8007166:	d101      	bne.n	800716c <HAL_TIM_ConfigClockSource+0x1c>
 8007168:	2302      	movs	r3, #2
 800716a:	e0b4      	b.n	80072d6 <HAL_TIM_ConfigClockSource+0x186>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800718a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007192:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071a4:	d03e      	beq.n	8007224 <HAL_TIM_ConfigClockSource+0xd4>
 80071a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071aa:	f200 8087 	bhi.w	80072bc <HAL_TIM_ConfigClockSource+0x16c>
 80071ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b2:	f000 8086 	beq.w	80072c2 <HAL_TIM_ConfigClockSource+0x172>
 80071b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ba:	d87f      	bhi.n	80072bc <HAL_TIM_ConfigClockSource+0x16c>
 80071bc:	2b70      	cmp	r3, #112	; 0x70
 80071be:	d01a      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0xa6>
 80071c0:	2b70      	cmp	r3, #112	; 0x70
 80071c2:	d87b      	bhi.n	80072bc <HAL_TIM_ConfigClockSource+0x16c>
 80071c4:	2b60      	cmp	r3, #96	; 0x60
 80071c6:	d050      	beq.n	800726a <HAL_TIM_ConfigClockSource+0x11a>
 80071c8:	2b60      	cmp	r3, #96	; 0x60
 80071ca:	d877      	bhi.n	80072bc <HAL_TIM_ConfigClockSource+0x16c>
 80071cc:	2b50      	cmp	r3, #80	; 0x50
 80071ce:	d03c      	beq.n	800724a <HAL_TIM_ConfigClockSource+0xfa>
 80071d0:	2b50      	cmp	r3, #80	; 0x50
 80071d2:	d873      	bhi.n	80072bc <HAL_TIM_ConfigClockSource+0x16c>
 80071d4:	2b40      	cmp	r3, #64	; 0x40
 80071d6:	d058      	beq.n	800728a <HAL_TIM_ConfigClockSource+0x13a>
 80071d8:	2b40      	cmp	r3, #64	; 0x40
 80071da:	d86f      	bhi.n	80072bc <HAL_TIM_ConfigClockSource+0x16c>
 80071dc:	2b30      	cmp	r3, #48	; 0x30
 80071de:	d064      	beq.n	80072aa <HAL_TIM_ConfigClockSource+0x15a>
 80071e0:	2b30      	cmp	r3, #48	; 0x30
 80071e2:	d86b      	bhi.n	80072bc <HAL_TIM_ConfigClockSource+0x16c>
 80071e4:	2b20      	cmp	r3, #32
 80071e6:	d060      	beq.n	80072aa <HAL_TIM_ConfigClockSource+0x15a>
 80071e8:	2b20      	cmp	r3, #32
 80071ea:	d867      	bhi.n	80072bc <HAL_TIM_ConfigClockSource+0x16c>
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d05c      	beq.n	80072aa <HAL_TIM_ConfigClockSource+0x15a>
 80071f0:	2b10      	cmp	r3, #16
 80071f2:	d05a      	beq.n	80072aa <HAL_TIM_ConfigClockSource+0x15a>
 80071f4:	e062      	b.n	80072bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007206:	f000 fc6b 	bl	8007ae0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007218:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	609a      	str	r2, [r3, #8]
      break;
 8007222:	e04f      	b.n	80072c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007234:	f000 fc54 	bl	8007ae0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689a      	ldr	r2, [r3, #8]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007246:	609a      	str	r2, [r3, #8]
      break;
 8007248:	e03c      	b.n	80072c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007256:	461a      	mov	r2, r3
 8007258:	f000 fb12 	bl	8007880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2150      	movs	r1, #80	; 0x50
 8007262:	4618      	mov	r0, r3
 8007264:	f000 fc21 	bl	8007aaa <TIM_ITRx_SetConfig>
      break;
 8007268:	e02c      	b.n	80072c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007276:	461a      	mov	r2, r3
 8007278:	f000 fb6e 	bl	8007958 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2160      	movs	r1, #96	; 0x60
 8007282:	4618      	mov	r0, r3
 8007284:	f000 fc11 	bl	8007aaa <TIM_ITRx_SetConfig>
      break;
 8007288:	e01c      	b.n	80072c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007296:	461a      	mov	r2, r3
 8007298:	f000 faf2 	bl	8007880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2140      	movs	r1, #64	; 0x40
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 fc01 	bl	8007aaa <TIM_ITRx_SetConfig>
      break;
 80072a8:	e00c      	b.n	80072c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4619      	mov	r1, r3
 80072b4:	4610      	mov	r0, r2
 80072b6:	f000 fbf8 	bl	8007aaa <TIM_ITRx_SetConfig>
      break;
 80072ba:	e003      	b.n	80072c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	73fb      	strb	r3, [r7, #15]
      break;
 80072c0:	e000      	b.n	80072c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80072c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
	...

080072e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a46      	ldr	r2, [pc, #280]	; (800740c <TIM_Base_SetConfig+0x12c>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d013      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072fe:	d00f      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a43      	ldr	r2, [pc, #268]	; (8007410 <TIM_Base_SetConfig+0x130>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d00b      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a42      	ldr	r2, [pc, #264]	; (8007414 <TIM_Base_SetConfig+0x134>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d007      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a41      	ldr	r2, [pc, #260]	; (8007418 <TIM_Base_SetConfig+0x138>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d003      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a40      	ldr	r2, [pc, #256]	; (800741c <TIM_Base_SetConfig+0x13c>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d108      	bne.n	8007332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a35      	ldr	r2, [pc, #212]	; (800740c <TIM_Base_SetConfig+0x12c>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d02b      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007340:	d027      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a32      	ldr	r2, [pc, #200]	; (8007410 <TIM_Base_SetConfig+0x130>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d023      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a31      	ldr	r2, [pc, #196]	; (8007414 <TIM_Base_SetConfig+0x134>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d01f      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a30      	ldr	r2, [pc, #192]	; (8007418 <TIM_Base_SetConfig+0x138>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d01b      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a2f      	ldr	r2, [pc, #188]	; (800741c <TIM_Base_SetConfig+0x13c>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d017      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a2e      	ldr	r2, [pc, #184]	; (8007420 <TIM_Base_SetConfig+0x140>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d013      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a2d      	ldr	r2, [pc, #180]	; (8007424 <TIM_Base_SetConfig+0x144>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d00f      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a2c      	ldr	r2, [pc, #176]	; (8007428 <TIM_Base_SetConfig+0x148>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d00b      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a2b      	ldr	r2, [pc, #172]	; (800742c <TIM_Base_SetConfig+0x14c>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d007      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a2a      	ldr	r2, [pc, #168]	; (8007430 <TIM_Base_SetConfig+0x150>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d003      	beq.n	8007392 <TIM_Base_SetConfig+0xb2>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a29      	ldr	r2, [pc, #164]	; (8007434 <TIM_Base_SetConfig+0x154>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d108      	bne.n	80073a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a10      	ldr	r2, [pc, #64]	; (800740c <TIM_Base_SetConfig+0x12c>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d003      	beq.n	80073d8 <TIM_Base_SetConfig+0xf8>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a12      	ldr	r2, [pc, #72]	; (800741c <TIM_Base_SetConfig+0x13c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d103      	bne.n	80073e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	691a      	ldr	r2, [r3, #16]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d105      	bne.n	80073fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	f023 0201 	bic.w	r2, r3, #1
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	611a      	str	r2, [r3, #16]
  }
}
 80073fe:	bf00      	nop
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	40010000 	.word	0x40010000
 8007410:	40000400 	.word	0x40000400
 8007414:	40000800 	.word	0x40000800
 8007418:	40000c00 	.word	0x40000c00
 800741c:	40010400 	.word	0x40010400
 8007420:	40014000 	.word	0x40014000
 8007424:	40014400 	.word	0x40014400
 8007428:	40014800 	.word	0x40014800
 800742c:	40001800 	.word	0x40001800
 8007430:	40001c00 	.word	0x40001c00
 8007434:	40002000 	.word	0x40002000

08007438 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	f023 0201 	bic.w	r2, r3, #1
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f023 0303 	bic.w	r3, r3, #3
 800746e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	4313      	orrs	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f023 0302 	bic.w	r3, r3, #2
 8007480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	4313      	orrs	r3, r2
 800748a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a20      	ldr	r2, [pc, #128]	; (8007510 <TIM_OC1_SetConfig+0xd8>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d003      	beq.n	800749c <TIM_OC1_SetConfig+0x64>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a1f      	ldr	r2, [pc, #124]	; (8007514 <TIM_OC1_SetConfig+0xdc>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d10c      	bne.n	80074b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f023 0308 	bic.w	r3, r3, #8
 80074a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f023 0304 	bic.w	r3, r3, #4
 80074b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a15      	ldr	r2, [pc, #84]	; (8007510 <TIM_OC1_SetConfig+0xd8>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d003      	beq.n	80074c6 <TIM_OC1_SetConfig+0x8e>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a14      	ldr	r2, [pc, #80]	; (8007514 <TIM_OC1_SetConfig+0xdc>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d111      	bne.n	80074ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	4313      	orrs	r3, r2
 80074de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	685a      	ldr	r2, [r3, #4]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	621a      	str	r2, [r3, #32]
}
 8007504:	bf00      	nop
 8007506:	371c      	adds	r7, #28
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr
 8007510:	40010000 	.word	0x40010000
 8007514:	40010400 	.word	0x40010400

08007518 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007518:	b480      	push	{r7}
 800751a:	b087      	sub	sp, #28
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a1b      	ldr	r3, [r3, #32]
 800752c:	f023 0210 	bic.w	r2, r3, #16
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800754e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	021b      	lsls	r3, r3, #8
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	4313      	orrs	r3, r2
 800755a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f023 0320 	bic.w	r3, r3, #32
 8007562:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	011b      	lsls	r3, r3, #4
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	4313      	orrs	r3, r2
 800756e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a22      	ldr	r2, [pc, #136]	; (80075fc <TIM_OC2_SetConfig+0xe4>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d003      	beq.n	8007580 <TIM_OC2_SetConfig+0x68>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a21      	ldr	r2, [pc, #132]	; (8007600 <TIM_OC2_SetConfig+0xe8>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d10d      	bne.n	800759c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	011b      	lsls	r3, r3, #4
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	4313      	orrs	r3, r2
 8007592:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800759a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a17      	ldr	r2, [pc, #92]	; (80075fc <TIM_OC2_SetConfig+0xe4>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d003      	beq.n	80075ac <TIM_OC2_SetConfig+0x94>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a16      	ldr	r2, [pc, #88]	; (8007600 <TIM_OC2_SetConfig+0xe8>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d113      	bne.n	80075d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	695b      	ldr	r3, [r3, #20]
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	693a      	ldr	r2, [r7, #16]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	685a      	ldr	r2, [r3, #4]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	621a      	str	r2, [r3, #32]
}
 80075ee:	bf00      	nop
 80075f0:	371c      	adds	r7, #28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	40010000 	.word	0x40010000
 8007600:	40010400 	.word	0x40010400

08007604 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007604:	b480      	push	{r7}
 8007606:	b087      	sub	sp, #28
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	69db      	ldr	r3, [r3, #28]
 800762a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f023 0303 	bic.w	r3, r3, #3
 800763a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	4313      	orrs	r3, r2
 8007644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800764c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	021b      	lsls	r3, r3, #8
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	4313      	orrs	r3, r2
 8007658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a21      	ldr	r2, [pc, #132]	; (80076e4 <TIM_OC3_SetConfig+0xe0>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d003      	beq.n	800766a <TIM_OC3_SetConfig+0x66>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a20      	ldr	r2, [pc, #128]	; (80076e8 <TIM_OC3_SetConfig+0xe4>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d10d      	bne.n	8007686 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007670:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	021b      	lsls	r3, r3, #8
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	4313      	orrs	r3, r2
 800767c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a16      	ldr	r2, [pc, #88]	; (80076e4 <TIM_OC3_SetConfig+0xe0>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d003      	beq.n	8007696 <TIM_OC3_SetConfig+0x92>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a15      	ldr	r2, [pc, #84]	; (80076e8 <TIM_OC3_SetConfig+0xe4>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d113      	bne.n	80076be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800769c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	011b      	lsls	r3, r3, #4
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	011b      	lsls	r3, r3, #4
 80076b8:	693a      	ldr	r2, [r7, #16]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	621a      	str	r2, [r3, #32]
}
 80076d8:	bf00      	nop
 80076da:	371c      	adds	r7, #28
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	40010000 	.word	0x40010000
 80076e8:	40010400 	.word	0x40010400

080076ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b087      	sub	sp, #28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a1b      	ldr	r3, [r3, #32]
 8007700:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800771a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	021b      	lsls	r3, r3, #8
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	4313      	orrs	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007736:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	031b      	lsls	r3, r3, #12
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	4313      	orrs	r3, r2
 8007742:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a12      	ldr	r2, [pc, #72]	; (8007790 <TIM_OC4_SetConfig+0xa4>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d003      	beq.n	8007754 <TIM_OC4_SetConfig+0x68>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a11      	ldr	r2, [pc, #68]	; (8007794 <TIM_OC4_SetConfig+0xa8>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d109      	bne.n	8007768 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800775a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	695b      	ldr	r3, [r3, #20]
 8007760:	019b      	lsls	r3, r3, #6
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	4313      	orrs	r3, r2
 8007766:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	693a      	ldr	r2, [r7, #16]
 8007780:	621a      	str	r2, [r3, #32]
}
 8007782:	bf00      	nop
 8007784:	371c      	adds	r7, #28
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	40010000 	.word	0x40010000
 8007794:	40010400 	.word	0x40010400

08007798 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
 80077a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6a1b      	ldr	r3, [r3, #32]
 80077b0:	f023 0201 	bic.w	r2, r3, #1
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	4a28      	ldr	r2, [pc, #160]	; (8007864 <TIM_TI1_SetConfig+0xcc>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d01b      	beq.n	80077fe <TIM_TI1_SetConfig+0x66>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077cc:	d017      	beq.n	80077fe <TIM_TI1_SetConfig+0x66>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	4a25      	ldr	r2, [pc, #148]	; (8007868 <TIM_TI1_SetConfig+0xd0>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d013      	beq.n	80077fe <TIM_TI1_SetConfig+0x66>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4a24      	ldr	r2, [pc, #144]	; (800786c <TIM_TI1_SetConfig+0xd4>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d00f      	beq.n	80077fe <TIM_TI1_SetConfig+0x66>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	4a23      	ldr	r2, [pc, #140]	; (8007870 <TIM_TI1_SetConfig+0xd8>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00b      	beq.n	80077fe <TIM_TI1_SetConfig+0x66>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	4a22      	ldr	r2, [pc, #136]	; (8007874 <TIM_TI1_SetConfig+0xdc>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d007      	beq.n	80077fe <TIM_TI1_SetConfig+0x66>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	4a21      	ldr	r2, [pc, #132]	; (8007878 <TIM_TI1_SetConfig+0xe0>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d003      	beq.n	80077fe <TIM_TI1_SetConfig+0x66>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	4a20      	ldr	r2, [pc, #128]	; (800787c <TIM_TI1_SetConfig+0xe4>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d101      	bne.n	8007802 <TIM_TI1_SetConfig+0x6a>
 80077fe:	2301      	movs	r3, #1
 8007800:	e000      	b.n	8007804 <TIM_TI1_SetConfig+0x6c>
 8007802:	2300      	movs	r3, #0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d008      	beq.n	800781a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	f023 0303 	bic.w	r3, r3, #3
 800780e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4313      	orrs	r3, r2
 8007816:	617b      	str	r3, [r7, #20]
 8007818:	e003      	b.n	8007822 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f043 0301 	orr.w	r3, r3, #1
 8007820:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007828:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	011b      	lsls	r3, r3, #4
 800782e:	b2db      	uxtb	r3, r3
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	4313      	orrs	r3, r2
 8007834:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	f023 030a 	bic.w	r3, r3, #10
 800783c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	f003 030a 	and.w	r3, r3, #10
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	4313      	orrs	r3, r2
 8007848:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	697a      	ldr	r2, [r7, #20]
 800784e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	621a      	str	r2, [r3, #32]
}
 8007856:	bf00      	nop
 8007858:	371c      	adds	r7, #28
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	40010000 	.word	0x40010000
 8007868:	40000400 	.word	0x40000400
 800786c:	40000800 	.word	0x40000800
 8007870:	40000c00 	.word	0x40000c00
 8007874:	40010400 	.word	0x40010400
 8007878:	40014000 	.word	0x40014000
 800787c:	40001800 	.word	0x40001800

08007880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007880:	b480      	push	{r7}
 8007882:	b087      	sub	sp, #28
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	f023 0201 	bic.w	r2, r3, #1
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	011b      	lsls	r3, r3, #4
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f023 030a 	bic.w	r3, r3, #10
 80078bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	697a      	ldr	r2, [r7, #20]
 80078d0:	621a      	str	r2, [r3, #32]
}
 80078d2:	bf00      	nop
 80078d4:	371c      	adds	r7, #28
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80078de:	b480      	push	{r7}
 80078e0:	b087      	sub	sp, #28
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	60f8      	str	r0, [r7, #12]
 80078e6:	60b9      	str	r1, [r7, #8]
 80078e8:	607a      	str	r2, [r7, #4]
 80078ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6a1b      	ldr	r3, [r3, #32]
 80078f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	f023 0210 	bic.w	r2, r3, #16
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800790a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	021b      	lsls	r3, r3, #8
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	4313      	orrs	r3, r2
 8007914:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800791c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	031b      	lsls	r3, r3, #12
 8007922:	b29b      	uxth	r3, r3
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	4313      	orrs	r3, r2
 8007928:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007930:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	011b      	lsls	r3, r3, #4
 8007936:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	4313      	orrs	r3, r2
 800793e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	697a      	ldr	r2, [r7, #20]
 800794a:	621a      	str	r2, [r3, #32]
}
 800794c:	bf00      	nop
 800794e:	371c      	adds	r7, #28
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007958:	b480      	push	{r7}
 800795a:	b087      	sub	sp, #28
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6a1b      	ldr	r3, [r3, #32]
 8007968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	f023 0210 	bic.w	r2, r3, #16
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	031b      	lsls	r3, r3, #12
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	4313      	orrs	r3, r2
 800798c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007994:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	011b      	lsls	r3, r3, #4
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	4313      	orrs	r3, r2
 800799e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	621a      	str	r2, [r3, #32]
}
 80079ac:	bf00      	nop
 80079ae:	371c      	adds	r7, #28
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
 80079c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	69db      	ldr	r3, [r3, #28]
 80079dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	f023 0303 	bic.w	r3, r3, #3
 80079e4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079f4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	011b      	lsls	r3, r3, #4
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007a08:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	021b      	lsls	r3, r3, #8
 8007a0e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	621a      	str	r2, [r3, #32]
}
 8007a24:	bf00      	nop
 8007a26:	371c      	adds	r7, #28
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
 8007a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6a1b      	ldr	r3, [r3, #32]
 8007a48:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	69db      	ldr	r3, [r3, #28]
 8007a54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a5c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	021b      	lsls	r3, r3, #8
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a6e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	031b      	lsls	r3, r3, #12
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007a82:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	031b      	lsls	r3, r3, #12
 8007a88:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	621a      	str	r2, [r3, #32]
}
 8007a9e:	bf00      	nop
 8007aa0:	371c      	adds	r7, #28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr

08007aaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b085      	sub	sp, #20
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	f043 0307 	orr.w	r3, r3, #7
 8007acc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	609a      	str	r2, [r3, #8]
}
 8007ad4:	bf00      	nop
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b087      	sub	sp, #28
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
 8007aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007afa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	021a      	lsls	r2, r3, #8
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	431a      	orrs	r2, r3
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	697a      	ldr	r2, [r7, #20]
 8007b12:	609a      	str	r2, [r3, #8]
}
 8007b14:	bf00      	nop
 8007b16:	371c      	adds	r7, #28
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f003 031f 	and.w	r3, r3, #31
 8007b32:	2201      	movs	r2, #1
 8007b34:	fa02 f303 	lsl.w	r3, r2, r3
 8007b38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6a1a      	ldr	r2, [r3, #32]
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	43db      	mvns	r3, r3
 8007b42:	401a      	ands	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6a1a      	ldr	r2, [r3, #32]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	f003 031f 	and.w	r3, r3, #31
 8007b52:	6879      	ldr	r1, [r7, #4]
 8007b54:	fa01 f303 	lsl.w	r3, r1, r3
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	621a      	str	r2, [r3, #32]
}
 8007b5e:	bf00      	nop
 8007b60:	371c      	adds	r7, #28
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
	...

08007b6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b085      	sub	sp, #20
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d101      	bne.n	8007b84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b80:	2302      	movs	r3, #2
 8007b82:	e05a      	b.n	8007c3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007baa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a21      	ldr	r2, [pc, #132]	; (8007c48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d022      	beq.n	8007c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bd0:	d01d      	beq.n	8007c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a1d      	ldr	r2, [pc, #116]	; (8007c4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d018      	beq.n	8007c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a1b      	ldr	r2, [pc, #108]	; (8007c50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d013      	beq.n	8007c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a1a      	ldr	r2, [pc, #104]	; (8007c54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d00e      	beq.n	8007c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a18      	ldr	r2, [pc, #96]	; (8007c58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d009      	beq.n	8007c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a17      	ldr	r2, [pc, #92]	; (8007c5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d004      	beq.n	8007c0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a15      	ldr	r2, [pc, #84]	; (8007c60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d10c      	bne.n	8007c28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	40010000 	.word	0x40010000
 8007c4c:	40000400 	.word	0x40000400
 8007c50:	40000800 	.word	0x40000800
 8007c54:	40000c00 	.word	0x40000c00
 8007c58:	40010400 	.word	0x40010400
 8007c5c:	40014000 	.word	0x40014000
 8007c60:	40001800 	.word	0x40001800

08007c64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d101      	bne.n	8007c80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	e03d      	b.n	8007cfc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	69db      	ldr	r3, [r3, #28]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3714      	adds	r7, #20
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e042      	b.n	8007da0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d106      	bne.n	8007d34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f7f9 fbe0 	bl	80014f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2224      	movs	r2, #36	; 0x24
 8007d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68da      	ldr	r2, [r3, #12]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f973 	bl	8008038 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	691a      	ldr	r2, [r3, #16]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	695a      	ldr	r2, [r3, #20]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68da      	ldr	r2, [r3, #12]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2220      	movs	r2, #32
 8007d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b08a      	sub	sp, #40	; 0x28
 8007dac:	af02      	add	r7, sp, #8
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	603b      	str	r3, [r7, #0]
 8007db4:	4613      	mov	r3, r2
 8007db6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	2b20      	cmp	r3, #32
 8007dc6:	d175      	bne.n	8007eb4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d002      	beq.n	8007dd4 <HAL_UART_Transmit+0x2c>
 8007dce:	88fb      	ldrh	r3, [r7, #6]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e06e      	b.n	8007eb6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2221      	movs	r2, #33	; 0x21
 8007de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007de6:	f7f9 fda1 	bl	800192c <HAL_GetTick>
 8007dea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	88fa      	ldrh	r2, [r7, #6]
 8007df0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	88fa      	ldrh	r2, [r7, #6]
 8007df6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e00:	d108      	bne.n	8007e14 <HAL_UART_Transmit+0x6c>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d104      	bne.n	8007e14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	61bb      	str	r3, [r7, #24]
 8007e12:	e003      	b.n	8007e1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e1c:	e02e      	b.n	8007e7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	2200      	movs	r2, #0
 8007e26:	2180      	movs	r1, #128	; 0x80
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f000 f848 	bl	8007ebe <UART_WaitOnFlagUntilTimeout>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d005      	beq.n	8007e40 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2220      	movs	r2, #32
 8007e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e03a      	b.n	8007eb6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d10b      	bne.n	8007e5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	3302      	adds	r3, #2
 8007e5a:	61bb      	str	r3, [r7, #24]
 8007e5c:	e007      	b.n	8007e6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	781a      	ldrb	r2, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	3b01      	subs	r3, #1
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1cb      	bne.n	8007e1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	2140      	movs	r1, #64	; 0x40
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f000 f814 	bl	8007ebe <UART_WaitOnFlagUntilTimeout>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d005      	beq.n	8007ea8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e006      	b.n	8007eb6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2220      	movs	r2, #32
 8007eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	e000      	b.n	8007eb6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007eb4:	2302      	movs	r3, #2
  }
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3720      	adds	r7, #32
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b086      	sub	sp, #24
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	60f8      	str	r0, [r7, #12]
 8007ec6:	60b9      	str	r1, [r7, #8]
 8007ec8:	603b      	str	r3, [r7, #0]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ece:	e03b      	b.n	8007f48 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
 8007ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed6:	d037      	beq.n	8007f48 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ed8:	f7f9 fd28 	bl	800192c <HAL_GetTick>
 8007edc:	4602      	mov	r2, r0
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	6a3a      	ldr	r2, [r7, #32]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d302      	bcc.n	8007eee <UART_WaitOnFlagUntilTimeout+0x30>
 8007ee8:	6a3b      	ldr	r3, [r7, #32]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e03a      	b.n	8007f68 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	f003 0304 	and.w	r3, r3, #4
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d023      	beq.n	8007f48 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2b80      	cmp	r3, #128	; 0x80
 8007f04:	d020      	beq.n	8007f48 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	2b40      	cmp	r3, #64	; 0x40
 8007f0a:	d01d      	beq.n	8007f48 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0308 	and.w	r3, r3, #8
 8007f16:	2b08      	cmp	r3, #8
 8007f18:	d116      	bne.n	8007f48 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	617b      	str	r3, [r7, #20]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	617b      	str	r3, [r7, #20]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	617b      	str	r3, [r7, #20]
 8007f2e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 f81d 	bl	8007f70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2208      	movs	r2, #8
 8007f3a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e00f      	b.n	8007f68 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	4013      	ands	r3, r2
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	bf0c      	ite	eq
 8007f58:	2301      	moveq	r3, #1
 8007f5a:	2300      	movne	r3, #0
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	461a      	mov	r2, r3
 8007f60:	79fb      	ldrb	r3, [r7, #7]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d0b4      	beq.n	8007ed0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3718      	adds	r7, #24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b095      	sub	sp, #84	; 0x54
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	330c      	adds	r3, #12
 8007f7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f82:	e853 3f00 	ldrex	r3, [r3]
 8007f86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	330c      	adds	r3, #12
 8007f96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f98:	643a      	str	r2, [r7, #64]	; 0x40
 8007f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fa0:	e841 2300 	strex	r3, r2, [r1]
 8007fa4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1e5      	bne.n	8007f78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3314      	adds	r3, #20
 8007fb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	e853 3f00 	ldrex	r3, [r3]
 8007fba:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	f023 0301 	bic.w	r3, r3, #1
 8007fc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	3314      	adds	r3, #20
 8007fca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fd4:	e841 2300 	strex	r3, r2, [r1]
 8007fd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1e5      	bne.n	8007fac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d119      	bne.n	800801c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	330c      	adds	r3, #12
 8007fee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	e853 3f00 	ldrex	r3, [r3]
 8007ff6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	f023 0310 	bic.w	r3, r3, #16
 8007ffe:	647b      	str	r3, [r7, #68]	; 0x44
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	330c      	adds	r3, #12
 8008006:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008008:	61ba      	str	r2, [r7, #24]
 800800a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800c:	6979      	ldr	r1, [r7, #20]
 800800e:	69ba      	ldr	r2, [r7, #24]
 8008010:	e841 2300 	strex	r3, r2, [r1]
 8008014:	613b      	str	r3, [r7, #16]
   return(result);
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1e5      	bne.n	8007fe8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2220      	movs	r2, #32
 8008020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	631a      	str	r2, [r3, #48]	; 0x30
}
 800802a:	bf00      	nop
 800802c:	3754      	adds	r7, #84	; 0x54
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
	...

08008038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800803c:	b0c0      	sub	sp, #256	; 0x100
 800803e:	af00      	add	r7, sp, #0
 8008040:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008054:	68d9      	ldr	r1, [r3, #12]
 8008056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	ea40 0301 	orr.w	r3, r0, r1
 8008060:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008066:	689a      	ldr	r2, [r3, #8]
 8008068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	431a      	orrs	r2, r3
 8008070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	431a      	orrs	r2, r3
 8008078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800807c:	69db      	ldr	r3, [r3, #28]
 800807e:	4313      	orrs	r3, r2
 8008080:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008090:	f021 010c 	bic.w	r1, r1, #12
 8008094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800809e:	430b      	orrs	r3, r1
 80080a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	695b      	ldr	r3, [r3, #20]
 80080aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80080ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b2:	6999      	ldr	r1, [r3, #24]
 80080b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	ea40 0301 	orr.w	r3, r0, r1
 80080be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80080c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	4b8f      	ldr	r3, [pc, #572]	; (8008304 <UART_SetConfig+0x2cc>)
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d005      	beq.n	80080d8 <UART_SetConfig+0xa0>
 80080cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	4b8d      	ldr	r3, [pc, #564]	; (8008308 <UART_SetConfig+0x2d0>)
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d104      	bne.n	80080e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80080d8:	f7fd fa24 	bl	8005524 <HAL_RCC_GetPCLK2Freq>
 80080dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80080e0:	e003      	b.n	80080ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80080e2:	f7fd fa0b 	bl	80054fc <HAL_RCC_GetPCLK1Freq>
 80080e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ee:	69db      	ldr	r3, [r3, #28]
 80080f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080f4:	f040 810c 	bne.w	8008310 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80080f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080fc:	2200      	movs	r2, #0
 80080fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008102:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008106:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800810a:	4622      	mov	r2, r4
 800810c:	462b      	mov	r3, r5
 800810e:	1891      	adds	r1, r2, r2
 8008110:	65b9      	str	r1, [r7, #88]	; 0x58
 8008112:	415b      	adcs	r3, r3
 8008114:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008116:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800811a:	4621      	mov	r1, r4
 800811c:	eb12 0801 	adds.w	r8, r2, r1
 8008120:	4629      	mov	r1, r5
 8008122:	eb43 0901 	adc.w	r9, r3, r1
 8008126:	f04f 0200 	mov.w	r2, #0
 800812a:	f04f 0300 	mov.w	r3, #0
 800812e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008132:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008136:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800813a:	4690      	mov	r8, r2
 800813c:	4699      	mov	r9, r3
 800813e:	4623      	mov	r3, r4
 8008140:	eb18 0303 	adds.w	r3, r8, r3
 8008144:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008148:	462b      	mov	r3, r5
 800814a:	eb49 0303 	adc.w	r3, r9, r3
 800814e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800815e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008162:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008166:	460b      	mov	r3, r1
 8008168:	18db      	adds	r3, r3, r3
 800816a:	653b      	str	r3, [r7, #80]	; 0x50
 800816c:	4613      	mov	r3, r2
 800816e:	eb42 0303 	adc.w	r3, r2, r3
 8008172:	657b      	str	r3, [r7, #84]	; 0x54
 8008174:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008178:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800817c:	f7f8 f842 	bl	8000204 <__aeabi_uldivmod>
 8008180:	4602      	mov	r2, r0
 8008182:	460b      	mov	r3, r1
 8008184:	4b61      	ldr	r3, [pc, #388]	; (800830c <UART_SetConfig+0x2d4>)
 8008186:	fba3 2302 	umull	r2, r3, r3, r2
 800818a:	095b      	lsrs	r3, r3, #5
 800818c:	011c      	lsls	r4, r3, #4
 800818e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008192:	2200      	movs	r2, #0
 8008194:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008198:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800819c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80081a0:	4642      	mov	r2, r8
 80081a2:	464b      	mov	r3, r9
 80081a4:	1891      	adds	r1, r2, r2
 80081a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80081a8:	415b      	adcs	r3, r3
 80081aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80081b0:	4641      	mov	r1, r8
 80081b2:	eb12 0a01 	adds.w	sl, r2, r1
 80081b6:	4649      	mov	r1, r9
 80081b8:	eb43 0b01 	adc.w	fp, r3, r1
 80081bc:	f04f 0200 	mov.w	r2, #0
 80081c0:	f04f 0300 	mov.w	r3, #0
 80081c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80081c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80081cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081d0:	4692      	mov	sl, r2
 80081d2:	469b      	mov	fp, r3
 80081d4:	4643      	mov	r3, r8
 80081d6:	eb1a 0303 	adds.w	r3, sl, r3
 80081da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081de:	464b      	mov	r3, r9
 80081e0:	eb4b 0303 	adc.w	r3, fp, r3
 80081e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80081f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80081fc:	460b      	mov	r3, r1
 80081fe:	18db      	adds	r3, r3, r3
 8008200:	643b      	str	r3, [r7, #64]	; 0x40
 8008202:	4613      	mov	r3, r2
 8008204:	eb42 0303 	adc.w	r3, r2, r3
 8008208:	647b      	str	r3, [r7, #68]	; 0x44
 800820a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800820e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008212:	f7f7 fff7 	bl	8000204 <__aeabi_uldivmod>
 8008216:	4602      	mov	r2, r0
 8008218:	460b      	mov	r3, r1
 800821a:	4611      	mov	r1, r2
 800821c:	4b3b      	ldr	r3, [pc, #236]	; (800830c <UART_SetConfig+0x2d4>)
 800821e:	fba3 2301 	umull	r2, r3, r3, r1
 8008222:	095b      	lsrs	r3, r3, #5
 8008224:	2264      	movs	r2, #100	; 0x64
 8008226:	fb02 f303 	mul.w	r3, r2, r3
 800822a:	1acb      	subs	r3, r1, r3
 800822c:	00db      	lsls	r3, r3, #3
 800822e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008232:	4b36      	ldr	r3, [pc, #216]	; (800830c <UART_SetConfig+0x2d4>)
 8008234:	fba3 2302 	umull	r2, r3, r3, r2
 8008238:	095b      	lsrs	r3, r3, #5
 800823a:	005b      	lsls	r3, r3, #1
 800823c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008240:	441c      	add	r4, r3
 8008242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008246:	2200      	movs	r2, #0
 8008248:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800824c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008250:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008254:	4642      	mov	r2, r8
 8008256:	464b      	mov	r3, r9
 8008258:	1891      	adds	r1, r2, r2
 800825a:	63b9      	str	r1, [r7, #56]	; 0x38
 800825c:	415b      	adcs	r3, r3
 800825e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008260:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008264:	4641      	mov	r1, r8
 8008266:	1851      	adds	r1, r2, r1
 8008268:	6339      	str	r1, [r7, #48]	; 0x30
 800826a:	4649      	mov	r1, r9
 800826c:	414b      	adcs	r3, r1
 800826e:	637b      	str	r3, [r7, #52]	; 0x34
 8008270:	f04f 0200 	mov.w	r2, #0
 8008274:	f04f 0300 	mov.w	r3, #0
 8008278:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800827c:	4659      	mov	r1, fp
 800827e:	00cb      	lsls	r3, r1, #3
 8008280:	4651      	mov	r1, sl
 8008282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008286:	4651      	mov	r1, sl
 8008288:	00ca      	lsls	r2, r1, #3
 800828a:	4610      	mov	r0, r2
 800828c:	4619      	mov	r1, r3
 800828e:	4603      	mov	r3, r0
 8008290:	4642      	mov	r2, r8
 8008292:	189b      	adds	r3, r3, r2
 8008294:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008298:	464b      	mov	r3, r9
 800829a:	460a      	mov	r2, r1
 800829c:	eb42 0303 	adc.w	r3, r2, r3
 80082a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80082b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80082b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80082b8:	460b      	mov	r3, r1
 80082ba:	18db      	adds	r3, r3, r3
 80082bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80082be:	4613      	mov	r3, r2
 80082c0:	eb42 0303 	adc.w	r3, r2, r3
 80082c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80082ce:	f7f7 ff99 	bl	8000204 <__aeabi_uldivmod>
 80082d2:	4602      	mov	r2, r0
 80082d4:	460b      	mov	r3, r1
 80082d6:	4b0d      	ldr	r3, [pc, #52]	; (800830c <UART_SetConfig+0x2d4>)
 80082d8:	fba3 1302 	umull	r1, r3, r3, r2
 80082dc:	095b      	lsrs	r3, r3, #5
 80082de:	2164      	movs	r1, #100	; 0x64
 80082e0:	fb01 f303 	mul.w	r3, r1, r3
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	00db      	lsls	r3, r3, #3
 80082e8:	3332      	adds	r3, #50	; 0x32
 80082ea:	4a08      	ldr	r2, [pc, #32]	; (800830c <UART_SetConfig+0x2d4>)
 80082ec:	fba2 2303 	umull	r2, r3, r2, r3
 80082f0:	095b      	lsrs	r3, r3, #5
 80082f2:	f003 0207 	and.w	r2, r3, #7
 80082f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4422      	add	r2, r4
 80082fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008300:	e106      	b.n	8008510 <UART_SetConfig+0x4d8>
 8008302:	bf00      	nop
 8008304:	40011000 	.word	0x40011000
 8008308:	40011400 	.word	0x40011400
 800830c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008314:	2200      	movs	r2, #0
 8008316:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800831a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800831e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008322:	4642      	mov	r2, r8
 8008324:	464b      	mov	r3, r9
 8008326:	1891      	adds	r1, r2, r2
 8008328:	6239      	str	r1, [r7, #32]
 800832a:	415b      	adcs	r3, r3
 800832c:	627b      	str	r3, [r7, #36]	; 0x24
 800832e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008332:	4641      	mov	r1, r8
 8008334:	1854      	adds	r4, r2, r1
 8008336:	4649      	mov	r1, r9
 8008338:	eb43 0501 	adc.w	r5, r3, r1
 800833c:	f04f 0200 	mov.w	r2, #0
 8008340:	f04f 0300 	mov.w	r3, #0
 8008344:	00eb      	lsls	r3, r5, #3
 8008346:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800834a:	00e2      	lsls	r2, r4, #3
 800834c:	4614      	mov	r4, r2
 800834e:	461d      	mov	r5, r3
 8008350:	4643      	mov	r3, r8
 8008352:	18e3      	adds	r3, r4, r3
 8008354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008358:	464b      	mov	r3, r9
 800835a:	eb45 0303 	adc.w	r3, r5, r3
 800835e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800836e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008372:	f04f 0200 	mov.w	r2, #0
 8008376:	f04f 0300 	mov.w	r3, #0
 800837a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800837e:	4629      	mov	r1, r5
 8008380:	008b      	lsls	r3, r1, #2
 8008382:	4621      	mov	r1, r4
 8008384:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008388:	4621      	mov	r1, r4
 800838a:	008a      	lsls	r2, r1, #2
 800838c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008390:	f7f7 ff38 	bl	8000204 <__aeabi_uldivmod>
 8008394:	4602      	mov	r2, r0
 8008396:	460b      	mov	r3, r1
 8008398:	4b60      	ldr	r3, [pc, #384]	; (800851c <UART_SetConfig+0x4e4>)
 800839a:	fba3 2302 	umull	r2, r3, r3, r2
 800839e:	095b      	lsrs	r3, r3, #5
 80083a0:	011c      	lsls	r4, r3, #4
 80083a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083a6:	2200      	movs	r2, #0
 80083a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80083ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80083b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80083b4:	4642      	mov	r2, r8
 80083b6:	464b      	mov	r3, r9
 80083b8:	1891      	adds	r1, r2, r2
 80083ba:	61b9      	str	r1, [r7, #24]
 80083bc:	415b      	adcs	r3, r3
 80083be:	61fb      	str	r3, [r7, #28]
 80083c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083c4:	4641      	mov	r1, r8
 80083c6:	1851      	adds	r1, r2, r1
 80083c8:	6139      	str	r1, [r7, #16]
 80083ca:	4649      	mov	r1, r9
 80083cc:	414b      	adcs	r3, r1
 80083ce:	617b      	str	r3, [r7, #20]
 80083d0:	f04f 0200 	mov.w	r2, #0
 80083d4:	f04f 0300 	mov.w	r3, #0
 80083d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80083dc:	4659      	mov	r1, fp
 80083de:	00cb      	lsls	r3, r1, #3
 80083e0:	4651      	mov	r1, sl
 80083e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083e6:	4651      	mov	r1, sl
 80083e8:	00ca      	lsls	r2, r1, #3
 80083ea:	4610      	mov	r0, r2
 80083ec:	4619      	mov	r1, r3
 80083ee:	4603      	mov	r3, r0
 80083f0:	4642      	mov	r2, r8
 80083f2:	189b      	adds	r3, r3, r2
 80083f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083f8:	464b      	mov	r3, r9
 80083fa:	460a      	mov	r2, r1
 80083fc:	eb42 0303 	adc.w	r3, r2, r3
 8008400:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	67bb      	str	r3, [r7, #120]	; 0x78
 800840e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008410:	f04f 0200 	mov.w	r2, #0
 8008414:	f04f 0300 	mov.w	r3, #0
 8008418:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800841c:	4649      	mov	r1, r9
 800841e:	008b      	lsls	r3, r1, #2
 8008420:	4641      	mov	r1, r8
 8008422:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008426:	4641      	mov	r1, r8
 8008428:	008a      	lsls	r2, r1, #2
 800842a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800842e:	f7f7 fee9 	bl	8000204 <__aeabi_uldivmod>
 8008432:	4602      	mov	r2, r0
 8008434:	460b      	mov	r3, r1
 8008436:	4611      	mov	r1, r2
 8008438:	4b38      	ldr	r3, [pc, #224]	; (800851c <UART_SetConfig+0x4e4>)
 800843a:	fba3 2301 	umull	r2, r3, r3, r1
 800843e:	095b      	lsrs	r3, r3, #5
 8008440:	2264      	movs	r2, #100	; 0x64
 8008442:	fb02 f303 	mul.w	r3, r2, r3
 8008446:	1acb      	subs	r3, r1, r3
 8008448:	011b      	lsls	r3, r3, #4
 800844a:	3332      	adds	r3, #50	; 0x32
 800844c:	4a33      	ldr	r2, [pc, #204]	; (800851c <UART_SetConfig+0x4e4>)
 800844e:	fba2 2303 	umull	r2, r3, r2, r3
 8008452:	095b      	lsrs	r3, r3, #5
 8008454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008458:	441c      	add	r4, r3
 800845a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800845e:	2200      	movs	r2, #0
 8008460:	673b      	str	r3, [r7, #112]	; 0x70
 8008462:	677a      	str	r2, [r7, #116]	; 0x74
 8008464:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008468:	4642      	mov	r2, r8
 800846a:	464b      	mov	r3, r9
 800846c:	1891      	adds	r1, r2, r2
 800846e:	60b9      	str	r1, [r7, #8]
 8008470:	415b      	adcs	r3, r3
 8008472:	60fb      	str	r3, [r7, #12]
 8008474:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008478:	4641      	mov	r1, r8
 800847a:	1851      	adds	r1, r2, r1
 800847c:	6039      	str	r1, [r7, #0]
 800847e:	4649      	mov	r1, r9
 8008480:	414b      	adcs	r3, r1
 8008482:	607b      	str	r3, [r7, #4]
 8008484:	f04f 0200 	mov.w	r2, #0
 8008488:	f04f 0300 	mov.w	r3, #0
 800848c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008490:	4659      	mov	r1, fp
 8008492:	00cb      	lsls	r3, r1, #3
 8008494:	4651      	mov	r1, sl
 8008496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800849a:	4651      	mov	r1, sl
 800849c:	00ca      	lsls	r2, r1, #3
 800849e:	4610      	mov	r0, r2
 80084a0:	4619      	mov	r1, r3
 80084a2:	4603      	mov	r3, r0
 80084a4:	4642      	mov	r2, r8
 80084a6:	189b      	adds	r3, r3, r2
 80084a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80084aa:	464b      	mov	r3, r9
 80084ac:	460a      	mov	r2, r1
 80084ae:	eb42 0303 	adc.w	r3, r2, r3
 80084b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	663b      	str	r3, [r7, #96]	; 0x60
 80084be:	667a      	str	r2, [r7, #100]	; 0x64
 80084c0:	f04f 0200 	mov.w	r2, #0
 80084c4:	f04f 0300 	mov.w	r3, #0
 80084c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80084cc:	4649      	mov	r1, r9
 80084ce:	008b      	lsls	r3, r1, #2
 80084d0:	4641      	mov	r1, r8
 80084d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084d6:	4641      	mov	r1, r8
 80084d8:	008a      	lsls	r2, r1, #2
 80084da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80084de:	f7f7 fe91 	bl	8000204 <__aeabi_uldivmod>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	4b0d      	ldr	r3, [pc, #52]	; (800851c <UART_SetConfig+0x4e4>)
 80084e8:	fba3 1302 	umull	r1, r3, r3, r2
 80084ec:	095b      	lsrs	r3, r3, #5
 80084ee:	2164      	movs	r1, #100	; 0x64
 80084f0:	fb01 f303 	mul.w	r3, r1, r3
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	011b      	lsls	r3, r3, #4
 80084f8:	3332      	adds	r3, #50	; 0x32
 80084fa:	4a08      	ldr	r2, [pc, #32]	; (800851c <UART_SetConfig+0x4e4>)
 80084fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008500:	095b      	lsrs	r3, r3, #5
 8008502:	f003 020f 	and.w	r2, r3, #15
 8008506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4422      	add	r2, r4
 800850e:	609a      	str	r2, [r3, #8]
}
 8008510:	bf00      	nop
 8008512:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008516:	46bd      	mov	sp, r7
 8008518:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800851c:	51eb851f 	.word	0x51eb851f

08008520 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008520:	b084      	sub	sp, #16
 8008522:	b580      	push	{r7, lr}
 8008524:	b084      	sub	sp, #16
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	f107 001c 	add.w	r0, r7, #28
 800852e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008532:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008536:	2b01      	cmp	r3, #1
 8008538:	d123      	bne.n	8008582 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800854e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008562:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008566:	2b01      	cmp	r3, #1
 8008568:	d105      	bne.n	8008576 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fb74 	bl	8008c64 <USB_CoreReset>
 800857c:	4603      	mov	r3, r0
 800857e:	73fb      	strb	r3, [r7, #15]
 8008580:	e01b      	b.n	80085ba <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fb68 	bl	8008c64 <USB_CoreReset>
 8008594:	4603      	mov	r3, r0
 8008596:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008598:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800859c:	2b00      	cmp	r3, #0
 800859e:	d106      	bne.n	80085ae <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	639a      	str	r2, [r3, #56]	; 0x38
 80085ac:	e005      	b.n	80085ba <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80085ba:	7fbb      	ldrb	r3, [r7, #30]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d10b      	bne.n	80085d8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f043 0206 	orr.w	r2, r3, #6
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	f043 0220 	orr.w	r2, r3, #32
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085e4:	b004      	add	sp, #16
 80085e6:	4770      	bx	lr

080085e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	f043 0201 	orr.w	r2, r3, #1
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800860a:	b480      	push	{r7}
 800860c:	b083      	sub	sp, #12
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	f023 0201 	bic.w	r2, r3, #1
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	460b      	mov	r3, r1
 8008636:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008638:	2300      	movs	r3, #0
 800863a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008648:	78fb      	ldrb	r3, [r7, #3]
 800864a:	2b01      	cmp	r3, #1
 800864c:	d115      	bne.n	800867a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800865a:	200a      	movs	r0, #10
 800865c:	f7f9 f972 	bl	8001944 <HAL_Delay>
      ms += 10U;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	330a      	adds	r3, #10
 8008664:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 faee 	bl	8008c48 <USB_GetMode>
 800866c:	4603      	mov	r3, r0
 800866e:	2b01      	cmp	r3, #1
 8008670:	d01e      	beq.n	80086b0 <USB_SetCurrentMode+0x84>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2bc7      	cmp	r3, #199	; 0xc7
 8008676:	d9f0      	bls.n	800865a <USB_SetCurrentMode+0x2e>
 8008678:	e01a      	b.n	80086b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800867a:	78fb      	ldrb	r3, [r7, #3]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d115      	bne.n	80086ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800868c:	200a      	movs	r0, #10
 800868e:	f7f9 f959 	bl	8001944 <HAL_Delay>
      ms += 10U;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	330a      	adds	r3, #10
 8008696:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fad5 	bl	8008c48 <USB_GetMode>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d005      	beq.n	80086b0 <USB_SetCurrentMode+0x84>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2bc7      	cmp	r3, #199	; 0xc7
 80086a8:	d9f0      	bls.n	800868c <USB_SetCurrentMode+0x60>
 80086aa:	e001      	b.n	80086b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e005      	b.n	80086bc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2bc8      	cmp	r3, #200	; 0xc8
 80086b4:	d101      	bne.n	80086ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e000      	b.n	80086bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80086c4:	b084      	sub	sp, #16
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b086      	sub	sp, #24
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80086d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80086de:	2300      	movs	r3, #0
 80086e0:	613b      	str	r3, [r7, #16]
 80086e2:	e009      	b.n	80086f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	3340      	adds	r3, #64	; 0x40
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4413      	add	r3, r2
 80086ee:	2200      	movs	r2, #0
 80086f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	3301      	adds	r3, #1
 80086f6:	613b      	str	r3, [r7, #16]
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	2b0e      	cmp	r3, #14
 80086fc:	d9f2      	bls.n	80086e4 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80086fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008702:	2b00      	cmp	r3, #0
 8008704:	d11c      	bne.n	8008740 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008714:	f043 0302 	orr.w	r3, r3, #2
 8008718:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	601a      	str	r2, [r3, #0]
 800873e:	e005      	b.n	800874c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008744:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008752:	461a      	mov	r2, r3
 8008754:	2300      	movs	r3, #0
 8008756:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008758:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800875c:	2b01      	cmp	r3, #1
 800875e:	d10d      	bne.n	800877c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008764:	2b00      	cmp	r3, #0
 8008766:	d104      	bne.n	8008772 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008768:	2100      	movs	r1, #0
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f968 	bl	8008a40 <USB_SetDevSpeed>
 8008770:	e008      	b.n	8008784 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008772:	2101      	movs	r1, #1
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 f963 	bl	8008a40 <USB_SetDevSpeed>
 800877a:	e003      	b.n	8008784 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800877c:	2103      	movs	r1, #3
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f95e 	bl	8008a40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008784:	2110      	movs	r1, #16
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f8fa 	bl	8008980 <USB_FlushTxFifo>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f924 	bl	80089e4 <USB_FlushRxFifo>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ac:	461a      	mov	r2, r3
 80087ae:	2300      	movs	r3, #0
 80087b0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087b8:	461a      	mov	r2, r3
 80087ba:	2300      	movs	r3, #0
 80087bc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087c4:	461a      	mov	r2, r3
 80087c6:	2300      	movs	r3, #0
 80087c8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087ca:	2300      	movs	r3, #0
 80087cc:	613b      	str	r3, [r7, #16]
 80087ce:	e043      	b.n	8008858 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	015a      	lsls	r2, r3, #5
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	4413      	add	r3, r2
 80087d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087e6:	d118      	bne.n	800881a <USB_DevInit+0x156>
    {
      if (i == 0U)
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10a      	bne.n	8008804 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	015a      	lsls	r2, r3, #5
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	4413      	add	r3, r2
 80087f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087fa:	461a      	mov	r2, r3
 80087fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008800:	6013      	str	r3, [r2, #0]
 8008802:	e013      	b.n	800882c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	015a      	lsls	r2, r3, #5
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4413      	add	r3, r2
 800880c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008810:	461a      	mov	r2, r3
 8008812:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008816:	6013      	str	r3, [r2, #0]
 8008818:	e008      	b.n	800882c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	4413      	add	r3, r2
 8008822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008826:	461a      	mov	r2, r3
 8008828:	2300      	movs	r3, #0
 800882a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	015a      	lsls	r2, r3, #5
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	4413      	add	r3, r2
 8008834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008838:	461a      	mov	r2, r3
 800883a:	2300      	movs	r3, #0
 800883c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	015a      	lsls	r2, r3, #5
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	4413      	add	r3, r2
 8008846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800884a:	461a      	mov	r2, r3
 800884c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008850:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	3301      	adds	r3, #1
 8008856:	613b      	str	r3, [r7, #16]
 8008858:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800885c:	461a      	mov	r2, r3
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	4293      	cmp	r3, r2
 8008862:	d3b5      	bcc.n	80087d0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008864:	2300      	movs	r3, #0
 8008866:	613b      	str	r3, [r7, #16]
 8008868:	e043      	b.n	80088f2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	015a      	lsls	r2, r3, #5
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	4413      	add	r3, r2
 8008872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800887c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008880:	d118      	bne.n	80088b4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d10a      	bne.n	800889e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	4413      	add	r3, r2
 8008890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008894:	461a      	mov	r2, r3
 8008896:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800889a:	6013      	str	r3, [r2, #0]
 800889c:	e013      	b.n	80088c6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	015a      	lsls	r2, r3, #5
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	4413      	add	r3, r2
 80088a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088aa:	461a      	mov	r2, r3
 80088ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80088b0:	6013      	str	r3, [r2, #0]
 80088b2:	e008      	b.n	80088c6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	015a      	lsls	r2, r3, #5
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	4413      	add	r3, r2
 80088bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088c0:	461a      	mov	r2, r3
 80088c2:	2300      	movs	r3, #0
 80088c4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	015a      	lsls	r2, r3, #5
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	4413      	add	r3, r2
 80088ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d2:	461a      	mov	r2, r3
 80088d4:	2300      	movs	r3, #0
 80088d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	015a      	lsls	r2, r3, #5
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4413      	add	r3, r2
 80088e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e4:	461a      	mov	r2, r3
 80088e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80088ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	3301      	adds	r3, #1
 80088f0:	613b      	str	r3, [r7, #16]
 80088f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80088f6:	461a      	mov	r2, r3
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d3b5      	bcc.n	800886a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800890c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008910:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800891e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008920:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008924:	2b00      	cmp	r3, #0
 8008926:	d105      	bne.n	8008934 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	f043 0210 	orr.w	r2, r3, #16
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	699a      	ldr	r2, [r3, #24]
 8008938:	4b10      	ldr	r3, [pc, #64]	; (800897c <USB_DevInit+0x2b8>)
 800893a:	4313      	orrs	r3, r2
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008940:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008944:	2b00      	cmp	r3, #0
 8008946:	d005      	beq.n	8008954 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	f043 0208 	orr.w	r2, r3, #8
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008954:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008958:	2b01      	cmp	r3, #1
 800895a:	d107      	bne.n	800896c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008964:	f043 0304 	orr.w	r3, r3, #4
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800896c:	7dfb      	ldrb	r3, [r7, #23]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3718      	adds	r7, #24
 8008972:	46bd      	mov	sp, r7
 8008974:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008978:	b004      	add	sp, #16
 800897a:	4770      	bx	lr
 800897c:	803c3800 	.word	0x803c3800

08008980 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	3301      	adds	r3, #1
 8008992:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800899a:	d901      	bls.n	80089a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800899c:	2303      	movs	r3, #3
 800899e:	e01b      	b.n	80089d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	daf2      	bge.n	800898e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80089a8:	2300      	movs	r3, #0
 80089aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	019b      	lsls	r3, r3, #6
 80089b0:	f043 0220 	orr.w	r2, r3, #32
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	3301      	adds	r3, #1
 80089bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80089c4:	d901      	bls.n	80089ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80089c6:	2303      	movs	r3, #3
 80089c8:	e006      	b.n	80089d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	f003 0320 	and.w	r3, r3, #32
 80089d2:	2b20      	cmp	r3, #32
 80089d4:	d0f0      	beq.n	80089b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089ec:	2300      	movs	r3, #0
 80089ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	3301      	adds	r3, #1
 80089f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80089fc:	d901      	bls.n	8008a02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80089fe:	2303      	movs	r3, #3
 8008a00:	e018      	b.n	8008a34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	daf2      	bge.n	80089f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2210      	movs	r2, #16
 8008a12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	3301      	adds	r3, #1
 8008a18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008a20:	d901      	bls.n	8008a26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e006      	b.n	8008a34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	f003 0310 	and.w	r3, r3, #16
 8008a2e:	2b10      	cmp	r3, #16
 8008a30:	d0f0      	beq.n	8008a14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3714      	adds	r7, #20
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	460b      	mov	r3, r1
 8008a4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	78fb      	ldrb	r3, [r7, #3]
 8008a5a:	68f9      	ldr	r1, [r7, #12]
 8008a5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a60:	4313      	orrs	r3, r2
 8008a62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008a72:	b480      	push	{r7}
 8008a74:	b089      	sub	sp, #36	; 0x24
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	60f8      	str	r0, [r7, #12]
 8008a7a:	60b9      	str	r1, [r7, #8]
 8008a7c:	4611      	mov	r1, r2
 8008a7e:	461a      	mov	r2, r3
 8008a80:	460b      	mov	r3, r1
 8008a82:	71fb      	strb	r3, [r7, #7]
 8008a84:	4613      	mov	r3, r2
 8008a86:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008a90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d123      	bne.n	8008ae0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008a98:	88bb      	ldrh	r3, [r7, #4]
 8008a9a:	3303      	adds	r3, #3
 8008a9c:	089b      	lsrs	r3, r3, #2
 8008a9e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	61bb      	str	r3, [r7, #24]
 8008aa4:	e018      	b.n	8008ad8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008aa6:	79fb      	ldrb	r3, [r7, #7]
 8008aa8:	031a      	lsls	r2, r3, #12
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	3301      	adds	r3, #1
 8008abe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	61bb      	str	r3, [r7, #24]
 8008ad8:	69ba      	ldr	r2, [r7, #24]
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d3e2      	bcc.n	8008aa6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3724      	adds	r7, #36	; 0x24
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr

08008aee <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008aee:	b480      	push	{r7}
 8008af0:	b08b      	sub	sp, #44	; 0x2c
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	60f8      	str	r0, [r7, #12]
 8008af6:	60b9      	str	r1, [r7, #8]
 8008af8:	4613      	mov	r3, r2
 8008afa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008b04:	88fb      	ldrh	r3, [r7, #6]
 8008b06:	089b      	lsrs	r3, r3, #2
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008b0c:	88fb      	ldrh	r3, [r7, #6]
 8008b0e:	f003 0303 	and.w	r3, r3, #3
 8008b12:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008b14:	2300      	movs	r3, #0
 8008b16:	623b      	str	r3, [r7, #32]
 8008b18:	e014      	b.n	8008b44 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b24:	601a      	str	r2, [r3, #0]
    pDest++;
 8008b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b28:	3301      	adds	r3, #1
 8008b2a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2e:	3301      	adds	r3, #1
 8008b30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b34:	3301      	adds	r3, #1
 8008b36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008b3e:	6a3b      	ldr	r3, [r7, #32]
 8008b40:	3301      	adds	r3, #1
 8008b42:	623b      	str	r3, [r7, #32]
 8008b44:	6a3a      	ldr	r2, [r7, #32]
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d3e6      	bcc.n	8008b1a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008b4c:	8bfb      	ldrh	r3, [r7, #30]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d01e      	beq.n	8008b90 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008b52:	2300      	movs	r3, #0
 8008b54:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	f107 0310 	add.w	r3, r7, #16
 8008b62:	6812      	ldr	r2, [r2, #0]
 8008b64:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008b66:	693a      	ldr	r2, [r7, #16]
 8008b68:	6a3b      	ldr	r3, [r7, #32]
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	00db      	lsls	r3, r3, #3
 8008b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b72:	b2da      	uxtb	r2, r3
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	701a      	strb	r2, [r3, #0]
      i++;
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	623b      	str	r3, [r7, #32]
      pDest++;
 8008b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b80:	3301      	adds	r3, #1
 8008b82:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008b84:	8bfb      	ldrh	r3, [r7, #30]
 8008b86:	3b01      	subs	r3, #1
 8008b88:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008b8a:	8bfb      	ldrh	r3, [r7, #30]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1ea      	bne.n	8008b66 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	372c      	adds	r7, #44	; 0x2c
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b085      	sub	sp, #20
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008bb8:	f023 0303 	bic.w	r3, r3, #3
 8008bbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bcc:	f043 0302 	orr.w	r3, r3, #2
 8008bd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3714      	adds	r7, #20
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	695b      	ldr	r3, [r3, #20]
 8008bec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3714      	adds	r7, #20
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr

08008c06 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008c06:	b480      	push	{r7}
 8008c08:	b085      	sub	sp, #20
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	460b      	mov	r3, r1
 8008c10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008c16:	78fb      	ldrb	r3, [r7, #3]
 8008c18:	015a      	lsls	r2, r3, #5
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008c26:	78fb      	ldrb	r3, [r7, #3]
 8008c28:	015a      	lsls	r2, r3, #5
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	4013      	ands	r3, r2
 8008c38:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008c3a:	68bb      	ldr	r3, [r7, #8]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3714      	adds	r7, #20
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	695b      	ldr	r3, [r3, #20]
 8008c54:	f003 0301 	and.w	r3, r3, #1
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	3301      	adds	r3, #1
 8008c74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008c7c:	d901      	bls.n	8008c82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e01b      	b.n	8008cba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	daf2      	bge.n	8008c70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	f043 0201 	orr.w	r2, r3, #1
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008ca6:	d901      	bls.n	8008cac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008ca8:	2303      	movs	r3, #3
 8008caa:	e006      	b.n	8008cba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	f003 0301 	and.w	r3, r3, #1
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d0f0      	beq.n	8008c9a <USB_CoreReset+0x36>

  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr
	...

08008cc8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008cc8:	b084      	sub	sp, #16
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b086      	sub	sp, #24
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008cd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ce8:	461a      	mov	r2, r3
 8008cea:	2300      	movs	r3, #0
 8008cec:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d119      	bne.n	8008d3a <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008d06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d10a      	bne.n	8008d24 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d1c:	f043 0304 	orr.w	r3, r3, #4
 8008d20:	6013      	str	r3, [r2, #0]
 8008d22:	e014      	b.n	8008d4e <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d32:	f023 0304 	bic.w	r3, r3, #4
 8008d36:	6013      	str	r3, [r2, #0]
 8008d38:	e009      	b.n	8008d4e <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d48:	f023 0304 	bic.w	r3, r3, #4
 8008d4c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d4e:	2110      	movs	r1, #16
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7ff fe15 	bl	8008980 <USB_FlushTxFifo>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d001      	beq.n	8008d60 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f7ff fe3f 	bl	80089e4 <USB_FlushRxFifo>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d001      	beq.n	8008d70 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008d70:	2300      	movs	r3, #0
 8008d72:	613b      	str	r3, [r7, #16]
 8008d74:	e015      	b.n	8008da2 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	015a      	lsls	r2, r3, #5
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d82:	461a      	mov	r2, r3
 8008d84:	f04f 33ff 	mov.w	r3, #4294967295
 8008d88:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	015a      	lsls	r2, r3, #5
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	4413      	add	r3, r2
 8008d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d96:	461a      	mov	r2, r3
 8008d98:	2300      	movs	r3, #0
 8008d9a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	613b      	str	r3, [r7, #16]
 8008da2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008da6:	461a      	mov	r2, r3
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d3e3      	bcc.n	8008d76 <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dba:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a18      	ldr	r2, [pc, #96]	; (8008e20 <USB_HostInit+0x158>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d10b      	bne.n	8008ddc <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dca:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a15      	ldr	r2, [pc, #84]	; (8008e24 <USB_HostInit+0x15c>)
 8008dd0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a14      	ldr	r2, [pc, #80]	; (8008e28 <USB_HostInit+0x160>)
 8008dd6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008dda:	e009      	b.n	8008df0 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2280      	movs	r2, #128	; 0x80
 8008de0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a11      	ldr	r2, [pc, #68]	; (8008e2c <USB_HostInit+0x164>)
 8008de6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a11      	ldr	r2, [pc, #68]	; (8008e30 <USB_HostInit+0x168>)
 8008dec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008df0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d105      	bne.n	8008e04 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	f043 0210 	orr.w	r2, r3, #16
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	699a      	ldr	r2, [r3, #24]
 8008e08:	4b0a      	ldr	r3, [pc, #40]	; (8008e34 <USB_HostInit+0x16c>)
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3718      	adds	r7, #24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e1c:	b004      	add	sp, #16
 8008e1e:	4770      	bx	lr
 8008e20:	40040000 	.word	0x40040000
 8008e24:	01000200 	.word	0x01000200
 8008e28:	00e00300 	.word	0x00e00300
 8008e2c:	00600080 	.word	0x00600080
 8008e30:	004000e0 	.word	0x004000e0
 8008e34:	a3200008 	.word	0xa3200008

08008e38 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	460b      	mov	r3, r1
 8008e42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e56:	f023 0303 	bic.w	r3, r3, #3
 8008e5a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	78fb      	ldrb	r3, [r7, #3]
 8008e66:	f003 0303 	and.w	r3, r3, #3
 8008e6a:	68f9      	ldr	r1, [r7, #12]
 8008e6c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008e70:	4313      	orrs	r3, r2
 8008e72:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008e74:	78fb      	ldrb	r3, [r7, #3]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d107      	bne.n	8008e8a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e80:	461a      	mov	r2, r3
 8008e82:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008e86:	6053      	str	r3, [r2, #4]
 8008e88:	e00c      	b.n	8008ea4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008e8a:	78fb      	ldrb	r3, [r7, #3]
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d107      	bne.n	8008ea0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e96:	461a      	mov	r2, r3
 8008e98:	f241 7370 	movw	r3, #6000	; 0x1770
 8008e9c:	6053      	str	r3, [r2, #4]
 8008e9e:	e001      	b.n	8008ea4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e000      	b.n	8008ea6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3714      	adds	r7, #20
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr

08008eb2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b084      	sub	sp, #16
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008ed2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ee0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008ee2:	2064      	movs	r0, #100	; 0x64
 8008ee4:	f7f8 fd2e 	bl	8001944 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ef4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008ef6:	200a      	movs	r0, #10
 8008ef8:	f7f8 fd24 	bl	8001944 <HAL_Delay>

  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008f06:	b480      	push	{r7}
 8008f08:	b085      	sub	sp, #20
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
 8008f0e:	460b      	mov	r3, r1
 8008f10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008f16:	2300      	movs	r3, #0
 8008f18:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008f2a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d109      	bne.n	8008f4a <USB_DriveVbus+0x44>
 8008f36:	78fb      	ldrb	r3, [r7, #3]
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d106      	bne.n	8008f4a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008f44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008f48:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f54:	d109      	bne.n	8008f6a <USB_DriveVbus+0x64>
 8008f56:	78fb      	ldrb	r3, [r7, #3]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d106      	bne.n	8008f6a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008f64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f68:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3714      	adds	r7, #20
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008f84:	2300      	movs	r3, #0
 8008f86:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	0c5b      	lsrs	r3, r3, #17
 8008f96:	f003 0303 	and.w	r3, r3, #3
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3714      	adds	r7, #20
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr

08008fa6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b085      	sub	sp, #20
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	b29b      	uxth	r3, r3
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3714      	adds	r7, #20
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b088      	sub	sp, #32
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	4608      	mov	r0, r1
 8008fd2:	4611      	mov	r1, r2
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	70fb      	strb	r3, [r7, #3]
 8008fda:	460b      	mov	r3, r1
 8008fdc:	70bb      	strb	r3, [r7, #2]
 8008fde:	4613      	mov	r3, r2
 8008fe0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008fea:	78fb      	ldrb	r3, [r7, #3]
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ffc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008ffe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009002:	2b03      	cmp	r3, #3
 8009004:	d87c      	bhi.n	8009100 <USB_HC_Init+0x138>
 8009006:	a201      	add	r2, pc, #4	; (adr r2, 800900c <USB_HC_Init+0x44>)
 8009008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900c:	0800901d 	.word	0x0800901d
 8009010:	080090c3 	.word	0x080090c3
 8009014:	0800901d 	.word	0x0800901d
 8009018:	08009085 	.word	0x08009085
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800901c:	78fb      	ldrb	r3, [r7, #3]
 800901e:	015a      	lsls	r2, r3, #5
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	4413      	add	r3, r2
 8009024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009028:	461a      	mov	r2, r3
 800902a:	f240 439d 	movw	r3, #1181	; 0x49d
 800902e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009030:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009034:	2b00      	cmp	r3, #0
 8009036:	da10      	bge.n	800905a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009038:	78fb      	ldrb	r3, [r7, #3]
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	4413      	add	r3, r2
 8009040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	78fa      	ldrb	r2, [r7, #3]
 8009048:	0151      	lsls	r1, r2, #5
 800904a:	693a      	ldr	r2, [r7, #16]
 800904c:	440a      	add	r2, r1
 800904e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009056:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8009058:	e055      	b.n	8009106 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a6f      	ldr	r2, [pc, #444]	; (800921c <USB_HC_Init+0x254>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d151      	bne.n	8009106 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009062:	78fb      	ldrb	r3, [r7, #3]
 8009064:	015a      	lsls	r2, r3, #5
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	4413      	add	r3, r2
 800906a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	78fa      	ldrb	r2, [r7, #3]
 8009072:	0151      	lsls	r1, r2, #5
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	440a      	add	r2, r1
 8009078:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800907c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009080:	60d3      	str	r3, [r2, #12]
      break;
 8009082:	e040      	b.n	8009106 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009084:	78fb      	ldrb	r3, [r7, #3]
 8009086:	015a      	lsls	r2, r3, #5
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	4413      	add	r3, r2
 800908c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009090:	461a      	mov	r2, r3
 8009092:	f240 639d 	movw	r3, #1693	; 0x69d
 8009096:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009098:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800909c:	2b00      	cmp	r3, #0
 800909e:	da34      	bge.n	800910a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80090a0:	78fb      	ldrb	r3, [r7, #3]
 80090a2:	015a      	lsls	r2, r3, #5
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	4413      	add	r3, r2
 80090a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	78fa      	ldrb	r2, [r7, #3]
 80090b0:	0151      	lsls	r1, r2, #5
 80090b2:	693a      	ldr	r2, [r7, #16]
 80090b4:	440a      	add	r2, r1
 80090b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090be:	60d3      	str	r3, [r2, #12]
      }

      break;
 80090c0:	e023      	b.n	800910a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80090c2:	78fb      	ldrb	r3, [r7, #3]
 80090c4:	015a      	lsls	r2, r3, #5
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	4413      	add	r3, r2
 80090ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090ce:	461a      	mov	r2, r3
 80090d0:	f240 2325 	movw	r3, #549	; 0x225
 80090d4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80090d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	da17      	bge.n	800910e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80090de:	78fb      	ldrb	r3, [r7, #3]
 80090e0:	015a      	lsls	r2, r3, #5
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	4413      	add	r3, r2
 80090e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	78fa      	ldrb	r2, [r7, #3]
 80090ee:	0151      	lsls	r1, r2, #5
 80090f0:	693a      	ldr	r2, [r7, #16]
 80090f2:	440a      	add	r2, r1
 80090f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090f8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80090fc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80090fe:	e006      	b.n	800910e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	77fb      	strb	r3, [r7, #31]
      break;
 8009104:	e004      	b.n	8009110 <USB_HC_Init+0x148>
      break;
 8009106:	bf00      	nop
 8009108:	e002      	b.n	8009110 <USB_HC_Init+0x148>
      break;
 800910a:	bf00      	nop
 800910c:	e000      	b.n	8009110 <USB_HC_Init+0x148>
      break;
 800910e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009110:	78fb      	ldrb	r3, [r7, #3]
 8009112:	015a      	lsls	r2, r3, #5
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	4413      	add	r3, r2
 8009118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800911c:	461a      	mov	r2, r3
 800911e:	2300      	movs	r3, #0
 8009120:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009122:	78fb      	ldrb	r3, [r7, #3]
 8009124:	015a      	lsls	r2, r3, #5
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	4413      	add	r3, r2
 800912a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	78fa      	ldrb	r2, [r7, #3]
 8009132:	0151      	lsls	r1, r2, #5
 8009134:	693a      	ldr	r2, [r7, #16]
 8009136:	440a      	add	r2, r1
 8009138:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800913c:	f043 0302 	orr.w	r3, r3, #2
 8009140:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009148:	699a      	ldr	r2, [r3, #24]
 800914a:	78fb      	ldrb	r3, [r7, #3]
 800914c:	f003 030f 	and.w	r3, r3, #15
 8009150:	2101      	movs	r1, #1
 8009152:	fa01 f303 	lsl.w	r3, r1, r3
 8009156:	6939      	ldr	r1, [r7, #16]
 8009158:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800915c:	4313      	orrs	r3, r2
 800915e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800916c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009170:	2b00      	cmp	r3, #0
 8009172:	da03      	bge.n	800917c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009178:	61bb      	str	r3, [r7, #24]
 800917a:	e001      	b.n	8009180 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800917c:	2300      	movs	r3, #0
 800917e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f7ff fef9 	bl	8008f78 <USB_GetHostSpeed>
 8009186:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009188:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800918c:	2b02      	cmp	r3, #2
 800918e:	d106      	bne.n	800919e <USB_HC_Init+0x1d6>
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2b02      	cmp	r3, #2
 8009194:	d003      	beq.n	800919e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009196:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800919a:	617b      	str	r3, [r7, #20]
 800919c:	e001      	b.n	80091a2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80091a2:	787b      	ldrb	r3, [r7, #1]
 80091a4:	059b      	lsls	r3, r3, #22
 80091a6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80091aa:	78bb      	ldrb	r3, [r7, #2]
 80091ac:	02db      	lsls	r3, r3, #11
 80091ae:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80091b2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80091b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80091b8:	049b      	lsls	r3, r3, #18
 80091ba:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80091be:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80091c0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80091c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80091c6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	431a      	orrs	r2, r3
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80091d0:	78fa      	ldrb	r2, [r7, #3]
 80091d2:	0151      	lsls	r1, r2, #5
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	440a      	add	r2, r1
 80091d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80091dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80091e0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80091e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80091e6:	2b03      	cmp	r3, #3
 80091e8:	d003      	beq.n	80091f2 <USB_HC_Init+0x22a>
 80091ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d10f      	bne.n	8009212 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80091f2:	78fb      	ldrb	r3, [r7, #3]
 80091f4:	015a      	lsls	r2, r3, #5
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	4413      	add	r3, r2
 80091fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	78fa      	ldrb	r2, [r7, #3]
 8009202:	0151      	lsls	r1, r2, #5
 8009204:	693a      	ldr	r2, [r7, #16]
 8009206:	440a      	add	r2, r1
 8009208:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800920c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009210:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009212:	7ffb      	ldrb	r3, [r7, #31]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3720      	adds	r7, #32
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	40040000 	.word	0x40040000

08009220 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b08c      	sub	sp, #48	; 0x30
 8009224:	af02      	add	r7, sp, #8
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	4613      	mov	r3, r2
 800922c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	785b      	ldrb	r3, [r3, #1]
 8009236:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8009238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800923c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	4a5d      	ldr	r2, [pc, #372]	; (80093b8 <USB_HC_StartXfer+0x198>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d12f      	bne.n	80092a6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8009246:	79fb      	ldrb	r3, [r7, #7]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d11c      	bne.n	8009286 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	7c9b      	ldrb	r3, [r3, #18]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d003      	beq.n	800925c <USB_HC_StartXfer+0x3c>
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	7c9b      	ldrb	r3, [r3, #18]
 8009258:	2b02      	cmp	r3, #2
 800925a:	d124      	bne.n	80092a6 <USB_HC_StartXfer+0x86>
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	799b      	ldrb	r3, [r3, #6]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d120      	bne.n	80092a6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	015a      	lsls	r2, r3, #5
 8009268:	6a3b      	ldr	r3, [r7, #32]
 800926a:	4413      	add	r3, r2
 800926c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	69fa      	ldr	r2, [r7, #28]
 8009274:	0151      	lsls	r1, r2, #5
 8009276:	6a3a      	ldr	r2, [r7, #32]
 8009278:	440a      	add	r2, r1
 800927a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800927e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009282:	60d3      	str	r3, [r2, #12]
 8009284:	e00f      	b.n	80092a6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	791b      	ldrb	r3, [r3, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10b      	bne.n	80092a6 <USB_HC_StartXfer+0x86>
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	795b      	ldrb	r3, [r3, #5]
 8009292:	2b01      	cmp	r3, #1
 8009294:	d107      	bne.n	80092a6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	785b      	ldrb	r3, [r3, #1]
 800929a:	4619      	mov	r1, r3
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f000 fb6b 	bl	8009978 <USB_DoPing>
        return HAL_OK;
 80092a2:	2300      	movs	r3, #0
 80092a4:	e232      	b.n	800970c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	799b      	ldrb	r3, [r3, #6]
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d158      	bne.n	8009360 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80092ae:	2301      	movs	r3, #1
 80092b0:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	78db      	ldrb	r3, [r3, #3]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d007      	beq.n	80092ca <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80092ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	8a92      	ldrh	r2, [r2, #20]
 80092c0:	fb03 f202 	mul.w	r2, r3, r2
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	61da      	str	r2, [r3, #28]
 80092c8:	e07c      	b.n	80093c4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	7c9b      	ldrb	r3, [r3, #18]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d130      	bne.n	8009334 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	6a1b      	ldr	r3, [r3, #32]
 80092d6:	2bbc      	cmp	r3, #188	; 0xbc
 80092d8:	d918      	bls.n	800930c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	8a9b      	ldrh	r3, [r3, #20]
 80092de:	461a      	mov	r2, r3
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	69da      	ldr	r2, [r3, #28]
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d003      	beq.n	80092fc <USB_HC_StartXfer+0xdc>
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	2b02      	cmp	r3, #2
 80092fa:	d103      	bne.n	8009304 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	2202      	movs	r2, #2
 8009300:	60da      	str	r2, [r3, #12]
 8009302:	e05f      	b.n	80093c4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	2201      	movs	r2, #1
 8009308:	60da      	str	r2, [r3, #12]
 800930a:	e05b      	b.n	80093c4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	6a1a      	ldr	r2, [r3, #32]
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	2b01      	cmp	r3, #1
 800931a:	d007      	beq.n	800932c <USB_HC_StartXfer+0x10c>
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	2b02      	cmp	r3, #2
 8009322:	d003      	beq.n	800932c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	2204      	movs	r2, #4
 8009328:	60da      	str	r2, [r3, #12]
 800932a:	e04b      	b.n	80093c4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	2203      	movs	r2, #3
 8009330:	60da      	str	r2, [r3, #12]
 8009332:	e047      	b.n	80093c4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8009334:	79fb      	ldrb	r3, [r7, #7]
 8009336:	2b01      	cmp	r3, #1
 8009338:	d10d      	bne.n	8009356 <USB_HC_StartXfer+0x136>
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	6a1b      	ldr	r3, [r3, #32]
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	8a92      	ldrh	r2, [r2, #20]
 8009342:	4293      	cmp	r3, r2
 8009344:	d907      	bls.n	8009356 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009346:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009348:	68ba      	ldr	r2, [r7, #8]
 800934a:	8a92      	ldrh	r2, [r2, #20]
 800934c:	fb03 f202 	mul.w	r2, r3, r2
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	61da      	str	r2, [r3, #28]
 8009354:	e036      	b.n	80093c4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	6a1a      	ldr	r2, [r3, #32]
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	61da      	str	r2, [r3, #28]
 800935e:	e031      	b.n	80093c4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	6a1b      	ldr	r3, [r3, #32]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d018      	beq.n	800939a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	6a1b      	ldr	r3, [r3, #32]
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	8a92      	ldrh	r2, [r2, #20]
 8009370:	4413      	add	r3, r2
 8009372:	3b01      	subs	r3, #1
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	8a92      	ldrh	r2, [r2, #20]
 8009378:	fbb3 f3f2 	udiv	r3, r3, r2
 800937c:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 800937e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009380:	8b7b      	ldrh	r3, [r7, #26]
 8009382:	429a      	cmp	r2, r3
 8009384:	d90b      	bls.n	800939e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8009386:	8b7b      	ldrh	r3, [r7, #26]
 8009388:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800938a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	8a92      	ldrh	r2, [r2, #20]
 8009390:	fb03 f202 	mul.w	r2, r3, r2
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	61da      	str	r2, [r3, #28]
 8009398:	e001      	b.n	800939e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800939a:	2301      	movs	r3, #1
 800939c:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	78db      	ldrb	r3, [r3, #3]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00a      	beq.n	80093bc <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80093a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	8a92      	ldrh	r2, [r2, #20]
 80093ac:	fb03 f202 	mul.w	r2, r3, r2
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	61da      	str	r2, [r3, #28]
 80093b4:	e006      	b.n	80093c4 <USB_HC_StartXfer+0x1a4>
 80093b6:	bf00      	nop
 80093b8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	6a1a      	ldr	r2, [r3, #32]
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	69db      	ldr	r3, [r3, #28]
 80093c8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80093cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80093ce:	04d9      	lsls	r1, r3, #19
 80093d0:	4ba3      	ldr	r3, [pc, #652]	; (8009660 <USB_HC_StartXfer+0x440>)
 80093d2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80093d4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	7d9b      	ldrb	r3, [r3, #22]
 80093da:	075b      	lsls	r3, r3, #29
 80093dc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80093e0:	69f9      	ldr	r1, [r7, #28]
 80093e2:	0148      	lsls	r0, r1, #5
 80093e4:	6a39      	ldr	r1, [r7, #32]
 80093e6:	4401      	add	r1, r0
 80093e8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80093ec:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80093ee:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80093f0:	79fb      	ldrb	r3, [r7, #7]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d009      	beq.n	800940a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	6999      	ldr	r1, [r3, #24]
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	015a      	lsls	r2, r3, #5
 80093fe:	6a3b      	ldr	r3, [r7, #32]
 8009400:	4413      	add	r3, r2
 8009402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009406:	460a      	mov	r2, r1
 8009408:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	f003 0301 	and.w	r3, r3, #1
 8009416:	2b00      	cmp	r3, #0
 8009418:	bf0c      	ite	eq
 800941a:	2301      	moveq	r3, #1
 800941c:	2300      	movne	r3, #0
 800941e:	b2db      	uxtb	r3, r3
 8009420:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	015a      	lsls	r2, r3, #5
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	4413      	add	r3, r2
 800942a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	69fa      	ldr	r2, [r7, #28]
 8009432:	0151      	lsls	r1, r2, #5
 8009434:	6a3a      	ldr	r2, [r7, #32]
 8009436:	440a      	add	r2, r1
 8009438:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800943c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009440:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	015a      	lsls	r2, r3, #5
 8009446:	6a3b      	ldr	r3, [r7, #32]
 8009448:	4413      	add	r3, r2
 800944a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	7e7b      	ldrb	r3, [r7, #25]
 8009452:	075b      	lsls	r3, r3, #29
 8009454:	69f9      	ldr	r1, [r7, #28]
 8009456:	0148      	lsls	r0, r1, #5
 8009458:	6a39      	ldr	r1, [r7, #32]
 800945a:	4401      	add	r1, r0
 800945c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009460:	4313      	orrs	r3, r2
 8009462:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	799b      	ldrb	r3, [r3, #6]
 8009468:	2b01      	cmp	r3, #1
 800946a:	f040 80c3 	bne.w	80095f4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	7c5b      	ldrb	r3, [r3, #17]
 8009472:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009478:	4313      	orrs	r3, r2
 800947a:	69fa      	ldr	r2, [r7, #28]
 800947c:	0151      	lsls	r1, r2, #5
 800947e:	6a3a      	ldr	r2, [r7, #32]
 8009480:	440a      	add	r2, r1
 8009482:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009486:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800948a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	015a      	lsls	r2, r3, #5
 8009490:	6a3b      	ldr	r3, [r7, #32]
 8009492:	4413      	add	r3, r2
 8009494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	69fa      	ldr	r2, [r7, #28]
 800949c:	0151      	lsls	r1, r2, #5
 800949e:	6a3a      	ldr	r2, [r7, #32]
 80094a0:	440a      	add	r2, r1
 80094a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80094aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	79db      	ldrb	r3, [r3, #7]
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d123      	bne.n	80094fc <USB_HC_StartXfer+0x2dc>
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	78db      	ldrb	r3, [r3, #3]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d11f      	bne.n	80094fc <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	015a      	lsls	r2, r3, #5
 80094c0:	6a3b      	ldr	r3, [r7, #32]
 80094c2:	4413      	add	r3, r2
 80094c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	69fa      	ldr	r2, [r7, #28]
 80094cc:	0151      	lsls	r1, r2, #5
 80094ce:	6a3a      	ldr	r2, [r7, #32]
 80094d0:	440a      	add	r2, r1
 80094d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094da:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	015a      	lsls	r2, r3, #5
 80094e0:	6a3b      	ldr	r3, [r7, #32]
 80094e2:	4413      	add	r3, r2
 80094e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	69fa      	ldr	r2, [r7, #28]
 80094ec:	0151      	lsls	r1, r2, #5
 80094ee:	6a3a      	ldr	r2, [r7, #32]
 80094f0:	440a      	add	r2, r1
 80094f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094fa:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	7c9b      	ldrb	r3, [r3, #18]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d003      	beq.n	800950c <USB_HC_StartXfer+0x2ec>
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	7c9b      	ldrb	r3, [r3, #18]
 8009508:	2b03      	cmp	r3, #3
 800950a:	d117      	bne.n	800953c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009510:	2b01      	cmp	r3, #1
 8009512:	d113      	bne.n	800953c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	78db      	ldrb	r3, [r3, #3]
 8009518:	2b01      	cmp	r3, #1
 800951a:	d10f      	bne.n	800953c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	015a      	lsls	r2, r3, #5
 8009520:	6a3b      	ldr	r3, [r7, #32]
 8009522:	4413      	add	r3, r2
 8009524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	69fa      	ldr	r2, [r7, #28]
 800952c:	0151      	lsls	r1, r2, #5
 800952e:	6a3a      	ldr	r2, [r7, #32]
 8009530:	440a      	add	r2, r1
 8009532:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800953a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	7c9b      	ldrb	r3, [r3, #18]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d162      	bne.n	800960a <USB_HC_StartXfer+0x3ea>
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	78db      	ldrb	r3, [r3, #3]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d15e      	bne.n	800960a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	3b01      	subs	r3, #1
 8009552:	2b03      	cmp	r3, #3
 8009554:	d858      	bhi.n	8009608 <USB_HC_StartXfer+0x3e8>
 8009556:	a201      	add	r2, pc, #4	; (adr r2, 800955c <USB_HC_StartXfer+0x33c>)
 8009558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955c:	0800956d 	.word	0x0800956d
 8009560:	0800958f 	.word	0x0800958f
 8009564:	080095b1 	.word	0x080095b1
 8009568:	080095d3 	.word	0x080095d3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	015a      	lsls	r2, r3, #5
 8009570:	6a3b      	ldr	r3, [r7, #32]
 8009572:	4413      	add	r3, r2
 8009574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	69fa      	ldr	r2, [r7, #28]
 800957c:	0151      	lsls	r1, r2, #5
 800957e:	6a3a      	ldr	r2, [r7, #32]
 8009580:	440a      	add	r2, r1
 8009582:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800958a:	6053      	str	r3, [r2, #4]
          break;
 800958c:	e03d      	b.n	800960a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	015a      	lsls	r2, r3, #5
 8009592:	6a3b      	ldr	r3, [r7, #32]
 8009594:	4413      	add	r3, r2
 8009596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	69fa      	ldr	r2, [r7, #28]
 800959e:	0151      	lsls	r1, r2, #5
 80095a0:	6a3a      	ldr	r2, [r7, #32]
 80095a2:	440a      	add	r2, r1
 80095a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095a8:	f043 030e 	orr.w	r3, r3, #14
 80095ac:	6053      	str	r3, [r2, #4]
          break;
 80095ae:	e02c      	b.n	800960a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	015a      	lsls	r2, r3, #5
 80095b4:	6a3b      	ldr	r3, [r7, #32]
 80095b6:	4413      	add	r3, r2
 80095b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	69fa      	ldr	r2, [r7, #28]
 80095c0:	0151      	lsls	r1, r2, #5
 80095c2:	6a3a      	ldr	r2, [r7, #32]
 80095c4:	440a      	add	r2, r1
 80095c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095ce:	6053      	str	r3, [r2, #4]
          break;
 80095d0:	e01b      	b.n	800960a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	015a      	lsls	r2, r3, #5
 80095d6:	6a3b      	ldr	r3, [r7, #32]
 80095d8:	4413      	add	r3, r2
 80095da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	69fa      	ldr	r2, [r7, #28]
 80095e2:	0151      	lsls	r1, r2, #5
 80095e4:	6a3a      	ldr	r2, [r7, #32]
 80095e6:	440a      	add	r2, r1
 80095e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80095f0:	6053      	str	r3, [r2, #4]
          break;
 80095f2:	e00a      	b.n	800960a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	015a      	lsls	r2, r3, #5
 80095f8:	6a3b      	ldr	r3, [r7, #32]
 80095fa:	4413      	add	r3, r2
 80095fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009600:	461a      	mov	r2, r3
 8009602:	2300      	movs	r3, #0
 8009604:	6053      	str	r3, [r2, #4]
 8009606:	e000      	b.n	800960a <USB_HC_StartXfer+0x3ea>
          break;
 8009608:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	015a      	lsls	r2, r3, #5
 800960e:	6a3b      	ldr	r3, [r7, #32]
 8009610:	4413      	add	r3, r2
 8009612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009620:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	78db      	ldrb	r3, [r3, #3]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d004      	beq.n	8009634 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009630:	613b      	str	r3, [r7, #16]
 8009632:	e003      	b.n	800963c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800963a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009642:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	015a      	lsls	r2, r3, #5
 8009648:	6a3b      	ldr	r3, [r7, #32]
 800964a:	4413      	add	r3, r2
 800964c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009650:	461a      	mov	r2, r3
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009656:	79fb      	ldrb	r3, [r7, #7]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d003      	beq.n	8009664 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	e055      	b.n	800970c <USB_HC_StartXfer+0x4ec>
 8009660:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	78db      	ldrb	r3, [r3, #3]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d14e      	bne.n	800970a <USB_HC_StartXfer+0x4ea>
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	6a1b      	ldr	r3, [r3, #32]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d04a      	beq.n	800970a <USB_HC_StartXfer+0x4ea>
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	79db      	ldrb	r3, [r3, #7]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d146      	bne.n	800970a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	7c9b      	ldrb	r3, [r3, #18]
 8009680:	2b03      	cmp	r3, #3
 8009682:	d831      	bhi.n	80096e8 <USB_HC_StartXfer+0x4c8>
 8009684:	a201      	add	r2, pc, #4	; (adr r2, 800968c <USB_HC_StartXfer+0x46c>)
 8009686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800968a:	bf00      	nop
 800968c:	0800969d 	.word	0x0800969d
 8009690:	080096c1 	.word	0x080096c1
 8009694:	0800969d 	.word	0x0800969d
 8009698:	080096c1 	.word	0x080096c1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	6a1b      	ldr	r3, [r3, #32]
 80096a0:	3303      	adds	r3, #3
 80096a2:	089b      	lsrs	r3, r3, #2
 80096a4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80096a6:	8afa      	ldrh	r2, [r7, #22]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d91c      	bls.n	80096ec <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	699b      	ldr	r3, [r3, #24]
 80096b6:	f043 0220 	orr.w	r2, r3, #32
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	619a      	str	r2, [r3, #24]
        }
        break;
 80096be:	e015      	b.n	80096ec <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	6a1b      	ldr	r3, [r3, #32]
 80096c4:	3303      	adds	r3, #3
 80096c6:	089b      	lsrs	r3, r3, #2
 80096c8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80096ca:	8afa      	ldrh	r2, [r7, #22]
 80096cc:	6a3b      	ldr	r3, [r7, #32]
 80096ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096d2:	691b      	ldr	r3, [r3, #16]
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d90a      	bls.n	80096f0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	619a      	str	r2, [r3, #24]
        }
        break;
 80096e6:	e003      	b.n	80096f0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80096e8:	bf00      	nop
 80096ea:	e002      	b.n	80096f2 <USB_HC_StartXfer+0x4d2>
        break;
 80096ec:	bf00      	nop
 80096ee:	e000      	b.n	80096f2 <USB_HC_StartXfer+0x4d2>
        break;
 80096f0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	6999      	ldr	r1, [r3, #24]
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	785a      	ldrb	r2, [r3, #1]
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	6a1b      	ldr	r3, [r3, #32]
 80096fe:	b29b      	uxth	r3, r3
 8009700:	2000      	movs	r0, #0
 8009702:	9000      	str	r0, [sp, #0]
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	f7ff f9b4 	bl	8008a72 <USB_WritePacket>
  }

  return HAL_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3728      	adds	r7, #40	; 0x28
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009726:	695b      	ldr	r3, [r3, #20]
 8009728:	b29b      	uxth	r3, r3
}
 800972a:	4618      	mov	r0, r3
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr

08009736 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009736:	b480      	push	{r7}
 8009738:	b089      	sub	sp, #36	; 0x24
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	460b      	mov	r3, r1
 8009740:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009746:	78fb      	ldrb	r3, [r7, #3]
 8009748:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800974a:	2300      	movs	r3, #0
 800974c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	015a      	lsls	r2, r3, #5
 8009752:	69fb      	ldr	r3, [r7, #28]
 8009754:	4413      	add	r3, r2
 8009756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	0c9b      	lsrs	r3, r3, #18
 800975e:	f003 0303 	and.w	r3, r3, #3
 8009762:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009764:	69bb      	ldr	r3, [r7, #24]
 8009766:	015a      	lsls	r2, r3, #5
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	4413      	add	r3, r2
 800976c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	0fdb      	lsrs	r3, r3, #31
 8009774:	f003 0301 	and.w	r3, r3, #1
 8009778:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800977a:	69bb      	ldr	r3, [r7, #24]
 800977c:	015a      	lsls	r2, r3, #5
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	4413      	add	r3, r2
 8009782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	0fdb      	lsrs	r3, r3, #31
 800978a:	f003 0301 	and.w	r3, r3, #1
 800978e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f003 0320 	and.w	r3, r3, #32
 8009798:	2b20      	cmp	r3, #32
 800979a:	d10d      	bne.n	80097b8 <USB_HC_Halt+0x82>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10a      	bne.n	80097b8 <USB_HC_Halt+0x82>
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d005      	beq.n	80097b4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d002      	beq.n	80097b4 <USB_HC_Halt+0x7e>
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	2b03      	cmp	r3, #3
 80097b2:	d101      	bne.n	80097b8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80097b4:	2300      	movs	r3, #0
 80097b6:	e0d8      	b.n	800996a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d002      	beq.n	80097c4 <USB_HC_Halt+0x8e>
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	d173      	bne.n	80098ac <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	015a      	lsls	r2, r3, #5
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	4413      	add	r3, r2
 80097cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	69ba      	ldr	r2, [r7, #24]
 80097d4:	0151      	lsls	r1, r2, #5
 80097d6:	69fa      	ldr	r2, [r7, #28]
 80097d8:	440a      	add	r2, r1
 80097da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097e2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	f003 0320 	and.w	r3, r3, #32
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d14a      	bne.n	8009886 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d133      	bne.n	8009864 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	015a      	lsls	r2, r3, #5
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	4413      	add	r3, r2
 8009804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	69ba      	ldr	r2, [r7, #24]
 800980c:	0151      	lsls	r1, r2, #5
 800980e:	69fa      	ldr	r2, [r7, #28]
 8009810:	440a      	add	r2, r1
 8009812:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009816:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800981a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	015a      	lsls	r2, r3, #5
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	4413      	add	r3, r2
 8009824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	69ba      	ldr	r2, [r7, #24]
 800982c:	0151      	lsls	r1, r2, #5
 800982e:	69fa      	ldr	r2, [r7, #28]
 8009830:	440a      	add	r2, r1
 8009832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009836:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800983a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	3301      	adds	r3, #1
 8009840:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009848:	d82e      	bhi.n	80098a8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	015a      	lsls	r2, r3, #5
 800984e:	69fb      	ldr	r3, [r7, #28]
 8009850:	4413      	add	r3, r2
 8009852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800985c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009860:	d0ec      	beq.n	800983c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009862:	e081      	b.n	8009968 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	015a      	lsls	r2, r3, #5
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	4413      	add	r3, r2
 800986c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	69ba      	ldr	r2, [r7, #24]
 8009874:	0151      	lsls	r1, r2, #5
 8009876:	69fa      	ldr	r2, [r7, #28]
 8009878:	440a      	add	r2, r1
 800987a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800987e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009882:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009884:	e070      	b.n	8009968 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	015a      	lsls	r2, r3, #5
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	4413      	add	r3, r2
 800988e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	69ba      	ldr	r2, [r7, #24]
 8009896:	0151      	lsls	r1, r2, #5
 8009898:	69fa      	ldr	r2, [r7, #28]
 800989a:	440a      	add	r2, r1
 800989c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098a4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80098a6:	e05f      	b.n	8009968 <USB_HC_Halt+0x232>
            break;
 80098a8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80098aa:	e05d      	b.n	8009968 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	015a      	lsls	r2, r3, #5
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	4413      	add	r3, r2
 80098b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	69ba      	ldr	r2, [r7, #24]
 80098bc:	0151      	lsls	r1, r2, #5
 80098be:	69fa      	ldr	r2, [r7, #28]
 80098c0:	440a      	add	r2, r1
 80098c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098ca:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d133      	bne.n	8009944 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	015a      	lsls	r2, r3, #5
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	4413      	add	r3, r2
 80098e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	69ba      	ldr	r2, [r7, #24]
 80098ec:	0151      	lsls	r1, r2, #5
 80098ee:	69fa      	ldr	r2, [r7, #28]
 80098f0:	440a      	add	r2, r1
 80098f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098fa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	015a      	lsls	r2, r3, #5
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	4413      	add	r3, r2
 8009904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	69ba      	ldr	r2, [r7, #24]
 800990c:	0151      	lsls	r1, r2, #5
 800990e:	69fa      	ldr	r2, [r7, #28]
 8009910:	440a      	add	r2, r1
 8009912:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800991a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	3301      	adds	r3, #1
 8009920:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009928:	d81d      	bhi.n	8009966 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	015a      	lsls	r2, r3, #5
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	4413      	add	r3, r2
 8009932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800993c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009940:	d0ec      	beq.n	800991c <USB_HC_Halt+0x1e6>
 8009942:	e011      	b.n	8009968 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	015a      	lsls	r2, r3, #5
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	4413      	add	r3, r2
 800994c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	69ba      	ldr	r2, [r7, #24]
 8009954:	0151      	lsls	r1, r2, #5
 8009956:	69fa      	ldr	r2, [r7, #28]
 8009958:	440a      	add	r2, r1
 800995a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800995e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009962:	6013      	str	r3, [r2, #0]
 8009964:	e000      	b.n	8009968 <USB_HC_Halt+0x232>
          break;
 8009966:	bf00      	nop
    }
  }

  return HAL_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3724      	adds	r7, #36	; 0x24
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr
	...

08009978 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009978:	b480      	push	{r7}
 800997a:	b087      	sub	sp, #28
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	460b      	mov	r3, r1
 8009982:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009988:	78fb      	ldrb	r3, [r7, #3]
 800998a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800998c:	2301      	movs	r3, #1
 800998e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	04da      	lsls	r2, r3, #19
 8009994:	4b15      	ldr	r3, [pc, #84]	; (80099ec <USB_DoPing+0x74>)
 8009996:	4013      	ands	r3, r2
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	0151      	lsls	r1, r2, #5
 800999c:	697a      	ldr	r2, [r7, #20]
 800999e:	440a      	add	r2, r1
 80099a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80099a8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	015a      	lsls	r2, r3, #5
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	4413      	add	r3, r2
 80099b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80099c0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80099c8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	015a      	lsls	r2, r3, #5
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	4413      	add	r3, r2
 80099d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099d6:	461a      	mov	r2, r3
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	371c      	adds	r7, #28
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	1ff80000 	.word	0x1ff80000

080099f0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b088      	sub	sp, #32
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80099f8:	2300      	movs	r3, #0
 80099fa:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009a00:	2300      	movs	r3, #0
 8009a02:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f7fe fe00 	bl	800860a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a0a:	2110      	movs	r1, #16
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f7fe ffb7 	bl	8008980 <USB_FlushTxFifo>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d001      	beq.n	8009a1c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f7fe ffe1 	bl	80089e4 <USB_FlushRxFifo>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	61bb      	str	r3, [r7, #24]
 8009a30:	e01f      	b.n	8009a72 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	015a      	lsls	r2, r3, #5
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	4413      	add	r3, r2
 8009a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a48:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a50:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a58:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	015a      	lsls	r2, r3, #5
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	4413      	add	r3, r2
 8009a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a66:	461a      	mov	r2, r3
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	61bb      	str	r3, [r7, #24]
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	2b0f      	cmp	r3, #15
 8009a76:	d9dc      	bls.n	8009a32 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009a78:	2300      	movs	r3, #0
 8009a7a:	61bb      	str	r3, [r7, #24]
 8009a7c:	e034      	b.n	8009ae8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	015a      	lsls	r2, r3, #5
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	4413      	add	r3, r2
 8009a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a94:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a9c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009aa4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	015a      	lsls	r2, r3, #5
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	4413      	add	r3, r2
 8009aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	3301      	adds	r3, #1
 8009abc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ac4:	d80c      	bhi.n	8009ae0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	015a      	lsls	r2, r3, #5
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	4413      	add	r3, r2
 8009ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ad8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009adc:	d0ec      	beq.n	8009ab8 <USB_StopHost+0xc8>
 8009ade:	e000      	b.n	8009ae2 <USB_StopHost+0xf2>
        break;
 8009ae0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	61bb      	str	r3, [r7, #24]
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	2b0f      	cmp	r3, #15
 8009aec:	d9c7      	bls.n	8009a7e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009af4:	461a      	mov	r2, r3
 8009af6:	f04f 33ff 	mov.w	r3, #4294967295
 8009afa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f04f 32ff 	mov.w	r2, #4294967295
 8009b02:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f7fe fd6f 	bl	80085e8 <USB_EnableGlobalInt>

  return ret;
 8009b0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3720      	adds	r7, #32
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8009b18:	4904      	ldr	r1, [pc, #16]	; (8009b2c <MX_FATFS_Init+0x18>)
 8009b1a:	4805      	ldr	r0, [pc, #20]	; (8009b30 <MX_FATFS_Init+0x1c>)
 8009b1c:	f003 fa00 	bl	800cf20 <FATFS_LinkDriver>
 8009b20:	4603      	mov	r3, r0
 8009b22:	461a      	mov	r2, r3
 8009b24:	4b03      	ldr	r3, [pc, #12]	; (8009b34 <MX_FATFS_Init+0x20>)
 8009b26:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009b28:	bf00      	nop
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	2000090c 	.word	0x2000090c
 8009b30:	0800e0ac 	.word	0x0800e0ac
 8009b34:	20000908 	.word	0x20000908

08009b38 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	4603      	mov	r3, r0
 8009b40:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8009b42:	2300      	movs	r3, #0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	4603      	mov	r3, r0
 8009b58:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8009b5e:	79fb      	ldrb	r3, [r7, #7]
 8009b60:	4619      	mov	r1, r3
 8009b62:	4808      	ldr	r0, [pc, #32]	; (8009b84 <USBH_status+0x34>)
 8009b64:	f000 fe32 	bl	800a7cc <USBH_MSC_UnitIsReady>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d002      	beq.n	8009b74 <USBH_status+0x24>
  {
    res = RES_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	73fb      	strb	r3, [r7, #15]
 8009b72:	e001      	b.n	8009b78 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	2000091c 	.word	0x2000091c

08009b88 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b094      	sub	sp, #80	; 0x50
 8009b8c:	af02      	add	r7, sp, #8
 8009b8e:	60b9      	str	r1, [r7, #8]
 8009b90:	607a      	str	r2, [r7, #4]
 8009b92:	603b      	str	r3, [r7, #0]
 8009b94:	4603      	mov	r3, r0
 8009b96:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8009b9e:	7bf9      	ldrb	r1, [r7, #15]
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	4813      	ldr	r0, [pc, #76]	; (8009bf8 <USBH_read+0x70>)
 8009baa:	f000 fe59 	bl	800a860 <USBH_MSC_Read>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d103      	bne.n	8009bbc <USBH_read+0x34>
  {
    res = RES_OK;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009bba:	e017      	b.n	8009bec <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009bbc:	f107 0210 	add.w	r2, r7, #16
 8009bc0:	7bfb      	ldrb	r3, [r7, #15]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	480c      	ldr	r0, [pc, #48]	; (8009bf8 <USBH_read+0x70>)
 8009bc6:	f000 fe27 	bl	800a818 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009bca:	7f7b      	ldrb	r3, [r7, #29]
 8009bcc:	2b3a      	cmp	r3, #58	; 0x3a
 8009bce:	d005      	beq.n	8009bdc <USBH_read+0x54>
 8009bd0:	2b3a      	cmp	r3, #58	; 0x3a
 8009bd2:	dc07      	bgt.n	8009be4 <USBH_read+0x5c>
 8009bd4:	2b04      	cmp	r3, #4
 8009bd6:	d001      	beq.n	8009bdc <USBH_read+0x54>
 8009bd8:	2b28      	cmp	r3, #40	; 0x28
 8009bda:	d103      	bne.n	8009be4 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009be2:	e003      	b.n	8009bec <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009bea:	bf00      	nop
    }
  }

  return res;
 8009bec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3748      	adds	r7, #72	; 0x48
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	2000091c 	.word	0x2000091c

08009bfc <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b094      	sub	sp, #80	; 0x50
 8009c00:	af02      	add	r7, sp, #8
 8009c02:	60b9      	str	r1, [r7, #8]
 8009c04:	607a      	str	r2, [r7, #4]
 8009c06:	603b      	str	r3, [r7, #0]
 8009c08:	4603      	mov	r3, r0
 8009c0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8009c12:	7bf9      	ldrb	r1, [r7, #15]
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	4817      	ldr	r0, [pc, #92]	; (8009c7c <USBH_write+0x80>)
 8009c1e:	f000 fe88 	bl	800a932 <USBH_MSC_Write>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d103      	bne.n	8009c30 <USBH_write+0x34>
  {
    res = RES_OK;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009c2e:	e01f      	b.n	8009c70 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009c30:	f107 0210 	add.w	r2, r7, #16
 8009c34:	7bfb      	ldrb	r3, [r7, #15]
 8009c36:	4619      	mov	r1, r3
 8009c38:	4810      	ldr	r0, [pc, #64]	; (8009c7c <USBH_write+0x80>)
 8009c3a:	f000 fded 	bl	800a818 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009c3e:	7f7b      	ldrb	r3, [r7, #29]
 8009c40:	2b3a      	cmp	r3, #58	; 0x3a
 8009c42:	d00d      	beq.n	8009c60 <USBH_write+0x64>
 8009c44:	2b3a      	cmp	r3, #58	; 0x3a
 8009c46:	dc0f      	bgt.n	8009c68 <USBH_write+0x6c>
 8009c48:	2b28      	cmp	r3, #40	; 0x28
 8009c4a:	d009      	beq.n	8009c60 <USBH_write+0x64>
 8009c4c:	2b28      	cmp	r3, #40	; 0x28
 8009c4e:	dc0b      	bgt.n	8009c68 <USBH_write+0x6c>
 8009c50:	2b04      	cmp	r3, #4
 8009c52:	d005      	beq.n	8009c60 <USBH_write+0x64>
 8009c54:	2b27      	cmp	r3, #39	; 0x27
 8009c56:	d107      	bne.n	8009c68 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8009c58:	2302      	movs	r3, #2
 8009c5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009c5e:	e007      	b.n	8009c70 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009c60:	2303      	movs	r3, #3
 8009c62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009c66:	e003      	b.n	8009c70 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009c6e:	bf00      	nop
    }
  }

  return res;
 8009c70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3748      	adds	r7, #72	; 0x48
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	2000091c 	.word	0x2000091c

08009c80 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b090      	sub	sp, #64	; 0x40
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	4603      	mov	r3, r0
 8009c88:	603a      	str	r2, [r7, #0]
 8009c8a:	71fb      	strb	r3, [r7, #7]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8009c96:	79bb      	ldrb	r3, [r7, #6]
 8009c98:	2b03      	cmp	r3, #3
 8009c9a:	d852      	bhi.n	8009d42 <USBH_ioctl+0xc2>
 8009c9c:	a201      	add	r2, pc, #4	; (adr r2, 8009ca4 <USBH_ioctl+0x24>)
 8009c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca2:	bf00      	nop
 8009ca4:	08009cb5 	.word	0x08009cb5
 8009ca8:	08009cbd 	.word	0x08009cbd
 8009cac:	08009ce7 	.word	0x08009ce7
 8009cb0:	08009d13 	.word	0x08009d13
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009cba:	e045      	b.n	8009d48 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009cbc:	f107 0208 	add.w	r2, r7, #8
 8009cc0:	79fb      	ldrb	r3, [r7, #7]
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	4823      	ldr	r0, [pc, #140]	; (8009d54 <USBH_ioctl+0xd4>)
 8009cc6:	f000 fda7 	bl	800a818 <USBH_MSC_GetLUNInfo>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d106      	bne.n	8009cde <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009cdc:	e034      	b.n	8009d48 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009ce4:	e030      	b.n	8009d48 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009ce6:	f107 0208 	add.w	r2, r7, #8
 8009cea:	79fb      	ldrb	r3, [r7, #7]
 8009cec:	4619      	mov	r1, r3
 8009cee:	4819      	ldr	r0, [pc, #100]	; (8009d54 <USBH_ioctl+0xd4>)
 8009cf0:	f000 fd92 	bl	800a818 <USBH_MSC_GetLUNInfo>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d107      	bne.n	8009d0a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8009cfa:	8a3b      	ldrh	r3, [r7, #16]
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009d02:	2300      	movs	r3, #0
 8009d04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009d08:	e01e      	b.n	8009d48 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009d10:	e01a      	b.n	8009d48 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009d12:	f107 0208 	add.w	r2, r7, #8
 8009d16:	79fb      	ldrb	r3, [r7, #7]
 8009d18:	4619      	mov	r1, r3
 8009d1a:	480e      	ldr	r0, [pc, #56]	; (8009d54 <USBH_ioctl+0xd4>)
 8009d1c:	f000 fd7c 	bl	800a818 <USBH_MSC_GetLUNInfo>
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d109      	bne.n	8009d3a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8009d26:	8a3b      	ldrh	r3, [r7, #16]
 8009d28:	0a5b      	lsrs	r3, r3, #9
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009d38:	e006      	b.n	8009d48 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009d40:	e002      	b.n	8009d48 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8009d42:	2304      	movs	r3, #4
 8009d44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8009d48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3740      	adds	r7, #64	; 0x40
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	2000091c 	.word	0x2000091c

08009d58 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009d58:	b590      	push	{r4, r7, lr}
 8009d5a:	b089      	sub	sp, #36	; 0x24
 8009d5c:	af04      	add	r7, sp, #16
 8009d5e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d66:	7919      	ldrb	r1, [r3, #4]
 8009d68:	2350      	movs	r3, #80	; 0x50
 8009d6a:	2206      	movs	r2, #6
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f001 fc8a 	bl	800b686 <USBH_FindInterface>
 8009d72:	4603      	mov	r3, r0
 8009d74:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8009d76:	7bfb      	ldrb	r3, [r7, #15]
 8009d78:	2bff      	cmp	r3, #255	; 0xff
 8009d7a:	d002      	beq.n	8009d82 <USBH_MSC_InterfaceInit+0x2a>
 8009d7c:	7bfb      	ldrb	r3, [r7, #15]
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d901      	bls.n	8009d86 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009d82:	2302      	movs	r3, #2
 8009d84:	e106      	b.n	8009f94 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8009d86:	7bfb      	ldrb	r3, [r7, #15]
 8009d88:	4619      	mov	r1, r3
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f001 fc5f 	bl	800b64e <USBH_SelectInterface>
 8009d90:	4603      	mov	r3, r0
 8009d92:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009d94:	7bbb      	ldrb	r3, [r7, #14]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d001      	beq.n	8009d9e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8009d9a:	2302      	movs	r3, #2
 8009d9c:	e0fa      	b.n	8009f94 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009da4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009da8:	f004 f80c 	bl	800ddc4 <malloc>
 8009dac:	4603      	mov	r3, r0
 8009dae:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009db6:	69db      	ldr	r3, [r3, #28]
 8009db8:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d101      	bne.n	8009dc4 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8009dc0:	2302      	movs	r3, #2
 8009dc2:	e0e7      	b.n	8009f94 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8009dc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009dc8:	2100      	movs	r1, #0
 8009dca:	68b8      	ldr	r0, [r7, #8]
 8009dcc:	f004 f8b6 	bl	800df3c <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009dd0:	7bfb      	ldrb	r3, [r7, #15]
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	211a      	movs	r1, #26
 8009dd6:	fb01 f303 	mul.w	r3, r1, r3
 8009dda:	4413      	add	r3, r2
 8009ddc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	b25b      	sxtb	r3, r3
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	da16      	bge.n	8009e16 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	211a      	movs	r1, #26
 8009dee:	fb01 f303 	mul.w	r3, r1, r3
 8009df2:	4413      	add	r3, r2
 8009df4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009df8:	781a      	ldrb	r2, [r3, #0]
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009dfe:	7bfb      	ldrb	r3, [r7, #15]
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	211a      	movs	r1, #26
 8009e04:	fb01 f303 	mul.w	r3, r1, r3
 8009e08:	4413      	add	r3, r2
 8009e0a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009e0e:	881a      	ldrh	r2, [r3, #0]
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	815a      	strh	r2, [r3, #10]
 8009e14:	e015      	b.n	8009e42 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009e16:	7bfb      	ldrb	r3, [r7, #15]
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	211a      	movs	r1, #26
 8009e1c:	fb01 f303 	mul.w	r3, r1, r3
 8009e20:	4413      	add	r3, r2
 8009e22:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009e26:	781a      	ldrb	r2, [r3, #0]
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009e2c:	7bfb      	ldrb	r3, [r7, #15]
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	211a      	movs	r1, #26
 8009e32:	fb01 f303 	mul.w	r3, r1, r3
 8009e36:	4413      	add	r3, r2
 8009e38:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009e3c:	881a      	ldrh	r2, [r3, #0]
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009e42:	7bfb      	ldrb	r3, [r7, #15]
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	211a      	movs	r1, #26
 8009e48:	fb01 f303 	mul.w	r3, r1, r3
 8009e4c:	4413      	add	r3, r2
 8009e4e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	b25b      	sxtb	r3, r3
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	da16      	bge.n	8009e88 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009e5a:	7bfb      	ldrb	r3, [r7, #15]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	211a      	movs	r1, #26
 8009e60:	fb01 f303 	mul.w	r3, r1, r3
 8009e64:	4413      	add	r3, r2
 8009e66:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009e6a:	781a      	ldrb	r2, [r3, #0]
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009e70:	7bfb      	ldrb	r3, [r7, #15]
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	211a      	movs	r1, #26
 8009e76:	fb01 f303 	mul.w	r3, r1, r3
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009e80:	881a      	ldrh	r2, [r3, #0]
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	815a      	strh	r2, [r3, #10]
 8009e86:	e015      	b.n	8009eb4 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009e88:	7bfb      	ldrb	r3, [r7, #15]
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	211a      	movs	r1, #26
 8009e8e:	fb01 f303 	mul.w	r3, r1, r3
 8009e92:	4413      	add	r3, r2
 8009e94:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009e98:	781a      	ldrb	r2, [r3, #0]
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009e9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	211a      	movs	r1, #26
 8009ea4:	fb01 f303 	mul.w	r3, r1, r3
 8009ea8:	4413      	add	r3, r2
 8009eaa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009eae:	881a      	ldrh	r2, [r3, #0]
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	799b      	ldrb	r3, [r3, #6]
 8009eca:	4619      	mov	r1, r3
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f002 ff78 	bl	800cdc2 <USBH_AllocPipe>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	79db      	ldrb	r3, [r3, #7]
 8009ede:	4619      	mov	r1, r3
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f002 ff6e 	bl	800cdc2 <USBH_AllocPipe>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	461a      	mov	r2, r3
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 fdc4 	bl	800aa7c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	799b      	ldrb	r3, [r3, #6]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d01e      	beq.n	8009f3a <USBH_MSC_InterfaceInit+0x1e2>
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	891b      	ldrh	r3, [r3, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d01a      	beq.n	8009f3a <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	7959      	ldrb	r1, [r3, #5]
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	7998      	ldrb	r0, [r3, #6]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	8912      	ldrh	r2, [r2, #8]
 8009f1c:	9202      	str	r2, [sp, #8]
 8009f1e:	2202      	movs	r2, #2
 8009f20:	9201      	str	r2, [sp, #4]
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	4623      	mov	r3, r4
 8009f26:	4602      	mov	r2, r0
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f002 ff1b 	bl	800cd64 <USBH_OpenPipe>
 8009f2e:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	79db      	ldrb	r3, [r3, #7]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d02c      	beq.n	8009f92 <USBH_MSC_InterfaceInit+0x23a>
 8009f38:	e001      	b.n	8009f3e <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	e02a      	b.n	8009f94 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	895b      	ldrh	r3, [r3, #10]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d025      	beq.n	8009f92 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	7919      	ldrb	r1, [r3, #4]
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	79d8      	ldrb	r0, [r3, #7]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	8952      	ldrh	r2, [r2, #10]
 8009f5e:	9202      	str	r2, [sp, #8]
 8009f60:	2202      	movs	r2, #2
 8009f62:	9201      	str	r2, [sp, #4]
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	4623      	mov	r3, r4
 8009f68:	4602      	mov	r2, r0
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f002 fefa 	bl	800cd64 <USBH_OpenPipe>
 8009f70:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	791b      	ldrb	r3, [r3, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	4619      	mov	r1, r3
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f003 fa63 	bl	800d446 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	795b      	ldrb	r3, [r3, #5]
 8009f84:	2200      	movs	r2, #0
 8009f86:	4619      	mov	r1, r3
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f003 fa5c 	bl	800d446 <USBH_LL_SetToggle>

  return USBH_OK;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	e000      	b.n	8009f94 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8009f92:	2303      	movs	r3, #3
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3714      	adds	r7, #20
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd90      	pop	{r4, r7, pc}

08009f9c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009faa:	69db      	ldr	r3, [r3, #28]
 8009fac:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	795b      	ldrb	r3, [r3, #5]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00e      	beq.n	8009fd4 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	795b      	ldrb	r3, [r3, #5]
 8009fba:	4619      	mov	r1, r3
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f002 fef0 	bl	800cda2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	795b      	ldrb	r3, [r3, #5]
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f002 ff1b 	bl	800ce04 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	791b      	ldrb	r3, [r3, #4]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00e      	beq.n	8009ffa <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	791b      	ldrb	r3, [r3, #4]
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f002 fedd 	bl	800cda2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	791b      	ldrb	r3, [r3, #4]
 8009fec:	4619      	mov	r1, r3
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f002 ff08 	bl	800ce04 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a000:	69db      	ldr	r3, [r3, #28]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00b      	beq.n	800a01e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a00c:	69db      	ldr	r3, [r3, #28]
 800a00e:	4618      	mov	r0, r3
 800a010:	f003 fee0 	bl	800ddd4 <free>
    phost->pActiveClass->pData = 0U;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a01a:	2200      	movs	r2, #0
 800a01c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a036:	69db      	ldr	r3, [r3, #28]
 800a038:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a03a:	2301      	movs	r3, #1
 800a03c:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	7b9b      	ldrb	r3, [r3, #14]
 800a042:	2b03      	cmp	r3, #3
 800a044:	d041      	beq.n	800a0ca <USBH_MSC_ClassRequest+0xa2>
 800a046:	2b03      	cmp	r3, #3
 800a048:	dc4b      	bgt.n	800a0e2 <USBH_MSC_ClassRequest+0xba>
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d001      	beq.n	800a052 <USBH_MSC_ClassRequest+0x2a>
 800a04e:	2b02      	cmp	r3, #2
 800a050:	d147      	bne.n	800a0e2 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	4619      	mov	r1, r3
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 fcf1 	bl	800aa3e <USBH_MSC_BOT_REQ_GetMaxLUN>
 800a05c:	4603      	mov	r3, r0
 800a05e:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800a060:	7bfb      	ldrb	r3, [r7, #15]
 800a062:	2b03      	cmp	r3, #3
 800a064:	d104      	bne.n	800a070 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	2200      	movs	r2, #0
 800a06a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800a06c:	2300      	movs	r3, #0
 800a06e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800a070:	7bfb      	ldrb	r3, [r7, #15]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d137      	bne.n	800a0e6 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d804      	bhi.n	800a088 <USBH_MSC_ClassRequest+0x60>
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	3301      	adds	r3, #1
 800a084:	b2da      	uxtb	r2, r3
 800a086:	e000      	b.n	800a08a <USBH_MSC_ClassRequest+0x62>
 800a088:	2202      	movs	r2, #2
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a08e:	2300      	movs	r3, #0
 800a090:	73bb      	strb	r3, [r7, #14]
 800a092:	e014      	b.n	800a0be <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800a094:	7bbb      	ldrb	r3, [r7, #14]
 800a096:	68ba      	ldr	r2, [r7, #8]
 800a098:	2134      	movs	r1, #52	; 0x34
 800a09a:	fb01 f303 	mul.w	r3, r1, r3
 800a09e:	4413      	add	r3, r2
 800a0a0:	3392      	adds	r3, #146	; 0x92
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800a0a6:	7bbb      	ldrb	r3, [r7, #14]
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	2134      	movs	r1, #52	; 0x34
 800a0ac:	fb01 f303 	mul.w	r3, r1, r3
 800a0b0:	4413      	add	r3, r2
 800a0b2:	33c1      	adds	r3, #193	; 0xc1
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a0b8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	73bb      	strb	r3, [r7, #14]
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	7bba      	ldrb	r2, [r7, #14]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d3e5      	bcc.n	800a094 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800a0c8:	e00d      	b.n	800a0e6 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f002 f8bb 	bl	800c248 <USBH_ClrFeature>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d108      	bne.n	800a0ea <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	7bda      	ldrb	r2, [r3, #15]
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	739a      	strb	r2, [r3, #14]
      }
      break;
 800a0e0:	e003      	b.n	800a0ea <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800a0e2:	bf00      	nop
 800a0e4:	e002      	b.n	800a0ec <USBH_MSC_ClassRequest+0xc4>
      break;
 800a0e6:	bf00      	nop
 800a0e8:	e000      	b.n	800a0ec <USBH_MSC_ClassRequest+0xc4>
      break;
 800a0ea:	bf00      	nop
  }

  return status;
 800a0ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
	...

0800a0f8 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b086      	sub	sp, #24
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a106:	69db      	ldr	r3, [r3, #28]
 800a108:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800a10a:	2301      	movs	r3, #1
 800a10c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800a10e:	2301      	movs	r3, #1
 800a110:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800a112:	2301      	movs	r3, #1
 800a114:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	7b1b      	ldrb	r3, [r3, #12]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d003      	beq.n	800a126 <USBH_MSC_Process+0x2e>
 800a11e:	2b01      	cmp	r3, #1
 800a120:	f000 8271 	beq.w	800a606 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800a124:	e272      	b.n	800a60c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	b29b      	uxth	r3, r3
 800a132:	429a      	cmp	r2, r3
 800a134:	f080 824f 	bcs.w	800a5d6 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a13e:	4619      	mov	r1, r3
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	2334      	movs	r3, #52	; 0x34
 800a144:	fb01 f303 	mul.w	r3, r1, r3
 800a148:	4413      	add	r3, r2
 800a14a:	3391      	adds	r3, #145	; 0x91
 800a14c:	2201      	movs	r2, #1
 800a14e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a156:	4619      	mov	r1, r3
 800a158:	693a      	ldr	r2, [r7, #16]
 800a15a:	2334      	movs	r3, #52	; 0x34
 800a15c:	fb01 f303 	mul.w	r3, r1, r3
 800a160:	4413      	add	r3, r2
 800a162:	3390      	adds	r3, #144	; 0x90
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	2b08      	cmp	r3, #8
 800a168:	f200 8243 	bhi.w	800a5f2 <USBH_MSC_Process+0x4fa>
 800a16c:	a201      	add	r2, pc, #4	; (adr r2, 800a174 <USBH_MSC_Process+0x7c>)
 800a16e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a172:	bf00      	nop
 800a174:	0800a199 	.word	0x0800a199
 800a178:	0800a5f3 	.word	0x0800a5f3
 800a17c:	0800a261 	.word	0x0800a261
 800a180:	0800a3e5 	.word	0x0800a3e5
 800a184:	0800a1bf 	.word	0x0800a1bf
 800a188:	0800a4b1 	.word	0x0800a4b1
 800a18c:	0800a5f3 	.word	0x0800a5f3
 800a190:	0800a5f3 	.word	0x0800a5f3
 800a194:	0800a5c5 	.word	0x0800a5c5
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a19e:	4619      	mov	r1, r3
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	2334      	movs	r3, #52	; 0x34
 800a1a4:	fb01 f303 	mul.w	r3, r1, r3
 800a1a8:	4413      	add	r3, r2
 800a1aa:	3390      	adds	r3, #144	; 0x90
 800a1ac:	2204      	movs	r2, #4
 800a1ae:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800a1bc:	e222      	b.n	800a604 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1c4:	b2d9      	uxtb	r1, r3
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	2334      	movs	r3, #52	; 0x34
 800a1d0:	fb02 f303 	mul.w	r3, r2, r3
 800a1d4:	3398      	adds	r3, #152	; 0x98
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	4413      	add	r3, r2
 800a1da:	3307      	adds	r3, #7
 800a1dc:	461a      	mov	r2, r3
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 ff6a 	bl	800b0b8 <USBH_MSC_SCSI_Inquiry>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a1e8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d10b      	bne.n	800a206 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	693a      	ldr	r2, [r7, #16]
 800a1f8:	2334      	movs	r3, #52	; 0x34
 800a1fa:	fb01 f303 	mul.w	r3, r1, r3
 800a1fe:	4413      	add	r3, r2
 800a200:	3390      	adds	r3, #144	; 0x90
 800a202:	2202      	movs	r2, #2
 800a204:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800a206:	7bfb      	ldrb	r3, [r7, #15]
 800a208:	2b02      	cmp	r3, #2
 800a20a:	d10c      	bne.n	800a226 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a212:	4619      	mov	r1, r3
 800a214:	693a      	ldr	r2, [r7, #16]
 800a216:	2334      	movs	r3, #52	; 0x34
 800a218:	fb01 f303 	mul.w	r3, r1, r3
 800a21c:	4413      	add	r3, r2
 800a21e:	3390      	adds	r3, #144	; 0x90
 800a220:	2205      	movs	r2, #5
 800a222:	701a      	strb	r2, [r3, #0]
            break;
 800a224:	e1e7      	b.n	800a5f6 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a226:	7bfb      	ldrb	r3, [r7, #15]
 800a228:	2b04      	cmp	r3, #4
 800a22a:	f040 81e4 	bne.w	800a5f6 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a234:	4619      	mov	r1, r3
 800a236:	693a      	ldr	r2, [r7, #16]
 800a238:	2334      	movs	r3, #52	; 0x34
 800a23a:	fb01 f303 	mul.w	r3, r1, r3
 800a23e:	4413      	add	r3, r2
 800a240:	3390      	adds	r3, #144	; 0x90
 800a242:	2201      	movs	r2, #1
 800a244:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a24c:	4619      	mov	r1, r3
 800a24e:	693a      	ldr	r2, [r7, #16]
 800a250:	2334      	movs	r3, #52	; 0x34
 800a252:	fb01 f303 	mul.w	r3, r1, r3
 800a256:	4413      	add	r3, r2
 800a258:	3391      	adds	r3, #145	; 0x91
 800a25a:	2202      	movs	r2, #2
 800a25c:	701a      	strb	r2, [r3, #0]
            break;
 800a25e:	e1ca      	b.n	800a5f6 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a266:	b2db      	uxtb	r3, r3
 800a268:	4619      	mov	r1, r3
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 fe66 	bl	800af3c <USBH_MSC_SCSI_TestUnitReady>
 800a270:	4603      	mov	r3, r0
 800a272:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800a274:	7bbb      	ldrb	r3, [r7, #14]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d149      	bne.n	800a30e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a280:	4619      	mov	r1, r3
 800a282:	693a      	ldr	r2, [r7, #16]
 800a284:	2334      	movs	r3, #52	; 0x34
 800a286:	fb01 f303 	mul.w	r3, r1, r3
 800a28a:	4413      	add	r3, r2
 800a28c:	3392      	adds	r3, #146	; 0x92
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d00c      	beq.n	800a2ae <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a29a:	4619      	mov	r1, r3
 800a29c:	693a      	ldr	r2, [r7, #16]
 800a29e:	2334      	movs	r3, #52	; 0x34
 800a2a0:	fb01 f303 	mul.w	r3, r1, r3
 800a2a4:	4413      	add	r3, r2
 800a2a6:	33c1      	adds	r3, #193	; 0xc1
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	701a      	strb	r2, [r3, #0]
 800a2ac:	e00b      	b.n	800a2c6 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	693a      	ldr	r2, [r7, #16]
 800a2b8:	2334      	movs	r3, #52	; 0x34
 800a2ba:	fb01 f303 	mul.w	r3, r1, r3
 800a2be:	4413      	add	r3, r2
 800a2c0:	33c1      	adds	r3, #193	; 0xc1
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	693a      	ldr	r2, [r7, #16]
 800a2d0:	2334      	movs	r3, #52	; 0x34
 800a2d2:	fb01 f303 	mul.w	r3, r1, r3
 800a2d6:	4413      	add	r3, r2
 800a2d8:	3390      	adds	r3, #144	; 0x90
 800a2da:	2203      	movs	r2, #3
 800a2dc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	2334      	movs	r3, #52	; 0x34
 800a2ea:	fb01 f303 	mul.w	r3, r1, r3
 800a2ee:	4413      	add	r3, r2
 800a2f0:	3391      	adds	r3, #145	; 0x91
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	693a      	ldr	r2, [r7, #16]
 800a300:	2334      	movs	r3, #52	; 0x34
 800a302:	fb01 f303 	mul.w	r3, r1, r3
 800a306:	4413      	add	r3, r2
 800a308:	3392      	adds	r3, #146	; 0x92
 800a30a:	2200      	movs	r2, #0
 800a30c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800a30e:	7bbb      	ldrb	r3, [r7, #14]
 800a310:	2b02      	cmp	r3, #2
 800a312:	d14a      	bne.n	800a3aa <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a31a:	4619      	mov	r1, r3
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	2334      	movs	r3, #52	; 0x34
 800a320:	fb01 f303 	mul.w	r3, r1, r3
 800a324:	4413      	add	r3, r2
 800a326:	3392      	adds	r3, #146	; 0x92
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d00c      	beq.n	800a348 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a334:	4619      	mov	r1, r3
 800a336:	693a      	ldr	r2, [r7, #16]
 800a338:	2334      	movs	r3, #52	; 0x34
 800a33a:	fb01 f303 	mul.w	r3, r1, r3
 800a33e:	4413      	add	r3, r2
 800a340:	33c1      	adds	r3, #193	; 0xc1
 800a342:	2201      	movs	r2, #1
 800a344:	701a      	strb	r2, [r3, #0]
 800a346:	e00b      	b.n	800a360 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a34e:	4619      	mov	r1, r3
 800a350:	693a      	ldr	r2, [r7, #16]
 800a352:	2334      	movs	r3, #52	; 0x34
 800a354:	fb01 f303 	mul.w	r3, r1, r3
 800a358:	4413      	add	r3, r2
 800a35a:	33c1      	adds	r3, #193	; 0xc1
 800a35c:	2200      	movs	r2, #0
 800a35e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a366:	4619      	mov	r1, r3
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	2334      	movs	r3, #52	; 0x34
 800a36c:	fb01 f303 	mul.w	r3, r1, r3
 800a370:	4413      	add	r3, r2
 800a372:	3390      	adds	r3, #144	; 0x90
 800a374:	2205      	movs	r2, #5
 800a376:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a37e:	4619      	mov	r1, r3
 800a380:	693a      	ldr	r2, [r7, #16]
 800a382:	2334      	movs	r3, #52	; 0x34
 800a384:	fb01 f303 	mul.w	r3, r1, r3
 800a388:	4413      	add	r3, r2
 800a38a:	3391      	adds	r3, #145	; 0x91
 800a38c:	2201      	movs	r2, #1
 800a38e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a396:	4619      	mov	r1, r3
 800a398:	693a      	ldr	r2, [r7, #16]
 800a39a:	2334      	movs	r3, #52	; 0x34
 800a39c:	fb01 f303 	mul.w	r3, r1, r3
 800a3a0:	4413      	add	r3, r2
 800a3a2:	3392      	adds	r3, #146	; 0x92
 800a3a4:	2202      	movs	r2, #2
 800a3a6:	701a      	strb	r2, [r3, #0]
            break;
 800a3a8:	e127      	b.n	800a5fa <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800a3aa:	7bbb      	ldrb	r3, [r7, #14]
 800a3ac:	2b04      	cmp	r3, #4
 800a3ae:	f040 8124 	bne.w	800a5fa <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	693a      	ldr	r2, [r7, #16]
 800a3bc:	2334      	movs	r3, #52	; 0x34
 800a3be:	fb01 f303 	mul.w	r3, r1, r3
 800a3c2:	4413      	add	r3, r2
 800a3c4:	3390      	adds	r3, #144	; 0x90
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	693a      	ldr	r2, [r7, #16]
 800a3d4:	2334      	movs	r3, #52	; 0x34
 800a3d6:	fb01 f303 	mul.w	r3, r1, r3
 800a3da:	4413      	add	r3, r2
 800a3dc:	3391      	adds	r3, #145	; 0x91
 800a3de:	2202      	movs	r2, #2
 800a3e0:	701a      	strb	r2, [r3, #0]
            break;
 800a3e2:	e10a      	b.n	800a5fa <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3ea:	b2d9      	uxtb	r1, r3
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	2334      	movs	r3, #52	; 0x34
 800a3f6:	fb02 f303 	mul.w	r3, r2, r3
 800a3fa:	3390      	adds	r3, #144	; 0x90
 800a3fc:	693a      	ldr	r2, [r7, #16]
 800a3fe:	4413      	add	r3, r2
 800a400:	3304      	adds	r3, #4
 800a402:	461a      	mov	r2, r3
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 fddc 	bl	800afc2 <USBH_MSC_SCSI_ReadCapacity>
 800a40a:	4603      	mov	r3, r0
 800a40c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a40e:	7bfb      	ldrb	r3, [r7, #15]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d120      	bne.n	800a456 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a41a:	4619      	mov	r1, r3
 800a41c:	693a      	ldr	r2, [r7, #16]
 800a41e:	2334      	movs	r3, #52	; 0x34
 800a420:	fb01 f303 	mul.w	r3, r1, r3
 800a424:	4413      	add	r3, r2
 800a426:	3390      	adds	r3, #144	; 0x90
 800a428:	2201      	movs	r2, #1
 800a42a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a432:	4619      	mov	r1, r3
 800a434:	693a      	ldr	r2, [r7, #16]
 800a436:	2334      	movs	r3, #52	; 0x34
 800a438:	fb01 f303 	mul.w	r3, r1, r3
 800a43c:	4413      	add	r3, r2
 800a43e:	3391      	adds	r3, #145	; 0x91
 800a440:	2200      	movs	r2, #0
 800a442:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a44a:	3301      	adds	r3, #1
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a454:	e0d3      	b.n	800a5fe <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800a456:	7bfb      	ldrb	r3, [r7, #15]
 800a458:	2b02      	cmp	r3, #2
 800a45a:	d10c      	bne.n	800a476 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a462:	4619      	mov	r1, r3
 800a464:	693a      	ldr	r2, [r7, #16]
 800a466:	2334      	movs	r3, #52	; 0x34
 800a468:	fb01 f303 	mul.w	r3, r1, r3
 800a46c:	4413      	add	r3, r2
 800a46e:	3390      	adds	r3, #144	; 0x90
 800a470:	2205      	movs	r2, #5
 800a472:	701a      	strb	r2, [r3, #0]
            break;
 800a474:	e0c3      	b.n	800a5fe <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a476:	7bfb      	ldrb	r3, [r7, #15]
 800a478:	2b04      	cmp	r3, #4
 800a47a:	f040 80c0 	bne.w	800a5fe <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a484:	4619      	mov	r1, r3
 800a486:	693a      	ldr	r2, [r7, #16]
 800a488:	2334      	movs	r3, #52	; 0x34
 800a48a:	fb01 f303 	mul.w	r3, r1, r3
 800a48e:	4413      	add	r3, r2
 800a490:	3390      	adds	r3, #144	; 0x90
 800a492:	2201      	movs	r2, #1
 800a494:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a49c:	4619      	mov	r1, r3
 800a49e:	693a      	ldr	r2, [r7, #16]
 800a4a0:	2334      	movs	r3, #52	; 0x34
 800a4a2:	fb01 f303 	mul.w	r3, r1, r3
 800a4a6:	4413      	add	r3, r2
 800a4a8:	3391      	adds	r3, #145	; 0x91
 800a4aa:	2202      	movs	r2, #2
 800a4ac:	701a      	strb	r2, [r3, #0]
            break;
 800a4ae:	e0a6      	b.n	800a5fe <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a4b6:	b2d9      	uxtb	r1, r3
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a4be:	461a      	mov	r2, r3
 800a4c0:	2334      	movs	r3, #52	; 0x34
 800a4c2:	fb02 f303 	mul.w	r3, r2, r3
 800a4c6:	3398      	adds	r3, #152	; 0x98
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	3304      	adds	r3, #4
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 fe96 	bl	800b202 <USBH_MSC_SCSI_RequestSense>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a4da:	7bfb      	ldrb	r3, [r7, #15]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d145      	bne.n	800a56c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	693a      	ldr	r2, [r7, #16]
 800a4ea:	2334      	movs	r3, #52	; 0x34
 800a4ec:	fb01 f303 	mul.w	r3, r1, r3
 800a4f0:	4413      	add	r3, r2
 800a4f2:	339c      	adds	r3, #156	; 0x9c
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	2b06      	cmp	r3, #6
 800a4f8:	d00c      	beq.n	800a514 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a500:	4619      	mov	r1, r3
 800a502:	693a      	ldr	r2, [r7, #16]
 800a504:	2334      	movs	r3, #52	; 0x34
 800a506:	fb01 f303 	mul.w	r3, r1, r3
 800a50a:	4413      	add	r3, r2
 800a50c:	339c      	adds	r3, #156	; 0x9c
 800a50e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a510:	2b02      	cmp	r3, #2
 800a512:	d117      	bne.n	800a544 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800a520:	1ad3      	subs	r3, r2, r3
 800a522:	f242 720f 	movw	r2, #9999	; 0x270f
 800a526:	4293      	cmp	r3, r2
 800a528:	d80c      	bhi.n	800a544 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a530:	4619      	mov	r1, r3
 800a532:	693a      	ldr	r2, [r7, #16]
 800a534:	2334      	movs	r3, #52	; 0x34
 800a536:	fb01 f303 	mul.w	r3, r1, r3
 800a53a:	4413      	add	r3, r2
 800a53c:	3390      	adds	r3, #144	; 0x90
 800a53e:	2202      	movs	r2, #2
 800a540:	701a      	strb	r2, [r3, #0]
                  break;
 800a542:	e05f      	b.n	800a604 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a54a:	4619      	mov	r1, r3
 800a54c:	693a      	ldr	r2, [r7, #16]
 800a54e:	2334      	movs	r3, #52	; 0x34
 800a550:	fb01 f303 	mul.w	r3, r1, r3
 800a554:	4413      	add	r3, r2
 800a556:	3390      	adds	r3, #144	; 0x90
 800a558:	2201      	movs	r2, #1
 800a55a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a562:	3301      	adds	r3, #1
 800a564:	b29a      	uxth	r2, r3
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800a56c:	7bfb      	ldrb	r3, [r7, #15]
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d10c      	bne.n	800a58c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a578:	4619      	mov	r1, r3
 800a57a:	693a      	ldr	r2, [r7, #16]
 800a57c:	2334      	movs	r3, #52	; 0x34
 800a57e:	fb01 f303 	mul.w	r3, r1, r3
 800a582:	4413      	add	r3, r2
 800a584:	3390      	adds	r3, #144	; 0x90
 800a586:	2208      	movs	r2, #8
 800a588:	701a      	strb	r2, [r3, #0]
            break;
 800a58a:	e03a      	b.n	800a602 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a58c:	7bfb      	ldrb	r3, [r7, #15]
 800a58e:	2b04      	cmp	r3, #4
 800a590:	d137      	bne.n	800a602 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a598:	4619      	mov	r1, r3
 800a59a:	693a      	ldr	r2, [r7, #16]
 800a59c:	2334      	movs	r3, #52	; 0x34
 800a59e:	fb01 f303 	mul.w	r3, r1, r3
 800a5a2:	4413      	add	r3, r2
 800a5a4:	3390      	adds	r3, #144	; 0x90
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	693a      	ldr	r2, [r7, #16]
 800a5b4:	2334      	movs	r3, #52	; 0x34
 800a5b6:	fb01 f303 	mul.w	r3, r1, r3
 800a5ba:	4413      	add	r3, r2
 800a5bc:	3391      	adds	r3, #145	; 0x91
 800a5be:	2202      	movs	r2, #2
 800a5c0:	701a      	strb	r2, [r3, #0]
            break;
 800a5c2:	e01e      	b.n	800a602 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	b29a      	uxth	r2, r3
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a5d4:	e016      	b.n	800a604 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a5ea:	2102      	movs	r1, #2
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	4798      	blx	r3
      break;
 800a5f0:	e00c      	b.n	800a60c <USBH_MSC_Process+0x514>
            break;
 800a5f2:	bf00      	nop
 800a5f4:	e00a      	b.n	800a60c <USBH_MSC_Process+0x514>
            break;
 800a5f6:	bf00      	nop
 800a5f8:	e008      	b.n	800a60c <USBH_MSC_Process+0x514>
            break;
 800a5fa:	bf00      	nop
 800a5fc:	e006      	b.n	800a60c <USBH_MSC_Process+0x514>
            break;
 800a5fe:	bf00      	nop
 800a600:	e004      	b.n	800a60c <USBH_MSC_Process+0x514>
            break;
 800a602:	bf00      	nop
      break;
 800a604:	e002      	b.n	800a60c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800a606:	2300      	movs	r3, #0
 800a608:	75fb      	strb	r3, [r7, #23]
      break;
 800a60a:	bf00      	nop
  }
  return error;
 800a60c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3718      	adds	r7, #24
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop

0800a618 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	370c      	adds	r7, #12
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr

0800a62e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b088      	sub	sp, #32
 800a632:	af02      	add	r7, sp, #8
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	460b      	mov	r3, r1
 800a638:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a640:	69db      	ldr	r3, [r3, #28]
 800a642:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800a644:	2301      	movs	r3, #1
 800a646:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800a648:	2301      	movs	r3, #1
 800a64a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800a64c:	78fb      	ldrb	r3, [r7, #3]
 800a64e:	693a      	ldr	r2, [r7, #16]
 800a650:	2134      	movs	r1, #52	; 0x34
 800a652:	fb01 f303 	mul.w	r3, r1, r3
 800a656:	4413      	add	r3, r2
 800a658:	3390      	adds	r3, #144	; 0x90
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	2b07      	cmp	r3, #7
 800a65e:	d03c      	beq.n	800a6da <USBH_MSC_RdWrProcess+0xac>
 800a660:	2b07      	cmp	r3, #7
 800a662:	f300 80a7 	bgt.w	800a7b4 <USBH_MSC_RdWrProcess+0x186>
 800a666:	2b05      	cmp	r3, #5
 800a668:	d06c      	beq.n	800a744 <USBH_MSC_RdWrProcess+0x116>
 800a66a:	2b06      	cmp	r3, #6
 800a66c:	f040 80a2 	bne.w	800a7b4 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800a670:	78f9      	ldrb	r1, [r7, #3]
 800a672:	2300      	movs	r3, #0
 800a674:	9300      	str	r3, [sp, #0]
 800a676:	2300      	movs	r3, #0
 800a678:	2200      	movs	r2, #0
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 fea5 	bl	800b3ca <USBH_MSC_SCSI_Read>
 800a680:	4603      	mov	r3, r0
 800a682:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a684:	7bfb      	ldrb	r3, [r7, #15]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d10b      	bne.n	800a6a2 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a68a:	78fb      	ldrb	r3, [r7, #3]
 800a68c:	693a      	ldr	r2, [r7, #16]
 800a68e:	2134      	movs	r1, #52	; 0x34
 800a690:	fb01 f303 	mul.w	r3, r1, r3
 800a694:	4413      	add	r3, r2
 800a696:	3390      	adds	r3, #144	; 0x90
 800a698:	2201      	movs	r2, #1
 800a69a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a69c:	2300      	movs	r3, #0
 800a69e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a6a0:	e08a      	b.n	800a7b8 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800a6a2:	7bfb      	ldrb	r3, [r7, #15]
 800a6a4:	2b02      	cmp	r3, #2
 800a6a6:	d109      	bne.n	800a6bc <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a6a8:	78fb      	ldrb	r3, [r7, #3]
 800a6aa:	693a      	ldr	r2, [r7, #16]
 800a6ac:	2134      	movs	r1, #52	; 0x34
 800a6ae:	fb01 f303 	mul.w	r3, r1, r3
 800a6b2:	4413      	add	r3, r2
 800a6b4:	3390      	adds	r3, #144	; 0x90
 800a6b6:	2205      	movs	r2, #5
 800a6b8:	701a      	strb	r2, [r3, #0]
      break;
 800a6ba:	e07d      	b.n	800a7b8 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
 800a6be:	2b04      	cmp	r3, #4
 800a6c0:	d17a      	bne.n	800a7b8 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a6c2:	78fb      	ldrb	r3, [r7, #3]
 800a6c4:	693a      	ldr	r2, [r7, #16]
 800a6c6:	2134      	movs	r1, #52	; 0x34
 800a6c8:	fb01 f303 	mul.w	r3, r1, r3
 800a6cc:	4413      	add	r3, r2
 800a6ce:	3390      	adds	r3, #144	; 0x90
 800a6d0:	2208      	movs	r2, #8
 800a6d2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a6d4:	2302      	movs	r3, #2
 800a6d6:	75fb      	strb	r3, [r7, #23]
      break;
 800a6d8:	e06e      	b.n	800a7b8 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800a6da:	78f9      	ldrb	r1, [r7, #3]
 800a6dc:	2300      	movs	r3, #0
 800a6de:	9300      	str	r3, [sp, #0]
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fe05 	bl	800b2f4 <USBH_MSC_SCSI_Write>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a6ee:	7bfb      	ldrb	r3, [r7, #15]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d10b      	bne.n	800a70c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a6f4:	78fb      	ldrb	r3, [r7, #3]
 800a6f6:	693a      	ldr	r2, [r7, #16]
 800a6f8:	2134      	movs	r1, #52	; 0x34
 800a6fa:	fb01 f303 	mul.w	r3, r1, r3
 800a6fe:	4413      	add	r3, r2
 800a700:	3390      	adds	r3, #144	; 0x90
 800a702:	2201      	movs	r2, #1
 800a704:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a706:	2300      	movs	r3, #0
 800a708:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a70a:	e057      	b.n	800a7bc <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800a70c:	7bfb      	ldrb	r3, [r7, #15]
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d109      	bne.n	800a726 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a712:	78fb      	ldrb	r3, [r7, #3]
 800a714:	693a      	ldr	r2, [r7, #16]
 800a716:	2134      	movs	r1, #52	; 0x34
 800a718:	fb01 f303 	mul.w	r3, r1, r3
 800a71c:	4413      	add	r3, r2
 800a71e:	3390      	adds	r3, #144	; 0x90
 800a720:	2205      	movs	r2, #5
 800a722:	701a      	strb	r2, [r3, #0]
      break;
 800a724:	e04a      	b.n	800a7bc <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a726:	7bfb      	ldrb	r3, [r7, #15]
 800a728:	2b04      	cmp	r3, #4
 800a72a:	d147      	bne.n	800a7bc <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a72c:	78fb      	ldrb	r3, [r7, #3]
 800a72e:	693a      	ldr	r2, [r7, #16]
 800a730:	2134      	movs	r1, #52	; 0x34
 800a732:	fb01 f303 	mul.w	r3, r1, r3
 800a736:	4413      	add	r3, r2
 800a738:	3390      	adds	r3, #144	; 0x90
 800a73a:	2208      	movs	r2, #8
 800a73c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a73e:	2302      	movs	r3, #2
 800a740:	75fb      	strb	r3, [r7, #23]
      break;
 800a742:	e03b      	b.n	800a7bc <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800a744:	78fb      	ldrb	r3, [r7, #3]
 800a746:	2234      	movs	r2, #52	; 0x34
 800a748:	fb02 f303 	mul.w	r3, r2, r3
 800a74c:	3398      	adds	r3, #152	; 0x98
 800a74e:	693a      	ldr	r2, [r7, #16]
 800a750:	4413      	add	r3, r2
 800a752:	1d1a      	adds	r2, r3, #4
 800a754:	78fb      	ldrb	r3, [r7, #3]
 800a756:	4619      	mov	r1, r3
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 fd52 	bl	800b202 <USBH_MSC_SCSI_RequestSense>
 800a75e:	4603      	mov	r3, r0
 800a760:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a762:	7bfb      	ldrb	r3, [r7, #15]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d113      	bne.n	800a790 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a768:	78fb      	ldrb	r3, [r7, #3]
 800a76a:	693a      	ldr	r2, [r7, #16]
 800a76c:	2134      	movs	r1, #52	; 0x34
 800a76e:	fb01 f303 	mul.w	r3, r1, r3
 800a772:	4413      	add	r3, r2
 800a774:	3390      	adds	r3, #144	; 0x90
 800a776:	2201      	movs	r2, #1
 800a778:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800a77a:	78fb      	ldrb	r3, [r7, #3]
 800a77c:	693a      	ldr	r2, [r7, #16]
 800a77e:	2134      	movs	r1, #52	; 0x34
 800a780:	fb01 f303 	mul.w	r3, r1, r3
 800a784:	4413      	add	r3, r2
 800a786:	3391      	adds	r3, #145	; 0x91
 800a788:	2202      	movs	r2, #2
 800a78a:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800a78c:	2302      	movs	r3, #2
 800a78e:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800a790:	7bfb      	ldrb	r3, [r7, #15]
 800a792:	2b02      	cmp	r3, #2
 800a794:	d014      	beq.n	800a7c0 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a796:	7bfb      	ldrb	r3, [r7, #15]
 800a798:	2b04      	cmp	r3, #4
 800a79a:	d111      	bne.n	800a7c0 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a79c:	78fb      	ldrb	r3, [r7, #3]
 800a79e:	693a      	ldr	r2, [r7, #16]
 800a7a0:	2134      	movs	r1, #52	; 0x34
 800a7a2:	fb01 f303 	mul.w	r3, r1, r3
 800a7a6:	4413      	add	r3, r2
 800a7a8:	3390      	adds	r3, #144	; 0x90
 800a7aa:	2208      	movs	r2, #8
 800a7ac:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a7ae:	2302      	movs	r3, #2
 800a7b0:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a7b2:	e005      	b.n	800a7c0 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800a7b4:	bf00      	nop
 800a7b6:	e004      	b.n	800a7c2 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a7b8:	bf00      	nop
 800a7ba:	e002      	b.n	800a7c2 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a7bc:	bf00      	nop
 800a7be:	e000      	b.n	800a7c2 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a7c0:	bf00      	nop

  }
  return error;
 800a7c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3718      	adds	r7, #24
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7de:	69db      	ldr	r3, [r3, #28]
 800a7e0:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	2b0b      	cmp	r3, #11
 800a7ea:	d10c      	bne.n	800a806 <USBH_MSC_UnitIsReady+0x3a>
 800a7ec:	78fb      	ldrb	r3, [r7, #3]
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	2134      	movs	r1, #52	; 0x34
 800a7f2:	fb01 f303 	mul.w	r3, r1, r3
 800a7f6:	4413      	add	r3, r2
 800a7f8:	3391      	adds	r3, #145	; 0x91
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d102      	bne.n	800a806 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800a800:	2301      	movs	r3, #1
 800a802:	73fb      	strb	r3, [r7, #15]
 800a804:	e001      	b.n	800a80a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800a806:	2300      	movs	r3, #0
 800a808:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a80a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3714      	adds	r7, #20
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	460b      	mov	r3, r1
 800a822:	607a      	str	r2, [r7, #4]
 800a824:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a82c:	69db      	ldr	r3, [r3, #28]
 800a82e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	b2db      	uxtb	r3, r3
 800a836:	2b0b      	cmp	r3, #11
 800a838:	d10d      	bne.n	800a856 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800a83a:	7afb      	ldrb	r3, [r7, #11]
 800a83c:	2234      	movs	r2, #52	; 0x34
 800a83e:	fb02 f303 	mul.w	r3, r2, r3
 800a842:	3390      	adds	r3, #144	; 0x90
 800a844:	697a      	ldr	r2, [r7, #20]
 800a846:	4413      	add	r3, r2
 800a848:	2234      	movs	r2, #52	; 0x34
 800a84a:	4619      	mov	r1, r3
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f003 fbb9 	bl	800dfc4 <memcpy>
    return USBH_OK;
 800a852:	2300      	movs	r3, #0
 800a854:	e000      	b.n	800a858 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800a856:	2302      	movs	r3, #2
  }
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3718      	adds	r7, #24
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b088      	sub	sp, #32
 800a864:	af02      	add	r7, sp, #8
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	607a      	str	r2, [r7, #4]
 800a86a:	603b      	str	r3, [r7, #0]
 800a86c:	460b      	mov	r3, r1
 800a86e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a876:	69db      	ldr	r3, [r3, #28]
 800a878:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a880:	b2db      	uxtb	r3, r3
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00e      	beq.n	800a8a4 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a88c:	2b0b      	cmp	r3, #11
 800a88e:	d109      	bne.n	800a8a4 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a890:	7afb      	ldrb	r3, [r7, #11]
 800a892:	697a      	ldr	r2, [r7, #20]
 800a894:	2134      	movs	r1, #52	; 0x34
 800a896:	fb01 f303 	mul.w	r3, r1, r3
 800a89a:	4413      	add	r3, r2
 800a89c:	3390      	adds	r3, #144	; 0x90
 800a89e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d001      	beq.n	800a8a8 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	e040      	b.n	800a92a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	2206      	movs	r2, #6
 800a8ac:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800a8ae:	7afb      	ldrb	r3, [r7, #11]
 800a8b0:	697a      	ldr	r2, [r7, #20]
 800a8b2:	2134      	movs	r1, #52	; 0x34
 800a8b4:	fb01 f303 	mul.w	r3, r1, r3
 800a8b8:	4413      	add	r3, r2
 800a8ba:	3390      	adds	r3, #144	; 0x90
 800a8bc:	2206      	movs	r2, #6
 800a8be:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a8c0:	7afb      	ldrb	r3, [r7, #11]
 800a8c2:	b29a      	uxth	r2, r3
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800a8ca:	7af9      	ldrb	r1, [r7, #11]
 800a8cc:	6a3b      	ldr	r3, [r7, #32]
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	f000 fd78 	bl	800b3ca <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a8e0:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a8e2:	e016      	b.n	800a912 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	1ad2      	subs	r2, r2, r3
 800a8ee:	6a3b      	ldr	r3, [r7, #32]
 800a8f0:	f242 7110 	movw	r1, #10000	; 0x2710
 800a8f4:	fb01 f303 	mul.w	r3, r1, r3
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d805      	bhi.n	800a908 <USBH_MSC_Read+0xa8>
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a902:	b2db      	uxtb	r3, r3
 800a904:	2b00      	cmp	r3, #0
 800a906:	d104      	bne.n	800a912 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	2201      	movs	r2, #1
 800a90c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a90e:	2302      	movs	r3, #2
 800a910:	e00b      	b.n	800a92a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a912:	7afb      	ldrb	r3, [r7, #11]
 800a914:	4619      	mov	r1, r3
 800a916:	68f8      	ldr	r0, [r7, #12]
 800a918:	f7ff fe89 	bl	800a62e <USBH_MSC_RdWrProcess>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d0e0      	beq.n	800a8e4 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	2201      	movs	r2, #1
 800a926:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3718      	adds	r7, #24
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b088      	sub	sp, #32
 800a936:	af02      	add	r7, sp, #8
 800a938:	60f8      	str	r0, [r7, #12]
 800a93a:	607a      	str	r2, [r7, #4]
 800a93c:	603b      	str	r3, [r7, #0]
 800a93e:	460b      	mov	r3, r1
 800a940:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a948:	69db      	ldr	r3, [r3, #28]
 800a94a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a952:	b2db      	uxtb	r3, r3
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00e      	beq.n	800a976 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a95e:	2b0b      	cmp	r3, #11
 800a960:	d109      	bne.n	800a976 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a962:	7afb      	ldrb	r3, [r7, #11]
 800a964:	697a      	ldr	r2, [r7, #20]
 800a966:	2134      	movs	r1, #52	; 0x34
 800a968:	fb01 f303 	mul.w	r3, r1, r3
 800a96c:	4413      	add	r3, r2
 800a96e:	3390      	adds	r3, #144	; 0x90
 800a970:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a972:	2b01      	cmp	r3, #1
 800a974:	d001      	beq.n	800a97a <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800a976:	2302      	movs	r3, #2
 800a978:	e040      	b.n	800a9fc <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	2207      	movs	r2, #7
 800a97e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800a980:	7afb      	ldrb	r3, [r7, #11]
 800a982:	697a      	ldr	r2, [r7, #20]
 800a984:	2134      	movs	r1, #52	; 0x34
 800a986:	fb01 f303 	mul.w	r3, r1, r3
 800a98a:	4413      	add	r3, r2
 800a98c:	3390      	adds	r3, #144	; 0x90
 800a98e:	2207      	movs	r2, #7
 800a990:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a992:	7afb      	ldrb	r3, [r7, #11]
 800a994:	b29a      	uxth	r2, r3
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800a99c:	7af9      	ldrb	r1, [r7, #11]
 800a99e:	6a3b      	ldr	r3, [r7, #32]
 800a9a0:	9300      	str	r3, [sp, #0]
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	f000 fca4 	bl	800b2f4 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a9b2:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a9b4:	e016      	b.n	800a9e4 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	1ad2      	subs	r2, r2, r3
 800a9c0:	6a3b      	ldr	r3, [r7, #32]
 800a9c2:	f242 7110 	movw	r1, #10000	; 0x2710
 800a9c6:	fb01 f303 	mul.w	r3, r1, r3
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d805      	bhi.n	800a9da <USBH_MSC_Write+0xa8>
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d104      	bne.n	800a9e4 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a9e0:	2302      	movs	r3, #2
 800a9e2:	e00b      	b.n	800a9fc <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a9e4:	7afb      	ldrb	r3, [r7, #11]
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f7ff fe20 	bl	800a62e <USBH_MSC_RdWrProcess>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d0e0      	beq.n	800a9b6 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3718      	adds	r7, #24
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2221      	movs	r2, #33	; 0x21
 800aa10:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	22ff      	movs	r2, #255	; 0xff
 800aa16:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	2100      	movs	r1, #0
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f001 ff46 	bl	800c8c0 <USBH_CtlReq>
 800aa34:	4603      	mov	r3, r0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3708      	adds	r7, #8
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b082      	sub	sp, #8
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
 800aa46:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	22a1      	movs	r2, #161	; 0xa1
 800aa4c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	22fe      	movs	r2, #254	; 0xfe
 800aa52:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2201      	movs	r2, #1
 800aa64:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800aa66:	2201      	movs	r2, #1
 800aa68:	6839      	ldr	r1, [r7, #0]
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f001 ff28 	bl	800c8c0 <USBH_CtlReq>
 800aa70:	4603      	mov	r3, r0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3708      	adds	r7, #8
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
	...

0800aa7c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b085      	sub	sp, #20
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa8a:	69db      	ldr	r3, [r3, #28]
 800aa8c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	4a09      	ldr	r2, [pc, #36]	; (800aab8 <USBH_MSC_BOT_Init+0x3c>)
 800aa92:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	4a09      	ldr	r2, [pc, #36]	; (800aabc <USBH_MSC_BOT_Init+0x40>)
 800aa98:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr
 800aab8:	43425355 	.word	0x43425355
 800aabc:	20304050 	.word	0x20304050

0800aac0 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b088      	sub	sp, #32
 800aac4:	af02      	add	r7, sp, #8
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	460b      	mov	r3, r1
 800aaca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800aacc:	2301      	movs	r3, #1
 800aace:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800aad0:	2301      	movs	r3, #1
 800aad2:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800aad4:	2301      	movs	r3, #1
 800aad6:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aad8:	2300      	movs	r3, #0
 800aada:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aae2:	69db      	ldr	r3, [r3, #28]
 800aae4:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800aae6:	2300      	movs	r3, #0
 800aae8:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aaf0:	3b01      	subs	r3, #1
 800aaf2:	2b0a      	cmp	r3, #10
 800aaf4:	f200 819e 	bhi.w	800ae34 <USBH_MSC_BOT_Process+0x374>
 800aaf8:	a201      	add	r2, pc, #4	; (adr r2, 800ab00 <USBH_MSC_BOT_Process+0x40>)
 800aafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aafe:	bf00      	nop
 800ab00:	0800ab2d 	.word	0x0800ab2d
 800ab04:	0800ab55 	.word	0x0800ab55
 800ab08:	0800abbf 	.word	0x0800abbf
 800ab0c:	0800abdd 	.word	0x0800abdd
 800ab10:	0800ac61 	.word	0x0800ac61
 800ab14:	0800ac83 	.word	0x0800ac83
 800ab18:	0800ad1b 	.word	0x0800ad1b
 800ab1c:	0800ad37 	.word	0x0800ad37
 800ab20:	0800ad89 	.word	0x0800ad89
 800ab24:	0800adb9 	.word	0x0800adb9
 800ab28:	0800ae1b 	.word	0x0800ae1b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	78fa      	ldrb	r2, [r7, #3]
 800ab30:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	2202      	movs	r2, #2
 800ab38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	795b      	ldrb	r3, [r3, #5]
 800ab46:	2201      	movs	r2, #1
 800ab48:	9200      	str	r2, [sp, #0]
 800ab4a:	221f      	movs	r2, #31
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f002 f8c6 	bl	800ccde <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800ab52:	e17e      	b.n	800ae52 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	795b      	ldrb	r3, [r3, #5]
 800ab58:	4619      	mov	r1, r3
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f002 fc52 	bl	800d404 <USBH_LL_GetURBState>
 800ab60:	4603      	mov	r3, r0
 800ab62:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800ab64:	7d3b      	ldrb	r3, [r7, #20]
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d118      	bne.n	800ab9c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00f      	beq.n	800ab92 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ab78:	b25b      	sxtb	r3, r3
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	da04      	bge.n	800ab88 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	2203      	movs	r2, #3
 800ab82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ab86:	e157      	b.n	800ae38 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	2205      	movs	r2, #5
 800ab8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ab90:	e152      	b.n	800ae38 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	2207      	movs	r2, #7
 800ab96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ab9a:	e14d      	b.n	800ae38 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ab9c:	7d3b      	ldrb	r3, [r7, #20]
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	d104      	bne.n	800abac <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	2201      	movs	r2, #1
 800aba6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800abaa:	e145      	b.n	800ae38 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800abac:	7d3b      	ldrb	r3, [r7, #20]
 800abae:	2b05      	cmp	r3, #5
 800abb0:	f040 8142 	bne.w	800ae38 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	220a      	movs	r2, #10
 800abb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800abbc:	e13c      	b.n	800ae38 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	895a      	ldrh	r2, [r3, #10]
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	791b      	ldrb	r3, [r3, #4]
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f002 f8ab 	bl	800cd28 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	2204      	movs	r2, #4
 800abd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800abda:	e13a      	b.n	800ae52 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	791b      	ldrb	r3, [r3, #4]
 800abe0:	4619      	mov	r1, r3
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f002 fc0e 	bl	800d404 <USBH_LL_GetURBState>
 800abe8:	4603      	mov	r3, r0
 800abea:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800abec:	7d3b      	ldrb	r3, [r7, #20]
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d12d      	bne.n	800ac4e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abf6:	693a      	ldr	r2, [r7, #16]
 800abf8:	8952      	ldrh	r2, [r2, #10]
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d910      	bls.n	800ac20 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	8952      	ldrh	r2, [r2, #10]
 800ac08:	441a      	add	r2, r3
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac14:	693a      	ldr	r2, [r7, #16]
 800ac16:	8952      	ldrh	r2, [r2, #10]
 800ac18:	1a9a      	subs	r2, r3, r2
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	65da      	str	r2, [r3, #92]	; 0x5c
 800ac1e:	e002      	b.n	800ac26 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	2200      	movs	r2, #0
 800ac24:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00a      	beq.n	800ac44 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	895a      	ldrh	r2, [r3, #10]
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	791b      	ldrb	r3, [r3, #4]
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f002 f873 	bl	800cd28 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800ac42:	e0fb      	b.n	800ae3c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	2207      	movs	r2, #7
 800ac48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ac4c:	e0f6      	b.n	800ae3c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800ac4e:	7d3b      	ldrb	r3, [r7, #20]
 800ac50:	2b05      	cmp	r3, #5
 800ac52:	f040 80f3 	bne.w	800ae3c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	2209      	movs	r2, #9
 800ac5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ac5e:	e0ed      	b.n	800ae3c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	891a      	ldrh	r2, [r3, #8]
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	795b      	ldrb	r3, [r3, #5]
 800ac6e:	2001      	movs	r0, #1
 800ac70:	9000      	str	r0, [sp, #0]
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f002 f833 	bl	800ccde <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	2206      	movs	r2, #6
 800ac7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ac80:	e0e7      	b.n	800ae52 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	795b      	ldrb	r3, [r3, #5]
 800ac86:	4619      	mov	r1, r3
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f002 fbbb 	bl	800d404 <USBH_LL_GetURBState>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800ac92:	7d3b      	ldrb	r3, [r7, #20]
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d12f      	bne.n	800acf8 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac9c:	693a      	ldr	r2, [r7, #16]
 800ac9e:	8912      	ldrh	r2, [r2, #8]
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d910      	bls.n	800acc6 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acaa:	693a      	ldr	r2, [r7, #16]
 800acac:	8912      	ldrh	r2, [r2, #8]
 800acae:	441a      	add	r2, r3
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acba:	693a      	ldr	r2, [r7, #16]
 800acbc:	8912      	ldrh	r2, [r2, #8]
 800acbe:	1a9a      	subs	r2, r3, r2
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	65da      	str	r2, [r3, #92]	; 0x5c
 800acc4:	e002      	b.n	800accc <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	2200      	movs	r2, #0
 800acca:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d00c      	beq.n	800acee <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	891a      	ldrh	r2, [r3, #8]
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	795b      	ldrb	r3, [r3, #5]
 800ace2:	2001      	movs	r0, #1
 800ace4:	9000      	str	r0, [sp, #0]
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f001 fff9 	bl	800ccde <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800acec:	e0a8      	b.n	800ae40 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	2207      	movs	r2, #7
 800acf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800acf6:	e0a3      	b.n	800ae40 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800acf8:	7d3b      	ldrb	r3, [r7, #20]
 800acfa:	2b02      	cmp	r3, #2
 800acfc:	d104      	bne.n	800ad08 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	2205      	movs	r2, #5
 800ad02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ad06:	e09b      	b.n	800ae40 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800ad08:	7d3b      	ldrb	r3, [r7, #20]
 800ad0a:	2b05      	cmp	r3, #5
 800ad0c:	f040 8098 	bne.w	800ae40 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	220a      	movs	r2, #10
 800ad14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ad18:	e092      	b.n	800ae40 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	791b      	ldrb	r3, [r3, #4]
 800ad24:	220d      	movs	r2, #13
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f001 fffe 	bl	800cd28 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	2208      	movs	r2, #8
 800ad30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ad34:	e08d      	b.n	800ae52 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	791b      	ldrb	r3, [r3, #4]
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f002 fb61 	bl	800d404 <USBH_LL_GetURBState>
 800ad42:	4603      	mov	r3, r0
 800ad44:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800ad46:	7d3b      	ldrb	r3, [r7, #20]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d115      	bne.n	800ad78 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	2201      	movs	r2, #1
 800ad58:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 f8a9 	bl	800aeb4 <USBH_MSC_DecodeCSW>
 800ad62:	4603      	mov	r3, r0
 800ad64:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800ad66:	7d7b      	ldrb	r3, [r7, #21]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d102      	bne.n	800ad72 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800ad70:	e068      	b.n	800ae44 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800ad72:	2302      	movs	r3, #2
 800ad74:	75fb      	strb	r3, [r7, #23]
      break;
 800ad76:	e065      	b.n	800ae44 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800ad78:	7d3b      	ldrb	r3, [r7, #20]
 800ad7a:	2b05      	cmp	r3, #5
 800ad7c:	d162      	bne.n	800ae44 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	2209      	movs	r2, #9
 800ad82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ad86:	e05d      	b.n	800ae44 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800ad88:	78fb      	ldrb	r3, [r7, #3]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 f864 	bl	800ae5c <USBH_MSC_BOT_Abort>
 800ad94:	4603      	mov	r3, r0
 800ad96:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800ad98:	7dbb      	ldrb	r3, [r7, #22]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d104      	bne.n	800ada8 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	2207      	movs	r2, #7
 800ada2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800ada6:	e04f      	b.n	800ae48 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800ada8:	7dbb      	ldrb	r3, [r7, #22]
 800adaa:	2b04      	cmp	r3, #4
 800adac:	d14c      	bne.n	800ae48 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	220b      	movs	r2, #11
 800adb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800adb6:	e047      	b.n	800ae48 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800adb8:	78fb      	ldrb	r3, [r7, #3]
 800adba:	2201      	movs	r2, #1
 800adbc:	4619      	mov	r1, r3
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 f84c 	bl	800ae5c <USBH_MSC_BOT_Abort>
 800adc4:	4603      	mov	r3, r0
 800adc6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800adc8:	7dbb      	ldrb	r3, [r7, #22]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d11d      	bne.n	800ae0a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	795b      	ldrb	r3, [r3, #5]
 800add2:	4619      	mov	r1, r3
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f002 fb69 	bl	800d4ac <USBH_LL_GetToggle>
 800adda:	4603      	mov	r3, r0
 800addc:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	7959      	ldrb	r1, [r3, #5]
 800ade2:	7bfb      	ldrb	r3, [r7, #15]
 800ade4:	f1c3 0301 	rsb	r3, r3, #1
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	461a      	mov	r2, r3
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f002 fb2a 	bl	800d446 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	791b      	ldrb	r3, [r3, #4]
 800adf6:	2200      	movs	r2, #0
 800adf8:	4619      	mov	r1, r3
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f002 fb23 	bl	800d446 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	2209      	movs	r2, #9
 800ae04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800ae08:	e020      	b.n	800ae4c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800ae0a:	7dbb      	ldrb	r3, [r7, #22]
 800ae0c:	2b04      	cmp	r3, #4
 800ae0e:	d11d      	bne.n	800ae4c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	220b      	movs	r2, #11
 800ae14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ae18:	e018      	b.n	800ae4c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7ff fdf2 	bl	800aa04 <USBH_MSC_BOT_REQ_Reset>
 800ae20:	4603      	mov	r3, r0
 800ae22:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800ae24:	7dfb      	ldrb	r3, [r7, #23]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d112      	bne.n	800ae50 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800ae32:	e00d      	b.n	800ae50 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800ae34:	bf00      	nop
 800ae36:	e00c      	b.n	800ae52 <USBH_MSC_BOT_Process+0x392>
      break;
 800ae38:	bf00      	nop
 800ae3a:	e00a      	b.n	800ae52 <USBH_MSC_BOT_Process+0x392>
      break;
 800ae3c:	bf00      	nop
 800ae3e:	e008      	b.n	800ae52 <USBH_MSC_BOT_Process+0x392>
      break;
 800ae40:	bf00      	nop
 800ae42:	e006      	b.n	800ae52 <USBH_MSC_BOT_Process+0x392>
      break;
 800ae44:	bf00      	nop
 800ae46:	e004      	b.n	800ae52 <USBH_MSC_BOT_Process+0x392>
      break;
 800ae48:	bf00      	nop
 800ae4a:	e002      	b.n	800ae52 <USBH_MSC_BOT_Process+0x392>
      break;
 800ae4c:	bf00      	nop
 800ae4e:	e000      	b.n	800ae52 <USBH_MSC_BOT_Process+0x392>
      break;
 800ae50:	bf00      	nop
  }
  return status;
 800ae52:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3718      	adds	r7, #24
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	460b      	mov	r3, r1
 800ae66:	70fb      	strb	r3, [r7, #3]
 800ae68:	4613      	mov	r3, r2
 800ae6a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800ae6c:	2302      	movs	r3, #2
 800ae6e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae76:	69db      	ldr	r3, [r3, #28]
 800ae78:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800ae7a:	78bb      	ldrb	r3, [r7, #2]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d002      	beq.n	800ae86 <USBH_MSC_BOT_Abort+0x2a>
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d009      	beq.n	800ae98 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800ae84:	e011      	b.n	800aeaa <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	79db      	ldrb	r3, [r3, #7]
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f001 f9db 	bl	800c248 <USBH_ClrFeature>
 800ae92:	4603      	mov	r3, r0
 800ae94:	73fb      	strb	r3, [r7, #15]
      break;
 800ae96:	e008      	b.n	800aeaa <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	799b      	ldrb	r3, [r3, #6]
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f001 f9d2 	bl	800c248 <USBH_ClrFeature>
 800aea4:	4603      	mov	r3, r0
 800aea6:	73fb      	strb	r3, [r7, #15]
      break;
 800aea8:	bf00      	nop
  }
  return status;
 800aeaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3710      	adds	r7, #16
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aec2:	69db      	ldr	r3, [r3, #28]
 800aec4:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800aec6:	2301      	movs	r3, #1
 800aec8:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	791b      	ldrb	r3, [r3, #4]
 800aece:	4619      	mov	r1, r3
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f002 fa05 	bl	800d2e0 <USBH_LL_GetLastXferSize>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b0d      	cmp	r3, #13
 800aeda:	d002      	beq.n	800aee2 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800aedc:	2302      	movs	r3, #2
 800aede:	73fb      	strb	r3, [r7, #15]
 800aee0:	e024      	b.n	800af2c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aee6:	4a14      	ldr	r2, [pc, #80]	; (800af38 <USBH_MSC_DecodeCSW+0x84>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d11d      	bne.n	800af28 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d119      	bne.n	800af2c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d102      	bne.n	800af08 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800af02:	2300      	movs	r3, #0
 800af04:	73fb      	strb	r3, [r7, #15]
 800af06:	e011      	b.n	800af2c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d102      	bne.n	800af18 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800af12:	2301      	movs	r3, #1
 800af14:	73fb      	strb	r3, [r7, #15]
 800af16:	e009      	b.n	800af2c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800af1e:	2b02      	cmp	r3, #2
 800af20:	d104      	bne.n	800af2c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800af22:	2302      	movs	r3, #2
 800af24:	73fb      	strb	r3, [r7, #15]
 800af26:	e001      	b.n	800af2c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800af28:	2302      	movs	r3, #2
 800af2a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800af2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	53425355 	.word	0x53425355

0800af3c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	460b      	mov	r3, r1
 800af46:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800af48:	2302      	movs	r3, #2
 800af4a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af52:	69db      	ldr	r3, [r3, #28]
 800af54:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d002      	beq.n	800af66 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800af60:	2b02      	cmp	r3, #2
 800af62:	d021      	beq.n	800afa8 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800af64:	e028      	b.n	800afb8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	2200      	movs	r2, #0
 800af6a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	2200      	movs	r2, #0
 800af70:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	220a      	movs	r2, #10
 800af78:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	3363      	adds	r3, #99	; 0x63
 800af80:	2210      	movs	r2, #16
 800af82:	2100      	movs	r1, #0
 800af84:	4618      	mov	r0, r3
 800af86:	f002 ffd9 	bl	800df3c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	2200      	movs	r2, #0
 800af8e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	2201      	movs	r2, #1
 800af96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	2202      	movs	r2, #2
 800af9e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800afa2:	2301      	movs	r3, #1
 800afa4:	73fb      	strb	r3, [r7, #15]
      break;
 800afa6:	e007      	b.n	800afb8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800afa8:	78fb      	ldrb	r3, [r7, #3]
 800afaa:	4619      	mov	r1, r3
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f7ff fd87 	bl	800aac0 <USBH_MSC_BOT_Process>
 800afb2:	4603      	mov	r3, r0
 800afb4:	73fb      	strb	r3, [r7, #15]
      break;
 800afb6:	bf00      	nop
  }

  return error;
 800afb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3710      	adds	r7, #16
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800afc2:	b580      	push	{r7, lr}
 800afc4:	b086      	sub	sp, #24
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	60f8      	str	r0, [r7, #12]
 800afca:	460b      	mov	r3, r1
 800afcc:	607a      	str	r2, [r7, #4]
 800afce:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY;
 800afd0:	2301      	movs	r3, #1
 800afd2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afda:	69db      	ldr	r3, [r3, #28]
 800afdc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d002      	beq.n	800afee <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d027      	beq.n	800b03c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800afec:	e05f      	b.n	800b0ae <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	2208      	movs	r2, #8
 800aff2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	2280      	movs	r2, #128	; 0x80
 800aff8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	220a      	movs	r2, #10
 800b000:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	3363      	adds	r3, #99	; 0x63
 800b008:	2210      	movs	r2, #16
 800b00a:	2100      	movs	r1, #0
 800b00c:	4618      	mov	r0, r3
 800b00e:	f002 ff95 	bl	800df3c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	2225      	movs	r2, #37	; 0x25
 800b016:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	2201      	movs	r2, #1
 800b01e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	2202      	movs	r2, #2
 800b026:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	f103 0210 	add.w	r2, r3, #16
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b036:	2301      	movs	r3, #1
 800b038:	75fb      	strb	r3, [r7, #23]
      break;
 800b03a:	e038      	b.n	800b0ae <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b03c:	7afb      	ldrb	r3, [r7, #11]
 800b03e:	4619      	mov	r1, r3
 800b040:	68f8      	ldr	r0, [r7, #12]
 800b042:	f7ff fd3d 	bl	800aac0 <USBH_MSC_BOT_Process>
 800b046:	4603      	mov	r3, r0
 800b048:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b04a:	7dfb      	ldrb	r3, [r7, #23]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d12d      	bne.n	800b0ac <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b056:	3303      	adds	r3, #3
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	461a      	mov	r2, r3
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b062:	3302      	adds	r3, #2
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	021b      	lsls	r3, r3, #8
 800b068:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b070:	3301      	adds	r3, #1
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b076:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	061b      	lsls	r3, r3, #24
 800b082:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b08e:	3307      	adds	r3, #7
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	b29a      	uxth	r2, r3
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b09a:	3306      	adds	r3, #6
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	021b      	lsls	r3, r3, #8
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	b29a      	uxth	r2, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	809a      	strh	r2, [r3, #4]
      break;
 800b0ac:	bf00      	nop
  }

  return error;
 800b0ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3718      	adds	r7, #24
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	607a      	str	r2, [r7, #4]
 800b0c4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800b0c6:	2302      	movs	r3, #2
 800b0c8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b0d0:	69db      	ldr	r3, [r3, #28]
 800b0d2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d002      	beq.n	800b0e4 <USBH_MSC_SCSI_Inquiry+0x2c>
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	d03d      	beq.n	800b15e <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800b0e2:	e089      	b.n	800b1f8 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	2224      	movs	r2, #36	; 0x24
 800b0e8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	2280      	movs	r2, #128	; 0x80
 800b0ee:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	220a      	movs	r2, #10
 800b0f6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	3363      	adds	r3, #99	; 0x63
 800b0fe:	220a      	movs	r2, #10
 800b100:	2100      	movs	r1, #0
 800b102:	4618      	mov	r0, r3
 800b104:	f002 ff1a 	bl	800df3c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	2212      	movs	r2, #18
 800b10c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b110:	7afb      	ldrb	r3, [r7, #11]
 800b112:	015b      	lsls	r3, r3, #5
 800b114:	b2da      	uxtb	r2, r3
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	2200      	movs	r2, #0
 800b120:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	2200      	movs	r2, #0
 800b128:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	2224      	movs	r2, #36	; 0x24
 800b130:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	2200      	movs	r2, #0
 800b138:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	2201      	movs	r2, #1
 800b140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	2202      	movs	r2, #2
 800b148:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	f103 0210 	add.w	r2, r3, #16
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b158:	2301      	movs	r3, #1
 800b15a:	75fb      	strb	r3, [r7, #23]
      break;
 800b15c:	e04c      	b.n	800b1f8 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b15e:	7afb      	ldrb	r3, [r7, #11]
 800b160:	4619      	mov	r1, r3
 800b162:	68f8      	ldr	r0, [r7, #12]
 800b164:	f7ff fcac 	bl	800aac0 <USBH_MSC_BOT_Process>
 800b168:	4603      	mov	r3, r0
 800b16a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b16c:	7dfb      	ldrb	r3, [r7, #23]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d141      	bne.n	800b1f6 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800b172:	2222      	movs	r2, #34	; 0x22
 800b174:	2100      	movs	r1, #0
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f002 fee0 	bl	800df3c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	f003 031f 	and.w	r3, r3, #31
 800b188:	b2da      	uxtb	r2, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	095b      	lsrs	r3, r3, #5
 800b198:	b2da      	uxtb	r2, r3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	b25b      	sxtb	r3, r3
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	da03      	bge.n	800b1b6 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	709a      	strb	r2, [r3, #2]
 800b1b4:	e002      	b.n	800b1bc <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	1cd8      	adds	r0, r3, #3
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1c6:	3308      	adds	r3, #8
 800b1c8:	2208      	movs	r2, #8
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	f002 fefa 	bl	800dfc4 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f103 000c 	add.w	r0, r3, #12
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1dc:	3310      	adds	r3, #16
 800b1de:	2210      	movs	r2, #16
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	f002 feef 	bl	800dfc4 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	331d      	adds	r3, #29
 800b1ea:	693a      	ldr	r2, [r7, #16]
 800b1ec:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800b1f0:	3220      	adds	r2, #32
 800b1f2:	6812      	ldr	r2, [r2, #0]
 800b1f4:	601a      	str	r2, [r3, #0]
      break;
 800b1f6:	bf00      	nop
  }

  return error;
 800b1f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3718      	adds	r7, #24
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b086      	sub	sp, #24
 800b206:	af00      	add	r7, sp, #0
 800b208:	60f8      	str	r0, [r7, #12]
 800b20a:	460b      	mov	r3, r1
 800b20c:	607a      	str	r2, [r7, #4]
 800b20e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800b210:	2302      	movs	r3, #2
 800b212:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b21a:	69db      	ldr	r3, [r3, #28]
 800b21c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b224:	2b01      	cmp	r3, #1
 800b226:	d002      	beq.n	800b22e <USBH_MSC_SCSI_RequestSense+0x2c>
 800b228:	2b02      	cmp	r3, #2
 800b22a:	d03d      	beq.n	800b2a8 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800b22c:	e05d      	b.n	800b2ea <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	220e      	movs	r2, #14
 800b232:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	2280      	movs	r2, #128	; 0x80
 800b238:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	220a      	movs	r2, #10
 800b240:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	3363      	adds	r3, #99	; 0x63
 800b248:	2210      	movs	r2, #16
 800b24a:	2100      	movs	r1, #0
 800b24c:	4618      	mov	r0, r3
 800b24e:	f002 fe75 	bl	800df3c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	2203      	movs	r2, #3
 800b256:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b25a:	7afb      	ldrb	r3, [r7, #11]
 800b25c:	015b      	lsls	r3, r3, #5
 800b25e:	b2da      	uxtb	r2, r3
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	2200      	movs	r2, #0
 800b26a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	2200      	movs	r2, #0
 800b272:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	220e      	movs	r2, #14
 800b27a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	2200      	movs	r2, #0
 800b282:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	2201      	movs	r2, #1
 800b28a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	2202      	movs	r2, #2
 800b292:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	f103 0210 	add.w	r2, r3, #16
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	75fb      	strb	r3, [r7, #23]
      break;
 800b2a6:	e020      	b.n	800b2ea <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b2a8:	7afb      	ldrb	r3, [r7, #11]
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	68f8      	ldr	r0, [r7, #12]
 800b2ae:	f7ff fc07 	bl	800aac0 <USBH_MSC_BOT_Process>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b2b6:	7dfb      	ldrb	r3, [r7, #23]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d115      	bne.n	800b2e8 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2c2:	3302      	adds	r3, #2
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	f003 030f 	and.w	r3, r3, #15
 800b2ca:	b2da      	uxtb	r2, r3
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2d6:	7b1a      	ldrb	r2, [r3, #12]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2e2:	7b5a      	ldrb	r2, [r3, #13]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	709a      	strb	r2, [r3, #2]
      break;
 800b2e8:	bf00      	nop
  }

  return error;
 800b2ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3718      	adds	r7, #24
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b086      	sub	sp, #24
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	607a      	str	r2, [r7, #4]
 800b2fe:	603b      	str	r3, [r7, #0]
 800b300:	460b      	mov	r3, r1
 800b302:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800b304:	2302      	movs	r3, #2
 800b306:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b30e:	69db      	ldr	r3, [r3, #28]
 800b310:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d002      	beq.n	800b322 <USBH_MSC_SCSI_Write+0x2e>
 800b31c:	2b02      	cmp	r3, #2
 800b31e:	d047      	beq.n	800b3b0 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b320:	e04e      	b.n	800b3c0 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b328:	461a      	mov	r2, r3
 800b32a:	6a3b      	ldr	r3, [r7, #32]
 800b32c:	fb03 f202 	mul.w	r2, r3, r2
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	2200      	movs	r2, #0
 800b338:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	220a      	movs	r2, #10
 800b340:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	3363      	adds	r3, #99	; 0x63
 800b348:	2210      	movs	r2, #16
 800b34a:	2100      	movs	r1, #0
 800b34c:	4618      	mov	r0, r3
 800b34e:	f002 fdf5 	bl	800df3c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	222a      	movs	r2, #42	; 0x2a
 800b356:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b35a:	79fa      	ldrb	r2, [r7, #7]
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b362:	79ba      	ldrb	r2, [r7, #6]
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b36a:	797a      	ldrb	r2, [r7, #5]
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b372:	1d3b      	adds	r3, r7, #4
 800b374:	781a      	ldrb	r2, [r3, #0]
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 800b37c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 800b386:	f107 0320 	add.w	r3, r7, #32
 800b38a:	781a      	ldrb	r2, [r3, #0]
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	2201      	movs	r2, #1
 800b396:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	2202      	movs	r2, #2
 800b39e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	683a      	ldr	r2, [r7, #0]
 800b3a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	75fb      	strb	r3, [r7, #23]
      break;
 800b3ae:	e007      	b.n	800b3c0 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b3b0:	7afb      	ldrb	r3, [r7, #11]
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	68f8      	ldr	r0, [r7, #12]
 800b3b6:	f7ff fb83 	bl	800aac0 <USBH_MSC_BOT_Process>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	75fb      	strb	r3, [r7, #23]
      break;
 800b3be:	bf00      	nop
  }

  return error;
 800b3c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3718      	adds	r7, #24
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b086      	sub	sp, #24
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	60f8      	str	r0, [r7, #12]
 800b3d2:	607a      	str	r2, [r7, #4]
 800b3d4:	603b      	str	r3, [r7, #0]
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800b3da:	2302      	movs	r3, #2
 800b3dc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3e4:	69db      	ldr	r3, [r3, #28]
 800b3e6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d002      	beq.n	800b3f8 <USBH_MSC_SCSI_Read+0x2e>
 800b3f2:	2b02      	cmp	r3, #2
 800b3f4:	d047      	beq.n	800b486 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b3f6:	e04e      	b.n	800b496 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b3fe:	461a      	mov	r2, r3
 800b400:	6a3b      	ldr	r3, [r7, #32]
 800b402:	fb03 f202 	mul.w	r2, r3, r2
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	2280      	movs	r2, #128	; 0x80
 800b40e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	220a      	movs	r2, #10
 800b416:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	3363      	adds	r3, #99	; 0x63
 800b41e:	2210      	movs	r2, #16
 800b420:	2100      	movs	r1, #0
 800b422:	4618      	mov	r0, r3
 800b424:	f002 fd8a 	bl	800df3c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	2228      	movs	r2, #40	; 0x28
 800b42c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b430:	79fa      	ldrb	r2, [r7, #7]
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b438:	79ba      	ldrb	r2, [r7, #6]
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b440:	797a      	ldrb	r2, [r7, #5]
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b448:	1d3b      	adds	r3, r7, #4
 800b44a:	781a      	ldrb	r2, [r3, #0]
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 800b452:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 800b45c:	f107 0320 	add.w	r3, r7, #32
 800b460:	781a      	ldrb	r2, [r3, #0]
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	2202      	movs	r2, #2
 800b474:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	683a      	ldr	r2, [r7, #0]
 800b47c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b480:	2301      	movs	r3, #1
 800b482:	75fb      	strb	r3, [r7, #23]
      break;
 800b484:	e007      	b.n	800b496 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b486:	7afb      	ldrb	r3, [r7, #11]
 800b488:	4619      	mov	r1, r3
 800b48a:	68f8      	ldr	r0, [r7, #12]
 800b48c:	f7ff fb18 	bl	800aac0 <USBH_MSC_BOT_Process>
 800b490:	4603      	mov	r3, r0
 800b492:	75fb      	strb	r3, [r7, #23]
      break;
 800b494:	bf00      	nop
  }

  return error;
 800b496:	7dfb      	ldrb	r3, [r7, #23]
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3718      	adds	r7, #24
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	60b9      	str	r1, [r7, #8]
 800b4aa:	4613      	mov	r3, r2
 800b4ac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d101      	bne.n	800b4b8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b4b4:	2302      	movs	r3, #2
 800b4b6:	e029      	b.n	800b50c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	79fa      	ldrb	r2, [r7, #7]
 800b4bc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	f000 f81f 	bl	800b514 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d003      	beq.n	800b504 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	68ba      	ldr	r2, [r7, #8]
 800b500:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	f001 fe37 	bl	800d178 <USBH_LL_Init>

  return USBH_OK;
 800b50a:	2300      	movs	r3, #0
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3710      	adds	r7, #16
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b51c:	2300      	movs	r3, #0
 800b51e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b520:	2300      	movs	r3, #0
 800b522:	60fb      	str	r3, [r7, #12]
 800b524:	e009      	b.n	800b53a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	33e0      	adds	r3, #224	; 0xe0
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	4413      	add	r3, r2
 800b530:	2200      	movs	r2, #0
 800b532:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	3301      	adds	r3, #1
 800b538:	60fb      	str	r3, [r7, #12]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2b0f      	cmp	r3, #15
 800b53e:	d9f2      	bls.n	800b526 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b540:	2300      	movs	r3, #0
 800b542:	60fb      	str	r3, [r7, #12]
 800b544:	e009      	b.n	800b55a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	4413      	add	r3, r2
 800b54c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b550:	2200      	movs	r2, #0
 800b552:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	3301      	adds	r3, #1
 800b558:	60fb      	str	r3, [r7, #12]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b560:	d3f1      	bcc.n	800b546 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2200      	movs	r2, #0
 800b566:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2201      	movs	r2, #1
 800b572:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2200      	movs	r2, #0
 800b578:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2201      	movs	r2, #1
 800b580:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2240      	movs	r2, #64	; 0x40
 800b586:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2200      	movs	r2, #0
 800b592:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2201      	movs	r2, #1
 800b59a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	331c      	adds	r3, #28
 800b5b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b5b6:	2100      	movs	r1, #0
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f002 fcbf 	bl	800df3c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b5c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5c8:	2100      	movs	r1, #0
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f002 fcb6 	bl	800df3c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f203 3326 	addw	r3, r3, #806	; 0x326
 800b5d6:	2212      	movs	r2, #18
 800b5d8:	2100      	movs	r1, #0
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f002 fcae 	bl	800df3c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b5e6:	223e      	movs	r2, #62	; 0x3e
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f002 fca6 	bl	800df3c <memset>

  return USBH_OK;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b5fa:	b480      	push	{r7}
 800b5fc:	b085      	sub	sp, #20
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
 800b602:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b604:	2300      	movs	r3, #0
 800b606:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d016      	beq.n	800b63c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b614:	2b00      	cmp	r3, #0
 800b616:	d10e      	bne.n	800b636 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b61e:	1c59      	adds	r1, r3, #1
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	33de      	adds	r3, #222	; 0xde
 800b62a:	6839      	ldr	r1, [r7, #0]
 800b62c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b630:	2300      	movs	r3, #0
 800b632:	73fb      	strb	r3, [r7, #15]
 800b634:	e004      	b.n	800b640 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b636:	2302      	movs	r3, #2
 800b638:	73fb      	strb	r3, [r7, #15]
 800b63a:	e001      	b.n	800b640 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b63c:	2302      	movs	r3, #2
 800b63e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b640:	7bfb      	ldrb	r3, [r7, #15]
}
 800b642:	4618      	mov	r0, r3
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr

0800b64e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b64e:	b480      	push	{r7}
 800b650:	b085      	sub	sp, #20
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
 800b656:	460b      	mov	r3, r1
 800b658:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b65a:	2300      	movs	r3, #0
 800b65c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b664:	78fa      	ldrb	r2, [r7, #3]
 800b666:	429a      	cmp	r2, r3
 800b668:	d204      	bcs.n	800b674 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	78fa      	ldrb	r2, [r7, #3]
 800b66e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b672:	e001      	b.n	800b678 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b674:	2302      	movs	r3, #2
 800b676:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b678:	7bfb      	ldrb	r3, [r7, #15]
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3714      	adds	r7, #20
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr

0800b686 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b686:	b480      	push	{r7}
 800b688:	b087      	sub	sp, #28
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
 800b68e:	4608      	mov	r0, r1
 800b690:	4611      	mov	r1, r2
 800b692:	461a      	mov	r2, r3
 800b694:	4603      	mov	r3, r0
 800b696:	70fb      	strb	r3, [r7, #3]
 800b698:	460b      	mov	r3, r1
 800b69a:	70bb      	strb	r3, [r7, #2]
 800b69c:	4613      	mov	r3, r2
 800b69e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b6ae:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b6b0:	e025      	b.n	800b6fe <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b6b2:	7dfb      	ldrb	r3, [r7, #23]
 800b6b4:	221a      	movs	r2, #26
 800b6b6:	fb02 f303 	mul.w	r3, r2, r3
 800b6ba:	3308      	adds	r3, #8
 800b6bc:	68fa      	ldr	r2, [r7, #12]
 800b6be:	4413      	add	r3, r2
 800b6c0:	3302      	adds	r3, #2
 800b6c2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	795b      	ldrb	r3, [r3, #5]
 800b6c8:	78fa      	ldrb	r2, [r7, #3]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d002      	beq.n	800b6d4 <USBH_FindInterface+0x4e>
 800b6ce:	78fb      	ldrb	r3, [r7, #3]
 800b6d0:	2bff      	cmp	r3, #255	; 0xff
 800b6d2:	d111      	bne.n	800b6f8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b6d8:	78ba      	ldrb	r2, [r7, #2]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d002      	beq.n	800b6e4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b6de:	78bb      	ldrb	r3, [r7, #2]
 800b6e0:	2bff      	cmp	r3, #255	; 0xff
 800b6e2:	d109      	bne.n	800b6f8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b6e8:	787a      	ldrb	r2, [r7, #1]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d002      	beq.n	800b6f4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b6ee:	787b      	ldrb	r3, [r7, #1]
 800b6f0:	2bff      	cmp	r3, #255	; 0xff
 800b6f2:	d101      	bne.n	800b6f8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b6f4:	7dfb      	ldrb	r3, [r7, #23]
 800b6f6:	e006      	b.n	800b706 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b6f8:	7dfb      	ldrb	r3, [r7, #23]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b6fe:	7dfb      	ldrb	r3, [r7, #23]
 800b700:	2b01      	cmp	r3, #1
 800b702:	d9d6      	bls.n	800b6b2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b704:	23ff      	movs	r3, #255	; 0xff
}
 800b706:	4618      	mov	r0, r3
 800b708:	371c      	adds	r7, #28
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr

0800b712 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800b712:	b580      	push	{r7, lr}
 800b714:	b082      	sub	sp, #8
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f001 fd68 	bl	800d1f0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b720:	2101      	movs	r1, #1
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f001 fe81 	bl	800d42a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b728:	2300      	movs	r3, #0
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3708      	adds	r7, #8
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
	...

0800b734 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b088      	sub	sp, #32
 800b738:	af04      	add	r7, sp, #16
 800b73a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b73c:	2302      	movs	r3, #2
 800b73e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b740:	2300      	movs	r3, #0
 800b742:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	2b01      	cmp	r3, #1
 800b74e:	d102      	bne.n	800b756 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2203      	movs	r2, #3
 800b754:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	2b0b      	cmp	r3, #11
 800b75e:	f200 81be 	bhi.w	800bade <USBH_Process+0x3aa>
 800b762:	a201      	add	r2, pc, #4	; (adr r2, 800b768 <USBH_Process+0x34>)
 800b764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b768:	0800b799 	.word	0x0800b799
 800b76c:	0800b7cb 	.word	0x0800b7cb
 800b770:	0800b833 	.word	0x0800b833
 800b774:	0800ba79 	.word	0x0800ba79
 800b778:	0800badf 	.word	0x0800badf
 800b77c:	0800b8d7 	.word	0x0800b8d7
 800b780:	0800ba1f 	.word	0x0800ba1f
 800b784:	0800b90d 	.word	0x0800b90d
 800b788:	0800b92d 	.word	0x0800b92d
 800b78c:	0800b94d 	.word	0x0800b94d
 800b790:	0800b991 	.word	0x0800b991
 800b794:	0800ba61 	.word	0x0800ba61
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	f000 819e 	beq.w	800bae2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b7ac:	20c8      	movs	r0, #200	; 0xc8
 800b7ae:	f001 feb0 	bl	800d512 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f001 fd79 	bl	800d2aa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b7c8:	e18b      	b.n	800bae2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d107      	bne.n	800b7e4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2202      	movs	r2, #2
 800b7e0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b7e2:	e18d      	b.n	800bb00 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b7ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b7ee:	d914      	bls.n	800b81a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	b2da      	uxtb	r2, r3
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b806:	2b03      	cmp	r3, #3
 800b808:	d903      	bls.n	800b812 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	220d      	movs	r2, #13
 800b80e:	701a      	strb	r2, [r3, #0]
      break;
 800b810:	e176      	b.n	800bb00 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	701a      	strb	r2, [r3, #0]
      break;
 800b818:	e172      	b.n	800bb00 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b820:	f103 020a 	add.w	r2, r3, #10
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b82a:	200a      	movs	r0, #10
 800b82c:	f001 fe71 	bl	800d512 <USBH_Delay>
      break;
 800b830:	e166      	b.n	800bb00 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d005      	beq.n	800b848 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b842:	2104      	movs	r1, #4
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b848:	2064      	movs	r0, #100	; 0x64
 800b84a:	f001 fe62 	bl	800d512 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f001 fd04 	bl	800d25c <USBH_LL_GetSpeed>
 800b854:	4603      	mov	r3, r0
 800b856:	461a      	mov	r2, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2205      	movs	r2, #5
 800b862:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b864:	2100      	movs	r1, #0
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f001 faab 	bl	800cdc2 <USBH_AllocPipe>
 800b86c:	4603      	mov	r3, r0
 800b86e:	461a      	mov	r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b874:	2180      	movs	r1, #128	; 0x80
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f001 faa3 	bl	800cdc2 <USBH_AllocPipe>
 800b87c:	4603      	mov	r3, r0
 800b87e:	461a      	mov	r2, r3
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	7919      	ldrb	r1, [r3, #4]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b898:	b292      	uxth	r2, r2
 800b89a:	9202      	str	r2, [sp, #8]
 800b89c:	2200      	movs	r2, #0
 800b89e:	9201      	str	r2, [sp, #4]
 800b8a0:	9300      	str	r3, [sp, #0]
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2280      	movs	r2, #128	; 0x80
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f001 fa5c 	bl	800cd64 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	7959      	ldrb	r1, [r3, #5]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b8c0:	b292      	uxth	r2, r2
 800b8c2:	9202      	str	r2, [sp, #8]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	9201      	str	r2, [sp, #4]
 800b8c8:	9300      	str	r3, [sp, #0]
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f001 fa48 	bl	800cd64 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b8d4:	e114      	b.n	800bb00 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 f918 	bl	800bb0c <USBH_HandleEnum>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b8e0:	7bbb      	ldrb	r3, [r7, #14]
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f040 80fe 	bne.w	800bae6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d103      	bne.n	800b904 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2208      	movs	r2, #8
 800b900:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b902:	e0f0      	b.n	800bae6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2207      	movs	r2, #7
 800b908:	701a      	strb	r2, [r3, #0]
      break;
 800b90a:	e0ec      	b.n	800bae6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b912:	2b00      	cmp	r3, #0
 800b914:	f000 80e9 	beq.w	800baea <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b91e:	2101      	movs	r1, #1
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2208      	movs	r2, #8
 800b928:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b92a:	e0de      	b.n	800baea <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b932:	b29b      	uxth	r3, r3
 800b934:	4619      	mov	r1, r3
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 fc3f 	bl	800c1ba <USBH_SetCfg>
 800b93c:	4603      	mov	r3, r0
 800b93e:	2b00      	cmp	r3, #0
 800b940:	f040 80d5 	bne.w	800baee <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2209      	movs	r2, #9
 800b948:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b94a:	e0d0      	b.n	800baee <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b952:	f003 0320 	and.w	r3, r3, #32
 800b956:	2b00      	cmp	r3, #0
 800b958:	d016      	beq.n	800b988 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b95a:	2101      	movs	r1, #1
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 fc4f 	bl	800c200 <USBH_SetFeature>
 800b962:	4603      	mov	r3, r0
 800b964:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b966:	7bbb      	ldrb	r3, [r7, #14]
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d103      	bne.n	800b976 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	220a      	movs	r2, #10
 800b972:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b974:	e0bd      	b.n	800baf2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800b976:	7bbb      	ldrb	r3, [r7, #14]
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	2b03      	cmp	r3, #3
 800b97c:	f040 80b9 	bne.w	800baf2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	220a      	movs	r2, #10
 800b984:	701a      	strb	r2, [r3, #0]
      break;
 800b986:	e0b4      	b.n	800baf2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	220a      	movs	r2, #10
 800b98c:	701a      	strb	r2, [r3, #0]
      break;
 800b98e:	e0b0      	b.n	800baf2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b996:	2b00      	cmp	r3, #0
 800b998:	f000 80ad 	beq.w	800baf6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	73fb      	strb	r3, [r7, #15]
 800b9a8:	e016      	b.n	800b9d8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b9aa:	7bfa      	ldrb	r2, [r7, #15]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	32de      	adds	r2, #222	; 0xde
 800b9b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9b4:	791a      	ldrb	r2, [r3, #4]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d108      	bne.n	800b9d2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b9c0:	7bfa      	ldrb	r2, [r7, #15]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	32de      	adds	r2, #222	; 0xde
 800b9c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b9d0:	e005      	b.n	800b9de <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b9d2:	7bfb      	ldrb	r3, [r7, #15]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	73fb      	strb	r3, [r7, #15]
 800b9d8:	7bfb      	ldrb	r3, [r7, #15]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d0e5      	beq.n	800b9aa <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d016      	beq.n	800ba16 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9ee:	689b      	ldr	r3, [r3, #8]
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	4798      	blx	r3
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d109      	bne.n	800ba0e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2206      	movs	r2, #6
 800b9fe:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba06:	2103      	movs	r1, #3
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ba0c:	e073      	b.n	800baf6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	220d      	movs	r2, #13
 800ba12:	701a      	strb	r2, [r3, #0]
      break;
 800ba14:	e06f      	b.n	800baf6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	220d      	movs	r2, #13
 800ba1a:	701a      	strb	r2, [r3, #0]
      break;
 800ba1c:	e06b      	b.n	800baf6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d017      	beq.n	800ba58 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba2e:	691b      	ldr	r3, [r3, #16]
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	4798      	blx	r3
 800ba34:	4603      	mov	r3, r0
 800ba36:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ba38:	7bbb      	ldrb	r3, [r7, #14]
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d103      	bne.n	800ba48 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	220b      	movs	r2, #11
 800ba44:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ba46:	e058      	b.n	800bafa <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800ba48:	7bbb      	ldrb	r3, [r7, #14]
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	2b02      	cmp	r3, #2
 800ba4e:	d154      	bne.n	800bafa <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	220d      	movs	r2, #13
 800ba54:	701a      	strb	r2, [r3, #0]
      break;
 800ba56:	e050      	b.n	800bafa <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	220d      	movs	r2, #13
 800ba5c:	701a      	strb	r2, [r3, #0]
      break;
 800ba5e:	e04c      	b.n	800bafa <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d049      	beq.n	800bafe <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba70:	695b      	ldr	r3, [r3, #20]
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	4798      	blx	r3
      }
      break;
 800ba76:	e042      	b.n	800bafe <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f7ff fd47 	bl	800b514 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d009      	beq.n	800baa4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d005      	beq.n	800baba <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bab4:	2105      	movs	r1, #5
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	d107      	bne.n	800bad6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2200      	movs	r2, #0
 800baca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f7ff fe1f 	bl	800b712 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bad4:	e014      	b.n	800bb00 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f001 fb8a 	bl	800d1f0 <USBH_LL_Start>
      break;
 800badc:	e010      	b.n	800bb00 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800bade:	bf00      	nop
 800bae0:	e00e      	b.n	800bb00 <USBH_Process+0x3cc>
      break;
 800bae2:	bf00      	nop
 800bae4:	e00c      	b.n	800bb00 <USBH_Process+0x3cc>
      break;
 800bae6:	bf00      	nop
 800bae8:	e00a      	b.n	800bb00 <USBH_Process+0x3cc>
    break;
 800baea:	bf00      	nop
 800baec:	e008      	b.n	800bb00 <USBH_Process+0x3cc>
      break;
 800baee:	bf00      	nop
 800baf0:	e006      	b.n	800bb00 <USBH_Process+0x3cc>
      break;
 800baf2:	bf00      	nop
 800baf4:	e004      	b.n	800bb00 <USBH_Process+0x3cc>
      break;
 800baf6:	bf00      	nop
 800baf8:	e002      	b.n	800bb00 <USBH_Process+0x3cc>
      break;
 800bafa:	bf00      	nop
 800bafc:	e000      	b.n	800bb00 <USBH_Process+0x3cc>
      break;
 800bafe:	bf00      	nop
  }
  return USBH_OK;
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
 800bb0a:	bf00      	nop

0800bb0c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b088      	sub	sp, #32
 800bb10:	af04      	add	r7, sp, #16
 800bb12:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800bb14:	2301      	movs	r3, #1
 800bb16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	785b      	ldrb	r3, [r3, #1]
 800bb20:	2b07      	cmp	r3, #7
 800bb22:	f200 81c1 	bhi.w	800bea8 <USBH_HandleEnum+0x39c>
 800bb26:	a201      	add	r2, pc, #4	; (adr r2, 800bb2c <USBH_HandleEnum+0x20>)
 800bb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2c:	0800bb4d 	.word	0x0800bb4d
 800bb30:	0800bc0b 	.word	0x0800bc0b
 800bb34:	0800bc75 	.word	0x0800bc75
 800bb38:	0800bd03 	.word	0x0800bd03
 800bb3c:	0800bd6d 	.word	0x0800bd6d
 800bb40:	0800bddd 	.word	0x0800bddd
 800bb44:	0800be23 	.word	0x0800be23
 800bb48:	0800be69 	.word	0x0800be69
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800bb4c:	2108      	movs	r1, #8
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 fa50 	bl	800bff4 <USBH_Get_DevDesc>
 800bb54:	4603      	mov	r3, r0
 800bb56:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bb58:	7bbb      	ldrb	r3, [r7, #14]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d130      	bne.n	800bbc0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	7919      	ldrb	r1, [r3, #4]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bb82:	b292      	uxth	r2, r2
 800bb84:	9202      	str	r2, [sp, #8]
 800bb86:	2200      	movs	r2, #0
 800bb88:	9201      	str	r2, [sp, #4]
 800bb8a:	9300      	str	r3, [sp, #0]
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	2280      	movs	r2, #128	; 0x80
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f001 f8e7 	bl	800cd64 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	7959      	ldrb	r1, [r3, #5]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bbaa:	b292      	uxth	r2, r2
 800bbac:	9202      	str	r2, [sp, #8]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	9201      	str	r2, [sp, #4]
 800bbb2:	9300      	str	r3, [sp, #0]
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f001 f8d3 	bl	800cd64 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bbbe:	e175      	b.n	800beac <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bbc0:	7bbb      	ldrb	r3, [r7, #14]
 800bbc2:	2b03      	cmp	r3, #3
 800bbc4:	f040 8172 	bne.w	800beac <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bbce:	3301      	adds	r3, #1
 800bbd0:	b2da      	uxtb	r2, r3
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bbde:	2b03      	cmp	r3, #3
 800bbe0:	d903      	bls.n	800bbea <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	220d      	movs	r2, #13
 800bbe6:	701a      	strb	r2, [r3, #0]
      break;
 800bbe8:	e160      	b.n	800beac <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	795b      	ldrb	r3, [r3, #5]
 800bbee:	4619      	mov	r1, r3
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f001 f907 	bl	800ce04 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	791b      	ldrb	r3, [r3, #4]
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f001 f901 	bl	800ce04 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2200      	movs	r2, #0
 800bc06:	701a      	strb	r2, [r3, #0]
      break;
 800bc08:	e150      	b.n	800beac <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800bc0a:	2112      	movs	r1, #18
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 f9f1 	bl	800bff4 <USBH_Get_DevDesc>
 800bc12:	4603      	mov	r3, r0
 800bc14:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bc16:	7bbb      	ldrb	r3, [r7, #14]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d103      	bne.n	800bc24 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2202      	movs	r2, #2
 800bc20:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bc22:	e145      	b.n	800beb0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bc24:	7bbb      	ldrb	r3, [r7, #14]
 800bc26:	2b03      	cmp	r3, #3
 800bc28:	f040 8142 	bne.w	800beb0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bc32:	3301      	adds	r3, #1
 800bc34:	b2da      	uxtb	r2, r3
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bc42:	2b03      	cmp	r3, #3
 800bc44:	d903      	bls.n	800bc4e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	220d      	movs	r2, #13
 800bc4a:	701a      	strb	r2, [r3, #0]
      break;
 800bc4c:	e130      	b.n	800beb0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	795b      	ldrb	r3, [r3, #5]
 800bc52:	4619      	mov	r1, r3
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f001 f8d5 	bl	800ce04 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	791b      	ldrb	r3, [r3, #4]
 800bc5e:	4619      	mov	r1, r3
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f001 f8cf 	bl	800ce04 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	701a      	strb	r2, [r3, #0]
      break;
 800bc72:	e11d      	b.n	800beb0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800bc74:	2101      	movs	r1, #1
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 fa7b 	bl	800c172 <USBH_SetAddress>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bc80:	7bbb      	ldrb	r3, [r7, #14]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d132      	bne.n	800bcec <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800bc86:	2002      	movs	r0, #2
 800bc88:	f001 fc43 	bl	800d512 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2203      	movs	r2, #3
 800bc98:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	7919      	ldrb	r1, [r3, #4]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bcae:	b292      	uxth	r2, r2
 800bcb0:	9202      	str	r2, [sp, #8]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	9201      	str	r2, [sp, #4]
 800bcb6:	9300      	str	r3, [sp, #0]
 800bcb8:	4603      	mov	r3, r0
 800bcba:	2280      	movs	r2, #128	; 0x80
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f001 f851 	bl	800cd64 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	7959      	ldrb	r1, [r3, #5]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bcd6:	b292      	uxth	r2, r2
 800bcd8:	9202      	str	r2, [sp, #8]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	9201      	str	r2, [sp, #4]
 800bcde:	9300      	str	r3, [sp, #0]
 800bce0:	4603      	mov	r3, r0
 800bce2:	2200      	movs	r2, #0
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f001 f83d 	bl	800cd64 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bcea:	e0e3      	b.n	800beb4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bcec:	7bbb      	ldrb	r3, [r7, #14]
 800bcee:	2b03      	cmp	r3, #3
 800bcf0:	f040 80e0 	bne.w	800beb4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	220d      	movs	r2, #13
 800bcf8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	705a      	strb	r2, [r3, #1]
      break;
 800bd00:	e0d8      	b.n	800beb4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800bd02:	2109      	movs	r1, #9
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 f9a1 	bl	800c04c <USBH_Get_CfgDesc>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bd0e:	7bbb      	ldrb	r3, [r7, #14]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d103      	bne.n	800bd1c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2204      	movs	r2, #4
 800bd18:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bd1a:	e0cd      	b.n	800beb8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd1c:	7bbb      	ldrb	r3, [r7, #14]
 800bd1e:	2b03      	cmp	r3, #3
 800bd20:	f040 80ca 	bne.w	800beb8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	b2da      	uxtb	r2, r3
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd3a:	2b03      	cmp	r3, #3
 800bd3c:	d903      	bls.n	800bd46 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	220d      	movs	r2, #13
 800bd42:	701a      	strb	r2, [r3, #0]
      break;
 800bd44:	e0b8      	b.n	800beb8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	795b      	ldrb	r3, [r3, #5]
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f001 f859 	bl	800ce04 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	791b      	ldrb	r3, [r3, #4]
 800bd56:	4619      	mov	r1, r3
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f001 f853 	bl	800ce04 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	701a      	strb	r2, [r3, #0]
      break;
 800bd6a:	e0a5      	b.n	800beb8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800bd72:	4619      	mov	r1, r3
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f000 f969 	bl	800c04c <USBH_Get_CfgDesc>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bd7e:	7bbb      	ldrb	r3, [r7, #14]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d103      	bne.n	800bd8c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2205      	movs	r2, #5
 800bd88:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bd8a:	e097      	b.n	800bebc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd8c:	7bbb      	ldrb	r3, [r7, #14]
 800bd8e:	2b03      	cmp	r3, #3
 800bd90:	f040 8094 	bne.w	800bebc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	b2da      	uxtb	r2, r3
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bdaa:	2b03      	cmp	r3, #3
 800bdac:	d903      	bls.n	800bdb6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	220d      	movs	r2, #13
 800bdb2:	701a      	strb	r2, [r3, #0]
      break;
 800bdb4:	e082      	b.n	800bebc <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	795b      	ldrb	r3, [r3, #5]
 800bdba:	4619      	mov	r1, r3
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f001 f821 	bl	800ce04 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	791b      	ldrb	r3, [r3, #4]
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f001 f81b 	bl	800ce04 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	701a      	strb	r2, [r3, #0]
      break;
 800bdda:	e06f      	b.n	800bebc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d019      	beq.n	800be1a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bdf2:	23ff      	movs	r3, #255	; 0xff
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 f953 	bl	800c0a0 <USBH_Get_StringDesc>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bdfe:	7bbb      	ldrb	r3, [r7, #14]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d103      	bne.n	800be0c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2206      	movs	r2, #6
 800be08:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800be0a:	e059      	b.n	800bec0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be0c:	7bbb      	ldrb	r3, [r7, #14]
 800be0e:	2b03      	cmp	r3, #3
 800be10:	d156      	bne.n	800bec0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2206      	movs	r2, #6
 800be16:	705a      	strb	r2, [r3, #1]
      break;
 800be18:	e052      	b.n	800bec0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2206      	movs	r2, #6
 800be1e:	705a      	strb	r2, [r3, #1]
      break;
 800be20:	e04e      	b.n	800bec0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d019      	beq.n	800be60 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800be38:	23ff      	movs	r3, #255	; 0xff
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 f930 	bl	800c0a0 <USBH_Get_StringDesc>
 800be40:	4603      	mov	r3, r0
 800be42:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800be44:	7bbb      	ldrb	r3, [r7, #14]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d103      	bne.n	800be52 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2207      	movs	r2, #7
 800be4e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800be50:	e038      	b.n	800bec4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be52:	7bbb      	ldrb	r3, [r7, #14]
 800be54:	2b03      	cmp	r3, #3
 800be56:	d135      	bne.n	800bec4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2207      	movs	r2, #7
 800be5c:	705a      	strb	r2, [r3, #1]
      break;
 800be5e:	e031      	b.n	800bec4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2207      	movs	r2, #7
 800be64:	705a      	strb	r2, [r3, #1]
      break;
 800be66:	e02d      	b.n	800bec4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d017      	beq.n	800bea2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800be7e:	23ff      	movs	r3, #255	; 0xff
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f000 f90d 	bl	800c0a0 <USBH_Get_StringDesc>
 800be86:	4603      	mov	r3, r0
 800be88:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800be8a:	7bbb      	ldrb	r3, [r7, #14]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d102      	bne.n	800be96 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800be90:	2300      	movs	r3, #0
 800be92:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800be94:	e018      	b.n	800bec8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be96:	7bbb      	ldrb	r3, [r7, #14]
 800be98:	2b03      	cmp	r3, #3
 800be9a:	d115      	bne.n	800bec8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800be9c:	2300      	movs	r3, #0
 800be9e:	73fb      	strb	r3, [r7, #15]
      break;
 800bea0:	e012      	b.n	800bec8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800bea2:	2300      	movs	r3, #0
 800bea4:	73fb      	strb	r3, [r7, #15]
      break;
 800bea6:	e00f      	b.n	800bec8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800bea8:	bf00      	nop
 800beaa:	e00e      	b.n	800beca <USBH_HandleEnum+0x3be>
      break;
 800beac:	bf00      	nop
 800beae:	e00c      	b.n	800beca <USBH_HandleEnum+0x3be>
      break;
 800beb0:	bf00      	nop
 800beb2:	e00a      	b.n	800beca <USBH_HandleEnum+0x3be>
      break;
 800beb4:	bf00      	nop
 800beb6:	e008      	b.n	800beca <USBH_HandleEnum+0x3be>
      break;
 800beb8:	bf00      	nop
 800beba:	e006      	b.n	800beca <USBH_HandleEnum+0x3be>
      break;
 800bebc:	bf00      	nop
 800bebe:	e004      	b.n	800beca <USBH_HandleEnum+0x3be>
      break;
 800bec0:	bf00      	nop
 800bec2:	e002      	b.n	800beca <USBH_HandleEnum+0x3be>
      break;
 800bec4:	bf00      	nop
 800bec6:	e000      	b.n	800beca <USBH_HandleEnum+0x3be>
      break;
 800bec8:	bf00      	nop
  }
  return Status;
 800beca:	7bfb      	ldrb	r3, [r7, #15]
}
 800becc:	4618      	mov	r0, r3
 800bece:	3710      	adds	r7, #16
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	683a      	ldr	r2, [r7, #0]
 800bee2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800bee6:	bf00      	nop
 800bee8:	370c      	adds	r7, #12
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr

0800bef2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800bef2:	b580      	push	{r7, lr}
 800bef4:	b082      	sub	sp, #8
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bf00:	1c5a      	adds	r2, r3, #1
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f000 f804 	bl	800bf16 <USBH_HandleSof>
}
 800bf0e:	bf00      	nop
 800bf10:	3708      	adds	r7, #8
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}

0800bf16 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bf16:	b580      	push	{r7, lr}
 800bf18:	b082      	sub	sp, #8
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	2b0b      	cmp	r3, #11
 800bf26:	d10a      	bne.n	800bf3e <USBH_HandleSof+0x28>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d005      	beq.n	800bf3e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf38:	699b      	ldr	r3, [r3, #24]
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	4798      	blx	r3
  }
}
 800bf3e:	bf00      	nop
 800bf40:	3708      	adds	r7, #8
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}

0800bf46 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800bf46:	b480      	push	{r7}
 800bf48:	b083      	sub	sp, #12
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2201      	movs	r2, #1
 800bf52:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800bf56:	bf00      	nop
}
 800bf58:	370c      	adds	r7, #12
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr

0800bf62 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800bf62:	b480      	push	{r7}
 800bf64:	b083      	sub	sp, #12
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800bf72:	bf00      	nop
}
 800bf74:	370c      	adds	r7, #12
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr

0800bf7e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800bf7e:	b480      	push	{r7}
 800bf80:	b083      	sub	sp, #12
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2201      	movs	r2, #1
 800bf8a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2200      	movs	r2, #0
 800bf92:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bf9e:	2300      	movs	r3, #0
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f001 f92a 	bl	800d226 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	791b      	ldrb	r3, [r3, #4]
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 ff13 	bl	800ce04 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	795b      	ldrb	r3, [r3, #5]
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 ff0d 	bl	800ce04 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bfea:	2300      	movs	r3, #0
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3708      	adds	r7, #8
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b086      	sub	sp, #24
 800bff8:	af02      	add	r7, sp, #8
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	460b      	mov	r3, r1
 800bffe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800c000:	887b      	ldrh	r3, [r7, #2]
 800c002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c006:	d901      	bls.n	800c00c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c008:	2303      	movs	r3, #3
 800c00a:	e01b      	b.n	800c044 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c012:	887b      	ldrh	r3, [r7, #2]
 800c014:	9300      	str	r3, [sp, #0]
 800c016:	4613      	mov	r3, r2
 800c018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c01c:	2100      	movs	r1, #0
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 f872 	bl	800c108 <USBH_GetDescriptor>
 800c024:	4603      	mov	r3, r0
 800c026:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800c028:	7bfb      	ldrb	r3, [r7, #15]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d109      	bne.n	800c042 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c034:	887a      	ldrh	r2, [r7, #2]
 800c036:	4619      	mov	r1, r3
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 f929 	bl	800c290 <USBH_ParseDevDesc>
 800c03e:	4603      	mov	r3, r0
 800c040:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c042:	7bfb      	ldrb	r3, [r7, #15]
}
 800c044:	4618      	mov	r0, r3
 800c046:	3710      	adds	r7, #16
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b086      	sub	sp, #24
 800c050:	af02      	add	r7, sp, #8
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	460b      	mov	r3, r1
 800c056:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	331c      	adds	r3, #28
 800c05c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800c05e:	887b      	ldrh	r3, [r7, #2]
 800c060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c064:	d901      	bls.n	800c06a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c066:	2303      	movs	r3, #3
 800c068:	e016      	b.n	800c098 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c06a:	887b      	ldrh	r3, [r7, #2]
 800c06c:	9300      	str	r3, [sp, #0]
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c074:	2100      	movs	r1, #0
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 f846 	bl	800c108 <USBH_GetDescriptor>
 800c07c:	4603      	mov	r3, r0
 800c07e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c080:	7bfb      	ldrb	r3, [r7, #15]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d107      	bne.n	800c096 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c086:	887b      	ldrh	r3, [r7, #2]
 800c088:	461a      	mov	r2, r3
 800c08a:	68b9      	ldr	r1, [r7, #8]
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 f9b3 	bl	800c3f8 <USBH_ParseCfgDesc>
 800c092:	4603      	mov	r3, r0
 800c094:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c096:	7bfb      	ldrb	r3, [r7, #15]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3710      	adds	r7, #16
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b088      	sub	sp, #32
 800c0a4:	af02      	add	r7, sp, #8
 800c0a6:	60f8      	str	r0, [r7, #12]
 800c0a8:	607a      	str	r2, [r7, #4]
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	72fb      	strb	r3, [r7, #11]
 800c0b0:	4613      	mov	r3, r2
 800c0b2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800c0b4:	893b      	ldrh	r3, [r7, #8]
 800c0b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0ba:	d802      	bhi.n	800c0c2 <USBH_Get_StringDesc+0x22>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d101      	bne.n	800c0c6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c0c2:	2303      	movs	r3, #3
 800c0c4:	e01c      	b.n	800c100 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800c0c6:	7afb      	ldrb	r3, [r7, #11]
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c0ce:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c0d6:	893b      	ldrh	r3, [r7, #8]
 800c0d8:	9300      	str	r3, [sp, #0]
 800c0da:	460b      	mov	r3, r1
 800c0dc:	2100      	movs	r1, #0
 800c0de:	68f8      	ldr	r0, [r7, #12]
 800c0e0:	f000 f812 	bl	800c108 <USBH_GetDescriptor>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c0e8:	7dfb      	ldrb	r3, [r7, #23]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d107      	bne.n	800c0fe <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c0f4:	893a      	ldrh	r2, [r7, #8]
 800c0f6:	6879      	ldr	r1, [r7, #4]
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f000 fb93 	bl	800c824 <USBH_ParseStringDesc>
  }

  return status;
 800c0fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800c100:	4618      	mov	r0, r3
 800c102:	3718      	adds	r7, #24
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	607b      	str	r3, [r7, #4]
 800c112:	460b      	mov	r3, r1
 800c114:	72fb      	strb	r3, [r7, #11]
 800c116:	4613      	mov	r3, r2
 800c118:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	789b      	ldrb	r3, [r3, #2]
 800c11e:	2b01      	cmp	r3, #1
 800c120:	d11c      	bne.n	800c15c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c122:	7afb      	ldrb	r3, [r7, #11]
 800c124:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c128:	b2da      	uxtb	r2, r3
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2206      	movs	r2, #6
 800c132:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	893a      	ldrh	r2, [r7, #8]
 800c138:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c13a:	893b      	ldrh	r3, [r7, #8]
 800c13c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c140:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c144:	d104      	bne.n	800c150 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f240 4209 	movw	r2, #1033	; 0x409
 800c14c:	829a      	strh	r2, [r3, #20]
 800c14e:	e002      	b.n	800c156 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2200      	movs	r2, #0
 800c154:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	8b3a      	ldrh	r2, [r7, #24]
 800c15a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c15c:	8b3b      	ldrh	r3, [r7, #24]
 800c15e:	461a      	mov	r2, r3
 800c160:	6879      	ldr	r1, [r7, #4]
 800c162:	68f8      	ldr	r0, [r7, #12]
 800c164:	f000 fbac 	bl	800c8c0 <USBH_CtlReq>
 800c168:	4603      	mov	r3, r0
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3710      	adds	r7, #16
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}

0800c172 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c172:	b580      	push	{r7, lr}
 800c174:	b082      	sub	sp, #8
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
 800c17a:	460b      	mov	r3, r1
 800c17c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	789b      	ldrb	r3, [r3, #2]
 800c182:	2b01      	cmp	r3, #1
 800c184:	d10f      	bne.n	800c1a6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2205      	movs	r2, #5
 800c190:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c192:	78fb      	ldrb	r3, [r7, #3]
 800c194:	b29a      	uxth	r2, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 fb88 	bl	800c8c0 <USBH_CtlReq>
 800c1b0:	4603      	mov	r3, r0
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3708      	adds	r7, #8
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c1ba:	b580      	push	{r7, lr}
 800c1bc:	b082      	sub	sp, #8
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	789b      	ldrb	r3, [r3, #2]
 800c1ca:	2b01      	cmp	r3, #1
 800c1cc:	d10e      	bne.n	800c1ec <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2209      	movs	r2, #9
 800c1d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	887a      	ldrh	r2, [r7, #2]
 800c1de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	2100      	movs	r1, #0
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 fb65 	bl	800c8c0 <USBH_CtlReq>
 800c1f6:	4603      	mov	r3, r0
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	460b      	mov	r3, r1
 800c20a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	789b      	ldrb	r3, [r3, #2]
 800c210:	2b01      	cmp	r3, #1
 800c212:	d10f      	bne.n	800c234 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2200      	movs	r2, #0
 800c218:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2203      	movs	r2, #3
 800c21e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c220:	78fb      	ldrb	r3, [r7, #3]
 800c222:	b29a      	uxth	r2, r3
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2200      	movs	r2, #0
 800c22c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2200      	movs	r2, #0
 800c232:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c234:	2200      	movs	r2, #0
 800c236:	2100      	movs	r1, #0
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 fb41 	bl	800c8c0 <USBH_CtlReq>
 800c23e:	4603      	mov	r3, r0
}
 800c240:	4618      	mov	r0, r3
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	460b      	mov	r3, r1
 800c252:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	789b      	ldrb	r3, [r3, #2]
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d10f      	bne.n	800c27c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2202      	movs	r2, #2
 800c260:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2201      	movs	r2, #1
 800c266:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c26e:	78fb      	ldrb	r3, [r7, #3]
 800c270:	b29a      	uxth	r2, r3
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c27c:	2200      	movs	r2, #0
 800c27e:	2100      	movs	r1, #0
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f000 fb1d 	bl	800c8c0 <USBH_CtlReq>
 800c286:	4603      	mov	r3, r0
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c290:	b480      	push	{r7}
 800c292:	b087      	sub	sp, #28
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	4613      	mov	r3, r2
 800c29c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f203 3326 	addw	r3, r3, #806	; 0x326
 800c2a4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d101      	bne.n	800c2b4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800c2b0:	2302      	movs	r3, #2
 800c2b2:	e098      	b.n	800c3e6 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	781a      	ldrb	r2, [r3, #0]
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	785a      	ldrb	r2, [r3, #1]
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	3302      	adds	r3, #2
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	b29a      	uxth	r2, r3
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	3303      	adds	r3, #3
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	021b      	lsls	r3, r3, #8
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	b29a      	uxth	r2, r3
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	791a      	ldrb	r2, [r3, #4]
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	795a      	ldrb	r2, [r3, #5]
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	799a      	ldrb	r2, [r3, #6]
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	79da      	ldrb	r2, [r3, #7]
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c306:	2b00      	cmp	r3, #0
 800c308:	d004      	beq.n	800c314 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800c310:	2b01      	cmp	r3, #1
 800c312:	d11b      	bne.n	800c34c <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	79db      	ldrb	r3, [r3, #7]
 800c318:	2b20      	cmp	r3, #32
 800c31a:	dc0f      	bgt.n	800c33c <USBH_ParseDevDesc+0xac>
 800c31c:	2b08      	cmp	r3, #8
 800c31e:	db0f      	blt.n	800c340 <USBH_ParseDevDesc+0xb0>
 800c320:	3b08      	subs	r3, #8
 800c322:	4a34      	ldr	r2, [pc, #208]	; (800c3f4 <USBH_ParseDevDesc+0x164>)
 800c324:	fa22 f303 	lsr.w	r3, r2, r3
 800c328:	f003 0301 	and.w	r3, r3, #1
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	bf14      	ite	ne
 800c330:	2301      	movne	r3, #1
 800c332:	2300      	moveq	r3, #0
 800c334:	b2db      	uxtb	r3, r3
 800c336:	2b00      	cmp	r3, #0
 800c338:	d106      	bne.n	800c348 <USBH_ParseDevDesc+0xb8>
 800c33a:	e001      	b.n	800c340 <USBH_ParseDevDesc+0xb0>
 800c33c:	2b40      	cmp	r3, #64	; 0x40
 800c33e:	d003      	beq.n	800c348 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	2208      	movs	r2, #8
 800c344:	71da      	strb	r2, [r3, #7]
        break;
 800c346:	e000      	b.n	800c34a <USBH_ParseDevDesc+0xba>
        break;
 800c348:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800c34a:	e00e      	b.n	800c36a <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c352:	2b02      	cmp	r3, #2
 800c354:	d107      	bne.n	800c366 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	79db      	ldrb	r3, [r3, #7]
 800c35a:	2b08      	cmp	r3, #8
 800c35c:	d005      	beq.n	800c36a <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	2208      	movs	r2, #8
 800c362:	71da      	strb	r2, [r3, #7]
 800c364:	e001      	b.n	800c36a <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c366:	2303      	movs	r3, #3
 800c368:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800c36a:	88fb      	ldrh	r3, [r7, #6]
 800c36c:	2b08      	cmp	r3, #8
 800c36e:	d939      	bls.n	800c3e4 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	3308      	adds	r3, #8
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	b29a      	uxth	r2, r3
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	3309      	adds	r3, #9
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	b29b      	uxth	r3, r3
 800c380:	021b      	lsls	r3, r3, #8
 800c382:	b29b      	uxth	r3, r3
 800c384:	4313      	orrs	r3, r2
 800c386:	b29a      	uxth	r2, r3
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	330a      	adds	r3, #10
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	b29a      	uxth	r2, r3
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	330b      	adds	r3, #11
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	021b      	lsls	r3, r3, #8
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	b29a      	uxth	r2, r3
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	330c      	adds	r3, #12
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	b29a      	uxth	r2, r3
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	330d      	adds	r3, #13
 800c3b4:	781b      	ldrb	r3, [r3, #0]
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	021b      	lsls	r3, r3, #8
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	b29a      	uxth	r2, r3
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	7b9a      	ldrb	r2, [r3, #14]
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	7bda      	ldrb	r2, [r3, #15]
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	7c1a      	ldrb	r2, [r3, #16]
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	7c5a      	ldrb	r2, [r3, #17]
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800c3e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	371c      	adds	r7, #28
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	01000101 	.word	0x01000101

0800c3f8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b08c      	sub	sp, #48	; 0x30
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	60f8      	str	r0, [r7, #12]
 800c400:	60b9      	str	r1, [r7, #8]
 800c402:	4613      	mov	r3, r2
 800c404:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c40c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c40e:	2300      	movs	r3, #0
 800c410:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c414:	2300      	movs	r3, #0
 800c416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c41a:	2300      	movs	r3, #0
 800c41c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d101      	bne.n	800c42a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800c426:	2302      	movs	r3, #2
 800c428:	e0db      	b.n	800c5e2 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	781a      	ldrb	r2, [r3, #0]
 800c432:	6a3b      	ldr	r3, [r7, #32]
 800c434:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	785a      	ldrb	r2, [r3, #1]
 800c43a:	6a3b      	ldr	r3, [r7, #32]
 800c43c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	3302      	adds	r3, #2
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	b29a      	uxth	r2, r3
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	3303      	adds	r3, #3
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	021b      	lsls	r3, r3, #8
 800c450:	b29b      	uxth	r3, r3
 800c452:	4313      	orrs	r3, r2
 800c454:	b29b      	uxth	r3, r3
 800c456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c45a:	bf28      	it	cs
 800c45c:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c460:	b29a      	uxth	r2, r3
 800c462:	6a3b      	ldr	r3, [r7, #32]
 800c464:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	791a      	ldrb	r2, [r3, #4]
 800c46a:	6a3b      	ldr	r3, [r7, #32]
 800c46c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	795a      	ldrb	r2, [r3, #5]
 800c472:	6a3b      	ldr	r3, [r7, #32]
 800c474:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	799a      	ldrb	r2, [r3, #6]
 800c47a:	6a3b      	ldr	r3, [r7, #32]
 800c47c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	79da      	ldrb	r2, [r3, #7]
 800c482:	6a3b      	ldr	r3, [r7, #32]
 800c484:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	7a1a      	ldrb	r2, [r3, #8]
 800c48a:	6a3b      	ldr	r3, [r7, #32]
 800c48c:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800c48e:	6a3b      	ldr	r3, [r7, #32]
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	2b09      	cmp	r3, #9
 800c494:	d002      	beq.n	800c49c <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c496:	6a3b      	ldr	r3, [r7, #32]
 800c498:	2209      	movs	r2, #9
 800c49a:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c49c:	88fb      	ldrh	r3, [r7, #6]
 800c49e:	2b09      	cmp	r3, #9
 800c4a0:	f240 809d 	bls.w	800c5de <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800c4a4:	2309      	movs	r3, #9
 800c4a6:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c4ac:	e081      	b.n	800c5b2 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c4ae:	f107 0316 	add.w	r3, r7, #22
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4b6:	f000 f9e8 	bl	800c88a <USBH_GetNextDesc>
 800c4ba:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4be:	785b      	ldrb	r3, [r3, #1]
 800c4c0:	2b04      	cmp	r3, #4
 800c4c2:	d176      	bne.n	800c5b2 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	2b09      	cmp	r3, #9
 800c4ca:	d002      	beq.n	800c4d2 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ce:	2209      	movs	r2, #9
 800c4d0:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c4d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4d6:	221a      	movs	r2, #26
 800c4d8:	fb02 f303 	mul.w	r3, r2, r3
 800c4dc:	3308      	adds	r3, #8
 800c4de:	6a3a      	ldr	r2, [r7, #32]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	3302      	adds	r3, #2
 800c4e4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c4e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4e8:	69f8      	ldr	r0, [r7, #28]
 800c4ea:	f000 f87e 	bl	800c5ea <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c4f8:	e043      	b.n	800c582 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c4fa:	f107 0316 	add.w	r3, r7, #22
 800c4fe:	4619      	mov	r1, r3
 800c500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c502:	f000 f9c2 	bl	800c88a <USBH_GetNextDesc>
 800c506:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50a:	785b      	ldrb	r3, [r3, #1]
 800c50c:	2b05      	cmp	r3, #5
 800c50e:	d138      	bne.n	800c582 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	795b      	ldrb	r3, [r3, #5]
 800c514:	2b01      	cmp	r3, #1
 800c516:	d113      	bne.n	800c540 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c518:	69fb      	ldr	r3, [r7, #28]
 800c51a:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800c51c:	2b02      	cmp	r3, #2
 800c51e:	d003      	beq.n	800c528 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c520:	69fb      	ldr	r3, [r7, #28]
 800c522:	799b      	ldrb	r3, [r3, #6]
 800c524:	2b03      	cmp	r3, #3
 800c526:	d10b      	bne.n	800c540 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c528:	69fb      	ldr	r3, [r7, #28]
 800c52a:	79db      	ldrb	r3, [r3, #7]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d10b      	bne.n	800c548 <USBH_ParseCfgDesc+0x150>
 800c530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	2b09      	cmp	r3, #9
 800c536:	d007      	beq.n	800c548 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800c538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c53a:	2209      	movs	r2, #9
 800c53c:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c53e:	e003      	b.n	800c548 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c542:	2207      	movs	r2, #7
 800c544:	701a      	strb	r2, [r3, #0]
 800c546:	e000      	b.n	800c54a <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c548:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c54a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c54e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c552:	3201      	adds	r2, #1
 800c554:	00d2      	lsls	r2, r2, #3
 800c556:	211a      	movs	r1, #26
 800c558:	fb01 f303 	mul.w	r3, r1, r3
 800c55c:	4413      	add	r3, r2
 800c55e:	3308      	adds	r3, #8
 800c560:	6a3a      	ldr	r2, [r7, #32]
 800c562:	4413      	add	r3, r2
 800c564:	3304      	adds	r3, #4
 800c566:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c56a:	69b9      	ldr	r1, [r7, #24]
 800c56c:	68f8      	ldr	r0, [r7, #12]
 800c56e:	f000 f870 	bl	800c652 <USBH_ParseEPDesc>
 800c572:	4603      	mov	r3, r0
 800c574:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c578:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c57c:	3301      	adds	r3, #1
 800c57e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c582:	69fb      	ldr	r3, [r7, #28]
 800c584:	791b      	ldrb	r3, [r3, #4]
 800c586:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d204      	bcs.n	800c598 <USBH_ParseCfgDesc+0x1a0>
 800c58e:	6a3b      	ldr	r3, [r7, #32]
 800c590:	885a      	ldrh	r2, [r3, #2]
 800c592:	8afb      	ldrh	r3, [r7, #22]
 800c594:	429a      	cmp	r2, r3
 800c596:	d8b0      	bhi.n	800c4fa <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c598:	69fb      	ldr	r3, [r7, #28]
 800c59a:	791b      	ldrb	r3, [r3, #4]
 800c59c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d201      	bcs.n	800c5a8 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800c5a4:	2303      	movs	r3, #3
 800c5a6:	e01c      	b.n	800c5e2 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800c5a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c5b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d805      	bhi.n	800c5c6 <USBH_ParseCfgDesc+0x1ce>
 800c5ba:	6a3b      	ldr	r3, [r7, #32]
 800c5bc:	885a      	ldrh	r2, [r3, #2]
 800c5be:	8afb      	ldrh	r3, [r7, #22]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	f63f af74 	bhi.w	800c4ae <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c5c6:	6a3b      	ldr	r3, [r7, #32]
 800c5c8:	791b      	ldrb	r3, [r3, #4]
 800c5ca:	2b02      	cmp	r3, #2
 800c5cc:	bf28      	it	cs
 800c5ce:	2302      	movcs	r3, #2
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d201      	bcs.n	800c5de <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800c5da:	2303      	movs	r3, #3
 800c5dc:	e001      	b.n	800c5e2 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800c5de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3730      	adds	r7, #48	; 0x30
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800c5ea:	b480      	push	{r7}
 800c5ec:	b083      	sub	sp, #12
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
 800c5f2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	781a      	ldrb	r2, [r3, #0]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	785a      	ldrb	r2, [r3, #1]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	789a      	ldrb	r2, [r3, #2]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	78da      	ldrb	r2, [r3, #3]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	3304      	adds	r3, #4
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	2b02      	cmp	r3, #2
 800c61c:	bf28      	it	cs
 800c61e:	2302      	movcs	r3, #2
 800c620:	b2da      	uxtb	r2, r3
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	795a      	ldrb	r2, [r3, #5]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	799a      	ldrb	r2, [r3, #6]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	79da      	ldrb	r2, [r3, #7]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	7a1a      	ldrb	r2, [r3, #8]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	721a      	strb	r2, [r3, #8]
}
 800c646:	bf00      	nop
 800c648:	370c      	adds	r7, #12
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr

0800c652 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800c652:	b480      	push	{r7}
 800c654:	b087      	sub	sp, #28
 800c656:	af00      	add	r7, sp, #0
 800c658:	60f8      	str	r0, [r7, #12]
 800c65a:	60b9      	str	r1, [r7, #8]
 800c65c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c65e:	2300      	movs	r3, #0
 800c660:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	781a      	ldrb	r2, [r3, #0]
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	785a      	ldrb	r2, [r3, #1]
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	789a      	ldrb	r2, [r3, #2]
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	78da      	ldrb	r2, [r3, #3]
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	3304      	adds	r3, #4
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	b29a      	uxth	r2, r3
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	3305      	adds	r3, #5
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	b29b      	uxth	r3, r3
 800c692:	021b      	lsls	r3, r3, #8
 800c694:	b29b      	uxth	r3, r3
 800c696:	4313      	orrs	r3, r2
 800c698:	b29a      	uxth	r2, r3
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	799a      	ldrb	r2, [r3, #6]
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	889b      	ldrh	r3, [r3, #4]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d009      	beq.n	800c6c2 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c6b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6b6:	d804      	bhi.n	800c6c2 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c6bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6c0:	d901      	bls.n	800c6c6 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800c6c2:	2303      	movs	r3, #3
 800c6c4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d136      	bne.n	800c73e <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	78db      	ldrb	r3, [r3, #3]
 800c6d4:	f003 0303 	and.w	r3, r3, #3
 800c6d8:	2b02      	cmp	r3, #2
 800c6da:	d108      	bne.n	800c6ee <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	889b      	ldrh	r3, [r3, #4]
 800c6e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6e4:	f240 8097 	bls.w	800c816 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c6e8:	2303      	movs	r3, #3
 800c6ea:	75fb      	strb	r3, [r7, #23]
 800c6ec:	e093      	b.n	800c816 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	78db      	ldrb	r3, [r3, #3]
 800c6f2:	f003 0303 	and.w	r3, r3, #3
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d107      	bne.n	800c70a <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	889b      	ldrh	r3, [r3, #4]
 800c6fe:	2b40      	cmp	r3, #64	; 0x40
 800c700:	f240 8089 	bls.w	800c816 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c704:	2303      	movs	r3, #3
 800c706:	75fb      	strb	r3, [r7, #23]
 800c708:	e085      	b.n	800c816 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	78db      	ldrb	r3, [r3, #3]
 800c70e:	f003 0303 	and.w	r3, r3, #3
 800c712:	2b01      	cmp	r3, #1
 800c714:	d005      	beq.n	800c722 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	78db      	ldrb	r3, [r3, #3]
 800c71a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c71e:	2b03      	cmp	r3, #3
 800c720:	d10a      	bne.n	800c738 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	799b      	ldrb	r3, [r3, #6]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d003      	beq.n	800c732 <USBH_ParseEPDesc+0xe0>
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	799b      	ldrb	r3, [r3, #6]
 800c72e:	2b10      	cmp	r3, #16
 800c730:	d970      	bls.n	800c814 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c732:	2303      	movs	r3, #3
 800c734:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c736:	e06d      	b.n	800c814 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c738:	2303      	movs	r3, #3
 800c73a:	75fb      	strb	r3, [r7, #23]
 800c73c:	e06b      	b.n	800c816 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c744:	2b01      	cmp	r3, #1
 800c746:	d13c      	bne.n	800c7c2 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	78db      	ldrb	r3, [r3, #3]
 800c74c:	f003 0303 	and.w	r3, r3, #3
 800c750:	2b02      	cmp	r3, #2
 800c752:	d005      	beq.n	800c760 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	78db      	ldrb	r3, [r3, #3]
 800c758:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d106      	bne.n	800c76e <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	889b      	ldrh	r3, [r3, #4]
 800c764:	2b40      	cmp	r3, #64	; 0x40
 800c766:	d956      	bls.n	800c816 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c768:	2303      	movs	r3, #3
 800c76a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c76c:	e053      	b.n	800c816 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	78db      	ldrb	r3, [r3, #3]
 800c772:	f003 0303 	and.w	r3, r3, #3
 800c776:	2b01      	cmp	r3, #1
 800c778:	d10e      	bne.n	800c798 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	799b      	ldrb	r3, [r3, #6]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d007      	beq.n	800c792 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800c786:	2b10      	cmp	r3, #16
 800c788:	d803      	bhi.n	800c792 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800c78e:	2b40      	cmp	r3, #64	; 0x40
 800c790:	d941      	bls.n	800c816 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c792:	2303      	movs	r3, #3
 800c794:	75fb      	strb	r3, [r7, #23]
 800c796:	e03e      	b.n	800c816 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	78db      	ldrb	r3, [r3, #3]
 800c79c:	f003 0303 	and.w	r3, r3, #3
 800c7a0:	2b03      	cmp	r3, #3
 800c7a2:	d10b      	bne.n	800c7bc <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	799b      	ldrb	r3, [r3, #6]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d004      	beq.n	800c7b6 <USBH_ParseEPDesc+0x164>
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	889b      	ldrh	r3, [r3, #4]
 800c7b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7b4:	d32f      	bcc.n	800c816 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c7b6:	2303      	movs	r3, #3
 800c7b8:	75fb      	strb	r3, [r7, #23]
 800c7ba:	e02c      	b.n	800c816 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c7bc:	2303      	movs	r3, #3
 800c7be:	75fb      	strb	r3, [r7, #23]
 800c7c0:	e029      	b.n	800c816 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c7c8:	2b02      	cmp	r3, #2
 800c7ca:	d120      	bne.n	800c80e <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	78db      	ldrb	r3, [r3, #3]
 800c7d0:	f003 0303 	and.w	r3, r3, #3
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d106      	bne.n	800c7e6 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	889b      	ldrh	r3, [r3, #4]
 800c7dc:	2b08      	cmp	r3, #8
 800c7de:	d01a      	beq.n	800c816 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c7e0:	2303      	movs	r3, #3
 800c7e2:	75fb      	strb	r3, [r7, #23]
 800c7e4:	e017      	b.n	800c816 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	78db      	ldrb	r3, [r3, #3]
 800c7ea:	f003 0303 	and.w	r3, r3, #3
 800c7ee:	2b03      	cmp	r3, #3
 800c7f0:	d10a      	bne.n	800c808 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	799b      	ldrb	r3, [r3, #6]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d003      	beq.n	800c802 <USBH_ParseEPDesc+0x1b0>
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	889b      	ldrh	r3, [r3, #4]
 800c7fe:	2b08      	cmp	r3, #8
 800c800:	d909      	bls.n	800c816 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c802:	2303      	movs	r3, #3
 800c804:	75fb      	strb	r3, [r7, #23]
 800c806:	e006      	b.n	800c816 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c808:	2303      	movs	r3, #3
 800c80a:	75fb      	strb	r3, [r7, #23]
 800c80c:	e003      	b.n	800c816 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c80e:	2303      	movs	r3, #3
 800c810:	75fb      	strb	r3, [r7, #23]
 800c812:	e000      	b.n	800c816 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c814:	bf00      	nop
  }

  return status;
 800c816:	7dfb      	ldrb	r3, [r7, #23]
}
 800c818:	4618      	mov	r0, r3
 800c81a:	371c      	adds	r7, #28
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr

0800c824 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c824:	b480      	push	{r7}
 800c826:	b087      	sub	sp, #28
 800c828:	af00      	add	r7, sp, #0
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	4613      	mov	r3, r2
 800c830:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	3301      	adds	r3, #1
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	2b03      	cmp	r3, #3
 800c83a:	d120      	bne.n	800c87e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	1e9a      	subs	r2, r3, #2
 800c842:	88fb      	ldrh	r3, [r7, #6]
 800c844:	4293      	cmp	r3, r2
 800c846:	bf28      	it	cs
 800c848:	4613      	movcs	r3, r2
 800c84a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	3302      	adds	r3, #2
 800c850:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c852:	2300      	movs	r3, #0
 800c854:	82fb      	strh	r3, [r7, #22]
 800c856:	e00b      	b.n	800c870 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c858:	8afb      	ldrh	r3, [r7, #22]
 800c85a:	68fa      	ldr	r2, [r7, #12]
 800c85c:	4413      	add	r3, r2
 800c85e:	781a      	ldrb	r2, [r3, #0]
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	3301      	adds	r3, #1
 800c868:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c86a:	8afb      	ldrh	r3, [r7, #22]
 800c86c:	3302      	adds	r3, #2
 800c86e:	82fb      	strh	r3, [r7, #22]
 800c870:	8afa      	ldrh	r2, [r7, #22]
 800c872:	8abb      	ldrh	r3, [r7, #20]
 800c874:	429a      	cmp	r2, r3
 800c876:	d3ef      	bcc.n	800c858 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	2200      	movs	r2, #0
 800c87c:	701a      	strb	r2, [r3, #0]
  }
}
 800c87e:	bf00      	nop
 800c880:	371c      	adds	r7, #28
 800c882:	46bd      	mov	sp, r7
 800c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c888:	4770      	bx	lr

0800c88a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c88a:	b480      	push	{r7}
 800c88c:	b085      	sub	sp, #20
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
 800c892:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	881a      	ldrh	r2, [r3, #0]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	4413      	add	r3, r2
 800c8a0:	b29a      	uxth	r2, r3
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	4413      	add	r3, r2
 800c8b0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c8b2:	68fb      	ldr	r3, [r7, #12]
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3714      	adds	r7, #20
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8be:	4770      	bx	lr

0800c8c0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b086      	sub	sp, #24
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	4613      	mov	r3, r2
 800c8cc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	789b      	ldrb	r3, [r3, #2]
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d002      	beq.n	800c8e0 <USBH_CtlReq+0x20>
 800c8da:	2b02      	cmp	r3, #2
 800c8dc:	d00f      	beq.n	800c8fe <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c8de:	e027      	b.n	800c930 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	68ba      	ldr	r2, [r7, #8]
 800c8e4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	88fa      	ldrh	r2, [r7, #6]
 800c8ea:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	2202      	movs	r2, #2
 800c8f6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	75fb      	strb	r3, [r7, #23]
      break;
 800c8fc:	e018      	b.n	800c930 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	f000 f81c 	bl	800c93c <USBH_HandleControl>
 800c904:	4603      	mov	r3, r0
 800c906:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c908:	7dfb      	ldrb	r3, [r7, #23]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d002      	beq.n	800c914 <USBH_CtlReq+0x54>
 800c90e:	7dfb      	ldrb	r3, [r7, #23]
 800c910:	2b03      	cmp	r3, #3
 800c912:	d106      	bne.n	800c922 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2201      	movs	r2, #1
 800c918:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2200      	movs	r2, #0
 800c91e:	761a      	strb	r2, [r3, #24]
      break;
 800c920:	e005      	b.n	800c92e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c922:	7dfb      	ldrb	r3, [r7, #23]
 800c924:	2b02      	cmp	r3, #2
 800c926:	d102      	bne.n	800c92e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2201      	movs	r2, #1
 800c92c:	709a      	strb	r2, [r3, #2]
      break;
 800c92e:	bf00      	nop
  }
  return status;
 800c930:	7dfb      	ldrb	r3, [r7, #23]
}
 800c932:	4618      	mov	r0, r3
 800c934:	3718      	adds	r7, #24
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
	...

0800c93c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b086      	sub	sp, #24
 800c940:	af02      	add	r7, sp, #8
 800c942:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c944:	2301      	movs	r3, #1
 800c946:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c948:	2300      	movs	r3, #0
 800c94a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	7e1b      	ldrb	r3, [r3, #24]
 800c950:	3b01      	subs	r3, #1
 800c952:	2b0a      	cmp	r3, #10
 800c954:	f200 8156 	bhi.w	800cc04 <USBH_HandleControl+0x2c8>
 800c958:	a201      	add	r2, pc, #4	; (adr r2, 800c960 <USBH_HandleControl+0x24>)
 800c95a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c95e:	bf00      	nop
 800c960:	0800c98d 	.word	0x0800c98d
 800c964:	0800c9a7 	.word	0x0800c9a7
 800c968:	0800ca11 	.word	0x0800ca11
 800c96c:	0800ca37 	.word	0x0800ca37
 800c970:	0800ca6f 	.word	0x0800ca6f
 800c974:	0800ca99 	.word	0x0800ca99
 800c978:	0800caeb 	.word	0x0800caeb
 800c97c:	0800cb0d 	.word	0x0800cb0d
 800c980:	0800cb49 	.word	0x0800cb49
 800c984:	0800cb6f 	.word	0x0800cb6f
 800c988:	0800cbad 	.word	0x0800cbad
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f103 0110 	add.w	r1, r3, #16
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	795b      	ldrb	r3, [r3, #5]
 800c996:	461a      	mov	r2, r3
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f000 f943 	bl	800cc24 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2202      	movs	r2, #2
 800c9a2:	761a      	strb	r2, [r3, #24]
      break;
 800c9a4:	e139      	b.n	800cc1a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	795b      	ldrb	r3, [r3, #5]
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 fd29 	bl	800d404 <USBH_LL_GetURBState>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c9b6:	7bbb      	ldrb	r3, [r7, #14]
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	d11e      	bne.n	800c9fa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	7c1b      	ldrb	r3, [r3, #16]
 800c9c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c9c4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	8adb      	ldrh	r3, [r3, #22]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d00a      	beq.n	800c9e4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c9ce:	7b7b      	ldrb	r3, [r7, #13]
 800c9d0:	2b80      	cmp	r3, #128	; 0x80
 800c9d2:	d103      	bne.n	800c9dc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2203      	movs	r2, #3
 800c9d8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c9da:	e115      	b.n	800cc08 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2205      	movs	r2, #5
 800c9e0:	761a      	strb	r2, [r3, #24]
      break;
 800c9e2:	e111      	b.n	800cc08 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c9e4:	7b7b      	ldrb	r3, [r7, #13]
 800c9e6:	2b80      	cmp	r3, #128	; 0x80
 800c9e8:	d103      	bne.n	800c9f2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2209      	movs	r2, #9
 800c9ee:	761a      	strb	r2, [r3, #24]
      break;
 800c9f0:	e10a      	b.n	800cc08 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2207      	movs	r2, #7
 800c9f6:	761a      	strb	r2, [r3, #24]
      break;
 800c9f8:	e106      	b.n	800cc08 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c9fa:	7bbb      	ldrb	r3, [r7, #14]
 800c9fc:	2b04      	cmp	r3, #4
 800c9fe:	d003      	beq.n	800ca08 <USBH_HandleControl+0xcc>
 800ca00:	7bbb      	ldrb	r3, [r7, #14]
 800ca02:	2b02      	cmp	r3, #2
 800ca04:	f040 8100 	bne.w	800cc08 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	220b      	movs	r2, #11
 800ca0c:	761a      	strb	r2, [r3, #24]
      break;
 800ca0e:	e0fb      	b.n	800cc08 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ca16:	b29a      	uxth	r2, r3
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6899      	ldr	r1, [r3, #8]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	899a      	ldrh	r2, [r3, #12]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	791b      	ldrb	r3, [r3, #4]
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 f93a 	bl	800cca2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2204      	movs	r2, #4
 800ca32:	761a      	strb	r2, [r3, #24]
      break;
 800ca34:	e0f1      	b.n	800cc1a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	791b      	ldrb	r3, [r3, #4]
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f000 fce1 	bl	800d404 <USBH_LL_GetURBState>
 800ca42:	4603      	mov	r3, r0
 800ca44:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ca46:	7bbb      	ldrb	r3, [r7, #14]
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d102      	bne.n	800ca52 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2209      	movs	r2, #9
 800ca50:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ca52:	7bbb      	ldrb	r3, [r7, #14]
 800ca54:	2b05      	cmp	r3, #5
 800ca56:	d102      	bne.n	800ca5e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ca58:	2303      	movs	r3, #3
 800ca5a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ca5c:	e0d6      	b.n	800cc0c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ca5e:	7bbb      	ldrb	r3, [r7, #14]
 800ca60:	2b04      	cmp	r3, #4
 800ca62:	f040 80d3 	bne.w	800cc0c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	220b      	movs	r2, #11
 800ca6a:	761a      	strb	r2, [r3, #24]
      break;
 800ca6c:	e0ce      	b.n	800cc0c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6899      	ldr	r1, [r3, #8]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	899a      	ldrh	r2, [r3, #12]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	795b      	ldrb	r3, [r3, #5]
 800ca7a:	2001      	movs	r0, #1
 800ca7c:	9000      	str	r0, [sp, #0]
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 f8ea 	bl	800cc58 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ca8a:	b29a      	uxth	r2, r3
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2206      	movs	r2, #6
 800ca94:	761a      	strb	r2, [r3, #24]
      break;
 800ca96:	e0c0      	b.n	800cc1a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	795b      	ldrb	r3, [r3, #5]
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f000 fcb0 	bl	800d404 <USBH_LL_GetURBState>
 800caa4:	4603      	mov	r3, r0
 800caa6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800caa8:	7bbb      	ldrb	r3, [r7, #14]
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d103      	bne.n	800cab6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2207      	movs	r2, #7
 800cab2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cab4:	e0ac      	b.n	800cc10 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800cab6:	7bbb      	ldrb	r3, [r7, #14]
 800cab8:	2b05      	cmp	r3, #5
 800caba:	d105      	bne.n	800cac8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	220c      	movs	r2, #12
 800cac0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800cac2:	2303      	movs	r3, #3
 800cac4:	73fb      	strb	r3, [r7, #15]
      break;
 800cac6:	e0a3      	b.n	800cc10 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cac8:	7bbb      	ldrb	r3, [r7, #14]
 800caca:	2b02      	cmp	r3, #2
 800cacc:	d103      	bne.n	800cad6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2205      	movs	r2, #5
 800cad2:	761a      	strb	r2, [r3, #24]
      break;
 800cad4:	e09c      	b.n	800cc10 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800cad6:	7bbb      	ldrb	r3, [r7, #14]
 800cad8:	2b04      	cmp	r3, #4
 800cada:	f040 8099 	bne.w	800cc10 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	220b      	movs	r2, #11
 800cae2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800cae4:	2302      	movs	r3, #2
 800cae6:	73fb      	strb	r3, [r7, #15]
      break;
 800cae8:	e092      	b.n	800cc10 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	791b      	ldrb	r3, [r3, #4]
 800caee:	2200      	movs	r2, #0
 800caf0:	2100      	movs	r1, #0
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f000 f8d5 	bl	800cca2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cafe:	b29a      	uxth	r2, r3
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2208      	movs	r2, #8
 800cb08:	761a      	strb	r2, [r3, #24]

      break;
 800cb0a:	e086      	b.n	800cc1a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	791b      	ldrb	r3, [r3, #4]
 800cb10:	4619      	mov	r1, r3
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 fc76 	bl	800d404 <USBH_LL_GetURBState>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cb1c:	7bbb      	ldrb	r3, [r7, #14]
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d105      	bne.n	800cb2e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	220d      	movs	r2, #13
 800cb26:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cb2c:	e072      	b.n	800cc14 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800cb2e:	7bbb      	ldrb	r3, [r7, #14]
 800cb30:	2b04      	cmp	r3, #4
 800cb32:	d103      	bne.n	800cb3c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	220b      	movs	r2, #11
 800cb38:	761a      	strb	r2, [r3, #24]
      break;
 800cb3a:	e06b      	b.n	800cc14 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800cb3c:	7bbb      	ldrb	r3, [r7, #14]
 800cb3e:	2b05      	cmp	r3, #5
 800cb40:	d168      	bne.n	800cc14 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800cb42:	2303      	movs	r3, #3
 800cb44:	73fb      	strb	r3, [r7, #15]
      break;
 800cb46:	e065      	b.n	800cc14 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	795b      	ldrb	r3, [r3, #5]
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	9200      	str	r2, [sp, #0]
 800cb50:	2200      	movs	r2, #0
 800cb52:	2100      	movs	r1, #0
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f000 f87f 	bl	800cc58 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cb60:	b29a      	uxth	r2, r3
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	220a      	movs	r2, #10
 800cb6a:	761a      	strb	r2, [r3, #24]
      break;
 800cb6c:	e055      	b.n	800cc1a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	795b      	ldrb	r3, [r3, #5]
 800cb72:	4619      	mov	r1, r3
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 fc45 	bl	800d404 <USBH_LL_GetURBState>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800cb7e:	7bbb      	ldrb	r3, [r7, #14]
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d105      	bne.n	800cb90 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800cb84:	2300      	movs	r3, #0
 800cb86:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	220d      	movs	r2, #13
 800cb8c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cb8e:	e043      	b.n	800cc18 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cb90:	7bbb      	ldrb	r3, [r7, #14]
 800cb92:	2b02      	cmp	r3, #2
 800cb94:	d103      	bne.n	800cb9e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2209      	movs	r2, #9
 800cb9a:	761a      	strb	r2, [r3, #24]
      break;
 800cb9c:	e03c      	b.n	800cc18 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800cb9e:	7bbb      	ldrb	r3, [r7, #14]
 800cba0:	2b04      	cmp	r3, #4
 800cba2:	d139      	bne.n	800cc18 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	220b      	movs	r2, #11
 800cba8:	761a      	strb	r2, [r3, #24]
      break;
 800cbaa:	e035      	b.n	800cc18 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	7e5b      	ldrb	r3, [r3, #25]
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	b2da      	uxtb	r2, r3
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	765a      	strb	r2, [r3, #25]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	7e5b      	ldrb	r3, [r3, #25]
 800cbbc:	2b02      	cmp	r3, #2
 800cbbe:	d806      	bhi.n	800cbce <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2201      	movs	r2, #1
 800cbca:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800cbcc:	e025      	b.n	800cc1a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cbd4:	2106      	movs	r1, #6
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	795b      	ldrb	r3, [r3, #5]
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f000 f90c 	bl	800ce04 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	791b      	ldrb	r3, [r3, #4]
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 f906 	bl	800ce04 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800cbfe:	2302      	movs	r3, #2
 800cc00:	73fb      	strb	r3, [r7, #15]
      break;
 800cc02:	e00a      	b.n	800cc1a <USBH_HandleControl+0x2de>

    default:
      break;
 800cc04:	bf00      	nop
 800cc06:	e008      	b.n	800cc1a <USBH_HandleControl+0x2de>
      break;
 800cc08:	bf00      	nop
 800cc0a:	e006      	b.n	800cc1a <USBH_HandleControl+0x2de>
      break;
 800cc0c:	bf00      	nop
 800cc0e:	e004      	b.n	800cc1a <USBH_HandleControl+0x2de>
      break;
 800cc10:	bf00      	nop
 800cc12:	e002      	b.n	800cc1a <USBH_HandleControl+0x2de>
      break;
 800cc14:	bf00      	nop
 800cc16:	e000      	b.n	800cc1a <USBH_HandleControl+0x2de>
      break;
 800cc18:	bf00      	nop
  }

  return status;
 800cc1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3710      	adds	r7, #16
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b088      	sub	sp, #32
 800cc28:	af04      	add	r7, sp, #16
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	60b9      	str	r1, [r7, #8]
 800cc2e:	4613      	mov	r3, r2
 800cc30:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cc32:	79f9      	ldrb	r1, [r7, #7]
 800cc34:	2300      	movs	r3, #0
 800cc36:	9303      	str	r3, [sp, #12]
 800cc38:	2308      	movs	r3, #8
 800cc3a:	9302      	str	r3, [sp, #8]
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	9301      	str	r3, [sp, #4]
 800cc40:	2300      	movs	r3, #0
 800cc42:	9300      	str	r3, [sp, #0]
 800cc44:	2300      	movs	r3, #0
 800cc46:	2200      	movs	r2, #0
 800cc48:	68f8      	ldr	r0, [r7, #12]
 800cc4a:	f000 fbaa 	bl	800d3a2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800cc4e:	2300      	movs	r3, #0
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3710      	adds	r7, #16
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b088      	sub	sp, #32
 800cc5c:	af04      	add	r7, sp, #16
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	60b9      	str	r1, [r7, #8]
 800cc62:	4611      	mov	r1, r2
 800cc64:	461a      	mov	r2, r3
 800cc66:	460b      	mov	r3, r1
 800cc68:	80fb      	strh	r3, [r7, #6]
 800cc6a:	4613      	mov	r3, r2
 800cc6c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d001      	beq.n	800cc7c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cc7c:	7979      	ldrb	r1, [r7, #5]
 800cc7e:	7e3b      	ldrb	r3, [r7, #24]
 800cc80:	9303      	str	r3, [sp, #12]
 800cc82:	88fb      	ldrh	r3, [r7, #6]
 800cc84:	9302      	str	r3, [sp, #8]
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	9301      	str	r3, [sp, #4]
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	9300      	str	r3, [sp, #0]
 800cc8e:	2300      	movs	r3, #0
 800cc90:	2200      	movs	r2, #0
 800cc92:	68f8      	ldr	r0, [r7, #12]
 800cc94:	f000 fb85 	bl	800d3a2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800cc98:	2300      	movs	r3, #0
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3710      	adds	r7, #16
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}

0800cca2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800cca2:	b580      	push	{r7, lr}
 800cca4:	b088      	sub	sp, #32
 800cca6:	af04      	add	r7, sp, #16
 800cca8:	60f8      	str	r0, [r7, #12]
 800ccaa:	60b9      	str	r1, [r7, #8]
 800ccac:	4611      	mov	r1, r2
 800ccae:	461a      	mov	r2, r3
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	80fb      	strh	r3, [r7, #6]
 800ccb4:	4613      	mov	r3, r2
 800ccb6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ccb8:	7979      	ldrb	r1, [r7, #5]
 800ccba:	2300      	movs	r3, #0
 800ccbc:	9303      	str	r3, [sp, #12]
 800ccbe:	88fb      	ldrh	r3, [r7, #6]
 800ccc0:	9302      	str	r3, [sp, #8]
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	9301      	str	r3, [sp, #4]
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	9300      	str	r3, [sp, #0]
 800ccca:	2300      	movs	r3, #0
 800cccc:	2201      	movs	r2, #1
 800ccce:	68f8      	ldr	r0, [r7, #12]
 800ccd0:	f000 fb67 	bl	800d3a2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ccd4:	2300      	movs	r3, #0

}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3710      	adds	r7, #16
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}

0800ccde <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b088      	sub	sp, #32
 800cce2:	af04      	add	r7, sp, #16
 800cce4:	60f8      	str	r0, [r7, #12]
 800cce6:	60b9      	str	r1, [r7, #8]
 800cce8:	4611      	mov	r1, r2
 800ccea:	461a      	mov	r2, r3
 800ccec:	460b      	mov	r3, r1
 800ccee:	80fb      	strh	r3, [r7, #6]
 800ccf0:	4613      	mov	r3, r2
 800ccf2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d001      	beq.n	800cd02 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cd02:	7979      	ldrb	r1, [r7, #5]
 800cd04:	7e3b      	ldrb	r3, [r7, #24]
 800cd06:	9303      	str	r3, [sp, #12]
 800cd08:	88fb      	ldrh	r3, [r7, #6]
 800cd0a:	9302      	str	r3, [sp, #8]
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	9301      	str	r3, [sp, #4]
 800cd10:	2301      	movs	r3, #1
 800cd12:	9300      	str	r3, [sp, #0]
 800cd14:	2302      	movs	r3, #2
 800cd16:	2200      	movs	r2, #0
 800cd18:	68f8      	ldr	r0, [r7, #12]
 800cd1a:	f000 fb42 	bl	800d3a2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800cd1e:	2300      	movs	r3, #0
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3710      	adds	r7, #16
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b088      	sub	sp, #32
 800cd2c:	af04      	add	r7, sp, #16
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	4611      	mov	r1, r2
 800cd34:	461a      	mov	r2, r3
 800cd36:	460b      	mov	r3, r1
 800cd38:	80fb      	strh	r3, [r7, #6]
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cd3e:	7979      	ldrb	r1, [r7, #5]
 800cd40:	2300      	movs	r3, #0
 800cd42:	9303      	str	r3, [sp, #12]
 800cd44:	88fb      	ldrh	r3, [r7, #6]
 800cd46:	9302      	str	r3, [sp, #8]
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	9301      	str	r3, [sp, #4]
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	9300      	str	r3, [sp, #0]
 800cd50:	2302      	movs	r3, #2
 800cd52:	2201      	movs	r2, #1
 800cd54:	68f8      	ldr	r0, [r7, #12]
 800cd56:	f000 fb24 	bl	800d3a2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cd5a:	2300      	movs	r3, #0
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3710      	adds	r7, #16
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b086      	sub	sp, #24
 800cd68:	af04      	add	r7, sp, #16
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	4608      	mov	r0, r1
 800cd6e:	4611      	mov	r1, r2
 800cd70:	461a      	mov	r2, r3
 800cd72:	4603      	mov	r3, r0
 800cd74:	70fb      	strb	r3, [r7, #3]
 800cd76:	460b      	mov	r3, r1
 800cd78:	70bb      	strb	r3, [r7, #2]
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800cd7e:	7878      	ldrb	r0, [r7, #1]
 800cd80:	78ba      	ldrb	r2, [r7, #2]
 800cd82:	78f9      	ldrb	r1, [r7, #3]
 800cd84:	8b3b      	ldrh	r3, [r7, #24]
 800cd86:	9302      	str	r3, [sp, #8]
 800cd88:	7d3b      	ldrb	r3, [r7, #20]
 800cd8a:	9301      	str	r3, [sp, #4]
 800cd8c:	7c3b      	ldrb	r3, [r7, #16]
 800cd8e:	9300      	str	r3, [sp, #0]
 800cd90:	4603      	mov	r3, r0
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f000 fab7 	bl	800d306 <USBH_LL_OpenPipe>

  return USBH_OK;
 800cd98:	2300      	movs	r3, #0
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3708      	adds	r7, #8
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}

0800cda2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800cda2:	b580      	push	{r7, lr}
 800cda4:	b082      	sub	sp, #8
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
 800cdaa:	460b      	mov	r3, r1
 800cdac:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800cdae:	78fb      	ldrb	r3, [r7, #3]
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f000 fad6 	bl	800d364 <USBH_LL_ClosePipe>

  return USBH_OK;
 800cdb8:	2300      	movs	r3, #0
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3708      	adds	r7, #8
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}

0800cdc2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800cdc2:	b580      	push	{r7, lr}
 800cdc4:	b084      	sub	sp, #16
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
 800cdca:	460b      	mov	r3, r1
 800cdcc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 f836 	bl	800ce40 <USBH_GetFreePipe>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800cdd8:	89fb      	ldrh	r3, [r7, #14]
 800cdda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d00a      	beq.n	800cdf8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800cde2:	78fa      	ldrb	r2, [r7, #3]
 800cde4:	89fb      	ldrh	r3, [r7, #14]
 800cde6:	f003 030f 	and.w	r3, r3, #15
 800cdea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cdee:	6879      	ldr	r1, [r7, #4]
 800cdf0:	33e0      	adds	r3, #224	; 0xe0
 800cdf2:	009b      	lsls	r3, r3, #2
 800cdf4:	440b      	add	r3, r1
 800cdf6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800cdf8:	89fb      	ldrh	r3, [r7, #14]
 800cdfa:	b2db      	uxtb	r3, r3
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3710      	adds	r7, #16
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}

0800ce04 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b083      	sub	sp, #12
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	460b      	mov	r3, r1
 800ce0e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ce10:	78fb      	ldrb	r3, [r7, #3]
 800ce12:	2b0f      	cmp	r3, #15
 800ce14:	d80d      	bhi.n	800ce32 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ce16:	78fb      	ldrb	r3, [r7, #3]
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	33e0      	adds	r3, #224	; 0xe0
 800ce1c:	009b      	lsls	r3, r3, #2
 800ce1e:	4413      	add	r3, r2
 800ce20:	685a      	ldr	r2, [r3, #4]
 800ce22:	78fb      	ldrb	r3, [r7, #3]
 800ce24:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ce28:	6879      	ldr	r1, [r7, #4]
 800ce2a:	33e0      	adds	r3, #224	; 0xe0
 800ce2c:	009b      	lsls	r3, r3, #2
 800ce2e:	440b      	add	r3, r1
 800ce30:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ce32:	2300      	movs	r3, #0
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	370c      	adds	r7, #12
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr

0800ce40 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b085      	sub	sp, #20
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	73fb      	strb	r3, [r7, #15]
 800ce50:	e00f      	b.n	800ce72 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ce52:	7bfb      	ldrb	r3, [r7, #15]
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	33e0      	adds	r3, #224	; 0xe0
 800ce58:	009b      	lsls	r3, r3, #2
 800ce5a:	4413      	add	r3, r2
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d102      	bne.n	800ce6c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ce66:	7bfb      	ldrb	r3, [r7, #15]
 800ce68:	b29b      	uxth	r3, r3
 800ce6a:	e007      	b.n	800ce7c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ce6c:	7bfb      	ldrb	r3, [r7, #15]
 800ce6e:	3301      	adds	r3, #1
 800ce70:	73fb      	strb	r3, [r7, #15]
 800ce72:	7bfb      	ldrb	r3, [r7, #15]
 800ce74:	2b0f      	cmp	r3, #15
 800ce76:	d9ec      	bls.n	800ce52 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ce78:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3714      	adds	r7, #20
 800ce80:	46bd      	mov	sp, r7
 800ce82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce86:	4770      	bx	lr

0800ce88 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b087      	sub	sp, #28
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	60f8      	str	r0, [r7, #12]
 800ce90:	60b9      	str	r1, [r7, #8]
 800ce92:	4613      	mov	r3, r2
 800ce94:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ce96:	2301      	movs	r3, #1
 800ce98:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ce9e:	4b1f      	ldr	r3, [pc, #124]	; (800cf1c <FATFS_LinkDriverEx+0x94>)
 800cea0:	7a5b      	ldrb	r3, [r3, #9]
 800cea2:	b2db      	uxtb	r3, r3
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d131      	bne.n	800cf0c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cea8:	4b1c      	ldr	r3, [pc, #112]	; (800cf1c <FATFS_LinkDriverEx+0x94>)
 800ceaa:	7a5b      	ldrb	r3, [r3, #9]
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	461a      	mov	r2, r3
 800ceb0:	4b1a      	ldr	r3, [pc, #104]	; (800cf1c <FATFS_LinkDriverEx+0x94>)
 800ceb2:	2100      	movs	r1, #0
 800ceb4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ceb6:	4b19      	ldr	r3, [pc, #100]	; (800cf1c <FATFS_LinkDriverEx+0x94>)
 800ceb8:	7a5b      	ldrb	r3, [r3, #9]
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	4a17      	ldr	r2, [pc, #92]	; (800cf1c <FATFS_LinkDriverEx+0x94>)
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	4413      	add	r3, r2
 800cec2:	68fa      	ldr	r2, [r7, #12]
 800cec4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cec6:	4b15      	ldr	r3, [pc, #84]	; (800cf1c <FATFS_LinkDriverEx+0x94>)
 800cec8:	7a5b      	ldrb	r3, [r3, #9]
 800ceca:	b2db      	uxtb	r3, r3
 800cecc:	461a      	mov	r2, r3
 800cece:	4b13      	ldr	r3, [pc, #76]	; (800cf1c <FATFS_LinkDriverEx+0x94>)
 800ced0:	4413      	add	r3, r2
 800ced2:	79fa      	ldrb	r2, [r7, #7]
 800ced4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ced6:	4b11      	ldr	r3, [pc, #68]	; (800cf1c <FATFS_LinkDriverEx+0x94>)
 800ced8:	7a5b      	ldrb	r3, [r3, #9]
 800ceda:	b2db      	uxtb	r3, r3
 800cedc:	1c5a      	adds	r2, r3, #1
 800cede:	b2d1      	uxtb	r1, r2
 800cee0:	4a0e      	ldr	r2, [pc, #56]	; (800cf1c <FATFS_LinkDriverEx+0x94>)
 800cee2:	7251      	strb	r1, [r2, #9]
 800cee4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cee6:	7dbb      	ldrb	r3, [r7, #22]
 800cee8:	3330      	adds	r3, #48	; 0x30
 800ceea:	b2da      	uxtb	r2, r3
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	3301      	adds	r3, #1
 800cef4:	223a      	movs	r2, #58	; 0x3a
 800cef6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	3302      	adds	r3, #2
 800cefc:	222f      	movs	r2, #47	; 0x2f
 800cefe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	3303      	adds	r3, #3
 800cf04:	2200      	movs	r2, #0
 800cf06:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cf0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	371c      	adds	r7, #28
 800cf12:	46bd      	mov	sp, r7
 800cf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf18:	4770      	bx	lr
 800cf1a:	bf00      	nop
 800cf1c:	20000910 	.word	0x20000910

0800cf20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b082      	sub	sp, #8
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	6839      	ldr	r1, [r7, #0]
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f7ff ffaa 	bl	800ce88 <FATFS_LinkDriverEx>
 800cf34:	4603      	mov	r3, r0
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3708      	adds	r7, #8
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
	...

0800cf40 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800cf44:	2201      	movs	r2, #1
 800cf46:	490e      	ldr	r1, [pc, #56]	; (800cf80 <MX_USB_HOST_Init+0x40>)
 800cf48:	480e      	ldr	r0, [pc, #56]	; (800cf84 <MX_USB_HOST_Init+0x44>)
 800cf4a:	f7fe faa9 	bl	800b4a0 <USBH_Init>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d001      	beq.n	800cf58 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800cf54:	f7f3 fff0 	bl	8000f38 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800cf58:	490b      	ldr	r1, [pc, #44]	; (800cf88 <MX_USB_HOST_Init+0x48>)
 800cf5a:	480a      	ldr	r0, [pc, #40]	; (800cf84 <MX_USB_HOST_Init+0x44>)
 800cf5c:	f7fe fb4d 	bl	800b5fa <USBH_RegisterClass>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d001      	beq.n	800cf6a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800cf66:	f7f3 ffe7 	bl	8000f38 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800cf6a:	4806      	ldr	r0, [pc, #24]	; (800cf84 <MX_USB_HOST_Init+0x44>)
 800cf6c:	f7fe fbd1 	bl	800b712 <USBH_Start>
 800cf70:	4603      	mov	r3, r0
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d001      	beq.n	800cf7a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800cf76:	f7f3 ffdf 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800cf7a:	bf00      	nop
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	0800cfa1 	.word	0x0800cfa1
 800cf84:	2000091c 	.word	0x2000091c
 800cf88:	2000000c 	.word	0x2000000c

0800cf8c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800cf90:	4802      	ldr	r0, [pc, #8]	; (800cf9c <MX_USB_HOST_Process+0x10>)
 800cf92:	f7fe fbcf 	bl	800b734 <USBH_Process>
}
 800cf96:	bf00      	nop
 800cf98:	bd80      	pop	{r7, pc}
 800cf9a:	bf00      	nop
 800cf9c:	2000091c 	.word	0x2000091c

0800cfa0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b083      	sub	sp, #12
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800cfac:	78fb      	ldrb	r3, [r7, #3]
 800cfae:	3b01      	subs	r3, #1
 800cfb0:	2b04      	cmp	r3, #4
 800cfb2:	d819      	bhi.n	800cfe8 <USBH_UserProcess+0x48>
 800cfb4:	a201      	add	r2, pc, #4	; (adr r2, 800cfbc <USBH_UserProcess+0x1c>)
 800cfb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfba:	bf00      	nop
 800cfbc:	0800cfe9 	.word	0x0800cfe9
 800cfc0:	0800cfd9 	.word	0x0800cfd9
 800cfc4:	0800cfe9 	.word	0x0800cfe9
 800cfc8:	0800cfe1 	.word	0x0800cfe1
 800cfcc:	0800cfd1 	.word	0x0800cfd1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800cfd0:	4b09      	ldr	r3, [pc, #36]	; (800cff8 <USBH_UserProcess+0x58>)
 800cfd2:	2203      	movs	r2, #3
 800cfd4:	701a      	strb	r2, [r3, #0]
  break;
 800cfd6:	e008      	b.n	800cfea <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800cfd8:	4b07      	ldr	r3, [pc, #28]	; (800cff8 <USBH_UserProcess+0x58>)
 800cfda:	2202      	movs	r2, #2
 800cfdc:	701a      	strb	r2, [r3, #0]
  break;
 800cfde:	e004      	b.n	800cfea <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800cfe0:	4b05      	ldr	r3, [pc, #20]	; (800cff8 <USBH_UserProcess+0x58>)
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	701a      	strb	r2, [r3, #0]
  break;
 800cfe6:	e000      	b.n	800cfea <USBH_UserProcess+0x4a>

  default:
  break;
 800cfe8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800cfea:	bf00      	nop
 800cfec:	370c      	adds	r7, #12
 800cfee:	46bd      	mov	sp, r7
 800cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff4:	4770      	bx	lr
 800cff6:	bf00      	nop
 800cff8:	20000cf4 	.word	0x20000cf4

0800cffc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b0a0      	sub	sp, #128	; 0x80
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d004:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800d008:	2200      	movs	r2, #0
 800d00a:	601a      	str	r2, [r3, #0]
 800d00c:	605a      	str	r2, [r3, #4]
 800d00e:	609a      	str	r2, [r3, #8]
 800d010:	60da      	str	r2, [r3, #12]
 800d012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d014:	f107 0310 	add.w	r3, r7, #16
 800d018:	225c      	movs	r2, #92	; 0x5c
 800d01a:	2100      	movs	r1, #0
 800d01c:	4618      	mov	r0, r3
 800d01e:	f000 ff8d 	bl	800df3c <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d02a:	d149      	bne.n	800d0c0 <HAL_HCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d02c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d030:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800d032:	2300      	movs	r3, #0
 800d034:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d036:	f107 0310 	add.w	r3, r7, #16
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7f8 fa86 	bl	800554c <HAL_RCCEx_PeriphCLKConfig>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d001      	beq.n	800d04a <HAL_HCD_MspInit+0x4e>
    {
      Error_Handler();
 800d046:	f7f3 ff77 	bl	8000f38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d04a:	2300      	movs	r3, #0
 800d04c:	60fb      	str	r3, [r7, #12]
 800d04e:	4b1e      	ldr	r3, [pc, #120]	; (800d0c8 <HAL_HCD_MspInit+0xcc>)
 800d050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d052:	4a1d      	ldr	r2, [pc, #116]	; (800d0c8 <HAL_HCD_MspInit+0xcc>)
 800d054:	f043 0301 	orr.w	r3, r3, #1
 800d058:	6313      	str	r3, [r2, #48]	; 0x30
 800d05a:	4b1b      	ldr	r3, [pc, #108]	; (800d0c8 <HAL_HCD_MspInit+0xcc>)
 800d05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d05e:	f003 0301 	and.w	r3, r3, #1
 800d062:	60fb      	str	r3, [r7, #12]
 800d064:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d066:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d06a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d06c:	2302      	movs	r3, #2
 800d06e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d070:	2300      	movs	r3, #0
 800d072:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d074:	2303      	movs	r3, #3
 800d076:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d078:	230a      	movs	r3, #10
 800d07a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d07c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800d080:	4619      	mov	r1, r3
 800d082:	4812      	ldr	r0, [pc, #72]	; (800d0cc <HAL_HCD_MspInit+0xd0>)
 800d084:	f7f5 fbea 	bl	800285c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d088:	4b0f      	ldr	r3, [pc, #60]	; (800d0c8 <HAL_HCD_MspInit+0xcc>)
 800d08a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d08c:	4a0e      	ldr	r2, [pc, #56]	; (800d0c8 <HAL_HCD_MspInit+0xcc>)
 800d08e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d092:	6353      	str	r3, [r2, #52]	; 0x34
 800d094:	2300      	movs	r3, #0
 800d096:	60bb      	str	r3, [r7, #8]
 800d098:	4b0b      	ldr	r3, [pc, #44]	; (800d0c8 <HAL_HCD_MspInit+0xcc>)
 800d09a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d09c:	4a0a      	ldr	r2, [pc, #40]	; (800d0c8 <HAL_HCD_MspInit+0xcc>)
 800d09e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d0a2:	6453      	str	r3, [r2, #68]	; 0x44
 800d0a4:	4b08      	ldr	r3, [pc, #32]	; (800d0c8 <HAL_HCD_MspInit+0xcc>)
 800d0a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0ac:	60bb      	str	r3, [r7, #8]
 800d0ae:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	2100      	movs	r1, #0
 800d0b4:	2043      	movs	r0, #67	; 0x43
 800d0b6:	f7f4 ffb6 	bl	8002026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d0ba:	2043      	movs	r0, #67	; 0x43
 800d0bc:	f7f4 ffcf 	bl	800205e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d0c0:	bf00      	nop
 800d0c2:	3780      	adds	r7, #128	; 0x80
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}
 800d0c8:	40023800 	.word	0x40023800
 800d0cc:	40020000 	.word	0x40020000

0800d0d0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7fe ff07 	bl	800bef2 <USBH_LL_IncTimer>
}
 800d0e4:	bf00      	nop
 800d0e6:	3708      	adds	r7, #8
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7fe ff3f 	bl	800bf7e <USBH_LL_Connect>
}
 800d100:	bf00      	nop
 800d102:	3708      	adds	r7, #8
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800d116:	4618      	mov	r0, r3
 800d118:	f7fe ff48 	bl	800bfac <USBH_LL_Disconnect>
}
 800d11c:	bf00      	nop
 800d11e:	3708      	adds	r7, #8
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}

0800d124 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d124:	b480      	push	{r7}
 800d126:	b083      	sub	sp, #12
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	460b      	mov	r3, r1
 800d12e:	70fb      	strb	r3, [r7, #3]
 800d130:	4613      	mov	r3, r2
 800d132:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d134:	bf00      	nop
 800d136:	370c      	adds	r7, #12
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr

0800d140 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800d14e:	4618      	mov	r0, r3
 800d150:	f7fe fef9 	bl	800bf46 <USBH_LL_PortEnabled>
}
 800d154:	bf00      	nop
 800d156:	3708      	adds	r7, #8
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b082      	sub	sp, #8
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7fe fef9 	bl	800bf62 <USBH_LL_PortDisabled>
}
 800d170:	bf00      	nop
 800d172:	3708      	adds	r7, #8
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}

0800d178 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d186:	2b01      	cmp	r3, #1
 800d188:	d12a      	bne.n	800d1e0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d18a:	4a18      	ldr	r2, [pc, #96]	; (800d1ec <USBH_LL_Init+0x74>)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	4a15      	ldr	r2, [pc, #84]	; (800d1ec <USBH_LL_Init+0x74>)
 800d196:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d19a:	4b14      	ldr	r3, [pc, #80]	; (800d1ec <USBH_LL_Init+0x74>)
 800d19c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d1a0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800d1a2:	4b12      	ldr	r3, [pc, #72]	; (800d1ec <USBH_LL_Init+0x74>)
 800d1a4:	220c      	movs	r2, #12
 800d1a6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_LOW;
 800d1a8:	4b10      	ldr	r3, [pc, #64]	; (800d1ec <USBH_LL_Init+0x74>)
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d1ae:	4b0f      	ldr	r3, [pc, #60]	; (800d1ec <USBH_LL_Init+0x74>)
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d1b4:	4b0d      	ldr	r3, [pc, #52]	; (800d1ec <USBH_LL_Init+0x74>)
 800d1b6:	2202      	movs	r2, #2
 800d1b8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d1ba:	4b0c      	ldr	r3, [pc, #48]	; (800d1ec <USBH_LL_Init+0x74>)
 800d1bc:	2200      	movs	r2, #0
 800d1be:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d1c0:	480a      	ldr	r0, [pc, #40]	; (800d1ec <USBH_LL_Init+0x74>)
 800d1c2:	f7f5 fd10 	bl	8002be6 <HAL_HCD_Init>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d001      	beq.n	800d1d0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d1cc:	f7f3 feb4 	bl	8000f38 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d1d0:	4806      	ldr	r0, [pc, #24]	; (800d1ec <USBH_LL_Init+0x74>)
 800d1d2:	f7f6 f971 	bl	80034b8 <HAL_HCD_GetCurrentFrame>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	4619      	mov	r1, r3
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f7fe fe7a 	bl	800bed4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d1e0:	2300      	movs	r3, #0
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3708      	adds	r7, #8
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	bf00      	nop
 800d1ec:	20000cf8 	.word	0x20000cf8

0800d1f0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d206:	4618      	mov	r0, r3
 800d208:	f7f6 f8de 	bl	80033c8 <HAL_HCD_Start>
 800d20c:	4603      	mov	r3, r0
 800d20e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d210:	7bfb      	ldrb	r3, [r7, #15]
 800d212:	4618      	mov	r0, r3
 800d214:	f000 f988 	bl	800d528 <USBH_Get_USB_Status>
 800d218:	4603      	mov	r3, r0
 800d21a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d21c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3710      	adds	r7, #16
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}

0800d226 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d226:	b580      	push	{r7, lr}
 800d228:	b084      	sub	sp, #16
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d22e:	2300      	movs	r3, #0
 800d230:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d232:	2300      	movs	r3, #0
 800d234:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d23c:	4618      	mov	r0, r3
 800d23e:	f7f6 f8e6 	bl	800340e <HAL_HCD_Stop>
 800d242:	4603      	mov	r3, r0
 800d244:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d246:	7bfb      	ldrb	r3, [r7, #15]
 800d248:	4618      	mov	r0, r3
 800d24a:	f000 f96d 	bl	800d528 <USBH_Get_USB_Status>
 800d24e:	4603      	mov	r3, r0
 800d250:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d252:	7bbb      	ldrb	r3, [r7, #14]
}
 800d254:	4618      	mov	r0, r3
 800d256:	3710      	adds	r7, #16
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b084      	sub	sp, #16
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d264:	2301      	movs	r3, #1
 800d266:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d26e:	4618      	mov	r0, r3
 800d270:	f7f6 f930 	bl	80034d4 <HAL_HCD_GetCurrentSpeed>
 800d274:	4603      	mov	r3, r0
 800d276:	2b02      	cmp	r3, #2
 800d278:	d00c      	beq.n	800d294 <USBH_LL_GetSpeed+0x38>
 800d27a:	2b02      	cmp	r3, #2
 800d27c:	d80d      	bhi.n	800d29a <USBH_LL_GetSpeed+0x3e>
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d002      	beq.n	800d288 <USBH_LL_GetSpeed+0x2c>
 800d282:	2b01      	cmp	r3, #1
 800d284:	d003      	beq.n	800d28e <USBH_LL_GetSpeed+0x32>
 800d286:	e008      	b.n	800d29a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d288:	2300      	movs	r3, #0
 800d28a:	73fb      	strb	r3, [r7, #15]
    break;
 800d28c:	e008      	b.n	800d2a0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d28e:	2301      	movs	r3, #1
 800d290:	73fb      	strb	r3, [r7, #15]
    break;
 800d292:	e005      	b.n	800d2a0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d294:	2302      	movs	r3, #2
 800d296:	73fb      	strb	r3, [r7, #15]
    break;
 800d298:	e002      	b.n	800d2a0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d29a:	2301      	movs	r3, #1
 800d29c:	73fb      	strb	r3, [r7, #15]
    break;
 800d29e:	bf00      	nop
  }
  return  speed;
 800d2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3710      	adds	r7, #16
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}

0800d2aa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d2aa:	b580      	push	{r7, lr}
 800d2ac:	b084      	sub	sp, #16
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7f6 f8c1 	bl	8003448 <HAL_HCD_ResetPort>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d2ca:	7bfb      	ldrb	r3, [r7, #15]
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f000 f92b 	bl	800d528 <USBH_Get_USB_Status>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3710      	adds	r7, #16
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}

0800d2e0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b082      	sub	sp, #8
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d2f2:	78fa      	ldrb	r2, [r7, #3]
 800d2f4:	4611      	mov	r1, r2
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7f6 f8c9 	bl	800348e <HAL_HCD_HC_GetXferCount>
 800d2fc:	4603      	mov	r3, r0
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3708      	adds	r7, #8
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d306:	b590      	push	{r4, r7, lr}
 800d308:	b089      	sub	sp, #36	; 0x24
 800d30a:	af04      	add	r7, sp, #16
 800d30c:	6078      	str	r0, [r7, #4]
 800d30e:	4608      	mov	r0, r1
 800d310:	4611      	mov	r1, r2
 800d312:	461a      	mov	r2, r3
 800d314:	4603      	mov	r3, r0
 800d316:	70fb      	strb	r3, [r7, #3]
 800d318:	460b      	mov	r3, r1
 800d31a:	70bb      	strb	r3, [r7, #2]
 800d31c:	4613      	mov	r3, r2
 800d31e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d320:	2300      	movs	r3, #0
 800d322:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d324:	2300      	movs	r3, #0
 800d326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d32e:	787c      	ldrb	r4, [r7, #1]
 800d330:	78ba      	ldrb	r2, [r7, #2]
 800d332:	78f9      	ldrb	r1, [r7, #3]
 800d334:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d336:	9302      	str	r3, [sp, #8]
 800d338:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d33c:	9301      	str	r3, [sp, #4]
 800d33e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d342:	9300      	str	r3, [sp, #0]
 800d344:	4623      	mov	r3, r4
 800d346:	f7f5 fcb5 	bl	8002cb4 <HAL_HCD_HC_Init>
 800d34a:	4603      	mov	r3, r0
 800d34c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d34e:	7bfb      	ldrb	r3, [r7, #15]
 800d350:	4618      	mov	r0, r3
 800d352:	f000 f8e9 	bl	800d528 <USBH_Get_USB_Status>
 800d356:	4603      	mov	r3, r0
 800d358:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d35a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3714      	adds	r7, #20
 800d360:	46bd      	mov	sp, r7
 800d362:	bd90      	pop	{r4, r7, pc}

0800d364 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b084      	sub	sp, #16
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	460b      	mov	r3, r1
 800d36e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d370:	2300      	movs	r3, #0
 800d372:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d374:	2300      	movs	r3, #0
 800d376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d37e:	78fa      	ldrb	r2, [r7, #3]
 800d380:	4611      	mov	r1, r2
 800d382:	4618      	mov	r0, r3
 800d384:	f7f5 fd4e 	bl	8002e24 <HAL_HCD_HC_Halt>
 800d388:	4603      	mov	r3, r0
 800d38a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d38c:	7bfb      	ldrb	r3, [r7, #15]
 800d38e:	4618      	mov	r0, r3
 800d390:	f000 f8ca 	bl	800d528 <USBH_Get_USB_Status>
 800d394:	4603      	mov	r3, r0
 800d396:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d398:	7bbb      	ldrb	r3, [r7, #14]
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3710      	adds	r7, #16
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}

0800d3a2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d3a2:	b590      	push	{r4, r7, lr}
 800d3a4:	b089      	sub	sp, #36	; 0x24
 800d3a6:	af04      	add	r7, sp, #16
 800d3a8:	6078      	str	r0, [r7, #4]
 800d3aa:	4608      	mov	r0, r1
 800d3ac:	4611      	mov	r1, r2
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	70fb      	strb	r3, [r7, #3]
 800d3b4:	460b      	mov	r3, r1
 800d3b6:	70bb      	strb	r3, [r7, #2]
 800d3b8:	4613      	mov	r3, r2
 800d3ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d3ca:	787c      	ldrb	r4, [r7, #1]
 800d3cc:	78ba      	ldrb	r2, [r7, #2]
 800d3ce:	78f9      	ldrb	r1, [r7, #3]
 800d3d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d3d4:	9303      	str	r3, [sp, #12]
 800d3d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d3d8:	9302      	str	r3, [sp, #8]
 800d3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3dc:	9301      	str	r3, [sp, #4]
 800d3de:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d3e2:	9300      	str	r3, [sp, #0]
 800d3e4:	4623      	mov	r3, r4
 800d3e6:	f7f5 fd41 	bl	8002e6c <HAL_HCD_HC_SubmitRequest>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d3ee:	7bfb      	ldrb	r3, [r7, #15]
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f000 f899 	bl	800d528 <USBH_Get_USB_Status>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3714      	adds	r7, #20
 800d400:	46bd      	mov	sp, r7
 800d402:	bd90      	pop	{r4, r7, pc}

0800d404 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b082      	sub	sp, #8
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	460b      	mov	r3, r1
 800d40e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d416:	78fa      	ldrb	r2, [r7, #3]
 800d418:	4611      	mov	r1, r2
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7f6 f822 	bl	8003464 <HAL_HCD_HC_GetURBState>
 800d420:	4603      	mov	r3, r0
}
 800d422:	4618      	mov	r0, r3
 800d424:	3708      	adds	r7, #8
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}

0800d42a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b082      	sub	sp, #8
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
 800d432:	460b      	mov	r3, r1
 800d434:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800d436:	20c8      	movs	r0, #200	; 0xc8
 800d438:	f7f4 fa84 	bl	8001944 <HAL_Delay>
  return USBH_OK;
 800d43c:	2300      	movs	r3, #0
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3708      	adds	r7, #8
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}

0800d446 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d446:	b480      	push	{r7}
 800d448:	b085      	sub	sp, #20
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	6078      	str	r0, [r7, #4]
 800d44e:	460b      	mov	r3, r1
 800d450:	70fb      	strb	r3, [r7, #3]
 800d452:	4613      	mov	r3, r2
 800d454:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d45c:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d45e:	78fa      	ldrb	r2, [r7, #3]
 800d460:	68f9      	ldr	r1, [r7, #12]
 800d462:	4613      	mov	r3, r2
 800d464:	011b      	lsls	r3, r3, #4
 800d466:	1a9b      	subs	r3, r3, r2
 800d468:	009b      	lsls	r3, r3, #2
 800d46a:	440b      	add	r3, r1
 800d46c:	3317      	adds	r3, #23
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d00a      	beq.n	800d48a <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d474:	78fa      	ldrb	r2, [r7, #3]
 800d476:	68f9      	ldr	r1, [r7, #12]
 800d478:	4613      	mov	r3, r2
 800d47a:	011b      	lsls	r3, r3, #4
 800d47c:	1a9b      	subs	r3, r3, r2
 800d47e:	009b      	lsls	r3, r3, #2
 800d480:	440b      	add	r3, r1
 800d482:	333c      	adds	r3, #60	; 0x3c
 800d484:	78ba      	ldrb	r2, [r7, #2]
 800d486:	701a      	strb	r2, [r3, #0]
 800d488:	e009      	b.n	800d49e <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d48a:	78fa      	ldrb	r2, [r7, #3]
 800d48c:	68f9      	ldr	r1, [r7, #12]
 800d48e:	4613      	mov	r3, r2
 800d490:	011b      	lsls	r3, r3, #4
 800d492:	1a9b      	subs	r3, r3, r2
 800d494:	009b      	lsls	r3, r3, #2
 800d496:	440b      	add	r3, r1
 800d498:	333d      	adds	r3, #61	; 0x3d
 800d49a:	78ba      	ldrb	r2, [r7, #2]
 800d49c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d49e:	2300      	movs	r3, #0
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3714      	adds	r7, #20
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr

0800d4ac <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b085      	sub	sp, #20
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	460b      	mov	r3, r1
 800d4b6:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d4c2:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800d4c4:	78fa      	ldrb	r2, [r7, #3]
 800d4c6:	68b9      	ldr	r1, [r7, #8]
 800d4c8:	4613      	mov	r3, r2
 800d4ca:	011b      	lsls	r3, r3, #4
 800d4cc:	1a9b      	subs	r3, r3, r2
 800d4ce:	009b      	lsls	r3, r3, #2
 800d4d0:	440b      	add	r3, r1
 800d4d2:	3317      	adds	r3, #23
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d00a      	beq.n	800d4f0 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800d4da:	78fa      	ldrb	r2, [r7, #3]
 800d4dc:	68b9      	ldr	r1, [r7, #8]
 800d4de:	4613      	mov	r3, r2
 800d4e0:	011b      	lsls	r3, r3, #4
 800d4e2:	1a9b      	subs	r3, r3, r2
 800d4e4:	009b      	lsls	r3, r3, #2
 800d4e6:	440b      	add	r3, r1
 800d4e8:	333c      	adds	r3, #60	; 0x3c
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	73fb      	strb	r3, [r7, #15]
 800d4ee:	e009      	b.n	800d504 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800d4f0:	78fa      	ldrb	r2, [r7, #3]
 800d4f2:	68b9      	ldr	r1, [r7, #8]
 800d4f4:	4613      	mov	r3, r2
 800d4f6:	011b      	lsls	r3, r3, #4
 800d4f8:	1a9b      	subs	r3, r3, r2
 800d4fa:	009b      	lsls	r3, r3, #2
 800d4fc:	440b      	add	r3, r1
 800d4fe:	333d      	adds	r3, #61	; 0x3d
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800d504:	7bfb      	ldrb	r3, [r7, #15]
}
 800d506:	4618      	mov	r0, r3
 800d508:	3714      	adds	r7, #20
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr

0800d512 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d512:	b580      	push	{r7, lr}
 800d514:	b082      	sub	sp, #8
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f7f4 fa12 	bl	8001944 <HAL_Delay>
}
 800d520:	bf00      	nop
 800d522:	3708      	adds	r7, #8
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d528:	b480      	push	{r7}
 800d52a:	b085      	sub	sp, #20
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	4603      	mov	r3, r0
 800d530:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d532:	2300      	movs	r3, #0
 800d534:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d536:	79fb      	ldrb	r3, [r7, #7]
 800d538:	2b03      	cmp	r3, #3
 800d53a:	d817      	bhi.n	800d56c <USBH_Get_USB_Status+0x44>
 800d53c:	a201      	add	r2, pc, #4	; (adr r2, 800d544 <USBH_Get_USB_Status+0x1c>)
 800d53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d542:	bf00      	nop
 800d544:	0800d555 	.word	0x0800d555
 800d548:	0800d55b 	.word	0x0800d55b
 800d54c:	0800d561 	.word	0x0800d561
 800d550:	0800d567 	.word	0x0800d567
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d554:	2300      	movs	r3, #0
 800d556:	73fb      	strb	r3, [r7, #15]
    break;
 800d558:	e00b      	b.n	800d572 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d55a:	2302      	movs	r3, #2
 800d55c:	73fb      	strb	r3, [r7, #15]
    break;
 800d55e:	e008      	b.n	800d572 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d560:	2301      	movs	r3, #1
 800d562:	73fb      	strb	r3, [r7, #15]
    break;
 800d564:	e005      	b.n	800d572 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d566:	2302      	movs	r3, #2
 800d568:	73fb      	strb	r3, [r7, #15]
    break;
 800d56a:	e002      	b.n	800d572 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d56c:	2302      	movs	r3, #2
 800d56e:	73fb      	strb	r3, [r7, #15]
    break;
 800d570:	bf00      	nop
  }
  return usb_status;
 800d572:	7bfb      	ldrb	r3, [r7, #15]
}
 800d574:	4618      	mov	r0, r3
 800d576:	3714      	adds	r7, #20
 800d578:	46bd      	mov	sp, r7
 800d57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57e:	4770      	bx	lr

0800d580 <GetAddressRange>:
    GENERAL_DATA_START_ADDR,
    PRODUCT_INFO_START_ADDR,
    DARK_COUNT_START_ADDR
};
// Helper function to get the start and end addresses for a given data type
static void GetAddressRange(DataType type, uint32_t* start, uint32_t* end) {
 800d580:	b480      	push	{r7}
 800d582:	b085      	sub	sp, #20
 800d584:	af00      	add	r7, sp, #0
 800d586:	4603      	mov	r3, r0
 800d588:	60b9      	str	r1, [r7, #8]
 800d58a:	607a      	str	r2, [r7, #4]
 800d58c:	73fb      	strb	r3, [r7, #15]
    switch (type) {
 800d58e:	7bfb      	ldrb	r3, [r7, #15]
 800d590:	2b03      	cmp	r3, #3
 800d592:	d827      	bhi.n	800d5e4 <GetAddressRange+0x64>
 800d594:	a201      	add	r2, pc, #4	; (adr r2, 800d59c <GetAddressRange+0x1c>)
 800d596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d59a:	bf00      	nop
 800d59c:	0800d5ad 	.word	0x0800d5ad
 800d5a0:	0800d5bb 	.word	0x0800d5bb
 800d5a4:	0800d5c9 	.word	0x0800d5c9
 800d5a8:	0800d5d7 	.word	0x0800d5d7

    	case DATA_TYPE_ERROR_CODES:
            *start = ERROR_CODES_START_ADDR;
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	4a14      	ldr	r2, [pc, #80]	; (800d600 <GetAddressRange+0x80>)
 800d5b0:	601a      	str	r2, [r3, #0]
            *end = ERROR_CODES_START_ADDR + ERROR_CODES_SIZE;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	4a13      	ldr	r2, [pc, #76]	; (800d604 <GetAddressRange+0x84>)
 800d5b6:	601a      	str	r2, [r3, #0]
            break;
 800d5b8:	e01b      	b.n	800d5f2 <GetAddressRange+0x72>

    	case DATA_TYPE_GENERAL_DATA:
            *start = GENERAL_DATA_START_ADDR;
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	4a11      	ldr	r2, [pc, #68]	; (800d604 <GetAddressRange+0x84>)
 800d5be:	601a      	str	r2, [r3, #0]
            *end = GENERAL_DATA_START_ADDR + GENERAL_DATA_SIZE;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	4a11      	ldr	r2, [pc, #68]	; (800d608 <GetAddressRange+0x88>)
 800d5c4:	601a      	str	r2, [r3, #0]
            break;
 800d5c6:	e014      	b.n	800d5f2 <GetAddressRange+0x72>

    	case DATA_TYPE_PRODUCT_INFO:
            *start = PRODUCT_INFO_START_ADDR;
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	4a10      	ldr	r2, [pc, #64]	; (800d60c <GetAddressRange+0x8c>)
 800d5cc:	601a      	str	r2, [r3, #0]
            *end = PRODUCT_INFO_START_ADDR + PRODUCT_INFO_SIZE;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	4a0f      	ldr	r2, [pc, #60]	; (800d610 <GetAddressRange+0x90>)
 800d5d2:	601a      	str	r2, [r3, #0]
            break;
 800d5d4:	e00d      	b.n	800d5f2 <GetAddressRange+0x72>

    	case DATA_TYPE_DARK_COUNT:
            *start = DARK_COUNT_START_ADDR;
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	4a0b      	ldr	r2, [pc, #44]	; (800d608 <GetAddressRange+0x88>)
 800d5da:	601a      	str	r2, [r3, #0]
            *end = DARK_COUNT_START_ADDR + DARK_COUNT_SIZE;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	4a0b      	ldr	r2, [pc, #44]	; (800d60c <GetAddressRange+0x8c>)
 800d5e0:	601a      	str	r2, [r3, #0]
            break;
 800d5e2:	e006      	b.n	800d5f2 <GetAddressRange+0x72>

    	default:
            *start = 0;
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	601a      	str	r2, [r3, #0]
            *end = 0;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	601a      	str	r2, [r3, #0]
    }
}
 800d5f0:	bf00      	nop
 800d5f2:	bf00      	nop
 800d5f4:	3714      	adds	r7, #20
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop
 800d600:	08060000 	.word	0x08060000
 800d604:	08064000 	.word	0x08064000
 800d608:	0807b000 	.word	0x0807b000
 800d60c:	0807c000 	.word	0x0807c000
 800d610:	08080000 	.word	0x08080000

0800d614 <EraseFlashSector>:


// Function to erase a sector
static HAL_StatusTypeDef EraseFlashSector(uint32_t sector) {
 800d614:	b580      	push	{r7, lr}
 800d616:	b088      	sub	sp, #32
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
    FLASH_EraseInitTypeDef EraseInitStruct = {0};
 800d61c:	f107 030c 	add.w	r3, r7, #12
 800d620:	2200      	movs	r2, #0
 800d622:	601a      	str	r2, [r3, #0]
 800d624:	605a      	str	r2, [r3, #4]
 800d626:	609a      	str	r2, [r3, #8]
 800d628:	60da      	str	r2, [r3, #12]
 800d62a:	611a      	str	r2, [r3, #16]
    uint32_t SectorError = 0;
 800d62c:	2300      	movs	r3, #0
 800d62e:	60bb      	str	r3, [r7, #8]

    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800d630:	2300      	movs	r3, #0
 800d632:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800d634:	2302      	movs	r3, #2
 800d636:	61fb      	str	r3, [r7, #28]
    EraseInitStruct.Sector = sector;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	617b      	str	r3, [r7, #20]
    EraseInitStruct.NbSectors = 1;
 800d63c:	2301      	movs	r3, #1
 800d63e:	61bb      	str	r3, [r7, #24]

    return HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 800d640:	f107 0208 	add.w	r2, r7, #8
 800d644:	f107 030c 	add.w	r3, r7, #12
 800d648:	4611      	mov	r1, r2
 800d64a:	4618      	mov	r0, r3
 800d64c:	f7f4 ffe4 	bl	8002618 <HAL_FLASHEx_Erase>
 800d650:	4603      	mov	r3, r0
}
 800d652:	4618      	mov	r0, r3
 800d654:	3720      	adds	r7, #32
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}

0800d65a <WriteToFlashAddress>:

// Function to write data to a specific address
HAL_StatusTypeDef WriteToFlashAddress(uint32_t address, const uint8_t* data, uint32_t size) {
 800d65a:	b5b0      	push	{r4, r5, r7, lr}
 800d65c:	b088      	sub	sp, #32
 800d65e:	af00      	add	r7, sp, #0
 800d660:	60f8      	str	r0, [r7, #12]
 800d662:	60b9      	str	r1, [r7, #8]
 800d664:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 800d666:	2300      	movs	r3, #0
 800d668:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Unlock();
 800d66a:	f7f4 fe63 	bl	8002334 <HAL_FLASH_Unlock>

    for (uint32_t i = 0; i < size; i += 4) {
 800d66e:	2300      	movs	r3, #0
 800d670:	61bb      	str	r3, [r7, #24]
 800d672:	e018      	b.n	800d6a6 <WriteToFlashAddress+0x4c>
        uint32_t data_word = *(uint32_t*)&data[i];
 800d674:	68ba      	ldr	r2, [r7, #8]
 800d676:	69bb      	ldr	r3, [r7, #24]
 800d678:	4413      	add	r3, r2
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	617b      	str	r3, [r7, #20]
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i, data_word);
 800d67e:	68fa      	ldr	r2, [r7, #12]
 800d680:	69bb      	ldr	r3, [r7, #24]
 800d682:	18d1      	adds	r1, r2, r3
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	2200      	movs	r2, #0
 800d688:	461c      	mov	r4, r3
 800d68a:	4615      	mov	r5, r2
 800d68c:	4622      	mov	r2, r4
 800d68e:	462b      	mov	r3, r5
 800d690:	2002      	movs	r0, #2
 800d692:	f7f4 fdfb 	bl	800228c <HAL_FLASH_Program>
 800d696:	4603      	mov	r3, r0
 800d698:	77fb      	strb	r3, [r7, #31]
        if (status != HAL_OK) {
 800d69a:	7ffb      	ldrb	r3, [r7, #31]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d107      	bne.n	800d6b0 <WriteToFlashAddress+0x56>
    for (uint32_t i = 0; i < size; i += 4) {
 800d6a0:	69bb      	ldr	r3, [r7, #24]
 800d6a2:	3304      	adds	r3, #4
 800d6a4:	61bb      	str	r3, [r7, #24]
 800d6a6:	69ba      	ldr	r2, [r7, #24]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d3e2      	bcc.n	800d674 <WriteToFlashAddress+0x1a>
 800d6ae:	e000      	b.n	800d6b2 <WriteToFlashAddress+0x58>
            break;
 800d6b0:	bf00      	nop
        }
    }

    HAL_FLASH_Lock();
 800d6b2:	f7f4 fe61 	bl	8002378 <HAL_FLASH_Lock>
    return status;
 800d6b6:	7ffb      	ldrb	r3, [r7, #31]
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3720      	adds	r7, #32
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bdb0      	pop	{r4, r5, r7, pc}

0800d6c0 <ReadFromFlashAddress>:

// Function to read data from a specific address
void ReadFromFlashAddress(uint32_t address, uint8_t* data, uint32_t size) {
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b084      	sub	sp, #16
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	60f8      	str	r0, [r7, #12]
 800d6c8:	60b9      	str	r1, [r7, #8]
 800d6ca:	607a      	str	r2, [r7, #4]
    memcpy(data, (void*)address, size);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	687a      	ldr	r2, [r7, #4]
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	68b8      	ldr	r0, [r7, #8]
 800d6d4:	f000 fc76 	bl	800dfc4 <memcpy>
}
 800d6d8:	bf00      	nop
 800d6da:	3710      	adds	r7, #16
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}

0800d6e0 <GetSectorForAddress>:

// Helper function to get the sector number for a given address
uint32_t GetSectorForAddress(uint32_t address) {
 800d6e0:	b480      	push	{r7}
 800d6e2:	b083      	sub	sp, #12
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]

    if (address >= 0x08060000 && address < 0x0807FFFF) return FLASH_SECTOR_7;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	4a08      	ldr	r2, [pc, #32]	; (800d70c <GetSectorForAddress+0x2c>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d905      	bls.n	800d6fc <GetSectorForAddress+0x1c>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	4a07      	ldr	r2, [pc, #28]	; (800d710 <GetSectorForAddress+0x30>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d201      	bcs.n	800d6fc <GetSectorForAddress+0x1c>
 800d6f8:	2307      	movs	r3, #7
 800d6fa:	e001      	b.n	800d700 <GetSectorForAddress+0x20>
    return 0xFFFFFFFF; // Invalid sector
 800d6fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d700:	4618      	mov	r0, r3
 800d702:	370c      	adds	r7, #12
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr
 800d70c:	0805ffff 	.word	0x0805ffff
 800d710:	0807ffff 	.word	0x0807ffff

0800d714 <WriteDataToFlash>:

// Function to write data, erasing the sector if necessary
HAL_StatusTypeDef WriteDataToFlash(uint32_t address, const uint8_t* data, uint32_t size) {
 800d714:	b580      	push	{r7, lr}
 800d716:	b08a      	sub	sp, #40	; 0x28
 800d718:	af00      	add	r7, sp, #0
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	607a      	str	r2, [r7, #4]
    uint32_t sector = GetSectorForAddress(address);
 800d720:	68f8      	ldr	r0, [r7, #12]
 800d722:	f7ff ffdd 	bl	800d6e0 <GetSectorForAddress>
 800d726:	61f8      	str	r0, [r7, #28]
    if (sector == 0xFFFFFFFF) {
 800d728:	69fb      	ldr	r3, [r7, #28]
 800d72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d72e:	d101      	bne.n	800d734 <WriteDataToFlash+0x20>
        return HAL_ERROR; // Invalid address
 800d730:	2301      	movs	r3, #1
 800d732:	e030      	b.n	800d796 <WriteDataToFlash+0x82>
    }

    HAL_StatusTypeDef status;

    // Check if the sector needs to be erased
    uint32_t* flash_ptr = (uint32_t*)address;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	61bb      	str	r3, [r7, #24]
    bool needs_erase = false;
 800d738:	2300      	movs	r3, #0
 800d73a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for (uint32_t i = 0; i < (size + 3) / 4; i++) {
 800d73e:	2300      	movs	r3, #0
 800d740:	623b      	str	r3, [r7, #32]
 800d742:	e00e      	b.n	800d762 <WriteDataToFlash+0x4e>
        if (flash_ptr[i] != 0xFFFFFFFF) {
 800d744:	6a3b      	ldr	r3, [r7, #32]
 800d746:	009b      	lsls	r3, r3, #2
 800d748:	69ba      	ldr	r2, [r7, #24]
 800d74a:	4413      	add	r3, r2
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d752:	d003      	beq.n	800d75c <WriteDataToFlash+0x48>
            needs_erase = true;
 800d754:	2301      	movs	r3, #1
 800d756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d75a:	e008      	b.n	800d76e <WriteDataToFlash+0x5a>
    for (uint32_t i = 0; i < (size + 3) / 4; i++) {
 800d75c:	6a3b      	ldr	r3, [r7, #32]
 800d75e:	3301      	adds	r3, #1
 800d760:	623b      	str	r3, [r7, #32]
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	3303      	adds	r3, #3
 800d766:	089b      	lsrs	r3, r3, #2
 800d768:	6a3a      	ldr	r2, [r7, #32]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d3ea      	bcc.n	800d744 <WriteDataToFlash+0x30>
        }
    }

    if (needs_erase) {
 800d76e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d772:	2b00      	cmp	r3, #0
 800d774:	d009      	beq.n	800d78a <WriteDataToFlash+0x76>
        status = EraseFlashSector(sector);
 800d776:	69f8      	ldr	r0, [r7, #28]
 800d778:	f7ff ff4c 	bl	800d614 <EraseFlashSector>
 800d77c:	4603      	mov	r3, r0
 800d77e:	75fb      	strb	r3, [r7, #23]
        if (status != HAL_OK) {
 800d780:	7dfb      	ldrb	r3, [r7, #23]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d001      	beq.n	800d78a <WriteDataToFlash+0x76>
            return status;
 800d786:	7dfb      	ldrb	r3, [r7, #23]
 800d788:	e005      	b.n	800d796 <WriteDataToFlash+0x82>
        }
    }

    return WriteToFlashAddress(address, data, size);
 800d78a:	687a      	ldr	r2, [r7, #4]
 800d78c:	68b9      	ldr	r1, [r7, #8]
 800d78e:	68f8      	ldr	r0, [r7, #12]
 800d790:	f7ff ff63 	bl	800d65a <WriteToFlashAddress>
 800d794:	4603      	mov	r3, r0
}
 800d796:	4618      	mov	r0, r3
 800d798:	3728      	adds	r7, #40	; 0x28
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
	...

0800d7a0 <FindNextWriteAddress>:

    return HAL_ERROR;  // No valid dark count found
}

// Function to find the next available write address for a given data type
static HAL_StatusTypeDef FindNextWriteAddress(DataType type) {
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b088      	sub	sp, #32
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	71fb      	strb	r3, [r7, #7]
    uint32_t start, end;
    GetAddressRange(type, &start, &end);
 800d7aa:	f107 0214 	add.w	r2, r7, #20
 800d7ae:	f107 0118 	add.w	r1, r7, #24
 800d7b2:	79fb      	ldrb	r3, [r7, #7]
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f7ff fee3 	bl	800d580 <GetAddressRange>

    uint32_t address = start;
 800d7ba:	69bb      	ldr	r3, [r7, #24]
 800d7bc:	61fb      	str	r3, [r7, #28]
    RecordHeader header;

    while (address < end) {
 800d7be:	e01b      	b.n	800d7f8 <FindNextWriteAddress+0x58>
        ReadFromFlashAddress(address, (uint8_t*)&header, sizeof(RecordHeader));
 800d7c0:	f107 030c 	add.w	r3, r7, #12
 800d7c4:	2208      	movs	r2, #8
 800d7c6:	4619      	mov	r1, r3
 800d7c8:	69f8      	ldr	r0, [r7, #28]
 800d7ca:	f7ff ff79 	bl	800d6c0 <ReadFromFlashAddress>

        if (header.status == 0xFFFFFFFF) {
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7d4:	d106      	bne.n	800d7e4 <FindNextWriteAddress+0x44>
            // Found an empty spot
            last_write_address[type] = address;
 800d7d6:	79fb      	ldrb	r3, [r7, #7]
 800d7d8:	490c      	ldr	r1, [pc, #48]	; (800d80c <FindNextWriteAddress+0x6c>)
 800d7da:	69fa      	ldr	r2, [r7, #28]
 800d7dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            return HAL_OK;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	e00e      	b.n	800d802 <FindNextWriteAddress+0x62>
        }

        // Move to the next record
        address += RECORD_HEADER_SIZE + header.size;
 800d7e4:	68fa      	ldr	r2, [r7, #12]
 800d7e6:	69fb      	ldr	r3, [r7, #28]
 800d7e8:	4413      	add	r3, r2
 800d7ea:	3308      	adds	r3, #8
 800d7ec:	61fb      	str	r3, [r7, #28]

        // Align to 4-byte boundary
        address = (address + 3) & ~3;
 800d7ee:	69fb      	ldr	r3, [r7, #28]
 800d7f0:	3303      	adds	r3, #3
 800d7f2:	f023 0303 	bic.w	r3, r3, #3
 800d7f6:	61fb      	str	r3, [r7, #28]
    while (address < end) {
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	69fa      	ldr	r2, [r7, #28]
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d3df      	bcc.n	800d7c0 <FindNextWriteAddress+0x20>
    }

    // If we're here, we've run out of space
    return HAL_ERROR;
 800d800:	2301      	movs	r3, #1
}
 800d802:	4618      	mov	r0, r3
 800d804:	3720      	adds	r7, #32
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	2000002c 	.word	0x2000002c

0800d810 <AppendData>:

HAL_StatusTypeDef AppendData(DataType type, const uint8_t* data, uint32_t size) {
 800d810:	b580      	push	{r7, lr}
 800d812:	b088      	sub	sp, #32
 800d814:	af00      	add	r7, sp, #0
 800d816:	4603      	mov	r3, r0
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	607a      	str	r2, [r7, #4]
 800d81c:	73fb      	strb	r3, [r7, #15]
    if (size > RECORD_MAX_SIZE) {
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d824:	d901      	bls.n	800d82a <AppendData+0x1a>
        return HAL_ERROR;
 800d826:	2301      	movs	r3, #1
 800d828:	e055      	b.n	800d8d6 <AppendData+0xc6>
    }

    if (FindNextWriteAddress(type) != HAL_OK) {
 800d82a:	7bfb      	ldrb	r3, [r7, #15]
 800d82c:	4618      	mov	r0, r3
 800d82e:	f7ff ffb7 	bl	800d7a0 <FindNextWriteAddress>
 800d832:	4603      	mov	r3, r0
 800d834:	2b00      	cmp	r3, #0
 800d836:	d011      	beq.n	800d85c <AppendData+0x4c>
        // No space left, need to perform garbage collection
        if (PerformGarbageCollection(type) != HAL_OK) {
 800d838:	7bfb      	ldrb	r3, [r7, #15]
 800d83a:	4618      	mov	r0, r3
 800d83c:	f000 f8ae 	bl	800d99c <PerformGarbageCollection>
 800d840:	4603      	mov	r3, r0
 800d842:	2b00      	cmp	r3, #0
 800d844:	d001      	beq.n	800d84a <AppendData+0x3a>
            return HAL_ERROR;
 800d846:	2301      	movs	r3, #1
 800d848:	e045      	b.n	800d8d6 <AppendData+0xc6>
        }
        if (FindNextWriteAddress(type) != HAL_OK) {
 800d84a:	7bfb      	ldrb	r3, [r7, #15]
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7ff ffa7 	bl	800d7a0 <FindNextWriteAddress>
 800d852:	4603      	mov	r3, r0
 800d854:	2b00      	cmp	r3, #0
 800d856:	d001      	beq.n	800d85c <AppendData+0x4c>
            return HAL_ERROR;
 800d858:	2301      	movs	r3, #1
 800d85a:	e03c      	b.n	800d8d6 <AppendData+0xc6>
        }
    }

    RecordHeader header = {size, 0x00000000};  // Valid status
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	617b      	str	r3, [r7, #20]
 800d860:	2300      	movs	r3, #0
 800d862:	61bb      	str	r3, [r7, #24]

    HAL_StatusTypeDef status = WriteDataToFlash(last_write_address[type], (uint8_t*)&header, sizeof(RecordHeader));
 800d864:	7bfb      	ldrb	r3, [r7, #15]
 800d866:	4a1e      	ldr	r2, [pc, #120]	; (800d8e0 <AppendData+0xd0>)
 800d868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d86c:	f107 0114 	add.w	r1, r7, #20
 800d870:	2208      	movs	r2, #8
 800d872:	4618      	mov	r0, r3
 800d874:	f7ff ff4e 	bl	800d714 <WriteDataToFlash>
 800d878:	4603      	mov	r3, r0
 800d87a:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) {
 800d87c:	7ffb      	ldrb	r3, [r7, #31]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d001      	beq.n	800d886 <AppendData+0x76>
        return status;
 800d882:	7ffb      	ldrb	r3, [r7, #31]
 800d884:	e027      	b.n	800d8d6 <AppendData+0xc6>
    }

    status = WriteDataToFlash(last_write_address[type] + sizeof(RecordHeader), data, size);
 800d886:	7bfb      	ldrb	r3, [r7, #15]
 800d888:	4a15      	ldr	r2, [pc, #84]	; (800d8e0 <AppendData+0xd0>)
 800d88a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d88e:	3308      	adds	r3, #8
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	68b9      	ldr	r1, [r7, #8]
 800d894:	4618      	mov	r0, r3
 800d896:	f7ff ff3d 	bl	800d714 <WriteDataToFlash>
 800d89a:	4603      	mov	r3, r0
 800d89c:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) {
 800d89e:	7ffb      	ldrb	r3, [r7, #31]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d001      	beq.n	800d8a8 <AppendData+0x98>
        return status;
 800d8a4:	7ffb      	ldrb	r3, [r7, #31]
 800d8a6:	e016      	b.n	800d8d6 <AppendData+0xc6>
    }

    last_write_address[type] += RECORD_HEADER_SIZE + size;
 800d8a8:	7bfb      	ldrb	r3, [r7, #15]
 800d8aa:	4a0d      	ldr	r2, [pc, #52]	; (800d8e0 <AppendData+0xd0>)
 800d8ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	441a      	add	r2, r3
 800d8b4:	7bfb      	ldrb	r3, [r7, #15]
 800d8b6:	3208      	adds	r2, #8
 800d8b8:	4909      	ldr	r1, [pc, #36]	; (800d8e0 <AppendData+0xd0>)
 800d8ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    last_write_address[type] = (last_write_address[type] + 3) & ~3;  // Align to 4-byte boundary
 800d8be:	7bfb      	ldrb	r3, [r7, #15]
 800d8c0:	4a07      	ldr	r2, [pc, #28]	; (800d8e0 <AppendData+0xd0>)
 800d8c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8c6:	1cda      	adds	r2, r3, #3
 800d8c8:	7bfb      	ldrb	r3, [r7, #15]
 800d8ca:	f022 0203 	bic.w	r2, r2, #3
 800d8ce:	4904      	ldr	r1, [pc, #16]	; (800d8e0 <AppendData+0xd0>)
 800d8d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return HAL_OK;
 800d8d4:	2300      	movs	r3, #0
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3720      	adds	r7, #32
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	2000002c 	.word	0x2000002c

0800d8e4 <WriteDarkCount>:
    }

    return HAL_ERROR;  // Record not found
}

HAL_StatusTypeDef WriteDarkCount(uint32_t dark_count) {
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b08c      	sub	sp, #48	; 0x30
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
    uint32_t start, end;
    GetAddressRange(DATA_TYPE_DARK_COUNT, &start, &end);
 800d8ec:	f107 021c 	add.w	r2, r7, #28
 800d8f0:	f107 0320 	add.w	r3, r7, #32
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	2003      	movs	r0, #3
 800d8f8:	f7ff fe42 	bl	800d580 <GetAddressRange>

    uint32_t address = start;
 800d8fc:	6a3b      	ldr	r3, [r7, #32]
 800d8fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    RecordHeader header;
    uint32_t latest_valid_address = 0;
 800d900:	2300      	movs	r3, #0
 800d902:	62bb      	str	r3, [r7, #40]	; 0x28

    // Find the latest valid dark count
    while (address < end) {
 800d904:	e015      	b.n	800d932 <WriteDarkCount+0x4e>
        ReadFromFlashAddress(address, (uint8_t*)&header, sizeof(RecordHeader));
 800d906:	f107 0314 	add.w	r3, r7, #20
 800d90a:	2208      	movs	r2, #8
 800d90c:	4619      	mov	r1, r3
 800d90e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d910:	f7ff fed6 	bl	800d6c0 <ReadFromFlashAddress>

        if (header.status == 0x00000000) {  // Valid record
 800d914:	69bb      	ldr	r3, [r7, #24]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d101      	bne.n	800d91e <WriteDarkCount+0x3a>
            latest_valid_address = address;
 800d91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91c:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        address += RECORD_HEADER_SIZE + header.size;
 800d91e:	697a      	ldr	r2, [r7, #20]
 800d920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d922:	4413      	add	r3, r2
 800d924:	3308      	adds	r3, #8
 800d926:	62fb      	str	r3, [r7, #44]	; 0x2c
        address = (address + 3) & ~3;  // Align to 4-byte boundary
 800d928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92a:	3303      	adds	r3, #3
 800d92c:	f023 0303 	bic.w	r3, r3, #3
 800d930:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (address < end) {
 800d932:	69fb      	ldr	r3, [r7, #28]
 800d934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d936:	429a      	cmp	r2, r3
 800d938:	d3e5      	bcc.n	800d906 <WriteDarkCount+0x22>
    }

    // Invalidate the previous dark count if it exists
    if (latest_valid_address != 0) {
 800d93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d013      	beq.n	800d968 <WriteDarkCount+0x84>
        uint32_t invalidate_status = 0x00000001;
 800d940:	2301      	movs	r3, #1
 800d942:	60bb      	str	r3, [r7, #8]
        HAL_StatusTypeDef status = WriteDataToFlash(latest_valid_address + 4, (uint8_t*)&invalidate_status, 4);
 800d944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d946:	3304      	adds	r3, #4
 800d948:	f107 0108 	add.w	r1, r7, #8
 800d94c:	2204      	movs	r2, #4
 800d94e:	4618      	mov	r0, r3
 800d950:	f7ff fee0 	bl	800d714 <WriteDataToFlash>
 800d954:	4603      	mov	r3, r0
 800d956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK) {
 800d95a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d002      	beq.n	800d968 <WriteDarkCount+0x84>
            return status;
 800d962:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d966:	e014      	b.n	800d992 <WriteDarkCount+0xae>
        }
    }

    // Write the new dark count
    RecordHeader new_header = {sizeof(uint32_t), 0x00000000};  // Valid status
 800d968:	2304      	movs	r3, #4
 800d96a:	60fb      	str	r3, [r7, #12]
 800d96c:	2300      	movs	r3, #0
 800d96e:	613b      	str	r3, [r7, #16]
    HAL_StatusTypeDef status = AppendData(DATA_TYPE_DARK_COUNT, (uint8_t*)&dark_count, sizeof(uint32_t));
 800d970:	1d3b      	adds	r3, r7, #4
 800d972:	2204      	movs	r2, #4
 800d974:	4619      	mov	r1, r3
 800d976:	2003      	movs	r0, #3
 800d978:	f7ff ff4a 	bl	800d810 <AppendData>
 800d97c:	4603      	mov	r3, r0
 800d97e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if (status != HAL_OK) {
 800d982:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d986:	2b00      	cmp	r3, #0
 800d988:	d002      	beq.n	800d990 <WriteDarkCount+0xac>
        return status;
 800d98a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d98e:	e000      	b.n	800d992 <WriteDarkCount+0xae>
    }

    return HAL_OK;
 800d990:	2300      	movs	r3, #0
}
 800d992:	4618      	mov	r0, r3
 800d994:	3730      	adds	r7, #48	; 0x30
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}
	...

0800d99c <PerformGarbageCollection>:

HAL_StatusTypeDef PerformGarbageCollection(DataType type) {
 800d99c:	b580      	push	{r7, lr}
 800d99e:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800d9aa:	f2a3 4321 	subw	r3, r3, #1057	; 0x421
 800d9ae:	701a      	strb	r2, [r3, #0]
    uint32_t start, end;
    GetAddressRange(type, &start, &end);
 800d9b0:	f207 4214 	addw	r2, r7, #1044	; 0x414
 800d9b4:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 800d9b8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800d9bc:	f2a3 4321 	subw	r3, r3, #1057	; 0x421
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7ff fddc 	bl	800d580 <GetAddressRange>

    uint32_t read_address = start;
 800d9c8:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 800d9cc:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
    uint32_t write_address = start;
 800d9d0:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 800d9d4:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
    RecordHeader header;

    while (read_address < end) {
 800d9d8:	e04b      	b.n	800da72 <PerformGarbageCollection+0xd6>
        ReadFromFlashAddress(read_address, (uint8_t*)&header, sizeof(RecordHeader));
 800d9da:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 800d9de:	2208      	movs	r2, #8
 800d9e0:	4619      	mov	r1, r3
 800d9e2:	f8d7 0424 	ldr.w	r0, [r7, #1060]	; 0x424
 800d9e6:	f7ff fe6b 	bl	800d6c0 <ReadFromFlashAddress>

        if (header.status == 0x00000000) {  // Valid record
 800d9ea:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d130      	bne.n	800da54 <PerformGarbageCollection+0xb8>
            if (read_address != write_address) {
 800d9f2:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 800d9f6:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d01b      	beq.n	800da36 <PerformGarbageCollection+0x9a>
                // Move the record
                uint8_t buffer[RECORD_MAX_SIZE];
                ReadFromFlashAddress(read_address + sizeof(RecordHeader), buffer, header.size);
 800d9fe:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800da02:	3308      	adds	r3, #8
 800da04:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 800da08:	f107 010c 	add.w	r1, r7, #12
 800da0c:	4618      	mov	r0, r3
 800da0e:	f7ff fe57 	bl	800d6c0 <ReadFromFlashAddress>

                WriteDataToFlash(write_address, (uint8_t*)&header, sizeof(RecordHeader));
 800da12:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 800da16:	2208      	movs	r2, #8
 800da18:	4619      	mov	r1, r3
 800da1a:	f8d7 0420 	ldr.w	r0, [r7, #1056]	; 0x420
 800da1e:	f7ff fe79 	bl	800d714 <WriteDataToFlash>
                WriteDataToFlash(write_address + sizeof(RecordHeader), buffer, header.size);
 800da22:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800da26:	3308      	adds	r3, #8
 800da28:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 800da2c:	f107 010c 	add.w	r1, r7, #12
 800da30:	4618      	mov	r0, r3
 800da32:	f7ff fe6f 	bl	800d714 <WriteDataToFlash>
            }
            write_address += RECORD_HEADER_SIZE + header.size;
 800da36:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 800da3a:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800da3e:	4413      	add	r3, r2
 800da40:	3308      	adds	r3, #8
 800da42:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
            write_address = (write_address + 3) & ~3;  // Align to 4-byte boundary
 800da46:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800da4a:	3303      	adds	r3, #3
 800da4c:	f023 0303 	bic.w	r3, r3, #3
 800da50:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
        }

        read_address += RECORD_HEADER_SIZE + header.size;
 800da54:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 800da58:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800da5c:	4413      	add	r3, r2
 800da5e:	3308      	adds	r3, #8
 800da60:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
        read_address = (read_address + 3) & ~3;  // Align to 4-byte boundary
 800da64:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800da68:	3303      	adds	r3, #3
 800da6a:	f023 0303 	bic.w	r3, r3, #3
 800da6e:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
    while (read_address < end) {
 800da72:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800da76:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d3ad      	bcc.n	800d9da <PerformGarbageCollection+0x3e>
    }

    // Erase remaining space
    uint32_t sector = GetSectorForAddress(write_address);
 800da7e:	f8d7 0420 	ldr.w	r0, [r7, #1056]	; 0x420
 800da82:	f7ff fe2d 	bl	800d6e0 <GetSectorForAddress>
 800da86:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c
    while (sector <= GetSectorForAddress(end - 1)) {
 800da8a:	e008      	b.n	800da9e <PerformGarbageCollection+0x102>
        EraseFlashSector(sector);
 800da8c:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 800da90:	f7ff fdc0 	bl	800d614 <EraseFlashSector>
        sector++;
 800da94:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800da98:	3301      	adds	r3, #1
 800da9a:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
    while (sector <= GetSectorForAddress(end - 1)) {
 800da9e:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800daa2:	3b01      	subs	r3, #1
 800daa4:	4618      	mov	r0, r3
 800daa6:	f7ff fe1b 	bl	800d6e0 <GetSectorForAddress>
 800daaa:	4602      	mov	r2, r0
 800daac:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d9eb      	bls.n	800da8c <PerformGarbageCollection+0xf0>
    }

    last_write_address[type] = write_address;
 800dab4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800dab8:	f2a3 4321 	subw	r3, r3, #1057	; 0x421
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	4905      	ldr	r1, [pc, #20]	; (800dad4 <PerformGarbageCollection+0x138>)
 800dac0:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 800dac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return HAL_OK;
 800dac8:	2300      	movs	r3, #0
}
 800daca:	4618      	mov	r0, r3
 800dacc:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}
 800dad4:	2000002c 	.word	0x2000002c

0800dad8 <main_app>:
StateMachine_t StateMachine;



void main_app(void)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	af00      	add	r7, sp, #0
    // Initialize the state machine
    StateMachine.eState = ST_INIT;
 800dadc:	4b05      	ldr	r3, [pc, #20]	; (800daf4 <main_app+0x1c>)
 800dade:	2200      	movs	r2, #0
 800dae0:	701a      	strb	r2, [r3, #0]
    StateMachine.eEvent = NO_EVENT;
 800dae2:	4b04      	ldr	r3, [pc, #16]	; (800daf4 <main_app+0x1c>)
 800dae4:	2200      	movs	r2, #0
 800dae6:	705a      	strb	r2, [r3, #1]
    StateMachine.bEventOccurred = false;
 800dae8:	4b02      	ldr	r3, [pc, #8]	; (800daf4 <main_app+0x1c>)
 800daea:	2200      	movs	r2, #0
 800daec:	709a      	strb	r2, [r3, #2]

    // Main loop
    while (1)
    {
        // Run the state machine
        StateTransition();
 800daee:	f000 f827 	bl	800db40 <StateTransition>
 800daf2:	e7fc      	b.n	800daee <main_app+0x16>
 800daf4:	200010d8 	.word	0x200010d8

0800daf8 <PULSES_darkcount>:
 */
#include "pulses.h"

volatile uint32_t pulse_count = 0;

uint32_t PULSES_darkcount(TIM_HandleTypeDef *htim) {
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b084      	sub	sp, #16
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
  // Reset pulse count
  pulse_count = 0;
 800db00:	4b0d      	ldr	r3, [pc, #52]	; (800db38 <PULSES_darkcount+0x40>)
 800db02:	2200      	movs	r2, #0
 800db04:	601a      	str	r2, [r3, #0]

  // Start timer
  HAL_TIM_IC_Start(htim, TIM_CHANNEL_1);
 800db06:	2100      	movs	r1, #0
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f7f9 f829 	bl	8006b60 <HAL_TIM_IC_Start>

  // Wait for 3 seconds
  HAL_Delay(3000);
 800db0e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800db12:	f7f3 ff17 	bl	8001944 <HAL_Delay>

  // Stop timer
  HAL_TIM_IC_Stop(htim, TIM_CHANNEL_1);
 800db16:	2100      	movs	r1, #0
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f7f9 f8fd 	bl	8006d18 <HAL_TIM_IC_Stop>

  // Calculate average pulses per second
  uint32_t average_pulses = pulse_count / 3;
 800db1e:	4b06      	ldr	r3, [pc, #24]	; (800db38 <PULSES_darkcount+0x40>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4a06      	ldr	r2, [pc, #24]	; (800db3c <PULSES_darkcount+0x44>)
 800db24:	fba2 2303 	umull	r2, r3, r2, r3
 800db28:	085b      	lsrs	r3, r3, #1
 800db2a:	60fb      	str	r3, [r7, #12]

  return average_pulses;
 800db2c:	68fb      	ldr	r3, [r7, #12]
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3710      	adds	r7, #16
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	200010dc 	.word	0x200010dc
 800db3c:	aaaaaaab 	.word	0xaaaaaaab

0800db40 <StateTransition>:
// For example:
// #include "fatfs.h"
// #include "usb_host.h"

void StateTransition(void)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
    if (StateMachine.bEventOccurred)
 800db46:	4b1e      	ldr	r3, [pc, #120]	; (800dbc0 <StateTransition+0x80>)
 800db48:	789b      	ldrb	r3, [r3, #2]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d02d      	beq.n	800dbaa <StateTransition+0x6a>
    {
        StateMachine.bEventOccurred = false;
 800db4e:	4b1c      	ldr	r3, [pc, #112]	; (800dbc0 <StateTransition+0x80>)
 800db50:	2200      	movs	r2, #0
 800db52:	709a      	strb	r2, [r3, #2]
        for (uint32_t idx = 0U; idx < STATE_TABLE_SIZE; idx++)
 800db54:	2300      	movs	r3, #0
 800db56:	607b      	str	r3, [r7, #4]
 800db58:	e024      	b.n	800dba4 <StateTransition+0x64>
        {
            if ((StateTransitionTable[idx].eCurrState == StateMachine.eState) &&
 800db5a:	491a      	ldr	r1, [pc, #104]	; (800dbc4 <StateTransition+0x84>)
 800db5c:	687a      	ldr	r2, [r7, #4]
 800db5e:	4613      	mov	r3, r2
 800db60:	005b      	lsls	r3, r3, #1
 800db62:	4413      	add	r3, r2
 800db64:	440b      	add	r3, r1
 800db66:	781a      	ldrb	r2, [r3, #0]
 800db68:	4b15      	ldr	r3, [pc, #84]	; (800dbc0 <StateTransition+0x80>)
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d116      	bne.n	800db9e <StateTransition+0x5e>
                (StateTransitionTable[idx].eEvent == StateMachine.eEvent))
 800db70:	4914      	ldr	r1, [pc, #80]	; (800dbc4 <StateTransition+0x84>)
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	4613      	mov	r3, r2
 800db76:	005b      	lsls	r3, r3, #1
 800db78:	4413      	add	r3, r2
 800db7a:	440b      	add	r3, r1
 800db7c:	3301      	adds	r3, #1
 800db7e:	781a      	ldrb	r2, [r3, #0]
 800db80:	4b0f      	ldr	r3, [pc, #60]	; (800dbc0 <StateTransition+0x80>)
 800db82:	785b      	ldrb	r3, [r3, #1]
            if ((StateTransitionTable[idx].eCurrState == StateMachine.eState) &&
 800db84:	429a      	cmp	r2, r3
 800db86:	d10a      	bne.n	800db9e <StateTransition+0x5e>
            {
                StateMachine.eState = StateTransitionTable[idx].eNextState;
 800db88:	490e      	ldr	r1, [pc, #56]	; (800dbc4 <StateTransition+0x84>)
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	4613      	mov	r3, r2
 800db8e:	005b      	lsls	r3, r3, #1
 800db90:	4413      	add	r3, r2
 800db92:	440b      	add	r3, r1
 800db94:	3302      	adds	r3, #2
 800db96:	781a      	ldrb	r2, [r3, #0]
 800db98:	4b09      	ldr	r3, [pc, #36]	; (800dbc0 <StateTransition+0x80>)
 800db9a:	701a      	strb	r2, [r3, #0]
                break;
 800db9c:	e005      	b.n	800dbaa <StateTransition+0x6a>
        for (uint32_t idx = 0U; idx < STATE_TABLE_SIZE; idx++)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	3301      	adds	r3, #1
 800dba2:	607b      	str	r3, [r7, #4]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2b0a      	cmp	r3, #10
 800dba8:	d9d7      	bls.n	800db5a <StateTransition+0x1a>
            }
        }
    }
    StateArray[StateMachine.eState]();
 800dbaa:	4b05      	ldr	r3, [pc, #20]	; (800dbc0 <StateTransition+0x80>)
 800dbac:	781b      	ldrb	r3, [r3, #0]
 800dbae:	461a      	mov	r2, r3
 800dbb0:	4b05      	ldr	r3, [pc, #20]	; (800dbc8 <StateTransition+0x88>)
 800dbb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbb6:	4798      	blx	r3
}
 800dbb8:	bf00      	nop
 800dbba:	3708      	adds	r7, #8
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}
 800dbc0:	200010d8 	.word	0x200010d8
 800dbc4:	0800e0d0 	.word	0x0800e0d0
 800dbc8:	0800e0c0 	.word	0x0800e0c0

0800dbcc <stateInit>:

void stateInit(void) {
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	af00      	add	r7, sp, #0

    HAL_Delay(2000);
 800dbd0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800dbd4:	f7f3 feb6 	bl	8001944 <HAL_Delay>

    // Send command to change screen to system check screen
    StateMachine.bEventOccurred = true;
 800dbd8:	4b03      	ldr	r3, [pc, #12]	; (800dbe8 <stateInit+0x1c>)
 800dbda:	2201      	movs	r2, #1
 800dbdc:	709a      	strb	r2, [r3, #2]
    StateMachine.eEvent = EVENT_INIT_COMPLETE;
 800dbde:	4b02      	ldr	r3, [pc, #8]	; (800dbe8 <stateInit+0x1c>)
 800dbe0:	2201      	movs	r2, #1
 800dbe2:	705a      	strb	r2, [r3, #1]

    // Exit the state function (the event will be handled in the state transition function)
    return;
 800dbe4:	bf00      	nop
}
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	200010d8 	.word	0x200010d8

0800dbec <stateStartUp>:

void stateStartUp(void) {
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b084      	sub	sp, #16
 800dbf0:	af00      	add	r7, sp, #0

	//uint32_t data
	//ReadData(DATA_TYPE_ERROR_CODES, 1, &data, sizeof(data));

	// Homming cuvettte holder
	if(HAL_GPIO_ReadPin(LIMIT_SW_1_GPIO_Port, LIMIT_SW_1_Pin) == GPIO_PIN_SET){
 800dbf2:	2102      	movs	r1, #2
 800dbf4:	4826      	ldr	r0, [pc, #152]	; (800dc90 <stateStartUp+0xa4>)
 800dbf6:	f7f4 ffc5 	bl	8002b84 <HAL_GPIO_ReadPin>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d103      	bne.n	800dc08 <stateStartUp+0x1c>
		cuvetteRotate(&htim9, &hdac);
 800dc00:	4924      	ldr	r1, [pc, #144]	; (800dc94 <stateStartUp+0xa8>)
 800dc02:	4825      	ldr	r0, [pc, #148]	; (800dc98 <stateStartUp+0xac>)
 800dc04:	f000 f85e 	bl	800dcc4 <cuvetteRotate>
	}

	// Dark count
	uint32_t new_dark_count = 0000;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	60fb      	str	r3, [r7, #12]
	new_dark_count = PULSES_darkcount(&htim2);
 800dc0c:	4823      	ldr	r0, [pc, #140]	; (800dc9c <stateStartUp+0xb0>)
 800dc0e:	f7ff ff73 	bl	800daf8 <PULSES_darkcount>
 800dc12:	60f8      	str	r0, [r7, #12]

	if (new_dark_count > DARK_THRESH){
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800dc1a:	d905      	bls.n	800dc28 <stateStartUp+0x3c>
		// do some error handling
	    StateMachine.bEventOccurred = true;
 800dc1c:	4b20      	ldr	r3, [pc, #128]	; (800dca0 <stateStartUp+0xb4>)
 800dc1e:	2201      	movs	r2, #1
 800dc20:	709a      	strb	r2, [r3, #2]
	    StateMachine.eEvent = EVENT_STARTUP_FAILED_DARK;
 800dc22:	4b1f      	ldr	r3, [pc, #124]	; (800dca0 <stateStartUp+0xb4>)
 800dc24:	2203      	movs	r2, #3
 800dc26:	705a      	strb	r2, [r3, #1]
	}

	// Saving new dark count
	HAL_StatusTypeDef status = WriteDarkCount(new_dark_count);
 800dc28:	68f8      	ldr	r0, [r7, #12]
 800dc2a:	f7ff fe5b 	bl	800d8e4 <WriteDarkCount>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	72fb      	strb	r3, [r7, #11]
	if (status != HAL_OK) {
 800dc32:	7afb      	ldrb	r3, [r7, #11]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d005      	beq.n	800dc44 <stateStartUp+0x58>
	    // Handle error
	    StateMachine.bEventOccurred = true;
 800dc38:	4b19      	ldr	r3, [pc, #100]	; (800dca0 <stateStartUp+0xb4>)
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	709a      	strb	r2, [r3, #2]
	    StateMachine.eEvent = EVENT_STARTUP_FAILED_FLASH;
 800dc3e:	4b18      	ldr	r3, [pc, #96]	; (800dca0 <stateStartUp+0xb4>)
 800dc40:	2206      	movs	r2, #6
 800dc42:	705a      	strb	r2, [r3, #1]


    uint8_t buffer[10];  // Buffer to hold all bytes to be sent

    // Prepare the buffer
    buffer[0] = 0x5A;
 800dc44:	235a      	movs	r3, #90	; 0x5a
 800dc46:	703b      	strb	r3, [r7, #0]
    buffer[1] = 0xA5;
 800dc48:	23a5      	movs	r3, #165	; 0xa5
 800dc4a:	707b      	strb	r3, [r7, #1]
    buffer[2] = 0x07;
 800dc4c:	2307      	movs	r3, #7
 800dc4e:	70bb      	strb	r3, [r7, #2]
    buffer[3] = 0x82;
 800dc50:	2382      	movs	r3, #130	; 0x82
 800dc52:	70fb      	strb	r3, [r7, #3]
    buffer[4] = 0x00;
 800dc54:	2300      	movs	r3, #0
 800dc56:	713b      	strb	r3, [r7, #4]
    buffer[5] = 0x84;
 800dc58:	2384      	movs	r3, #132	; 0x84
 800dc5a:	717b      	strb	r3, [r7, #5]
    buffer[6] = 0x5A;
 800dc5c:	235a      	movs	r3, #90	; 0x5a
 800dc5e:	71bb      	strb	r3, [r7, #6]
    buffer[7] = 0x01;
 800dc60:	2301      	movs	r3, #1
 800dc62:	71fb      	strb	r3, [r7, #7]

    // Add PAGE_MENU as two bytes (16 bits)
    buffer[8] = (PAGE_MENU >> 8) & 0xFF;  // High byte
 800dc64:	2300      	movs	r3, #0
 800dc66:	723b      	strb	r3, [r7, #8]
    buffer[9] = PAGE_MENU & 0xFF;         // Low byte
 800dc68:	2301      	movs	r3, #1
 800dc6a:	727b      	strb	r3, [r7, #9]

    // Changes page to menu
    HAL_UART_Transmit(&huart2, buffer, 10 , HAL_MAX_DELAY);
 800dc6c:	4639      	mov	r1, r7
 800dc6e:	f04f 33ff 	mov.w	r3, #4294967295
 800dc72:	220a      	movs	r2, #10
 800dc74:	480b      	ldr	r0, [pc, #44]	; (800dca4 <stateStartUp+0xb8>)
 800dc76:	f7fa f897 	bl	8007da8 <HAL_UART_Transmit>
    // Send 5A A5 07 82 00 84 5A 01 PAGE_MENU

    StateMachine.bEventOccurred = true;
 800dc7a:	4b09      	ldr	r3, [pc, #36]	; (800dca0 <stateStartUp+0xb4>)
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	709a      	strb	r2, [r3, #2]
    StateMachine.eEvent = EVENT_STARTUP_COMPLETE;
 800dc80:	4b07      	ldr	r3, [pc, #28]	; (800dca0 <stateStartUp+0xb4>)
 800dc82:	2202      	movs	r2, #2
 800dc84:	705a      	strb	r2, [r3, #1]

    return;
 800dc86:	bf00      	nop



}
 800dc88:	3710      	adds	r7, #16
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	40020c00 	.word	0x40020c00
 800dc94:	200000f0 	.word	0x200000f0
 800dc98:	200002dc 	.word	0x200002dc
 800dc9c:	2000024c 	.word	0x2000024c
 800dca0:	200010d8 	.word	0x200010d8
 800dca4:	200003b4 	.word	0x200003b4

0800dca8 <stateHomeMenu>:

void stateHomeMenu(void) {
 800dca8:	b480      	push	{r7}
 800dcaa:	af00      	add	r7, sp, #0
    // Implement home menu logic here
}
 800dcac:	bf00      	nop
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr

0800dcb6 <stateError>:

void stateError(void) {
 800dcb6:	b480      	push	{r7}
 800dcb8:	af00      	add	r7, sp, #0
    // Implement error handling logic here
}
 800dcba:	bf00      	nop
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc2:	4770      	bx	lr

0800dcc4 <cuvetteRotate>:
 */

#include "main_app.h"


HAL_StatusTypeDef cuvetteRotate(TIM_HandleTypeDef* tim_handle, DAC_HandleTypeDef* dac_handle) {
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b086      	sub	sp, #24
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	6039      	str	r1, [r7, #0]

	// Start the PWM
    HAL_TIM_PWM_Start(tim_handle, TIM_CHANNEL_1);
 800dcce:	2100      	movs	r1, #0
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f7f8 fdbd 	bl	8006850 <HAL_TIM_PWM_Start>

    // Set Micro-step
    HAL_GPIO_WritePin(MS1_1_GPIO_Port, MS1_1_Pin, GPIO_PIN_RESET);
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	2110      	movs	r1, #16
 800dcda:	4838      	ldr	r0, [pc, #224]	; (800ddbc <cuvetteRotate+0xf8>)
 800dcdc:	f7f4 ff6a 	bl	8002bb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MS2_1_GPIO_Port, MS2_1_Pin, GPIO_PIN_RESET);
 800dce0:	2200      	movs	r2, #0
 800dce2:	2120      	movs	r1, #32
 800dce4:	4835      	ldr	r0, [pc, #212]	; (800ddbc <cuvetteRotate+0xf8>)
 800dce6:	f7f4 ff65 	bl	8002bb4 <HAL_GPIO_WritePin>

    if( HAL_DAC_Start(dac_handle, DAC_CHANNEL_1) != HAL_OK){
 800dcea:	2100      	movs	r1, #0
 800dcec:	6838      	ldr	r0, [r7, #0]
 800dcee:	f7f4 f9f2 	bl	80020d6 <HAL_DAC_Start>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d001      	beq.n	800dcfc <cuvetteRotate+0x38>
    	Error_Handler();
 800dcf8:	f7f3 f91e 	bl	8000f38 <Error_Handler>
    }

    if (HAL_DAC_SetValue(dac_handle, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2000) != HAL_OK){
 800dcfc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800dd00:	2200      	movs	r2, #0
 800dd02:	2100      	movs	r1, #0
 800dd04:	6838      	ldr	r0, [r7, #0]
 800dd06:	f7f4 fa3d 	bl	8002184 <HAL_DAC_SetValue>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d001      	beq.n	800dd14 <cuvetteRotate+0x50>
    	Error_Handler();
 800dd10:	f7f3 f912 	bl	8000f38 <Error_Handler>
    }

    if( HAL_DAC_Start(dac_handle, DAC_CHANNEL_2) != HAL_OK){
 800dd14:	2110      	movs	r1, #16
 800dd16:	6838      	ldr	r0, [r7, #0]
 800dd18:	f7f4 f9dd 	bl	80020d6 <HAL_DAC_Start>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d001      	beq.n	800dd26 <cuvetteRotate+0x62>
    	Error_Handler();
 800dd22:	f7f3 f909 	bl	8000f38 <Error_Handler>
    }

    if (HAL_DAC_SetValue(dac_handle, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 2000) != HAL_OK){
 800dd26:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	2110      	movs	r1, #16
 800dd2e:	6838      	ldr	r0, [r7, #0]
 800dd30:	f7f4 fa28 	bl	8002184 <HAL_DAC_SetValue>
 800dd34:	4603      	mov	r3, r0
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d001      	beq.n	800dd3e <cuvetteRotate+0x7a>
    	Error_Handler();
 800dd3a:	f7f3 f8fd 	bl	8000f38 <Error_Handler>
    }



    // Set Direction
    HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_SET);
 800dd3e:	2201      	movs	r2, #1
 800dd40:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd44:	481d      	ldr	r0, [pc, #116]	; (800ddbc <cuvetteRotate+0xf8>)
 800dd46:	f7f4 ff35 	bl	8002bb4 <HAL_GPIO_WritePin>

    GPIO_PinState lastState = GPIO_PIN_RESET;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	75fb      	strb	r3, [r7, #23]
    GPIO_PinState currentState;
    uint32_t startTime = HAL_GetTick();
 800dd4e:	f7f3 fded 	bl	800192c <HAL_GetTick>
 800dd52:	6138      	str	r0, [r7, #16]
    uint32_t timeout = 30000; // 30 seconds timeout
 800dd54:	f247 5330 	movw	r3, #30000	; 0x7530
 800dd58:	60fb      	str	r3, [r7, #12]

    while (1) {
        currentState = HAL_GPIO_ReadPin(LIMIT_SW_1_GPIO_Port, LIMIT_SW_1_Pin);
 800dd5a:	2102      	movs	r1, #2
 800dd5c:	4818      	ldr	r0, [pc, #96]	; (800ddc0 <cuvetteRotate+0xfc>)
 800dd5e:	f7f4 ff11 	bl	8002b84 <HAL_GPIO_ReadPin>
 800dd62:	4603      	mov	r3, r0
 800dd64:	72fb      	strb	r3, [r7, #11]
    	HAL_DAC_SetValue(dac_handle, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0x100);
 800dd66:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	2100      	movs	r1, #0
 800dd6e:	6838      	ldr	r0, [r7, #0]
 800dd70:	f7f4 fa08 	bl	8002184 <HAL_DAC_SetValue>

        // Detect falling edge
        if (lastState == GPIO_PIN_SET && currentState == GPIO_PIN_RESET) {
 800dd74:	7dfb      	ldrb	r3, [r7, #23]
 800dd76:	2b01      	cmp	r3, #1
 800dd78:	d108      	bne.n	800dd8c <cuvetteRotate+0xc8>
 800dd7a:	7afb      	ldrb	r3, [r7, #11]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d105      	bne.n	800dd8c <cuvetteRotate+0xc8>
            HAL_TIM_PWM_Stop(tim_handle, TIM_CHANNEL_1);
 800dd80:	2100      	movs	r1, #0
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f7f8 fe2c 	bl	80069e0 <HAL_TIM_PWM_Stop>
            return HAL_OK;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	e013      	b.n	800ddb4 <cuvetteRotate+0xf0>
        }

        lastState = currentState;
 800dd8c:	7afb      	ldrb	r3, [r7, #11]
 800dd8e:	75fb      	strb	r3, [r7, #23]

        // Check for timeout
        if (HAL_GetTick() - startTime > timeout) {
 800dd90:	f7f3 fdcc 	bl	800192c <HAL_GetTick>
 800dd94:	4602      	mov	r2, r0
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	1ad3      	subs	r3, r2, r3
 800dd9a:	68fa      	ldr	r2, [r7, #12]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d205      	bcs.n	800ddac <cuvetteRotate+0xe8>
            HAL_TIM_PWM_Stop(tim_handle, TIM_CHANNEL_1);
 800dda0:	2100      	movs	r1, #0
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f7f8 fe1c 	bl	80069e0 <HAL_TIM_PWM_Stop>
            return HAL_TIMEOUT;
 800dda8:	2303      	movs	r3, #3
 800ddaa:	e003      	b.n	800ddb4 <cuvetteRotate+0xf0>
        }

        HAL_Delay(10);
 800ddac:	200a      	movs	r0, #10
 800ddae:	f7f3 fdc9 	bl	8001944 <HAL_Delay>
        currentState = HAL_GPIO_ReadPin(LIMIT_SW_1_GPIO_Port, LIMIT_SW_1_Pin);
 800ddb2:	e7d2      	b.n	800dd5a <cuvetteRotate+0x96>
    }
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3718      	adds	r7, #24
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	40020400 	.word	0x40020400
 800ddc0:	40020c00 	.word	0x40020c00

0800ddc4 <malloc>:
 800ddc4:	4b02      	ldr	r3, [pc, #8]	; (800ddd0 <malloc+0xc>)
 800ddc6:	4601      	mov	r1, r0
 800ddc8:	6818      	ldr	r0, [r3, #0]
 800ddca:	f000 b82b 	b.w	800de24 <_malloc_r>
 800ddce:	bf00      	nop
 800ddd0:	20000088 	.word	0x20000088

0800ddd4 <free>:
 800ddd4:	4b02      	ldr	r3, [pc, #8]	; (800dde0 <free+0xc>)
 800ddd6:	4601      	mov	r1, r0
 800ddd8:	6818      	ldr	r0, [r3, #0]
 800ddda:	f000 b901 	b.w	800dfe0 <_free_r>
 800ddde:	bf00      	nop
 800dde0:	20000088 	.word	0x20000088

0800dde4 <sbrk_aligned>:
 800dde4:	b570      	push	{r4, r5, r6, lr}
 800dde6:	4e0e      	ldr	r6, [pc, #56]	; (800de20 <sbrk_aligned+0x3c>)
 800dde8:	460c      	mov	r4, r1
 800ddea:	6831      	ldr	r1, [r6, #0]
 800ddec:	4605      	mov	r5, r0
 800ddee:	b911      	cbnz	r1, 800ddf6 <sbrk_aligned+0x12>
 800ddf0:	f000 f8ac 	bl	800df4c <_sbrk_r>
 800ddf4:	6030      	str	r0, [r6, #0]
 800ddf6:	4621      	mov	r1, r4
 800ddf8:	4628      	mov	r0, r5
 800ddfa:	f000 f8a7 	bl	800df4c <_sbrk_r>
 800ddfe:	1c43      	adds	r3, r0, #1
 800de00:	d00a      	beq.n	800de18 <sbrk_aligned+0x34>
 800de02:	1cc4      	adds	r4, r0, #3
 800de04:	f024 0403 	bic.w	r4, r4, #3
 800de08:	42a0      	cmp	r0, r4
 800de0a:	d007      	beq.n	800de1c <sbrk_aligned+0x38>
 800de0c:	1a21      	subs	r1, r4, r0
 800de0e:	4628      	mov	r0, r5
 800de10:	f000 f89c 	bl	800df4c <_sbrk_r>
 800de14:	3001      	adds	r0, #1
 800de16:	d101      	bne.n	800de1c <sbrk_aligned+0x38>
 800de18:	f04f 34ff 	mov.w	r4, #4294967295
 800de1c:	4620      	mov	r0, r4
 800de1e:	bd70      	pop	{r4, r5, r6, pc}
 800de20:	200010e4 	.word	0x200010e4

0800de24 <_malloc_r>:
 800de24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de28:	1ccd      	adds	r5, r1, #3
 800de2a:	f025 0503 	bic.w	r5, r5, #3
 800de2e:	3508      	adds	r5, #8
 800de30:	2d0c      	cmp	r5, #12
 800de32:	bf38      	it	cc
 800de34:	250c      	movcc	r5, #12
 800de36:	2d00      	cmp	r5, #0
 800de38:	4607      	mov	r7, r0
 800de3a:	db01      	blt.n	800de40 <_malloc_r+0x1c>
 800de3c:	42a9      	cmp	r1, r5
 800de3e:	d905      	bls.n	800de4c <_malloc_r+0x28>
 800de40:	230c      	movs	r3, #12
 800de42:	603b      	str	r3, [r7, #0]
 800de44:	2600      	movs	r6, #0
 800de46:	4630      	mov	r0, r6
 800de48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800df20 <_malloc_r+0xfc>
 800de50:	f000 f868 	bl	800df24 <__malloc_lock>
 800de54:	f8d8 3000 	ldr.w	r3, [r8]
 800de58:	461c      	mov	r4, r3
 800de5a:	bb5c      	cbnz	r4, 800deb4 <_malloc_r+0x90>
 800de5c:	4629      	mov	r1, r5
 800de5e:	4638      	mov	r0, r7
 800de60:	f7ff ffc0 	bl	800dde4 <sbrk_aligned>
 800de64:	1c43      	adds	r3, r0, #1
 800de66:	4604      	mov	r4, r0
 800de68:	d155      	bne.n	800df16 <_malloc_r+0xf2>
 800de6a:	f8d8 4000 	ldr.w	r4, [r8]
 800de6e:	4626      	mov	r6, r4
 800de70:	2e00      	cmp	r6, #0
 800de72:	d145      	bne.n	800df00 <_malloc_r+0xdc>
 800de74:	2c00      	cmp	r4, #0
 800de76:	d048      	beq.n	800df0a <_malloc_r+0xe6>
 800de78:	6823      	ldr	r3, [r4, #0]
 800de7a:	4631      	mov	r1, r6
 800de7c:	4638      	mov	r0, r7
 800de7e:	eb04 0903 	add.w	r9, r4, r3
 800de82:	f000 f863 	bl	800df4c <_sbrk_r>
 800de86:	4581      	cmp	r9, r0
 800de88:	d13f      	bne.n	800df0a <_malloc_r+0xe6>
 800de8a:	6821      	ldr	r1, [r4, #0]
 800de8c:	1a6d      	subs	r5, r5, r1
 800de8e:	4629      	mov	r1, r5
 800de90:	4638      	mov	r0, r7
 800de92:	f7ff ffa7 	bl	800dde4 <sbrk_aligned>
 800de96:	3001      	adds	r0, #1
 800de98:	d037      	beq.n	800df0a <_malloc_r+0xe6>
 800de9a:	6823      	ldr	r3, [r4, #0]
 800de9c:	442b      	add	r3, r5
 800de9e:	6023      	str	r3, [r4, #0]
 800dea0:	f8d8 3000 	ldr.w	r3, [r8]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d038      	beq.n	800df1a <_malloc_r+0xf6>
 800dea8:	685a      	ldr	r2, [r3, #4]
 800deaa:	42a2      	cmp	r2, r4
 800deac:	d12b      	bne.n	800df06 <_malloc_r+0xe2>
 800deae:	2200      	movs	r2, #0
 800deb0:	605a      	str	r2, [r3, #4]
 800deb2:	e00f      	b.n	800ded4 <_malloc_r+0xb0>
 800deb4:	6822      	ldr	r2, [r4, #0]
 800deb6:	1b52      	subs	r2, r2, r5
 800deb8:	d41f      	bmi.n	800defa <_malloc_r+0xd6>
 800deba:	2a0b      	cmp	r2, #11
 800debc:	d917      	bls.n	800deee <_malloc_r+0xca>
 800debe:	1961      	adds	r1, r4, r5
 800dec0:	42a3      	cmp	r3, r4
 800dec2:	6025      	str	r5, [r4, #0]
 800dec4:	bf18      	it	ne
 800dec6:	6059      	strne	r1, [r3, #4]
 800dec8:	6863      	ldr	r3, [r4, #4]
 800deca:	bf08      	it	eq
 800decc:	f8c8 1000 	streq.w	r1, [r8]
 800ded0:	5162      	str	r2, [r4, r5]
 800ded2:	604b      	str	r3, [r1, #4]
 800ded4:	4638      	mov	r0, r7
 800ded6:	f104 060b 	add.w	r6, r4, #11
 800deda:	f000 f829 	bl	800df30 <__malloc_unlock>
 800dede:	f026 0607 	bic.w	r6, r6, #7
 800dee2:	1d23      	adds	r3, r4, #4
 800dee4:	1af2      	subs	r2, r6, r3
 800dee6:	d0ae      	beq.n	800de46 <_malloc_r+0x22>
 800dee8:	1b9b      	subs	r3, r3, r6
 800deea:	50a3      	str	r3, [r4, r2]
 800deec:	e7ab      	b.n	800de46 <_malloc_r+0x22>
 800deee:	42a3      	cmp	r3, r4
 800def0:	6862      	ldr	r2, [r4, #4]
 800def2:	d1dd      	bne.n	800deb0 <_malloc_r+0x8c>
 800def4:	f8c8 2000 	str.w	r2, [r8]
 800def8:	e7ec      	b.n	800ded4 <_malloc_r+0xb0>
 800defa:	4623      	mov	r3, r4
 800defc:	6864      	ldr	r4, [r4, #4]
 800defe:	e7ac      	b.n	800de5a <_malloc_r+0x36>
 800df00:	4634      	mov	r4, r6
 800df02:	6876      	ldr	r6, [r6, #4]
 800df04:	e7b4      	b.n	800de70 <_malloc_r+0x4c>
 800df06:	4613      	mov	r3, r2
 800df08:	e7cc      	b.n	800dea4 <_malloc_r+0x80>
 800df0a:	230c      	movs	r3, #12
 800df0c:	603b      	str	r3, [r7, #0]
 800df0e:	4638      	mov	r0, r7
 800df10:	f000 f80e 	bl	800df30 <__malloc_unlock>
 800df14:	e797      	b.n	800de46 <_malloc_r+0x22>
 800df16:	6025      	str	r5, [r4, #0]
 800df18:	e7dc      	b.n	800ded4 <_malloc_r+0xb0>
 800df1a:	605b      	str	r3, [r3, #4]
 800df1c:	deff      	udf	#255	; 0xff
 800df1e:	bf00      	nop
 800df20:	200010e0 	.word	0x200010e0

0800df24 <__malloc_lock>:
 800df24:	4801      	ldr	r0, [pc, #4]	; (800df2c <__malloc_lock+0x8>)
 800df26:	f000 b84b 	b.w	800dfc0 <__retarget_lock_acquire_recursive>
 800df2a:	bf00      	nop
 800df2c:	20001224 	.word	0x20001224

0800df30 <__malloc_unlock>:
 800df30:	4801      	ldr	r0, [pc, #4]	; (800df38 <__malloc_unlock+0x8>)
 800df32:	f000 b846 	b.w	800dfc2 <__retarget_lock_release_recursive>
 800df36:	bf00      	nop
 800df38:	20001224 	.word	0x20001224

0800df3c <memset>:
 800df3c:	4402      	add	r2, r0
 800df3e:	4603      	mov	r3, r0
 800df40:	4293      	cmp	r3, r2
 800df42:	d100      	bne.n	800df46 <memset+0xa>
 800df44:	4770      	bx	lr
 800df46:	f803 1b01 	strb.w	r1, [r3], #1
 800df4a:	e7f9      	b.n	800df40 <memset+0x4>

0800df4c <_sbrk_r>:
 800df4c:	b538      	push	{r3, r4, r5, lr}
 800df4e:	4d06      	ldr	r5, [pc, #24]	; (800df68 <_sbrk_r+0x1c>)
 800df50:	2300      	movs	r3, #0
 800df52:	4604      	mov	r4, r0
 800df54:	4608      	mov	r0, r1
 800df56:	602b      	str	r3, [r5, #0]
 800df58:	f7f3 fc10 	bl	800177c <_sbrk>
 800df5c:	1c43      	adds	r3, r0, #1
 800df5e:	d102      	bne.n	800df66 <_sbrk_r+0x1a>
 800df60:	682b      	ldr	r3, [r5, #0]
 800df62:	b103      	cbz	r3, 800df66 <_sbrk_r+0x1a>
 800df64:	6023      	str	r3, [r4, #0]
 800df66:	bd38      	pop	{r3, r4, r5, pc}
 800df68:	20001220 	.word	0x20001220

0800df6c <__errno>:
 800df6c:	4b01      	ldr	r3, [pc, #4]	; (800df74 <__errno+0x8>)
 800df6e:	6818      	ldr	r0, [r3, #0]
 800df70:	4770      	bx	lr
 800df72:	bf00      	nop
 800df74:	20000088 	.word	0x20000088

0800df78 <__libc_init_array>:
 800df78:	b570      	push	{r4, r5, r6, lr}
 800df7a:	4d0d      	ldr	r5, [pc, #52]	; (800dfb0 <__libc_init_array+0x38>)
 800df7c:	4c0d      	ldr	r4, [pc, #52]	; (800dfb4 <__libc_init_array+0x3c>)
 800df7e:	1b64      	subs	r4, r4, r5
 800df80:	10a4      	asrs	r4, r4, #2
 800df82:	2600      	movs	r6, #0
 800df84:	42a6      	cmp	r6, r4
 800df86:	d109      	bne.n	800df9c <__libc_init_array+0x24>
 800df88:	4d0b      	ldr	r5, [pc, #44]	; (800dfb8 <__libc_init_array+0x40>)
 800df8a:	4c0c      	ldr	r4, [pc, #48]	; (800dfbc <__libc_init_array+0x44>)
 800df8c:	f000 f874 	bl	800e078 <_init>
 800df90:	1b64      	subs	r4, r4, r5
 800df92:	10a4      	asrs	r4, r4, #2
 800df94:	2600      	movs	r6, #0
 800df96:	42a6      	cmp	r6, r4
 800df98:	d105      	bne.n	800dfa6 <__libc_init_array+0x2e>
 800df9a:	bd70      	pop	{r4, r5, r6, pc}
 800df9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfa0:	4798      	blx	r3
 800dfa2:	3601      	adds	r6, #1
 800dfa4:	e7ee      	b.n	800df84 <__libc_init_array+0xc>
 800dfa6:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfaa:	4798      	blx	r3
 800dfac:	3601      	adds	r6, #1
 800dfae:	e7f2      	b.n	800df96 <__libc_init_array+0x1e>
 800dfb0:	0800e0fc 	.word	0x0800e0fc
 800dfb4:	0800e0fc 	.word	0x0800e0fc
 800dfb8:	0800e0fc 	.word	0x0800e0fc
 800dfbc:	0800e100 	.word	0x0800e100

0800dfc0 <__retarget_lock_acquire_recursive>:
 800dfc0:	4770      	bx	lr

0800dfc2 <__retarget_lock_release_recursive>:
 800dfc2:	4770      	bx	lr

0800dfc4 <memcpy>:
 800dfc4:	440a      	add	r2, r1
 800dfc6:	4291      	cmp	r1, r2
 800dfc8:	f100 33ff 	add.w	r3, r0, #4294967295
 800dfcc:	d100      	bne.n	800dfd0 <memcpy+0xc>
 800dfce:	4770      	bx	lr
 800dfd0:	b510      	push	{r4, lr}
 800dfd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dfd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dfda:	4291      	cmp	r1, r2
 800dfdc:	d1f9      	bne.n	800dfd2 <memcpy+0xe>
 800dfde:	bd10      	pop	{r4, pc}

0800dfe0 <_free_r>:
 800dfe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfe2:	2900      	cmp	r1, #0
 800dfe4:	d044      	beq.n	800e070 <_free_r+0x90>
 800dfe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfea:	9001      	str	r0, [sp, #4]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	f1a1 0404 	sub.w	r4, r1, #4
 800dff2:	bfb8      	it	lt
 800dff4:	18e4      	addlt	r4, r4, r3
 800dff6:	f7ff ff95 	bl	800df24 <__malloc_lock>
 800dffa:	4a1e      	ldr	r2, [pc, #120]	; (800e074 <_free_r+0x94>)
 800dffc:	9801      	ldr	r0, [sp, #4]
 800dffe:	6813      	ldr	r3, [r2, #0]
 800e000:	b933      	cbnz	r3, 800e010 <_free_r+0x30>
 800e002:	6063      	str	r3, [r4, #4]
 800e004:	6014      	str	r4, [r2, #0]
 800e006:	b003      	add	sp, #12
 800e008:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e00c:	f7ff bf90 	b.w	800df30 <__malloc_unlock>
 800e010:	42a3      	cmp	r3, r4
 800e012:	d908      	bls.n	800e026 <_free_r+0x46>
 800e014:	6825      	ldr	r5, [r4, #0]
 800e016:	1961      	adds	r1, r4, r5
 800e018:	428b      	cmp	r3, r1
 800e01a:	bf01      	itttt	eq
 800e01c:	6819      	ldreq	r1, [r3, #0]
 800e01e:	685b      	ldreq	r3, [r3, #4]
 800e020:	1949      	addeq	r1, r1, r5
 800e022:	6021      	streq	r1, [r4, #0]
 800e024:	e7ed      	b.n	800e002 <_free_r+0x22>
 800e026:	461a      	mov	r2, r3
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	b10b      	cbz	r3, 800e030 <_free_r+0x50>
 800e02c:	42a3      	cmp	r3, r4
 800e02e:	d9fa      	bls.n	800e026 <_free_r+0x46>
 800e030:	6811      	ldr	r1, [r2, #0]
 800e032:	1855      	adds	r5, r2, r1
 800e034:	42a5      	cmp	r5, r4
 800e036:	d10b      	bne.n	800e050 <_free_r+0x70>
 800e038:	6824      	ldr	r4, [r4, #0]
 800e03a:	4421      	add	r1, r4
 800e03c:	1854      	adds	r4, r2, r1
 800e03e:	42a3      	cmp	r3, r4
 800e040:	6011      	str	r1, [r2, #0]
 800e042:	d1e0      	bne.n	800e006 <_free_r+0x26>
 800e044:	681c      	ldr	r4, [r3, #0]
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	6053      	str	r3, [r2, #4]
 800e04a:	440c      	add	r4, r1
 800e04c:	6014      	str	r4, [r2, #0]
 800e04e:	e7da      	b.n	800e006 <_free_r+0x26>
 800e050:	d902      	bls.n	800e058 <_free_r+0x78>
 800e052:	230c      	movs	r3, #12
 800e054:	6003      	str	r3, [r0, #0]
 800e056:	e7d6      	b.n	800e006 <_free_r+0x26>
 800e058:	6825      	ldr	r5, [r4, #0]
 800e05a:	1961      	adds	r1, r4, r5
 800e05c:	428b      	cmp	r3, r1
 800e05e:	bf04      	itt	eq
 800e060:	6819      	ldreq	r1, [r3, #0]
 800e062:	685b      	ldreq	r3, [r3, #4]
 800e064:	6063      	str	r3, [r4, #4]
 800e066:	bf04      	itt	eq
 800e068:	1949      	addeq	r1, r1, r5
 800e06a:	6021      	streq	r1, [r4, #0]
 800e06c:	6054      	str	r4, [r2, #4]
 800e06e:	e7ca      	b.n	800e006 <_free_r+0x26>
 800e070:	b003      	add	sp, #12
 800e072:	bd30      	pop	{r4, r5, pc}
 800e074:	200010e0 	.word	0x200010e0

0800e078 <_init>:
 800e078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e07a:	bf00      	nop
 800e07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e07e:	bc08      	pop	{r3}
 800e080:	469e      	mov	lr, r3
 800e082:	4770      	bx	lr

0800e084 <_fini>:
 800e084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e086:	bf00      	nop
 800e088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e08a:	bc08      	pop	{r3}
 800e08c:	469e      	mov	lr, r3
 800e08e:	4770      	bx	lr
