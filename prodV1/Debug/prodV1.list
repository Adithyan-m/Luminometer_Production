
prodV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f074  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800f238  0800f238  0001f238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2a0  0800f2a0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f2a0  0800f2a0  0001f2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f2a8  0800f2a8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f2a8  0800f2a8  0001f2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f2ac  0800f2ac  0001f2ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800f2b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000119c  2000008c  0800f33c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20001228  0800f33c  00021228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029a3e  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000062a0  00000000  00000000  00049b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001eb0  00000000  00000000  0004fde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017bf  00000000  00000000  00051c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ae0a  00000000  00000000  0005344f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d1e9  00000000  00000000  0007e259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eafdf  00000000  00000000  000ab442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000083bc  00000000  00000000  00196424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0019e7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000008c 	.word	0x2000008c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800f220 	.word	0x0800f220

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000090 	.word	0x20000090
 8000200:	0800f220 	.word	0x0800f220

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f001 f9ac 	bl	8001860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f826 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 fc22 	bl	8000d54 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000510:	f000 f88e 	bl	8000630 <MX_ADC1_Init>
  MX_DAC_Init();
 8000514:	f000 f8de 	bl	80006d4 <MX_DAC_Init>
  MX_I2C1_Init();
 8000518:	f000 f910 	bl	800073c <MX_I2C1_Init>
  MX_I2C3_Init();
 800051c:	f000 f93c 	bl	8000798 <MX_I2C3_Init>
  MX_UART4_Init();
 8000520:	f000 fb68 	bl	8000bf4 <MX_UART4_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000524:	f000 fbe4 	bl	8000cf0 <MX_USB_OTG_HS_PCD_Init>
  MX_TIM2_Init();
 8000528:	f000 fa3a 	bl	80009a0 <MX_TIM2_Init>
  MX_SPI3_Init();
 800052c:	f000 f962 	bl	80007f4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000530:	f000 fb8a 	bl	8000c48 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000534:	f000 fbb2 	bl	8000c9c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000538:	f00a f9a2 	bl	800a880 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 800053c:	f00d fbb6 	bl	800dcac <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000540:	f000 f98e 	bl	8000860 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000544:	f000 fa7e 	bl	8000a44 <MX_TIM4_Init>
  MX_TIM9_Init();
 8000548:	f000 faf2 	bl	8000b30 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  main_app();
 800054c:	f00e fb7a 	bl	800ec44 <main_app>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000550:	f00d fbd2 	bl	800dcf8 <MX_USB_HOST_Process>
 8000554:	e7fc      	b.n	8000550 <main+0x50>
	...

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	2234      	movs	r2, #52	; 0x34
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f00e fdbc 	bl	800f0e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b29      	ldr	r3, [pc, #164]	; (8000628 <SystemClock_Config+0xd0>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a28      	ldr	r2, [pc, #160]	; (8000628 <SystemClock_Config+0xd0>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b26      	ldr	r3, [pc, #152]	; (8000628 <SystemClock_Config+0xd0>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000598:	2300      	movs	r3, #0
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	4b23      	ldr	r3, [pc, #140]	; (800062c <SystemClock_Config+0xd4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a4:	4a21      	ldr	r2, [pc, #132]	; (800062c <SystemClock_Config+0xd4>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <SystemClock_Config+0xd4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005cc:	2304      	movs	r3, #4
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005d0:	2348      	movs	r3, #72	; 0x48
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005d8:	2303      	movs	r3, #3
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005dc:	2302      	movs	r3, #2
 80005de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 031c 	add.w	r3, r7, #28
 80005e4:	4618      	mov	r0, r3
 80005e6:	f006 fbc1 	bl	8006d6c <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005f0:	f000 fca2 	bl	8000f38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80005f8:	2303      	movs	r3, #3
 80005fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000604:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f005 fd37 	bl	8006084 <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800061c:	f000 fc8c 	bl	8000f38 <Error_Handler>
  }
}
 8000620:	bf00      	nop
 8000622:	3750      	adds	r7, #80	; 0x50
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000636:	463b      	mov	r3, r7
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000644:	4a21      	ldr	r2, [pc, #132]	; (80006cc <MX_ADC1_Init+0x9c>)
 8000646:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <MX_ADC1_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800064e:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800065a:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <MX_ADC1_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000660:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000668:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <MX_ADC1_Init+0x98>)
 800066a:	2200      	movs	r2, #0
 800066c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000670:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <MX_ADC1_Init+0xa0>)
 8000672:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <MX_ADC1_Init+0x98>)
 800067c:	2201      	movs	r2, #1
 800067e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_ADC1_Init+0x98>)
 800068a:	2201      	movs	r2, #1
 800068c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800068e:	480e      	ldr	r0, [pc, #56]	; (80006c8 <MX_ADC1_Init+0x98>)
 8000690:	f001 f97c 	bl	800198c <HAL_ADC_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800069a:	f000 fc4d 	bl	8000f38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800069e:	230b      	movs	r3, #11
 80006a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006a2:	2301      	movs	r3, #1
 80006a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006aa:	463b      	mov	r3, r7
 80006ac:	4619      	mov	r1, r3
 80006ae:	4806      	ldr	r0, [pc, #24]	; (80006c8 <MX_ADC1_Init+0x98>)
 80006b0:	f001 f9b0 	bl	8001a14 <HAL_ADC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006ba:	f000 fc3d 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200000a8 	.word	0x200000a8
 80006cc:	40012000 	.word	0x40012000
 80006d0:	0f000001 	.word	0x0f000001

080006d4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006da:	463b      	mov	r3, r7
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_DAC_Init+0x60>)
 80006e4:	4a14      	ldr	r2, [pc, #80]	; (8000738 <MX_DAC_Init+0x64>)
 80006e6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80006e8:	4812      	ldr	r0, [pc, #72]	; (8000734 <MX_DAC_Init+0x60>)
 80006ea:	f001 fcd2 	bl	8002092 <HAL_DAC_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80006f4:	f000 fc20 	bl	8000f38 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	2200      	movs	r2, #0
 8000704:	4619      	mov	r1, r3
 8000706:	480b      	ldr	r0, [pc, #44]	; (8000734 <MX_DAC_Init+0x60>)
 8000708:	f001 fd66 	bl	80021d8 <HAL_DAC_ConfigChannel>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000712:	f000 fc11 	bl	8000f38 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000716:	463b      	mov	r3, r7
 8000718:	2210      	movs	r2, #16
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_DAC_Init+0x60>)
 800071e:	f001 fd5b 	bl	80021d8 <HAL_DAC_ConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000728:	f000 fc06 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000f0 	.word	0x200000f0
 8000738:	40007400 	.word	0x40007400

0800073c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_I2C1_Init+0x50>)
 8000742:	4a13      	ldr	r2, [pc, #76]	; (8000790 <MX_I2C1_Init+0x54>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_I2C1_Init+0x50>)
 8000748:	4a12      	ldr	r2, [pc, #72]	; (8000794 <MX_I2C1_Init+0x58>)
 800074a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_I2C1_Init+0x50>)
 800075a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800075e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_I2C1_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_I2C1_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_I2C1_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_I2C1_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_I2C1_Init+0x50>)
 800077a:	f004 fb4f 	bl	8004e1c <HAL_I2C_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000784:	f000 fbd8 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000104 	.word	0x20000104
 8000790:	40005400 	.word	0x40005400
 8000794:	000186a0 	.word	0x000186a0

08000798 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_I2C3_Init+0x50>)
 800079e:	4a13      	ldr	r2, [pc, #76]	; (80007ec <MX_I2C3_Init+0x54>)
 80007a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007a4:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <MX_I2C3_Init+0x58>)
 80007a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_I2C3_Init+0x50>)
 80007d6:	f004 fb21 	bl	8004e1c <HAL_I2C_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007e0:	f000 fbaa 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000158 	.word	0x20000158
 80007ec:	40005c00 	.word	0x40005c00
 80007f0:	000186a0 	.word	0x000186a0

080007f4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_SPI3_Init+0x64>)
 80007fa:	4a18      	ldr	r2, [pc, #96]	; (800085c <MX_SPI3_Init+0x68>)
 80007fc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_SPI3_Init+0x64>)
 8000800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000804:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_SPI3_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_SPI3_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_SPI3_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_SPI3_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_SPI3_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_SPI3_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_SPI3_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_SPI3_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_SPI3_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_SPI3_Init+0x64>)
 800083e:	220a      	movs	r2, #10
 8000840:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_SPI3_Init+0x64>)
 8000844:	f006 fd30 	bl	80072a8 <HAL_SPI_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_SPI3_Init+0x5e>
  {
    Error_Handler();
 800084e:	f000 fb73 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200001ac 	.word	0x200001ac
 800085c:	40003c00 	.word	0x40003c00

08000860 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b096      	sub	sp, #88	; 0x58
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000866:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000874:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800087e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
 800088e:	615a      	str	r2, [r3, #20]
 8000890:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2220      	movs	r2, #32
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f00e fc23 	bl	800f0e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800089e:	4b3e      	ldr	r3, [pc, #248]	; (8000998 <MX_TIM1_Init+0x138>)
 80008a0:	4a3e      	ldr	r2, [pc, #248]	; (800099c <MX_TIM1_Init+0x13c>)
 80008a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008a4:	4b3c      	ldr	r3, [pc, #240]	; (8000998 <MX_TIM1_Init+0x138>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008aa:	4b3b      	ldr	r3, [pc, #236]	; (8000998 <MX_TIM1_Init+0x138>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008b0:	4b39      	ldr	r3, [pc, #228]	; (8000998 <MX_TIM1_Init+0x138>)
 80008b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b8:	4b37      	ldr	r3, [pc, #220]	; (8000998 <MX_TIM1_Init+0x138>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008be:	4b36      	ldr	r3, [pc, #216]	; (8000998 <MX_TIM1_Init+0x138>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c4:	4b34      	ldr	r3, [pc, #208]	; (8000998 <MX_TIM1_Init+0x138>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008ca:	4833      	ldr	r0, [pc, #204]	; (8000998 <MX_TIM1_Init+0x138>)
 80008cc:	f006 fd75 	bl	80073ba <HAL_TIM_Base_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80008d6:	f000 fb2f 	bl	8000f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008e4:	4619      	mov	r1, r3
 80008e6:	482c      	ldr	r0, [pc, #176]	; (8000998 <MX_TIM1_Init+0x138>)
 80008e8:	f007 fae8 	bl	8007ebc <HAL_TIM_ConfigClockSource>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008f2:	f000 fb21 	bl	8000f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008f6:	4828      	ldr	r0, [pc, #160]	; (8000998 <MX_TIM1_Init+0x138>)
 80008f8:	f006 fe07 	bl	800750a <HAL_TIM_PWM_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000902:	f000 fb19 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800090e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000912:	4619      	mov	r1, r3
 8000914:	4820      	ldr	r0, [pc, #128]	; (8000998 <MX_TIM1_Init+0x138>)
 8000916:	f007 ffdf 	bl	80088d8 <HAL_TIMEx_MasterConfigSynchronization>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000920:	f000 fb0a 	bl	8000f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000924:	2360      	movs	r3, #96	; 0x60
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000930:	2300      	movs	r3, #0
 8000932:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000944:	2200      	movs	r2, #0
 8000946:	4619      	mov	r1, r3
 8000948:	4813      	ldr	r0, [pc, #76]	; (8000998 <MX_TIM1_Init+0x138>)
 800094a:	f007 f9f5 	bl	8007d38 <HAL_TIM_PWM_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000954:	f000 faf0 	bl	8000f38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800096c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000970:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	4619      	mov	r1, r3
 800097a:	4807      	ldr	r0, [pc, #28]	; (8000998 <MX_TIM1_Init+0x138>)
 800097c:	f008 f828 	bl	80089d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000986:	f000 fad7 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800098a:	4803      	ldr	r0, [pc, #12]	; (8000998 <MX_TIM1_Init+0x138>)
 800098c:	f000 fd28 	bl	80013e0 <HAL_TIM_MspPostInit>

}
 8000990:	bf00      	nop
 8000992:	3758      	adds	r7, #88	; 0x58
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000204 	.word	0x20000204
 800099c:	40010000 	.word	0x40010000

080009a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80009b0:	463b      	mov	r3, r7
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009bc:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <MX_TIM2_Init+0xa0>)
 80009be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009c4:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <MX_TIM2_Init+0xa0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ca:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <MX_TIM2_Init+0xa0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <MX_TIM2_Init+0xa0>)
 80009d2:	f04f 32ff 	mov.w	r2, #4294967295
 80009d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d8:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <MX_TIM2_Init+0xa0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <MX_TIM2_Init+0xa0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80009e4:	4816      	ldr	r0, [pc, #88]	; (8000a40 <MX_TIM2_Init+0xa0>)
 80009e6:	f006 ff21 	bl	800782c <HAL_TIM_IC_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009f0:	f000 faa2 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	4619      	mov	r1, r3
 8000a02:	480f      	ldr	r0, [pc, #60]	; (8000a40 <MX_TIM2_Init+0xa0>)
 8000a04:	f007 ff68 	bl	80088d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a0e:	f000 fa93 	bl	8000f38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a16:	2301      	movs	r3, #1
 8000a18:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a22:	463b      	mov	r3, r7
 8000a24:	2200      	movs	r2, #0
 8000a26:	4619      	mov	r1, r3
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_TIM2_Init+0xa0>)
 8000a2a:	f007 f8e9 	bl	8007c00 <HAL_TIM_IC_ConfigChannel>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000a34:	f000 fa80 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	2000024c 	.word	0x2000024c

08000a44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08e      	sub	sp, #56	; 0x38
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a58:	f107 0320 	add.w	r3, r7, #32
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	615a      	str	r2, [r3, #20]
 8000a72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a74:	4b2c      	ldr	r3, [pc, #176]	; (8000b28 <MX_TIM4_Init+0xe4>)
 8000a76:	4a2d      	ldr	r2, [pc, #180]	; (8000b2c <MX_TIM4_Init+0xe8>)
 8000a78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a7a:	4b2b      	ldr	r3, [pc, #172]	; (8000b28 <MX_TIM4_Init+0xe4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a80:	4b29      	ldr	r3, [pc, #164]	; (8000b28 <MX_TIM4_Init+0xe4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a86:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <MX_TIM4_Init+0xe4>)
 8000a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8e:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <MX_TIM4_Init+0xe4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a94:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <MX_TIM4_Init+0xe4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a9a:	4823      	ldr	r0, [pc, #140]	; (8000b28 <MX_TIM4_Init+0xe4>)
 8000a9c:	f006 fc8d 	bl	80073ba <HAL_TIM_Base_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000aa6:	f000 fa47 	bl	8000f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ab0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	481c      	ldr	r0, [pc, #112]	; (8000b28 <MX_TIM4_Init+0xe4>)
 8000ab8:	f007 fa00 	bl	8007ebc <HAL_TIM_ConfigClockSource>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000ac2:	f000 fa39 	bl	8000f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ac6:	4818      	ldr	r0, [pc, #96]	; (8000b28 <MX_TIM4_Init+0xe4>)
 8000ac8:	f006 fd1f 	bl	800750a <HAL_TIM_PWM_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000ad2:	f000 fa31 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ade:	f107 0320 	add.w	r3, r7, #32
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4810      	ldr	r0, [pc, #64]	; (8000b28 <MX_TIM4_Init+0xe4>)
 8000ae6:	f007 fef7 	bl	80088d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000af0:	f000 fa22 	bl	8000f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af4:	2360      	movs	r3, #96	; 0x60
 8000af6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2200      	movs	r2, #0
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4807      	ldr	r0, [pc, #28]	; (8000b28 <MX_TIM4_Init+0xe4>)
 8000b0c:	f007 f914 	bl	8007d38 <HAL_TIM_PWM_ConfigChannel>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000b16:	f000 fa0f 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b1a:	4803      	ldr	r0, [pc, #12]	; (8000b28 <MX_TIM4_Init+0xe4>)
 8000b1c:	f000 fc60 	bl	80013e0 <HAL_TIM_MspPostInit>

}
 8000b20:	bf00      	nop
 8000b22:	3738      	adds	r7, #56	; 0x38
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000294 	.word	0x20000294
 8000b2c:	40000800 	.word	0x40000800

08000b30 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	; 0x30
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b36:	f107 0320 	add.w	r3, r7, #32
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]
 8000b52:	615a      	str	r2, [r3, #20]
 8000b54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000b56:	4b25      	ldr	r3, [pc, #148]	; (8000bec <MX_TIM9_Init+0xbc>)
 8000b58:	4a25      	ldr	r2, [pc, #148]	; (8000bf0 <MX_TIM9_Init+0xc0>)
 8000b5a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000b5c:	4b23      	ldr	r3, [pc, #140]	; (8000bec <MX_TIM9_Init+0xbc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b62:	4b22      	ldr	r3, [pc, #136]	; (8000bec <MX_TIM9_Init+0xbc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8000b68:	4b20      	ldr	r3, [pc, #128]	; (8000bec <MX_TIM9_Init+0xbc>)
 8000b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b6e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b70:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <MX_TIM9_Init+0xbc>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b76:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <MX_TIM9_Init+0xbc>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000b7c:	481b      	ldr	r0, [pc, #108]	; (8000bec <MX_TIM9_Init+0xbc>)
 8000b7e:	f006 fc1c 	bl	80073ba <HAL_TIM_Base_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8000b88:	f000 f9d6 	bl	8000f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b90:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000b92:	f107 0320 	add.w	r3, r7, #32
 8000b96:	4619      	mov	r1, r3
 8000b98:	4814      	ldr	r0, [pc, #80]	; (8000bec <MX_TIM9_Init+0xbc>)
 8000b9a:	f007 f98f 	bl	8007ebc <HAL_TIM_ConfigClockSource>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8000ba4:	f000 f9c8 	bl	8000f38 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 8000ba8:	4810      	ldr	r0, [pc, #64]	; (8000bec <MX_TIM9_Init+0xbc>)
 8000baa:	f006 fc55 	bl	8007458 <HAL_TIM_OC_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8000bb4:	f000 f9c0 	bl	8000f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4807      	ldr	r0, [pc, #28]	; (8000bec <MX_TIM9_Init+0xbc>)
 8000bd0:	f006 ffba 	bl	8007b48 <HAL_TIM_OC_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8000bda:	f000 f9ad 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000bde:	4803      	ldr	r0, [pc, #12]	; (8000bec <MX_TIM9_Init+0xbc>)
 8000be0:	f000 fbfe 	bl	80013e0 <HAL_TIM_MspPostInit>

}
 8000be4:	bf00      	nop
 8000be6:	3730      	adds	r7, #48	; 0x30
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200002dc 	.word	0x200002dc
 8000bf0:	40014000 	.word	0x40014000

08000bf4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_UART4_Init+0x4c>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <MX_UART4_Init+0x50>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_UART4_Init+0x4c>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_UART4_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_UART4_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_UART4_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_UART4_Init+0x4c>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_UART4_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_UART4_Init+0x4c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_UART4_Init+0x4c>)
 8000c2c:	f007 ff22 	bl	8008a74 <HAL_UART_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000c36:	f000 f97f 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000324 	.word	0x20000324
 8000c44:	40004c00 	.word	0x40004c00

08000c48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <MX_USART1_UART_Init+0x50>)
 8000c50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c6e:	220c      	movs	r2, #12
 8000c70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c80:	f007 fef8 	bl	8008a74 <HAL_UART_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c8a:	f000 f955 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	2000036c 	.word	0x2000036c
 8000c98:	40011000 	.word	0x40011000

08000c9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <MX_USART2_UART_Init+0x50>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cd4:	f007 fece 	bl	8008a74 <HAL_UART_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cde:	f000 f92b 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200003b4 	.word	0x200003b4
 8000cec:	40004400 	.word	0x40004400

08000cf0 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000cf4:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000cf6:	4a16      	ldr	r2, [pc, #88]	; (8000d50 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000cf8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000cfc:	2208      	movs	r2, #8
 8000cfe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d02:	2202      	movs	r2, #2
 8000d04:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d0e:	2202      	movs	r2, #2
 8000d10:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000d24:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d38:	f005 f86a 	bl	8005e10 <HAL_PCD_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000d42:	f000 f8f9 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200003fc 	.word	0x200003fc
 8000d50:	40040000 	.word	0x40040000

08000d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	; 0x30
 8000d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
 8000d6e:	4b6c      	ldr	r3, [pc, #432]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a6b      	ldr	r2, [pc, #428]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000d74:	f043 0310 	orr.w	r3, r3, #16
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b69      	ldr	r3, [pc, #420]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0310 	and.w	r3, r3, #16
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	4b65      	ldr	r3, [pc, #404]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a64      	ldr	r2, [pc, #400]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000d90:	f043 0304 	orr.w	r3, r3, #4
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b62      	ldr	r3, [pc, #392]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0304 	and.w	r3, r3, #4
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b5e      	ldr	r3, [pc, #376]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a5d      	ldr	r2, [pc, #372]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b5b      	ldr	r3, [pc, #364]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b57      	ldr	r3, [pc, #348]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a56      	ldr	r2, [pc, #344]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b54      	ldr	r3, [pc, #336]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	4b50      	ldr	r3, [pc, #320]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a4f      	ldr	r2, [pc, #316]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b4d      	ldr	r3, [pc, #308]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	4b49      	ldr	r3, [pc, #292]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a48      	ldr	r2, [pc, #288]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000e00:	f043 0308 	orr.w	r3, r3, #8
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b46      	ldr	r3, [pc, #280]	; (8000f20 <MX_GPIO_Init+0x1cc>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2140      	movs	r1, #64	; 0x40
 8000e16:	4843      	ldr	r0, [pc, #268]	; (8000f24 <MX_GPIO_Init+0x1d0>)
 8000e18:	f001 fecc 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MS2_3_Pin|RFID_RST_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2160      	movs	r1, #96	; 0x60
 8000e20:	4841      	ldr	r0, [pc, #260]	; (8000f28 <MX_GPIO_Init+0x1d4>)
 8000e22:	f001 fec7 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MS1_3_Pin|ENABLE3_Pin|DIR3_Pin|ENABLE2_Pin
 8000e26:	2200      	movs	r2, #0
 8000e28:	f240 613f 	movw	r1, #1599	; 0x63f
 8000e2c:	483f      	ldr	r0, [pc, #252]	; (8000f2c <MX_GPIO_Init+0x1d8>)
 8000e2e:	f001 fec1 	bl	8002bb4 <HAL_GPIO_WritePin>
                          |ENABLE1_Pin|MS1_1_Pin|MS2_1_Pin|DIR1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR2_Pin|MS2_2_Pin|MS1_2_Pin|BUZZER_Pin
 8000e32:	2200      	movs	r2, #0
 8000e34:	f24e 0103 	movw	r1, #57347	; 0xe003
 8000e38:	483d      	ldr	r0, [pc, #244]	; (8000f30 <MX_GPIO_Init+0x1dc>)
 8000e3a:	f001 febb 	bl	8002bb4 <HAL_GPIO_WritePin>
                          |HV_DISABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ESP_RST_Pin */
  GPIO_InitStruct.Pin = ESP_RST_Pin;
 8000e3e:	2340      	movs	r3, #64	; 0x40
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ESP_RST_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	4619      	mov	r1, r3
 8000e54:	4833      	ldr	r0, [pc, #204]	; (8000f24 <MX_GPIO_Init+0x1d0>)
 8000e56:	f001 fd01 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pin : OPTO2_Pin */
  GPIO_InitStruct.Pin = OPTO2_Pin;
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OPTO2_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	482d      	ldr	r0, [pc, #180]	; (8000f24 <MX_GPIO_Init+0x1d0>)
 8000e6e:	f001 fcf5 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pins : MS2_3_Pin RFID_RST_Pin */
  GPIO_InitStruct.Pin = MS2_3_Pin|RFID_RST_Pin;
 8000e72:	2360      	movs	r3, #96	; 0x60
 8000e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4619      	mov	r1, r3
 8000e88:	4827      	ldr	r0, [pc, #156]	; (8000f28 <MX_GPIO_Init+0x1d4>)
 8000e8a:	f001 fce7 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pins : MS1_3_Pin ENABLE3_Pin DIR3_Pin ENABLE2_Pin
                           ENABLE1_Pin MS1_1_Pin MS2_1_Pin DIR1_Pin */
  GPIO_InitStruct.Pin = MS1_3_Pin|ENABLE3_Pin|DIR3_Pin|ENABLE2_Pin
 8000e8e:	f240 633f 	movw	r3, #1599	; 0x63f
 8000e92:	61fb      	str	r3, [r7, #28]
                          |ENABLE1_Pin|MS1_1_Pin|MS2_1_Pin|DIR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4821      	ldr	r0, [pc, #132]	; (8000f2c <MX_GPIO_Init+0x1d8>)
 8000ea8:	f001 fcd8 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pin : OPTO1_Pin */
  GPIO_InitStruct.Pin = OPTO1_Pin;
 8000eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OPTO1_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 031c 	add.w	r3, r7, #28
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	481b      	ldr	r0, [pc, #108]	; (8000f30 <MX_GPIO_Init+0x1dc>)
 8000ec2:	f001 fccb 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin MS2_2_Pin MS1_2_Pin BUZZER_Pin
                           HV_DISABLE_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|MS2_2_Pin|MS1_2_Pin|BUZZER_Pin
 8000ec6:	f24e 0303 	movw	r3, #57347	; 0xe003
 8000eca:	61fb      	str	r3, [r7, #28]
                          |HV_DISABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	4814      	ldr	r0, [pc, #80]	; (8000f30 <MX_GPIO_Init+0x1dc>)
 8000ee0:	f001 fcbc 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000ee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480b      	ldr	r0, [pc, #44]	; (8000f28 <MX_GPIO_Init+0x1d4>)
 8000efa:	f001 fcaf 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pins : TUBE_SEN_Pin LIMIT_SW_1_Pin */
  GPIO_InitStruct.Pin = TUBE_SEN_Pin|LIMIT_SW_1_Pin;
 8000efe:	2303      	movs	r3, #3
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4808      	ldr	r0, [pc, #32]	; (8000f34 <MX_GPIO_Init+0x1e0>)
 8000f12:	f001 fca3 	bl	800285c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f16:	bf00      	nop
 8000f18:	3730      	adds	r7, #48	; 0x30
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020000 	.word	0x40020000
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40020c00 	.word	0x40020c00

08000f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3c:	b672      	cpsid	i
}
 8000f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <Error_Handler+0x8>
	...

08000f44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a0f      	ldr	r2, [pc, #60]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800

08000f94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a17      	ldr	r2, [pc, #92]	; (8001010 <HAL_ADC_MspInit+0x7c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d127      	bne.n	8001006 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <HAL_ADC_MspInit+0x80>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a15      	ldr	r2, [pc, #84]	; (8001014 <HAL_ADC_MspInit+0x80>)
 8000fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <HAL_ADC_MspInit+0x80>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <HAL_ADC_MspInit+0x80>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <HAL_ADC_MspInit+0x80>)
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_ADC_MspInit+0x80>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = NTC_Pin|HV_FB_Pin;
 8000fee:	2306      	movs	r3, #6
 8000ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <HAL_ADC_MspInit+0x84>)
 8001002:	f001 fc2b 	bl	800285c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001006:	bf00      	nop
 8001008:	3728      	adds	r7, #40	; 0x28
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40012000 	.word	0x40012000
 8001014:	40023800 	.word	0x40023800
 8001018:	40020800 	.word	0x40020800

0800101c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a17      	ldr	r2, [pc, #92]	; (8001098 <HAL_DAC_MspInit+0x7c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d127      	bne.n	800108e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <HAL_DAC_MspInit+0x80>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a15      	ldr	r2, [pc, #84]	; (800109c <HAL_DAC_MspInit+0x80>)
 8001048:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <HAL_DAC_MspInit+0x80>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_DAC_MspInit+0x80>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a0e      	ldr	r2, [pc, #56]	; (800109c <HAL_DAC_MspInit+0x80>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_DAC_MspInit+0x80>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = REF1_Pin|REF2_Pin;
 8001076:	2330      	movs	r3, #48	; 0x30
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107a:	2303      	movs	r3, #3
 800107c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <HAL_DAC_MspInit+0x84>)
 800108a:	f001 fbe7 	bl	800285c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40007400 	.word	0x40007400
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020000 	.word	0x40020000

080010a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08c      	sub	sp, #48	; 0x30
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a42      	ldr	r2, [pc, #264]	; (80011cc <HAL_I2C_MspInit+0x128>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d12c      	bne.n	8001120 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
 80010ca:	4b41      	ldr	r3, [pc, #260]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a40      	ldr	r2, [pc, #256]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b3e      	ldr	r3, [pc, #248]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	61bb      	str	r3, [r7, #24]
 80010e0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80010e2:	23c0      	movs	r3, #192	; 0xc0
 80010e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e6:	2312      	movs	r3, #18
 80010e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ee:	2303      	movs	r3, #3
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f2:	2304      	movs	r3, #4
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	4835      	ldr	r0, [pc, #212]	; (80011d4 <HAL_I2C_MspInit+0x130>)
 80010fe:	f001 fbad 	bl	800285c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	4b32      	ldr	r3, [pc, #200]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	4a31      	ldr	r2, [pc, #196]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 800110c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001110:	6413      	str	r3, [r2, #64]	; 0x40
 8001112:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800111e:	e050      	b.n	80011c2 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a2c      	ldr	r2, [pc, #176]	; (80011d8 <HAL_I2C_MspInit+0x134>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d14b      	bne.n	80011c2 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a27      	ldr	r2, [pc, #156]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a20      	ldr	r2, [pc, #128]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SDA1_Pin;
 8001162:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001168:	2312      	movs	r3, #18
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001174:	2304      	movs	r3, #4
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SDA1_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	4619      	mov	r1, r3
 800117e:	4817      	ldr	r0, [pc, #92]	; (80011dc <HAL_I2C_MspInit+0x138>)
 8001180:	f001 fb6c 	bl	800285c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCL1_Pin;
 8001184:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800118a:	2312      	movs	r3, #18
 800118c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001196:	2304      	movs	r3, #4
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCL1_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	4619      	mov	r1, r3
 80011a0:	480f      	ldr	r0, [pc, #60]	; (80011e0 <HAL_I2C_MspInit+0x13c>)
 80011a2:	f001 fb5b 	bl	800285c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 80011b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011b4:	6413      	str	r3, [r2, #64]	; 0x40
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_I2C_MspInit+0x12c>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
}
 80011c2:	bf00      	nop
 80011c4:	3730      	adds	r7, #48	; 0x30
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40005400 	.word	0x40005400
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020400 	.word	0x40020400
 80011d8:	40005c00 	.word	0x40005c00
 80011dc:	40020800 	.word	0x40020800
 80011e0:	40020000 	.word	0x40020000

080011e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a29      	ldr	r2, [pc, #164]	; (80012a8 <HAL_SPI_MspInit+0xc4>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d14b      	bne.n	800129e <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	4b28      	ldr	r3, [pc, #160]	; (80012ac <HAL_SPI_MspInit+0xc8>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	4a27      	ldr	r2, [pc, #156]	; (80012ac <HAL_SPI_MspInit+0xc8>)
 8001210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001214:	6413      	str	r3, [r2, #64]	; 0x40
 8001216:	4b25      	ldr	r3, [pc, #148]	; (80012ac <HAL_SPI_MspInit+0xc8>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b21      	ldr	r3, [pc, #132]	; (80012ac <HAL_SPI_MspInit+0xc8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a20      	ldr	r2, [pc, #128]	; (80012ac <HAL_SPI_MspInit+0xc8>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <HAL_SPI_MspInit+0xc8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <HAL_SPI_MspInit+0xc8>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a19      	ldr	r2, [pc, #100]	; (80012ac <HAL_SPI_MspInit+0xc8>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <HAL_SPI_MspInit+0xc8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = SS_Pin;
 800125a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800125e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800126c:	2306      	movs	r3, #6
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SS_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	480e      	ldr	r0, [pc, #56]	; (80012b0 <HAL_SPI_MspInit+0xcc>)
 8001278:	f001 faf0 	bl	800285c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 800127c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800128e:	2306      	movs	r3, #6
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	4806      	ldr	r0, [pc, #24]	; (80012b4 <HAL_SPI_MspInit+0xd0>)
 800129a:	f001 fadf 	bl	800285c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	; 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40003c00 	.word	0x40003c00
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020800 	.word	0x40020800

080012b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a1f      	ldr	r2, [pc, #124]	; (8001344 <HAL_TIM_Base_MspInit+0x8c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d10e      	bne.n	80012e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <HAL_TIM_Base_MspInit+0x90>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <HAL_TIM_Base_MspInit+0x90>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6453      	str	r3, [r2, #68]	; 0x44
 80012da:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <HAL_TIM_Base_MspInit+0x90>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80012e6:	e026      	b.n	8001336 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a17      	ldr	r2, [pc, #92]	; (800134c <HAL_TIM_Base_MspInit+0x94>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d10e      	bne.n	8001310 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <HAL_TIM_Base_MspInit+0x90>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	4a13      	ldr	r2, [pc, #76]	; (8001348 <HAL_TIM_Base_MspInit+0x90>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	6413      	str	r3, [r2, #64]	; 0x40
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_TIM_Base_MspInit+0x90>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
}
 800130e:	e012      	b.n	8001336 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM9)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <HAL_TIM_Base_MspInit+0x98>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d10d      	bne.n	8001336 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <HAL_TIM_Base_MspInit+0x90>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	4a09      	ldr	r2, [pc, #36]	; (8001348 <HAL_TIM_Base_MspInit+0x90>)
 8001324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001328:	6453      	str	r3, [r2, #68]	; 0x44
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <HAL_TIM_Base_MspInit+0x90>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
}
 8001336:	bf00      	nop
 8001338:	371c      	adds	r7, #28
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40010000 	.word	0x40010000
 8001348:	40023800 	.word	0x40023800
 800134c:	40000800 	.word	0x40000800
 8001350:	40014000 	.word	0x40014000

08001354 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001374:	d12c      	bne.n	80013d0 <HAL_TIM_IC_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <HAL_TIM_IC_MspInit+0x84>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	4a16      	ldr	r2, [pc, #88]	; (80013d8 <HAL_TIM_IC_MspInit+0x84>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6413      	str	r3, [r2, #64]	; 0x40
 8001386:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <HAL_TIM_IC_MspInit+0x84>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <HAL_TIM_IC_MspInit+0x84>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <HAL_TIM_IC_MspInit+0x84>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <HAL_TIM_IC_MspInit+0x84>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB8     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PULSES_Pin;
 80013ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013c0:	2301      	movs	r3, #1
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PULSES_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	4804      	ldr	r0, [pc, #16]	; (80013dc <HAL_TIM_IC_MspInit+0x88>)
 80013cc:	f001 fa46 	bl	800285c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013d0:	bf00      	nop
 80013d2:	3728      	adds	r7, #40	; 0x28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020400 	.word	0x40020400

080013e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a37      	ldr	r2, [pc, #220]	; (80014dc <HAL_TIM_MspPostInit+0xfc>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d11f      	bne.n	8001442 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <HAL_TIM_MspPostInit+0x100>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a35      	ldr	r2, [pc, #212]	; (80014e0 <HAL_TIM_MspPostInit+0x100>)
 800140c:	f043 0310 	orr.w	r3, r3, #16
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <HAL_TIM_MspPostInit+0x100>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0310 	and.w	r3, r3, #16
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = STEP3_Pin;
 800141e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001430:	2301      	movs	r3, #1
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP3_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	482a      	ldr	r0, [pc, #168]	; (80014e4 <HAL_TIM_MspPostInit+0x104>)
 800143c:	f001 fa0e 	bl	800285c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001440:	e047      	b.n	80014d2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM4)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a28      	ldr	r2, [pc, #160]	; (80014e8 <HAL_TIM_MspPostInit+0x108>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d11f      	bne.n	800148c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <HAL_TIM_MspPostInit+0x100>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	4a22      	ldr	r2, [pc, #136]	; (80014e0 <HAL_TIM_MspPostInit+0x100>)
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	6313      	str	r3, [r2, #48]	; 0x30
 800145c:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <HAL_TIM_MspPostInit+0x100>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP2_Pin;
 8001468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800147a:	2302      	movs	r3, #2
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	4819      	ldr	r0, [pc, #100]	; (80014ec <HAL_TIM_MspPostInit+0x10c>)
 8001486:	f001 f9e9 	bl	800285c <HAL_GPIO_Init>
}
 800148a:	e022      	b.n	80014d2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <HAL_TIM_MspPostInit+0x110>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d11d      	bne.n	80014d2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_TIM_MspPostInit+0x100>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <HAL_TIM_MspPostInit+0x100>)
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_TIM_MspPostInit+0x100>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP1_Pin;
 80014b2:	2320      	movs	r3, #32
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80014c2:	2303      	movs	r3, #3
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4805      	ldr	r0, [pc, #20]	; (80014e4 <HAL_TIM_MspPostInit+0x104>)
 80014ce:	f001 f9c5 	bl	800285c <HAL_GPIO_Init>
}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40010000 	.word	0x40010000
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40000800 	.word	0x40000800
 80014ec:	40020c00 	.word	0x40020c00
 80014f0:	40014000 	.word	0x40014000

080014f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08e      	sub	sp, #56	; 0x38
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a4b      	ldr	r2, [pc, #300]	; (8001640 <HAL_UART_MspInit+0x14c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d12c      	bne.n	8001570 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
 800151a:	4b4a      	ldr	r3, [pc, #296]	; (8001644 <HAL_UART_MspInit+0x150>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a49      	ldr	r2, [pc, #292]	; (8001644 <HAL_UART_MspInit+0x150>)
 8001520:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b47      	ldr	r3, [pc, #284]	; (8001644 <HAL_UART_MspInit+0x150>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800152e:	623b      	str	r3, [r7, #32]
 8001530:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
 8001536:	4b43      	ldr	r3, [pc, #268]	; (8001644 <HAL_UART_MspInit+0x150>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a42      	ldr	r2, [pc, #264]	; (8001644 <HAL_UART_MspInit+0x150>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b40      	ldr	r3, [pc, #256]	; (8001644 <HAL_UART_MspInit+0x150>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX2_Pin|RX2_Pin;
 800154e:	2303      	movs	r3, #3
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800155e:	2308      	movs	r3, #8
 8001560:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001566:	4619      	mov	r1, r3
 8001568:	4837      	ldr	r0, [pc, #220]	; (8001648 <HAL_UART_MspInit+0x154>)
 800156a:	f001 f977 	bl	800285c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800156e:	e063      	b.n	8001638 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a35      	ldr	r2, [pc, #212]	; (800164c <HAL_UART_MspInit+0x158>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d12d      	bne.n	80015d6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART1_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
 800157e:	4b31      	ldr	r3, [pc, #196]	; (8001644 <HAL_UART_MspInit+0x150>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	4a30      	ldr	r2, [pc, #192]	; (8001644 <HAL_UART_MspInit+0x150>)
 8001584:	f043 0310 	orr.w	r3, r3, #16
 8001588:	6453      	str	r3, [r2, #68]	; 0x44
 800158a:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <HAL_UART_MspInit+0x150>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f003 0310 	and.w	r3, r3, #16
 8001592:	61bb      	str	r3, [r7, #24]
 8001594:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <HAL_UART_MspInit+0x150>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a29      	ldr	r2, [pc, #164]	; (8001644 <HAL_UART_MspInit+0x150>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b27      	ldr	r3, [pc, #156]	; (8001644 <HAL_UART_MspInit+0x150>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 80015b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015c4:	2307      	movs	r3, #7
 80015c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015cc:	4619      	mov	r1, r3
 80015ce:	481e      	ldr	r0, [pc, #120]	; (8001648 <HAL_UART_MspInit+0x154>)
 80015d0:	f001 f944 	bl	800285c <HAL_GPIO_Init>
}
 80015d4:	e030      	b.n	8001638 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART2)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a1d      	ldr	r2, [pc, #116]	; (8001650 <HAL_UART_MspInit+0x15c>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d12b      	bne.n	8001638 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e0:	2300      	movs	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <HAL_UART_MspInit+0x150>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	4a16      	ldr	r2, [pc, #88]	; (8001644 <HAL_UART_MspInit+0x150>)
 80015ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ee:	6413      	str	r3, [r2, #64]	; 0x40
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <HAL_UART_MspInit+0x150>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	4b10      	ldr	r3, [pc, #64]	; (8001644 <HAL_UART_MspInit+0x150>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	4a0f      	ldr	r2, [pc, #60]	; (8001644 <HAL_UART_MspInit+0x150>)
 8001606:	f043 0308 	orr.w	r3, r3, #8
 800160a:	6313      	str	r3, [r2, #48]	; 0x30
 800160c:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <HAL_UART_MspInit+0x150>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001618:	2360      	movs	r3, #96	; 0x60
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001628:	2307      	movs	r3, #7
 800162a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	4619      	mov	r1, r3
 8001632:	4808      	ldr	r0, [pc, #32]	; (8001654 <HAL_UART_MspInit+0x160>)
 8001634:	f001 f912 	bl	800285c <HAL_GPIO_Init>
}
 8001638:	bf00      	nop
 800163a:	3738      	adds	r7, #56	; 0x38
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40004c00 	.word	0x40004c00
 8001644:	40023800 	.word	0x40023800
 8001648:	40020000 	.word	0x40020000
 800164c:	40011000 	.word	0x40011000
 8001650:	40004400 	.word	0x40004400
 8001654:	40020c00 	.word	0x40020c00

08001658 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b0a0      	sub	sp, #128	; 0x80
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	225c      	movs	r2, #92	; 0x5c
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f00d fd33 	bl	800f0e4 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a21      	ldr	r2, [pc, #132]	; (8001708 <HAL_PCD_MspInit+0xb0>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d13b      	bne.n	8001700 <HAL_PCD_MspInit+0xa8>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800168e:	2300      	movs	r3, #0
 8001690:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001692:	f107 0310 	add.w	r3, r7, #16
 8001696:	4618      	mov	r0, r3
 8001698:	f004 fe0e 	bl	80062b8 <HAL_RCCEx_PeriphCLKConfig>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80016a2:	f7ff fc49 	bl	8000f38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_PCD_MspInit+0xb4>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a17      	ldr	r2, [pc, #92]	; (800170c <HAL_PCD_MspInit+0xb4>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <HAL_PCD_MspInit+0xb4>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80016c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80016c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80016d4:	230c      	movs	r3, #12
 80016d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016dc:	4619      	mov	r1, r3
 80016de:	480c      	ldr	r0, [pc, #48]	; (8001710 <HAL_PCD_MspInit+0xb8>)
 80016e0:	f001 f8bc 	bl	800285c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <HAL_PCD_MspInit+0xb4>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	4a07      	ldr	r2, [pc, #28]	; (800170c <HAL_PCD_MspInit+0xb4>)
 80016ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016f2:	6313      	str	r3, [r2, #48]	; 0x30
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <HAL_PCD_MspInit+0xb4>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8001700:	bf00      	nop
 8001702:	3780      	adds	r7, #128	; 0x80
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40040000 	.word	0x40040000
 800170c:	40023800 	.word	0x40023800
 8001710:	40020400 	.word	0x40020400

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001718:	e7fe      	b.n	8001718 <NMI_Handler+0x4>

0800171a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <MemManage_Handler+0x4>

08001726 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <UsageFault_Handler+0x4>

08001732 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001760:	f000 f8d0 	bl	8001904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <OTG_FS_IRQHandler+0x10>)
 800176e:	f001 fd1b 	bl	80031a8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000cf8 	.word	0x20000cf8

0800177c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001784:	4a14      	ldr	r2, [pc, #80]	; (80017d8 <_sbrk+0x5c>)
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <_sbrk+0x60>)
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d102      	bne.n	800179e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <_sbrk+0x64>)
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <_sbrk+0x68>)
 800179c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d207      	bcs.n	80017bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017ac:	f00d fcb2 	bl	800f114 <__errno>
 80017b0:	4603      	mov	r3, r0
 80017b2:	220c      	movs	r2, #12
 80017b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ba:	e009      	b.n	80017d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <_sbrk+0x64>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c2:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <_sbrk+0x64>)
 80017cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ce:	68fb      	ldr	r3, [r7, #12]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20020000 	.word	0x20020000
 80017dc:	00000800 	.word	0x00000800
 80017e0:	200008e0 	.word	0x200008e0
 80017e4:	20001228 	.word	0x20001228

080017e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <SystemInit+0x20>)
 80017ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f2:	4a05      	ldr	r2, [pc, #20]	; (8001808 <SystemInit+0x20>)
 80017f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800180c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001844 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001810:	f7ff ffea 	bl	80017e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001814:	480c      	ldr	r0, [pc, #48]	; (8001848 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001816:	490d      	ldr	r1, [pc, #52]	; (800184c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001818:	4a0d      	ldr	r2, [pc, #52]	; (8001850 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800181c:	e002      	b.n	8001824 <LoopCopyDataInit>

0800181e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001822:	3304      	adds	r3, #4

08001824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001828:	d3f9      	bcc.n	800181e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182a:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800182c:	4c0a      	ldr	r4, [pc, #40]	; (8001858 <LoopFillZerobss+0x22>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001830:	e001      	b.n	8001836 <LoopFillZerobss>

08001832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001834:	3204      	adds	r2, #4

08001836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001838:	d3fb      	bcc.n	8001832 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800183a:	f00d fc71 	bl	800f120 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800183e:	f7fe fe5f 	bl	8000500 <main>
  bx  lr    
 8001842:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001844:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800184c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001850:	0800f2b0 	.word	0x0800f2b0
  ldr r2, =_sbss
 8001854:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001858:	20001228 	.word	0x20001228

0800185c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800185c:	e7fe      	b.n	800185c <ADC_IRQHandler>
	...

08001860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <HAL_Init+0x40>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0d      	ldr	r2, [pc, #52]	; (80018a0 <HAL_Init+0x40>)
 800186a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800186e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_Init+0x40>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <HAL_Init+0x40>)
 8001876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800187a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <HAL_Init+0x40>)
 8001882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001886:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001888:	2003      	movs	r0, #3
 800188a:	f000 fbc1 	bl	8002010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800188e:	200f      	movs	r0, #15
 8001890:	f000 f808 	bl	80018a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001894:	f7ff fb56 	bl	8000f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023c00 	.word	0x40023c00

080018a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_InitTick+0x54>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_InitTick+0x58>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	4619      	mov	r1, r3
 80018b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80018be:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 fbd9 	bl	800207a <HAL_SYSTICK_Config>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00e      	b.n	80018f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b0f      	cmp	r3, #15
 80018d6:	d80a      	bhi.n	80018ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d8:	2200      	movs	r2, #0
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f000 fba1 	bl	8002026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e4:	4a06      	ldr	r2, [pc, #24]	; (8001900 <HAL_InitTick+0x5c>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	e000      	b.n	80018f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000008 	.word	0x20000008
 8001900:	20000004 	.word	0x20000004

08001904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_IncTick+0x20>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_IncTick+0x24>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4413      	add	r3, r2
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <HAL_IncTick+0x24>)
 8001916:	6013      	str	r3, [r2, #0]
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000008 	.word	0x20000008
 8001928:	200008e4 	.word	0x200008e4

0800192c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return uwTick;
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <HAL_GetTick+0x14>)
 8001932:	681b      	ldr	r3, [r3, #0]
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	200008e4 	.word	0x200008e4

08001944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800194c:	f7ff ffee 	bl	800192c <HAL_GetTick>
 8001950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195c:	d005      	beq.n	800196a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <HAL_Delay+0x44>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4413      	add	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800196a:	bf00      	nop
 800196c:	f7ff ffde 	bl	800192c <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	429a      	cmp	r2, r3
 800197a:	d8f7      	bhi.n	800196c <HAL_Delay+0x28>
  {
  }
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000008 	.word	0x20000008

0800198c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e033      	b.n	8001a0a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d109      	bne.n	80019be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff faf2 	bl	8000f94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f003 0310 	and.w	r3, r3, #16
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d118      	bne.n	80019fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019d2:	f023 0302 	bic.w	r3, r3, #2
 80019d6:	f043 0202 	orr.w	r2, r3, #2
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f94a 	bl	8001c78 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f023 0303 	bic.w	r3, r3, #3
 80019f2:	f043 0201 	orr.w	r2, r3, #1
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	641a      	str	r2, [r3, #64]	; 0x40
 80019fa:	e001      	b.n	8001a00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x1c>
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	e113      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x244>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b09      	cmp	r3, #9
 8001a3e:	d925      	bls.n	8001a8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68d9      	ldr	r1, [r3, #12]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	3b1e      	subs	r3, #30
 8001a56:	2207      	movs	r2, #7
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43da      	mvns	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	400a      	ands	r2, r1
 8001a64:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68d9      	ldr	r1, [r3, #12]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	4618      	mov	r0, r3
 8001a78:	4603      	mov	r3, r0
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4403      	add	r3, r0
 8001a7e:	3b1e      	subs	r3, #30
 8001a80:	409a      	lsls	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	e022      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6919      	ldr	r1, [r3, #16]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	2207      	movs	r2, #7
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	400a      	ands	r2, r1
 8001aae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6919      	ldr	r1, [r3, #16]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4403      	add	r3, r0
 8001ac8:	409a      	lsls	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d824      	bhi.n	8001b24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	3b05      	subs	r3, #5
 8001aec:	221f      	movs	r2, #31
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	400a      	ands	r2, r1
 8001afa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	4618      	mov	r0, r3
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	3b05      	subs	r3, #5
 8001b16:	fa00 f203 	lsl.w	r2, r0, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	635a      	str	r2, [r3, #52]	; 0x34
 8001b22:	e04c      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b0c      	cmp	r3, #12
 8001b2a:	d824      	bhi.n	8001b76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3b23      	subs	r3, #35	; 0x23
 8001b3e:	221f      	movs	r2, #31
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43da      	mvns	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	400a      	ands	r2, r1
 8001b4c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	3b23      	subs	r3, #35	; 0x23
 8001b68:	fa00 f203 	lsl.w	r2, r0, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	631a      	str	r2, [r3, #48]	; 0x30
 8001b74:	e023      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	3b41      	subs	r3, #65	; 0x41
 8001b88:	221f      	movs	r2, #31
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	400a      	ands	r2, r1
 8001b96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	4613      	mov	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	3b41      	subs	r3, #65	; 0x41
 8001bb2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bbe:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <HAL_ADC_ConfigChannel+0x250>)
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a28      	ldr	r2, [pc, #160]	; (8001c68 <HAL_ADC_ConfigChannel+0x254>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d10f      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x1d8>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b12      	cmp	r3, #18
 8001bd2:	d10b      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1d      	ldr	r2, [pc, #116]	; (8001c68 <HAL_ADC_ConfigChannel+0x254>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d12b      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x23a>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a1c      	ldr	r2, [pc, #112]	; (8001c6c <HAL_ADC_ConfigChannel+0x258>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d003      	beq.n	8001c08 <HAL_ADC_ConfigChannel+0x1f4>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b11      	cmp	r3, #17
 8001c06:	d122      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a11      	ldr	r2, [pc, #68]	; (8001c6c <HAL_ADC_ConfigChannel+0x258>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d111      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <HAL_ADC_ConfigChannel+0x25c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a11      	ldr	r2, [pc, #68]	; (8001c74 <HAL_ADC_ConfigChannel+0x260>)
 8001c30:	fba2 2303 	umull	r2, r3, r2, r3
 8001c34:	0c9a      	lsrs	r2, r3, #18
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c40:	e002      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f9      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	40012300 	.word	0x40012300
 8001c68:	40012000 	.word	0x40012000
 8001c6c:	10000012 	.word	0x10000012
 8001c70:	20000000 	.word	0x20000000
 8001c74:	431bde83 	.word	0x431bde83

08001c78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c80:	4b79      	ldr	r3, [pc, #484]	; (8001e68 <ADC_Init+0x1f0>)
 8001c82:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6859      	ldr	r1, [r3, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	021a      	lsls	r2, r3, #8
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001cd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6859      	ldr	r1, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6899      	ldr	r1, [r3, #8]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	4a58      	ldr	r2, [pc, #352]	; (8001e6c <ADC_Init+0x1f4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d022      	beq.n	8001d56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6899      	ldr	r1, [r3, #8]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6899      	ldr	r1, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	e00f      	b.n	8001d76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d74:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0202 	bic.w	r2, r2, #2
 8001d84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6899      	ldr	r1, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7e1b      	ldrb	r3, [r3, #24]
 8001d90:	005a      	lsls	r2, r3, #1
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d01b      	beq.n	8001ddc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001db2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001dc2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6859      	ldr	r1, [r3, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	035a      	lsls	r2, r3, #13
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	e007      	b.n	8001dec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dea:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	051a      	lsls	r2, r3, #20
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6899      	ldr	r1, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e2e:	025a      	lsls	r2, r3, #9
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6899      	ldr	r1, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	029a      	lsls	r2, r3, #10
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	609a      	str	r2, [r3, #8]
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	40012300 	.word	0x40012300
 8001e6c:	0f000001 	.word	0x0f000001

08001e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea2:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	60d3      	str	r3, [r2, #12]
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ebc:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	0a1b      	lsrs	r3, r3, #8
 8001ec2:	f003 0307 	and.w	r3, r3, #7
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	db0b      	blt.n	8001efe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	f003 021f 	and.w	r2, r3, #31
 8001eec:	4907      	ldr	r1, [pc, #28]	; (8001f0c <__NVIC_EnableIRQ+0x38>)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	095b      	lsrs	r3, r3, #5
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8001efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000e100 	.word	0xe000e100

08001f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	6039      	str	r1, [r7, #0]
 8001f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	db0a      	blt.n	8001f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	490c      	ldr	r1, [pc, #48]	; (8001f5c <__NVIC_SetPriority+0x4c>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	0112      	lsls	r2, r2, #4
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	440b      	add	r3, r1
 8001f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f38:	e00a      	b.n	8001f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4908      	ldr	r1, [pc, #32]	; (8001f60 <__NVIC_SetPriority+0x50>)
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	3b04      	subs	r3, #4
 8001f48:	0112      	lsls	r2, r2, #4
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	761a      	strb	r2, [r3, #24]
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000e100 	.word	0xe000e100
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b089      	sub	sp, #36	; 0x24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f1c3 0307 	rsb	r3, r3, #7
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	bf28      	it	cs
 8001f82:	2304      	movcs	r3, #4
 8001f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	2b06      	cmp	r3, #6
 8001f8c:	d902      	bls.n	8001f94 <NVIC_EncodePriority+0x30>
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3b03      	subs	r3, #3
 8001f92:	e000      	b.n	8001f96 <NVIC_EncodePriority+0x32>
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	f04f 32ff 	mov.w	r2, #4294967295
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fac:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	43d9      	mvns	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	4313      	orrs	r3, r2
         );
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3724      	adds	r7, #36	; 0x24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fdc:	d301      	bcc.n	8001fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e00f      	b.n	8002002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	; (800200c <SysTick_Config+0x40>)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fea:	210f      	movs	r1, #15
 8001fec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff0:	f7ff ff8e 	bl	8001f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <SysTick_Config+0x40>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ffa:	4b04      	ldr	r3, [pc, #16]	; (800200c <SysTick_Config+0x40>)
 8001ffc:	2207      	movs	r2, #7
 8001ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	e000e010 	.word	0xe000e010

08002010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ff29 	bl	8001e70 <__NVIC_SetPriorityGrouping>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002026:	b580      	push	{r7, lr}
 8002028:	b086      	sub	sp, #24
 800202a:	af00      	add	r7, sp, #0
 800202c:	4603      	mov	r3, r0
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
 8002032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002038:	f7ff ff3e 	bl	8001eb8 <__NVIC_GetPriorityGrouping>
 800203c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68b9      	ldr	r1, [r7, #8]
 8002042:	6978      	ldr	r0, [r7, #20]
 8002044:	f7ff ff8e 	bl	8001f64 <NVIC_EncodePriority>
 8002048:	4602      	mov	r2, r0
 800204a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff5d 	bl	8001f10 <__NVIC_SetPriority>
}
 8002056:	bf00      	nop
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	4603      	mov	r3, r0
 8002066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff31 	bl	8001ed4 <__NVIC_EnableIRQ>
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff ffa2 	bl	8001fcc <SysTick_Config>
 8002088:	4603      	mov	r3, r0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e014      	b.n	80020ce <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	791b      	ldrb	r3, [r3, #4]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d105      	bne.n	80020ba <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7fe ffb1 	bl	800101c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2202      	movs	r2, #2
 80020be:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e046      	b.n	8002178 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	795b      	ldrb	r3, [r3, #5]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_DAC_Start+0x20>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e040      	b.n	8002178 <HAL_DAC_Start+0xa2>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6819      	ldr	r1, [r3, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	f003 0310 	and.w	r3, r3, #16
 800210e:	2201      	movs	r2, #1
 8002110:	409a      	lsls	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10f      	bne.n	8002140 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800212a:	2b3c      	cmp	r3, #60	; 0x3c
 800212c:	d11d      	bne.n	800216a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	e014      	b.n	800216a <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	f003 0310 	and.w	r3, r3, #16
 8002150:	213c      	movs	r1, #60	; 0x3c
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	429a      	cmp	r2, r3
 8002158:	d107      	bne.n	800216a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f042 0202 	orr.w	r2, r2, #2
 8002168:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002184:	b480      	push	{r7}
 8002186:	b087      	sub	sp, #28
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
 8002190:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e015      	b.n	80021cc <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d105      	bne.n	80021b8 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	3308      	adds	r3, #8
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	e004      	b.n	80021c2 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	3314      	adds	r3, #20
 80021c0:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	461a      	mov	r2, r3
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	371c      	adds	r7, #28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80021d8:	b480      	push	{r7}
 80021da:	b089      	sub	sp, #36	; 0x24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <HAL_DAC_ConfigChannel+0x1c>
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e042      	b.n	800227e <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	795b      	ldrb	r3, [r3, #5]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_DAC_ConfigChannel+0x2c>
 8002200:	2302      	movs	r3, #2
 8002202:	e03c      	b.n	800227e <HAL_DAC_ConfigChannel+0xa6>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2201      	movs	r2, #1
 8002208:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2202      	movs	r2, #2
 800220e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	4313      	orrs	r3, r2
 8002238:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f003 0310 	and.w	r3, r3, #16
 8002260:	22c0      	movs	r2, #192	; 0xc0
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43da      	mvns	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	400a      	ands	r2, r1
 800226e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2201      	movs	r2, #1
 8002274:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800227c:	7ffb      	ldrb	r3, [r7, #31]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3724      	adds	r7, #36	; 0x24
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800229e:	4b23      	ldr	r3, [pc, #140]	; (800232c <HAL_FLASH_Program+0xa0>)
 80022a0:	7e1b      	ldrb	r3, [r3, #24]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_FLASH_Program+0x1e>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e03b      	b.n	8002322 <HAL_FLASH_Program+0x96>
 80022aa:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_FLASH_Program+0xa0>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022b4:	f000 f870 	bl	8002398 <FLASH_WaitForLastOperation>
 80022b8:	4603      	mov	r3, r0
 80022ba:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80022bc:	7dfb      	ldrb	r3, [r7, #23]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d12b      	bne.n	800231a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d105      	bne.n	80022d4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80022c8:	783b      	ldrb	r3, [r7, #0]
 80022ca:	4619      	mov	r1, r3
 80022cc:	68b8      	ldr	r0, [r7, #8]
 80022ce:	f000 f91b 	bl	8002508 <FLASH_Program_Byte>
 80022d2:	e016      	b.n	8002302 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d105      	bne.n	80022e6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80022da:	883b      	ldrh	r3, [r7, #0]
 80022dc:	4619      	mov	r1, r3
 80022de:	68b8      	ldr	r0, [r7, #8]
 80022e0:	f000 f8ee 	bl	80024c0 <FLASH_Program_HalfWord>
 80022e4:	e00d      	b.n	8002302 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d105      	bne.n	80022f8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	4619      	mov	r1, r3
 80022f0:	68b8      	ldr	r0, [r7, #8]
 80022f2:	f000 f8c3 	bl	800247c <FLASH_Program_Word>
 80022f6:	e004      	b.n	8002302 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80022f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022fc:	68b8      	ldr	r0, [r7, #8]
 80022fe:	f000 f88b 	bl	8002418 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002302:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002306:	f000 f847 	bl	8002398 <FLASH_WaitForLastOperation>
 800230a:	4603      	mov	r3, r0
 800230c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <HAL_FLASH_Program+0xa4>)
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	4a07      	ldr	r2, [pc, #28]	; (8002330 <HAL_FLASH_Program+0xa4>)
 8002314:	f023 0301 	bic.w	r3, r3, #1
 8002318:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800231a:	4b04      	ldr	r3, [pc, #16]	; (800232c <HAL_FLASH_Program+0xa0>)
 800231c:	2200      	movs	r2, #0
 800231e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002320:	7dfb      	ldrb	r3, [r7, #23]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200008e8 	.word	0x200008e8
 8002330:	40023c00 	.word	0x40023c00

08002334 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800233e:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_FLASH_Unlock+0x38>)
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b00      	cmp	r3, #0
 8002344:	da0b      	bge.n	800235e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_FLASH_Unlock+0x38>)
 8002348:	4a09      	ldr	r2, [pc, #36]	; (8002370 <HAL_FLASH_Unlock+0x3c>)
 800234a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800234c:	4b07      	ldr	r3, [pc, #28]	; (800236c <HAL_FLASH_Unlock+0x38>)
 800234e:	4a09      	ldr	r2, [pc, #36]	; (8002374 <HAL_FLASH_Unlock+0x40>)
 8002350:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_FLASH_Unlock+0x38>)
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	2b00      	cmp	r3, #0
 8002358:	da01      	bge.n	800235e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800235e:	79fb      	ldrb	r3, [r7, #7]
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	40023c00 	.word	0x40023c00
 8002370:	45670123 	.word	0x45670123
 8002374:	cdef89ab 	.word	0xcdef89ab

08002378 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_FLASH_Lock+0x1c>)
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	4a04      	ldr	r2, [pc, #16]	; (8002394 <HAL_FLASH_Lock+0x1c>)
 8002382:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002386:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	40023c00 	.word	0x40023c00

08002398 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023a4:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <FLASH_WaitForLastOperation+0x78>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80023aa:	f7ff fabf 	bl	800192c <HAL_GetTick>
 80023ae:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80023b0:	e010      	b.n	80023d4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b8:	d00c      	beq.n	80023d4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d007      	beq.n	80023d0 <FLASH_WaitForLastOperation+0x38>
 80023c0:	f7ff fab4 	bl	800192c <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d201      	bcs.n	80023d4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e019      	b.n	8002408 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <FLASH_WaitForLastOperation+0x7c>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1e8      	bne.n	80023b2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80023e0:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <FLASH_WaitForLastOperation+0x7c>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <FLASH_WaitForLastOperation+0x7c>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80023f2:	4b08      	ldr	r3, [pc, #32]	; (8002414 <FLASH_WaitForLastOperation+0x7c>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80023fe:	f000 f8a5 	bl	800254c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002406:	2300      	movs	r3, #0
  
}  
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	200008e8 	.word	0x200008e8
 8002414:	40023c00 	.word	0x40023c00

08002418 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002424:	4b14      	ldr	r3, [pc, #80]	; (8002478 <FLASH_Program_DoubleWord+0x60>)
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	4a13      	ldr	r2, [pc, #76]	; (8002478 <FLASH_Program_DoubleWord+0x60>)
 800242a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800242e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <FLASH_Program_DoubleWord+0x60>)
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	4a10      	ldr	r2, [pc, #64]	; (8002478 <FLASH_Program_DoubleWord+0x60>)
 8002436:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800243a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800243c:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <FLASH_Program_DoubleWord+0x60>)
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	4a0d      	ldr	r2, [pc, #52]	; (8002478 <FLASH_Program_DoubleWord+0x60>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800244e:	f3bf 8f6f 	isb	sy
}
 8002452:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002454:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	000a      	movs	r2, r1
 8002462:	2300      	movs	r3, #0
 8002464:	68f9      	ldr	r1, [r7, #12]
 8002466:	3104      	adds	r1, #4
 8002468:	4613      	mov	r3, r2
 800246a:	600b      	str	r3, [r1, #0]
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40023c00 	.word	0x40023c00

0800247c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002486:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <FLASH_Program_Word+0x40>)
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	4a0c      	ldr	r2, [pc, #48]	; (80024bc <FLASH_Program_Word+0x40>)
 800248c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002490:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <FLASH_Program_Word+0x40>)
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	4a09      	ldr	r2, [pc, #36]	; (80024bc <FLASH_Program_Word+0x40>)
 8002498:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800249c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800249e:	4b07      	ldr	r3, [pc, #28]	; (80024bc <FLASH_Program_Word+0x40>)
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	4a06      	ldr	r2, [pc, #24]	; (80024bc <FLASH_Program_Word+0x40>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	601a      	str	r2, [r3, #0]
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	40023c00 	.word	0x40023c00

080024c0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80024cc:	4b0d      	ldr	r3, [pc, #52]	; (8002504 <FLASH_Program_HalfWord+0x44>)
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	4a0c      	ldr	r2, [pc, #48]	; (8002504 <FLASH_Program_HalfWord+0x44>)
 80024d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80024d8:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <FLASH_Program_HalfWord+0x44>)
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	4a09      	ldr	r2, [pc, #36]	; (8002504 <FLASH_Program_HalfWord+0x44>)
 80024de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80024e4:	4b07      	ldr	r3, [pc, #28]	; (8002504 <FLASH_Program_HalfWord+0x44>)
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	4a06      	ldr	r2, [pc, #24]	; (8002504 <FLASH_Program_HalfWord+0x44>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	887a      	ldrh	r2, [r7, #2]
 80024f4:	801a      	strh	r2, [r3, #0]
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40023c00 	.word	0x40023c00

08002508 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002514:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <FLASH_Program_Byte+0x40>)
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	4a0b      	ldr	r2, [pc, #44]	; (8002548 <FLASH_Program_Byte+0x40>)
 800251a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800251e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002520:	4b09      	ldr	r3, [pc, #36]	; (8002548 <FLASH_Program_Byte+0x40>)
 8002522:	4a09      	ldr	r2, [pc, #36]	; (8002548 <FLASH_Program_Byte+0x40>)
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002528:	4b07      	ldr	r3, [pc, #28]	; (8002548 <FLASH_Program_Byte+0x40>)
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	4a06      	ldr	r2, [pc, #24]	; (8002548 <FLASH_Program_Byte+0x40>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	78fa      	ldrb	r2, [r7, #3]
 8002538:	701a      	strb	r2, [r3, #0]
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40023c00 	.word	0x40023c00

0800254c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002550:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <FLASH_SetErrorCode+0xc4>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800255c:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <FLASH_SetErrorCode+0xc8>)
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	f043 0310 	orr.w	r3, r3, #16
 8002564:	4a2b      	ldr	r2, [pc, #172]	; (8002614 <FLASH_SetErrorCode+0xc8>)
 8002566:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002568:	4b29      	ldr	r3, [pc, #164]	; (8002610 <FLASH_SetErrorCode+0xc4>)
 800256a:	2210      	movs	r2, #16
 800256c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800256e:	4b28      	ldr	r3, [pc, #160]	; (8002610 <FLASH_SetErrorCode+0xc4>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f003 0320 	and.w	r3, r3, #32
 8002576:	2b00      	cmp	r3, #0
 8002578:	d008      	beq.n	800258c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800257a:	4b26      	ldr	r3, [pc, #152]	; (8002614 <FLASH_SetErrorCode+0xc8>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f043 0308 	orr.w	r3, r3, #8
 8002582:	4a24      	ldr	r2, [pc, #144]	; (8002614 <FLASH_SetErrorCode+0xc8>)
 8002584:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002586:	4b22      	ldr	r3, [pc, #136]	; (8002610 <FLASH_SetErrorCode+0xc4>)
 8002588:	2220      	movs	r2, #32
 800258a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800258c:	4b20      	ldr	r3, [pc, #128]	; (8002610 <FLASH_SetErrorCode+0xc4>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002594:	2b00      	cmp	r3, #0
 8002596:	d008      	beq.n	80025aa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002598:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <FLASH_SetErrorCode+0xc8>)
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	f043 0304 	orr.w	r3, r3, #4
 80025a0:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <FLASH_SetErrorCode+0xc8>)
 80025a2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80025a4:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <FLASH_SetErrorCode+0xc4>)
 80025a6:	2240      	movs	r2, #64	; 0x40
 80025a8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80025aa:	4b19      	ldr	r3, [pc, #100]	; (8002610 <FLASH_SetErrorCode+0xc4>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d008      	beq.n	80025c8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80025b6:	4b17      	ldr	r3, [pc, #92]	; (8002614 <FLASH_SetErrorCode+0xc8>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f043 0302 	orr.w	r3, r3, #2
 80025be:	4a15      	ldr	r2, [pc, #84]	; (8002614 <FLASH_SetErrorCode+0xc8>)
 80025c0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80025c2:	4b13      	ldr	r3, [pc, #76]	; (8002610 <FLASH_SetErrorCode+0xc4>)
 80025c4:	2280      	movs	r2, #128	; 0x80
 80025c6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <FLASH_SetErrorCode+0xc4>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d009      	beq.n	80025e8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <FLASH_SetErrorCode+0xc8>)
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	4a0d      	ldr	r2, [pc, #52]	; (8002614 <FLASH_SetErrorCode+0xc8>)
 80025de:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <FLASH_SetErrorCode+0xc4>)
 80025e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025e6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80025e8:	4b09      	ldr	r3, [pc, #36]	; (8002610 <FLASH_SetErrorCode+0xc4>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80025f4:	4b07      	ldr	r3, [pc, #28]	; (8002614 <FLASH_SetErrorCode+0xc8>)
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	f043 0320 	orr.w	r3, r3, #32
 80025fc:	4a05      	ldr	r2, [pc, #20]	; (8002614 <FLASH_SetErrorCode+0xc8>)
 80025fe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <FLASH_SetErrorCode+0xc4>)
 8002602:	2202      	movs	r2, #2
 8002604:	60da      	str	r2, [r3, #12]
  }
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	40023c00 	.word	0x40023c00
 8002614:	200008e8 	.word	0x200008e8

08002618 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800262a:	4b31      	ldr	r3, [pc, #196]	; (80026f0 <HAL_FLASHEx_Erase+0xd8>)
 800262c:	7e1b      	ldrb	r3, [r3, #24]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_FLASHEx_Erase+0x1e>
 8002632:	2302      	movs	r3, #2
 8002634:	e058      	b.n	80026e8 <HAL_FLASHEx_Erase+0xd0>
 8002636:	4b2e      	ldr	r3, [pc, #184]	; (80026f0 <HAL_FLASHEx_Erase+0xd8>)
 8002638:	2201      	movs	r2, #1
 800263a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800263c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002640:	f7ff feaa 	bl	8002398 <FLASH_WaitForLastOperation>
 8002644:	4603      	mov	r3, r0
 8002646:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d148      	bne.n	80026e0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	f04f 32ff 	mov.w	r2, #4294967295
 8002654:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d115      	bne.n	800268a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	b2da      	uxtb	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4619      	mov	r1, r3
 800266a:	4610      	mov	r0, r2
 800266c:	f000 f844 	bl	80026f8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002670:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002674:	f7ff fe90 	bl	8002398 <FLASH_WaitForLastOperation>
 8002678:	4603      	mov	r3, r0
 800267a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800267c:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <HAL_FLASHEx_Erase+0xdc>)
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	4a1c      	ldr	r2, [pc, #112]	; (80026f4 <HAL_FLASHEx_Erase+0xdc>)
 8002682:	f023 0304 	bic.w	r3, r3, #4
 8002686:	6113      	str	r3, [r2, #16]
 8002688:	e028      	b.n	80026dc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	e01c      	b.n	80026cc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	4619      	mov	r1, r3
 800269a:	68b8      	ldr	r0, [r7, #8]
 800269c:	f000 f850 	bl	8002740 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026a4:	f7ff fe78 	bl	8002398 <FLASH_WaitForLastOperation>
 80026a8:	4603      	mov	r3, r0
 80026aa:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80026ac:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <HAL_FLASHEx_Erase+0xdc>)
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	4a10      	ldr	r2, [pc, #64]	; (80026f4 <HAL_FLASHEx_Erase+0xdc>)
 80026b2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80026b6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	601a      	str	r2, [r3, #0]
          break;
 80026c4:	e00a      	b.n	80026dc <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	3301      	adds	r3, #1
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	4413      	add	r3, r2
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d3da      	bcc.n	8002692 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80026dc:	f000 f878 	bl	80027d0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <HAL_FLASHEx_Erase+0xd8>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	761a      	strb	r2, [r3, #24]

  return status;
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	200008e8 	.word	0x200008e8
 80026f4:	40023c00 	.word	0x40023c00

080026f8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	6039      	str	r1, [r7, #0]
 8002702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002704:	4b0d      	ldr	r3, [pc, #52]	; (800273c <FLASH_MassErase+0x44>)
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	4a0c      	ldr	r2, [pc, #48]	; (800273c <FLASH_MassErase+0x44>)
 800270a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800270e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002710:	4b0a      	ldr	r3, [pc, #40]	; (800273c <FLASH_MassErase+0x44>)
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	4a09      	ldr	r2, [pc, #36]	; (800273c <FLASH_MassErase+0x44>)
 8002716:	f043 0304 	orr.w	r3, r3, #4
 800271a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <FLASH_MassErase+0x44>)
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	4313      	orrs	r3, r2
 8002726:	4a05      	ldr	r2, [pc, #20]	; (800273c <FLASH_MassErase+0x44>)
 8002728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272c:	6113      	str	r3, [r2, #16]
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40023c00 	.word	0x40023c00

08002740 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d102      	bne.n	800275c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	e010      	b.n	800277e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d103      	bne.n	800276a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	e009      	b.n	800277e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	2b02      	cmp	r3, #2
 800276e:	d103      	bne.n	8002778 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	e002      	b.n	800277e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002778:	f44f 7340 	mov.w	r3, #768	; 0x300
 800277c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800277e:	4b13      	ldr	r3, [pc, #76]	; (80027cc <FLASH_Erase_Sector+0x8c>)
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	4a12      	ldr	r2, [pc, #72]	; (80027cc <FLASH_Erase_Sector+0x8c>)
 8002784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002788:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <FLASH_Erase_Sector+0x8c>)
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	490f      	ldr	r1, [pc, #60]	; (80027cc <FLASH_Erase_Sector+0x8c>)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002796:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <FLASH_Erase_Sector+0x8c>)
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	4a0c      	ldr	r2, [pc, #48]	; (80027cc <FLASH_Erase_Sector+0x8c>)
 800279c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80027a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <FLASH_Erase_Sector+0x8c>)
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4313      	orrs	r3, r2
 80027ac:	4a07      	ldr	r2, [pc, #28]	; (80027cc <FLASH_Erase_Sector+0x8c>)
 80027ae:	f043 0302 	orr.w	r3, r3, #2
 80027b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <FLASH_Erase_Sector+0x8c>)
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	4a04      	ldr	r2, [pc, #16]	; (80027cc <FLASH_Erase_Sector+0x8c>)
 80027ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027be:	6113      	str	r3, [r2, #16]
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	40023c00 	.word	0x40023c00

080027d0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80027d4:	4b20      	ldr	r3, [pc, #128]	; (8002858 <FLASH_FlushCaches+0x88>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d017      	beq.n	8002810 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80027e0:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <FLASH_FlushCaches+0x88>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <FLASH_FlushCaches+0x88>)
 80027e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027ea:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80027ec:	4b1a      	ldr	r3, [pc, #104]	; (8002858 <FLASH_FlushCaches+0x88>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a19      	ldr	r2, [pc, #100]	; (8002858 <FLASH_FlushCaches+0x88>)
 80027f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	4b17      	ldr	r3, [pc, #92]	; (8002858 <FLASH_FlushCaches+0x88>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a16      	ldr	r2, [pc, #88]	; (8002858 <FLASH_FlushCaches+0x88>)
 80027fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002802:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002804:	4b14      	ldr	r3, [pc, #80]	; (8002858 <FLASH_FlushCaches+0x88>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a13      	ldr	r2, [pc, #76]	; (8002858 <FLASH_FlushCaches+0x88>)
 800280a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800280e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002810:	4b11      	ldr	r3, [pc, #68]	; (8002858 <FLASH_FlushCaches+0x88>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002818:	2b00      	cmp	r3, #0
 800281a:	d017      	beq.n	800284c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800281c:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <FLASH_FlushCaches+0x88>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0d      	ldr	r2, [pc, #52]	; (8002858 <FLASH_FlushCaches+0x88>)
 8002822:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002826:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <FLASH_FlushCaches+0x88>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <FLASH_FlushCaches+0x88>)
 800282e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	4b08      	ldr	r3, [pc, #32]	; (8002858 <FLASH_FlushCaches+0x88>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a07      	ldr	r2, [pc, #28]	; (8002858 <FLASH_FlushCaches+0x88>)
 800283a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800283e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <FLASH_FlushCaches+0x88>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a04      	ldr	r2, [pc, #16]	; (8002858 <FLASH_FlushCaches+0x88>)
 8002846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800284a:	6013      	str	r3, [r2, #0]
  }
}
 800284c:	bf00      	nop
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40023c00 	.word	0x40023c00

0800285c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	; 0x24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	e165      	b.n	8002b44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002878:	2201      	movs	r2, #1
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4013      	ands	r3, r2
 800288a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	429a      	cmp	r2, r3
 8002892:	f040 8154 	bne.w	8002b3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d005      	beq.n	80028ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d130      	bne.n	8002910 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	2203      	movs	r2, #3
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e4:	2201      	movs	r2, #1
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	091b      	lsrs	r3, r3, #4
 80028fa:	f003 0201 	and.w	r2, r3, #1
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	2b03      	cmp	r3, #3
 800291a:	d017      	beq.n	800294c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	2203      	movs	r2, #3
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d123      	bne.n	80029a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	08da      	lsrs	r2, r3, #3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3208      	adds	r2, #8
 8002960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002964:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	220f      	movs	r2, #15
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	08da      	lsrs	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3208      	adds	r2, #8
 800299a:	69b9      	ldr	r1, [r7, #24]
 800299c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	2203      	movs	r2, #3
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 0203 	and.w	r2, r3, #3
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80ae 	beq.w	8002b3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	4b5d      	ldr	r3, [pc, #372]	; (8002b5c <HAL_GPIO_Init+0x300>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	4a5c      	ldr	r2, [pc, #368]	; (8002b5c <HAL_GPIO_Init+0x300>)
 80029ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f0:	6453      	str	r3, [r2, #68]	; 0x44
 80029f2:	4b5a      	ldr	r3, [pc, #360]	; (8002b5c <HAL_GPIO_Init+0x300>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029fe:	4a58      	ldr	r2, [pc, #352]	; (8002b60 <HAL_GPIO_Init+0x304>)
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	089b      	lsrs	r3, r3, #2
 8002a04:	3302      	adds	r3, #2
 8002a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	220f      	movs	r2, #15
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a4f      	ldr	r2, [pc, #316]	; (8002b64 <HAL_GPIO_Init+0x308>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d025      	beq.n	8002a76 <HAL_GPIO_Init+0x21a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a4e      	ldr	r2, [pc, #312]	; (8002b68 <HAL_GPIO_Init+0x30c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d01f      	beq.n	8002a72 <HAL_GPIO_Init+0x216>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a4d      	ldr	r2, [pc, #308]	; (8002b6c <HAL_GPIO_Init+0x310>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d019      	beq.n	8002a6e <HAL_GPIO_Init+0x212>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a4c      	ldr	r2, [pc, #304]	; (8002b70 <HAL_GPIO_Init+0x314>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d013      	beq.n	8002a6a <HAL_GPIO_Init+0x20e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a4b      	ldr	r2, [pc, #300]	; (8002b74 <HAL_GPIO_Init+0x318>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d00d      	beq.n	8002a66 <HAL_GPIO_Init+0x20a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a4a      	ldr	r2, [pc, #296]	; (8002b78 <HAL_GPIO_Init+0x31c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d007      	beq.n	8002a62 <HAL_GPIO_Init+0x206>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a49      	ldr	r2, [pc, #292]	; (8002b7c <HAL_GPIO_Init+0x320>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d101      	bne.n	8002a5e <HAL_GPIO_Init+0x202>
 8002a5a:	2306      	movs	r3, #6
 8002a5c:	e00c      	b.n	8002a78 <HAL_GPIO_Init+0x21c>
 8002a5e:	2307      	movs	r3, #7
 8002a60:	e00a      	b.n	8002a78 <HAL_GPIO_Init+0x21c>
 8002a62:	2305      	movs	r3, #5
 8002a64:	e008      	b.n	8002a78 <HAL_GPIO_Init+0x21c>
 8002a66:	2304      	movs	r3, #4
 8002a68:	e006      	b.n	8002a78 <HAL_GPIO_Init+0x21c>
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e004      	b.n	8002a78 <HAL_GPIO_Init+0x21c>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e002      	b.n	8002a78 <HAL_GPIO_Init+0x21c>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <HAL_GPIO_Init+0x21c>
 8002a76:	2300      	movs	r3, #0
 8002a78:	69fa      	ldr	r2, [r7, #28]
 8002a7a:	f002 0203 	and.w	r2, r2, #3
 8002a7e:	0092      	lsls	r2, r2, #2
 8002a80:	4093      	lsls	r3, r2
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a88:	4935      	ldr	r1, [pc, #212]	; (8002b60 <HAL_GPIO_Init+0x304>)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	089b      	lsrs	r3, r3, #2
 8002a8e:	3302      	adds	r3, #2
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a96:	4b3a      	ldr	r3, [pc, #232]	; (8002b80 <HAL_GPIO_Init+0x324>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aba:	4a31      	ldr	r2, [pc, #196]	; (8002b80 <HAL_GPIO_Init+0x324>)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ac0:	4b2f      	ldr	r3, [pc, #188]	; (8002b80 <HAL_GPIO_Init+0x324>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ae4:	4a26      	ldr	r2, [pc, #152]	; (8002b80 <HAL_GPIO_Init+0x324>)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aea:	4b25      	ldr	r3, [pc, #148]	; (8002b80 <HAL_GPIO_Init+0x324>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b0e:	4a1c      	ldr	r2, [pc, #112]	; (8002b80 <HAL_GPIO_Init+0x324>)
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b14:	4b1a      	ldr	r3, [pc, #104]	; (8002b80 <HAL_GPIO_Init+0x324>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b38:	4a11      	ldr	r2, [pc, #68]	; (8002b80 <HAL_GPIO_Init+0x324>)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3301      	adds	r3, #1
 8002b42:	61fb      	str	r3, [r7, #28]
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	2b0f      	cmp	r3, #15
 8002b48:	f67f ae96 	bls.w	8002878 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b4c:	bf00      	nop
 8002b4e:	bf00      	nop
 8002b50:	3724      	adds	r7, #36	; 0x24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40013800 	.word	0x40013800
 8002b64:	40020000 	.word	0x40020000
 8002b68:	40020400 	.word	0x40020400
 8002b6c:	40020800 	.word	0x40020800
 8002b70:	40020c00 	.word	0x40020c00
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40021400 	.word	0x40021400
 8002b7c:	40021800 	.word	0x40021800
 8002b80:	40013c00 	.word	0x40013c00

08002b84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	887b      	ldrh	r3, [r7, #2]
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
 8002ba0:	e001      	b.n	8002ba6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc4:	787b      	ldrb	r3, [r7, #1]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bd0:	e003      	b.n	8002bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bd2:	887b      	ldrh	r3, [r7, #2]
 8002bd4:	041a      	lsls	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	619a      	str	r2, [r3, #24]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b086      	sub	sp, #24
 8002bea:	af02      	add	r7, sp, #8
 8002bec:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e059      	b.n	8002cac <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d106      	bne.n	8002c18 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f00b f8a8 	bl	800dd68 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c26:	d102      	bne.n	8002c2e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f006 fb9f 	bl	8009376 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	7c1a      	ldrb	r2, [r3, #16]
 8002c40:	f88d 2000 	strb.w	r2, [sp]
 8002c44:	3304      	adds	r3, #4
 8002c46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c48:	f006 fb20 	bl	800928c <USB_CoreInit>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2202      	movs	r2, #2
 8002c56:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e026      	b.n	8002cac <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2101      	movs	r1, #1
 8002c64:	4618      	mov	r0, r3
 8002c66:	f006 fb97 	bl	8009398 <USB_SetCurrentMode>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e017      	b.n	8002cac <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	7c1a      	ldrb	r2, [r3, #16]
 8002c84:	f88d 2000 	strb.w	r2, [sp]
 8002c88:	3304      	adds	r3, #4
 8002c8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c8c:	f006 fed2 	bl	8009a34 <USB_HostInit>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d005      	beq.n	8002ca2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2202      	movs	r2, #2
 8002c9a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e004      	b.n	8002cac <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002cb4:	b590      	push	{r4, r7, lr}
 8002cb6:	b08b      	sub	sp, #44	; 0x2c
 8002cb8:	af04      	add	r7, sp, #16
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	4608      	mov	r0, r1
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	70fb      	strb	r3, [r7, #3]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	70bb      	strb	r3, [r7, #2]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002cce:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002cd0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_HCD_HC_Init+0x2c>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e09d      	b.n	8002e1c <HAL_HCD_HC_Init+0x168>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3319      	adds	r3, #25
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	3314      	adds	r3, #20
 8002d0c:	787a      	ldrb	r2, [r7, #1]
 8002d0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3315      	adds	r3, #21
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	3326      	adds	r3, #38	; 0x26
 8002d34:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002d38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002d3a:	78fa      	ldrb	r2, [r7, #3]
 8002d3c:	78bb      	ldrb	r3, [r7, #2]
 8002d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d42:	b2d8      	uxtb	r0, r3
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	1a9b      	subs	r3, r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	3316      	adds	r3, #22
 8002d52:	4602      	mov	r2, r0
 8002d54:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 fbc8 	bl	80034f0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002d60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	da0a      	bge.n	8002d7e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	3317      	adds	r3, #23
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
 8002d7c:	e009      	b.n	8002d92 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3317      	adds	r3, #23
 8002d8e:	2200      	movs	r2, #0
 8002d90:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f006 ffa4 	bl	8009ce4 <USB_GetHostSpeed>
 8002d9c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002d9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d10b      	bne.n	8002dbe <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002da6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d107      	bne.n	8002dbe <HAL_HCD_HC_Init+0x10a>
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d104      	bne.n	8002dbe <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	2bbc      	cmp	r3, #188	; 0xbc
 8002db8:	d901      	bls.n	8002dbe <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002dba:	23bc      	movs	r3, #188	; 0xbc
 8002dbc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	3318      	adds	r3, #24
 8002dce:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002dd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	b298      	uxth	r0, r3
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	3328      	adds	r3, #40	; 0x28
 8002de8:	4602      	mov	r2, r0
 8002dea:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	787c      	ldrb	r4, [r7, #1]
 8002df6:	78ba      	ldrb	r2, [r7, #2]
 8002df8:	78f9      	ldrb	r1, [r7, #3]
 8002dfa:	9302      	str	r3, [sp, #8]
 8002dfc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	4623      	mov	r3, r4
 8002e0a:	f006 ff93 	bl	8009d34 <USB_HC_Init>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	371c      	adds	r7, #28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd90      	pop	{r4, r7, pc}

08002e24 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_HCD_HC_Halt+0x1e>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e00f      	b.n	8002e62 <HAL_HCD_HC_Halt+0x3e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f007 fb25 	bl	800a4a2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	4608      	mov	r0, r1
 8002e76:	4611      	mov	r1, r2
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	70fb      	strb	r3, [r7, #3]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	70bb      	strb	r3, [r7, #2]
 8002e82:	4613      	mov	r3, r2
 8002e84:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	3317      	adds	r3, #23
 8002e96:	78ba      	ldrb	r2, [r7, #2]
 8002e98:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	1a9b      	subs	r3, r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	3326      	adds	r3, #38	; 0x26
 8002eaa:	787a      	ldrb	r2, [r7, #1]
 8002eac:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002eae:	7c3b      	ldrb	r3, [r7, #16]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d114      	bne.n	8002ede <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	1a9b      	subs	r3, r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	332a      	adds	r3, #42	; 0x2a
 8002ec4:	2203      	movs	r2, #3
 8002ec6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002ec8:	78fa      	ldrb	r2, [r7, #3]
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	3319      	adds	r3, #25
 8002ed8:	7f3a      	ldrb	r2, [r7, #28]
 8002eda:	701a      	strb	r2, [r3, #0]
 8002edc:	e009      	b.n	8002ef2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ede:	78fa      	ldrb	r2, [r7, #3]
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	332a      	adds	r3, #42	; 0x2a
 8002eee:	2202      	movs	r2, #2
 8002ef0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002ef2:	787b      	ldrb	r3, [r7, #1]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	f200 8102 	bhi.w	80030fe <HAL_HCD_HC_SubmitRequest+0x292>
 8002efa:	a201      	add	r2, pc, #4	; (adr r2, 8002f00 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f00:	08002f11 	.word	0x08002f11
 8002f04:	080030e9 	.word	0x080030e9
 8002f08:	08002fd5 	.word	0x08002fd5
 8002f0c:	0800305f 	.word	0x0800305f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002f10:	7c3b      	ldrb	r3, [r7, #16]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	f040 80f5 	bne.w	8003102 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002f18:	78bb      	ldrb	r3, [r7, #2]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d12d      	bne.n	8002f7a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002f1e:	8b3b      	ldrh	r3, [r7, #24]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d109      	bne.n	8002f38 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002f24:	78fa      	ldrb	r2, [r7, #3]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	333d      	adds	r3, #61	; 0x3d
 8002f34:	2201      	movs	r2, #1
 8002f36:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	333d      	adds	r3, #61	; 0x3d
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10a      	bne.n	8002f64 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	332a      	adds	r3, #42	; 0x2a
 8002f5e:	2200      	movs	r2, #0
 8002f60:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002f62:	e0ce      	b.n	8003102 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	332a      	adds	r3, #42	; 0x2a
 8002f74:	2202      	movs	r2, #2
 8002f76:	701a      	strb	r2, [r3, #0]
      break;
 8002f78:	e0c3      	b.n	8003102 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	331a      	adds	r3, #26
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	f040 80b8 	bne.w	8003102 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002f92:	78fa      	ldrb	r2, [r7, #3]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	333c      	adds	r3, #60	; 0x3c
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10a      	bne.n	8002fbe <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fa8:	78fa      	ldrb	r2, [r7, #3]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	332a      	adds	r3, #42	; 0x2a
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
      break;
 8002fbc:	e0a1      	b.n	8003102 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	332a      	adds	r3, #42	; 0x2a
 8002fce:	2202      	movs	r2, #2
 8002fd0:	701a      	strb	r2, [r3, #0]
      break;
 8002fd2:	e096      	b.n	8003102 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002fd4:	78bb      	ldrb	r3, [r7, #2]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d120      	bne.n	800301c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	333d      	adds	r3, #61	; 0x3d
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10a      	bne.n	8003006 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	1a9b      	subs	r3, r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	332a      	adds	r3, #42	; 0x2a
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003004:	e07e      	b.n	8003104 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	1a9b      	subs	r3, r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	332a      	adds	r3, #42	; 0x2a
 8003016:	2202      	movs	r2, #2
 8003018:	701a      	strb	r2, [r3, #0]
      break;
 800301a:	e073      	b.n	8003104 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800301c:	78fa      	ldrb	r2, [r7, #3]
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	333c      	adds	r3, #60	; 0x3c
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10a      	bne.n	8003048 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	332a      	adds	r3, #42	; 0x2a
 8003042:	2200      	movs	r2, #0
 8003044:	701a      	strb	r2, [r3, #0]
      break;
 8003046:	e05d      	b.n	8003104 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003048:	78fa      	ldrb	r2, [r7, #3]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	332a      	adds	r3, #42	; 0x2a
 8003058:	2202      	movs	r2, #2
 800305a:	701a      	strb	r2, [r3, #0]
      break;
 800305c:	e052      	b.n	8003104 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800305e:	78bb      	ldrb	r3, [r7, #2]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d120      	bne.n	80030a6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003064:	78fa      	ldrb	r2, [r7, #3]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	333d      	adds	r3, #61	; 0x3d
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10a      	bne.n	8003090 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	1a9b      	subs	r3, r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	332a      	adds	r3, #42	; 0x2a
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800308e:	e039      	b.n	8003104 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	332a      	adds	r3, #42	; 0x2a
 80030a0:	2202      	movs	r2, #2
 80030a2:	701a      	strb	r2, [r3, #0]
      break;
 80030a4:	e02e      	b.n	8003104 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	333c      	adds	r3, #60	; 0x3c
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10a      	bne.n	80030d2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	332a      	adds	r3, #42	; 0x2a
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
      break;
 80030d0:	e018      	b.n	8003104 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	332a      	adds	r3, #42	; 0x2a
 80030e2:	2202      	movs	r2, #2
 80030e4:	701a      	strb	r2, [r3, #0]
      break;
 80030e6:	e00d      	b.n	8003104 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	332a      	adds	r3, #42	; 0x2a
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
      break;
 80030fc:	e002      	b.n	8003104 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80030fe:	bf00      	nop
 8003100:	e000      	b.n	8003104 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003102:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	332c      	adds	r3, #44	; 0x2c
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003118:	78fa      	ldrb	r2, [r7, #3]
 800311a:	8b39      	ldrh	r1, [r7, #24]
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4403      	add	r3, r0
 8003128:	3334      	adds	r3, #52	; 0x34
 800312a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	334c      	adds	r3, #76	; 0x4c
 800313c:	2200      	movs	r2, #0
 800313e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	3338      	adds	r3, #56	; 0x38
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	3315      	adds	r3, #21
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	334d      	adds	r3, #77	; 0x4d
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6818      	ldr	r0, [r3, #0]
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	4613      	mov	r3, r2
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	3310      	adds	r3, #16
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	4413      	add	r3, r2
 8003190:	1d19      	adds	r1, r3, #4
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	799b      	ldrb	r3, [r3, #6]
 8003196:	461a      	mov	r2, r3
 8003198:	f006 fef8 	bl	8009f8c <USB_HC_StartXfer>
 800319c:	4603      	mov	r3, r0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop

080031a8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f006 fbf8 	bl	80099b4 <USB_GetMode>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	f040 80fb 	bne.w	80033c2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f006 fbbb 	bl	800994c <USB_ReadInterrupts>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 80f1 	beq.w	80033c0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f006 fbb2 	bl	800994c <USB_ReadInterrupts>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031f2:	d104      	bne.n	80031fe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80031fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f006 fba2 	bl	800994c <USB_ReadInterrupts>
 8003208:	4603      	mov	r3, r0
 800320a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800320e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003212:	d104      	bne.n	800321e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800321c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f006 fb92 	bl	800994c <USB_ReadInterrupts>
 8003228:	4603      	mov	r3, r0
 800322a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800322e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003232:	d104      	bne.n	800323e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800323c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f006 fb82 	bl	800994c <USB_ReadInterrupts>
 8003248:	4603      	mov	r3, r0
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b02      	cmp	r3, #2
 8003250:	d103      	bne.n	800325a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2202      	movs	r2, #2
 8003258:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f006 fb74 	bl	800994c <USB_ReadInterrupts>
 8003264:	4603      	mov	r3, r0
 8003266:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800326a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800326e:	d120      	bne.n	80032b2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003278:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d113      	bne.n	80032b2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800328a:	2110      	movs	r1, #16
 800328c:	6938      	ldr	r0, [r7, #16]
 800328e:	f006 fa2d 	bl	80096ec <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003292:	6938      	ldr	r0, [r7, #16]
 8003294:	f006 fa5c 	bl	8009750 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	7a5b      	ldrb	r3, [r3, #9]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d105      	bne.n	80032ac <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2101      	movs	r1, #1
 80032a6:	4618      	mov	r0, r3
 80032a8:	f006 fc7c 	bl	8009ba4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f00a fde1 	bl	800de74 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f006 fb48 	bl	800994c <USB_ReadInterrupts>
 80032bc:	4603      	mov	r3, r0
 80032be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032c6:	d102      	bne.n	80032ce <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f001 fd33 	bl	8004d34 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f006 fb3a 	bl	800994c <USB_ReadInterrupts>
 80032d8:	4603      	mov	r3, r0
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d106      	bne.n	80032f0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f00a fdaa 	bl	800de3c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2208      	movs	r2, #8
 80032ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f006 fb29 	bl	800994c <USB_ReadInterrupts>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003300:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003304:	d139      	bne.n	800337a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f007 f8b8 	bl	800a480 <USB_HC_ReadInterrupt>
 8003310:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	e025      	b.n	8003364 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	fa22 f303 	lsr.w	r3, r2, r3
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d018      	beq.n	800335e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4413      	add	r3, r2
 8003334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800333e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003342:	d106      	bne.n	8003352 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	4619      	mov	r1, r3
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f905 	bl	800355a <HCD_HC_IN_IRQHandler>
 8003350:	e005      	b.n	800335e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	4619      	mov	r1, r3
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 ff67 	bl	800422c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	3301      	adds	r3, #1
 8003362:	617b      	str	r3, [r7, #20]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	795b      	ldrb	r3, [r3, #5]
 8003368:	461a      	mov	r2, r3
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	4293      	cmp	r3, r2
 800336e:	d3d3      	bcc.n	8003318 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003378:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f006 fae4 	bl	800994c <USB_ReadInterrupts>
 8003384:	4603      	mov	r3, r0
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b10      	cmp	r3, #16
 800338c:	d101      	bne.n	8003392 <HAL_HCD_IRQHandler+0x1ea>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <HAL_HCD_IRQHandler+0x1ec>
 8003392:	2300      	movs	r3, #0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d014      	beq.n	80033c2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699a      	ldr	r2, [r3, #24]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0210 	bic.w	r2, r2, #16
 80033a6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f001 fbe4 	bl	8004b76 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699a      	ldr	r2, [r3, #24]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0210 	orr.w	r2, r2, #16
 80033bc:	619a      	str	r2, [r3, #24]
 80033be:	e000      	b.n	80033c2 <HAL_HCD_IRQHandler+0x21a>
      return;
 80033c0:	bf00      	nop
    }
  }
}
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_HCD_Start+0x16>
 80033da:	2302      	movs	r3, #2
 80033dc:	e013      	b.n	8003406 <HAL_HCD_Start+0x3e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2101      	movs	r1, #1
 80033ec:	4618      	mov	r0, r3
 80033ee:	f006 fc40 	bl	8009c72 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f005 ffac 	bl	8009354 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_HCD_Stop+0x16>
 8003420:	2302      	movs	r3, #2
 8003422:	e00d      	b.n	8003440 <HAL_HCD_Stop+0x32>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f007 f993 	bl	800a75c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f006 fbe2 	bl	8009c1e <USB_ResetPort>
 800345a:	4603      	mov	r3, r0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	334c      	adds	r3, #76	; 0x4c
 8003480:	781b      	ldrb	r3, [r3, #0]
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	460b      	mov	r3, r1
 8003498:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	3338      	adds	r3, #56	; 0x38
 80034aa:	681b      	ldr	r3, [r3, #0]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f006 fc24 	bl	8009d12 <USB_GetCurrentFrame>
 80034ca:	4603      	mov	r3, r0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f006 fbff 	bl	8009ce4 <USB_GetHostSpeed>
 80034e6:	4603      	mov	r3, r0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	331a      	adds	r3, #26
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	331b      	adds	r3, #27
 8003520:	2200      	movs	r2, #0
 8003522:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	3325      	adds	r3, #37	; 0x25
 8003534:	2200      	movs	r2, #0
 8003536:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	3324      	adds	r3, #36	; 0x24
 8003548:	2200      	movs	r2, #0
 800354a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b086      	sub	sp, #24
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	460b      	mov	r3, r1
 8003564:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	4611      	mov	r1, r2
 8003578:	4618      	mov	r0, r3
 800357a:	f006 f9fa 	bl	8009972 <USB_ReadChInterrupts>
 800357e:	4603      	mov	r3, r0
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b04      	cmp	r3, #4
 8003586:	d11a      	bne.n	80035be <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4413      	add	r3, r2
 8003590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003594:	461a      	mov	r2, r3
 8003596:	2304      	movs	r3, #4
 8003598:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800359a:	78fa      	ldrb	r2, [r7, #3]
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	334d      	adds	r3, #77	; 0x4d
 80035aa:	2207      	movs	r2, #7
 80035ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	78fa      	ldrb	r2, [r7, #3]
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f006 ff73 	bl	800a4a2 <USB_HC_Halt>
 80035bc:	e09e      	b.n	80036fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	78fa      	ldrb	r2, [r7, #3]
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f006 f9d3 	bl	8009972 <USB_ReadChInterrupts>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d6:	d11b      	bne.n	8003610 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80035d8:	78fb      	ldrb	r3, [r7, #3]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e4:	461a      	mov	r2, r3
 80035e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	334d      	adds	r3, #77	; 0x4d
 80035fc:	2208      	movs	r2, #8
 80035fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	78fa      	ldrb	r2, [r7, #3]
 8003606:	4611      	mov	r1, r2
 8003608:	4618      	mov	r0, r3
 800360a:	f006 ff4a 	bl	800a4a2 <USB_HC_Halt>
 800360e:	e075      	b.n	80036fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	78fa      	ldrb	r2, [r7, #3]
 8003616:	4611      	mov	r1, r2
 8003618:	4618      	mov	r0, r3
 800361a:	f006 f9aa 	bl	8009972 <USB_ReadChInterrupts>
 800361e:	4603      	mov	r3, r0
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b08      	cmp	r3, #8
 8003626:	d11a      	bne.n	800365e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4413      	add	r3, r2
 8003630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003634:	461a      	mov	r2, r3
 8003636:	2308      	movs	r3, #8
 8003638:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	334d      	adds	r3, #77	; 0x4d
 800364a:	2206      	movs	r2, #6
 800364c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	4611      	mov	r1, r2
 8003656:	4618      	mov	r0, r3
 8003658:	f006 ff23 	bl	800a4a2 <USB_HC_Halt>
 800365c:	e04e      	b.n	80036fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	78fa      	ldrb	r2, [r7, #3]
 8003664:	4611      	mov	r1, r2
 8003666:	4618      	mov	r0, r3
 8003668:	f006 f983 	bl	8009972 <USB_ReadChInterrupts>
 800366c:	4603      	mov	r3, r0
 800366e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003676:	d11b      	bne.n	80036b0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4413      	add	r3, r2
 8003680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003684:	461a      	mov	r2, r3
 8003686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800368a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800368c:	78fa      	ldrb	r2, [r7, #3]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	334d      	adds	r3, #77	; 0x4d
 800369c:	2209      	movs	r2, #9
 800369e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	78fa      	ldrb	r2, [r7, #3]
 80036a6:	4611      	mov	r1, r2
 80036a8:	4618      	mov	r0, r3
 80036aa:	f006 fefa 	bl	800a4a2 <USB_HC_Halt>
 80036ae:	e025      	b.n	80036fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	78fa      	ldrb	r2, [r7, #3]
 80036b6:	4611      	mov	r1, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f006 f95a 	bl	8009972 <USB_ReadChInterrupts>
 80036be:	4603      	mov	r3, r0
 80036c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c4:	2b80      	cmp	r3, #128	; 0x80
 80036c6:	d119      	bne.n	80036fc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	015a      	lsls	r2, r3, #5
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d4:	461a      	mov	r2, r3
 80036d6:	2380      	movs	r3, #128	; 0x80
 80036d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	334d      	adds	r3, #77	; 0x4d
 80036ea:	2207      	movs	r2, #7
 80036ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	4611      	mov	r1, r2
 80036f6:	4618      	mov	r0, r3
 80036f8:	f006 fed3 	bl	800a4a2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f006 f934 	bl	8009972 <USB_ReadChInterrupts>
 800370a:	4603      	mov	r3, r0
 800370c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003714:	d112      	bne.n	800373c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	78fa      	ldrb	r2, [r7, #3]
 800371c:	4611      	mov	r1, r2
 800371e:	4618      	mov	r0, r3
 8003720:	f006 febf 	bl	800a4a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003724:	78fb      	ldrb	r3, [r7, #3]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4413      	add	r3, r2
 800372c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003730:	461a      	mov	r2, r3
 8003732:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003736:	6093      	str	r3, [r2, #8]
 8003738:	f000 bd75 	b.w	8004226 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	78fa      	ldrb	r2, [r7, #3]
 8003742:	4611      	mov	r1, r2
 8003744:	4618      	mov	r0, r3
 8003746:	f006 f914 	bl	8009972 <USB_ReadChInterrupts>
 800374a:	4603      	mov	r3, r0
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b01      	cmp	r3, #1
 8003752:	f040 8128 	bne.w	80039a6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	4413      	add	r3, r2
 800375e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003762:	461a      	mov	r2, r3
 8003764:	2320      	movs	r3, #32
 8003766:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003768:	78fa      	ldrb	r2, [r7, #3]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	331b      	adds	r3, #27
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d119      	bne.n	80037b2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800377e:	78fa      	ldrb	r2, [r7, #3]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	331b      	adds	r3, #27
 800378e:	2200      	movs	r2, #0
 8003790:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003792:	78fb      	ldrb	r3, [r7, #3]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4413      	add	r3, r2
 800379a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	78fa      	ldrb	r2, [r7, #3]
 80037a2:	0151      	lsls	r1, r2, #5
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	440a      	add	r2, r1
 80037a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	799b      	ldrb	r3, [r3, #6]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d01b      	beq.n	80037f2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80037ba:	78fa      	ldrb	r2, [r7, #3]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	3330      	adds	r3, #48	; 0x30
 80037ca:	6819      	ldr	r1, [r3, #0]
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037de:	78fa      	ldrb	r2, [r7, #3]
 80037e0:	1ac9      	subs	r1, r1, r3
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4403      	add	r3, r0
 80037ee:	3338      	adds	r3, #56	; 0x38
 80037f0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80037f2:	78fa      	ldrb	r2, [r7, #3]
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	1a9b      	subs	r3, r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	334d      	adds	r3, #77	; 0x4d
 8003802:	2201      	movs	r2, #1
 8003804:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003806:	78fa      	ldrb	r2, [r7, #3]
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	1a9b      	subs	r3, r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	3344      	adds	r3, #68	; 0x44
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	4413      	add	r3, r2
 8003822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003826:	461a      	mov	r2, r3
 8003828:	2301      	movs	r3, #1
 800382a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800382c:	78fa      	ldrb	r2, [r7, #3]
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	3326      	adds	r3, #38	; 0x26
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003842:	78fa      	ldrb	r2, [r7, #3]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	3326      	adds	r3, #38	; 0x26
 8003852:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003854:	2b02      	cmp	r3, #2
 8003856:	d110      	bne.n	800387a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	78fa      	ldrb	r2, [r7, #3]
 800385e:	4611      	mov	r1, r2
 8003860:	4618      	mov	r0, r3
 8003862:	f006 fe1e 	bl	800a4a2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003866:	78fb      	ldrb	r3, [r7, #3]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4413      	add	r3, r2
 800386e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003872:	461a      	mov	r2, r3
 8003874:	2310      	movs	r3, #16
 8003876:	6093      	str	r3, [r2, #8]
 8003878:	e03d      	b.n	80038f6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	4613      	mov	r3, r2
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	1a9b      	subs	r3, r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	3326      	adds	r3, #38	; 0x26
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b03      	cmp	r3, #3
 800388e:	d00a      	beq.n	80038a6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003890:	78fa      	ldrb	r2, [r7, #3]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	3326      	adds	r3, #38	; 0x26
 80038a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d127      	bne.n	80038f6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80038a6:	78fb      	ldrb	r3, [r7, #3]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	78fa      	ldrb	r2, [r7, #3]
 80038b6:	0151      	lsls	r1, r2, #5
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	440a      	add	r2, r1
 80038bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038c4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80038c6:	78fa      	ldrb	r2, [r7, #3]
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	4613      	mov	r3, r2
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	1a9b      	subs	r3, r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	334c      	adds	r3, #76	; 0x4c
 80038d6:	2201      	movs	r2, #1
 80038d8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80038da:	78fa      	ldrb	r2, [r7, #3]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	1a9b      	subs	r3, r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	334c      	adds	r3, #76	; 0x4c
 80038ea:	781a      	ldrb	r2, [r3, #0]
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	4619      	mov	r1, r3
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f00a facd 	bl	800de90 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	799b      	ldrb	r3, [r3, #6]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d13b      	bne.n	8003976 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80038fe:	78fa      	ldrb	r2, [r7, #3]
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	1a9b      	subs	r3, r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	3338      	adds	r3, #56	; 0x38
 800390e:	6819      	ldr	r1, [r3, #0]
 8003910:	78fa      	ldrb	r2, [r7, #3]
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	4613      	mov	r3, r2
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	1a9b      	subs	r3, r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4403      	add	r3, r0
 800391e:	3328      	adds	r3, #40	; 0x28
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	440b      	add	r3, r1
 8003924:	1e59      	subs	r1, r3, #1
 8003926:	78fa      	ldrb	r2, [r7, #3]
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4403      	add	r3, r0
 8003934:	3328      	adds	r3, #40	; 0x28
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	fbb1 f3f3 	udiv	r3, r1, r3
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8470 	beq.w	8004226 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003946:	78fa      	ldrb	r2, [r7, #3]
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	1a9b      	subs	r3, r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	333c      	adds	r3, #60	; 0x3c
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	f083 0301 	eor.w	r3, r3, #1
 800395e:	b2d8      	uxtb	r0, r3
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	333c      	adds	r3, #60	; 0x3c
 800396e:	4602      	mov	r2, r0
 8003970:	701a      	strb	r2, [r3, #0]
 8003972:	f000 bc58 	b.w	8004226 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003976:	78fa      	ldrb	r2, [r7, #3]
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	1a9b      	subs	r3, r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	333c      	adds	r3, #60	; 0x3c
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	78fa      	ldrb	r2, [r7, #3]
 800398a:	f083 0301 	eor.w	r3, r3, #1
 800398e:	b2d8      	uxtb	r0, r3
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	440b      	add	r3, r1
 800399c:	333c      	adds	r3, #60	; 0x3c
 800399e:	4602      	mov	r2, r0
 80039a0:	701a      	strb	r2, [r3, #0]
 80039a2:	f000 bc40 	b.w	8004226 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	78fa      	ldrb	r2, [r7, #3]
 80039ac:	4611      	mov	r1, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f005 ffdf 	bl	8009972 <USB_ReadChInterrupts>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	d131      	bne.n	8003a22 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ca:	461a      	mov	r2, r3
 80039cc:	2320      	movs	r3, #32
 80039ce:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80039d0:	78fa      	ldrb	r2, [r7, #3]
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	1a9b      	subs	r3, r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	331a      	adds	r3, #26
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	f040 841f 	bne.w	8004226 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80039e8:	78fa      	ldrb	r2, [r7, #3]
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	4613      	mov	r3, r2
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	1a9b      	subs	r3, r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	331b      	adds	r3, #27
 80039f8:	2201      	movs	r2, #1
 80039fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80039fc:	78fa      	ldrb	r2, [r7, #3]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	334d      	adds	r3, #77	; 0x4d
 8003a0c:	2203      	movs	r2, #3
 8003a0e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	78fa      	ldrb	r2, [r7, #3]
 8003a16:	4611      	mov	r1, r2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f006 fd42 	bl	800a4a2 <USB_HC_Halt>
 8003a1e:	f000 bc02 	b.w	8004226 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	78fa      	ldrb	r2, [r7, #3]
 8003a28:	4611      	mov	r1, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f005 ffa1 	bl	8009972 <USB_ReadChInterrupts>
 8003a30:	4603      	mov	r3, r0
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	f040 8305 	bne.w	8004046 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	334d      	adds	r3, #77	; 0x4d
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d114      	bne.n	8003a8e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	1a9b      	subs	r3, r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	334d      	adds	r3, #77	; 0x4d
 8003a74:	2202      	movs	r2, #2
 8003a76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003a78:	78fa      	ldrb	r2, [r7, #3]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	334c      	adds	r3, #76	; 0x4c
 8003a88:	2201      	movs	r2, #1
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	e2cc      	b.n	8004028 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	334d      	adds	r3, #77	; 0x4d
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b06      	cmp	r3, #6
 8003aa2:	d114      	bne.n	8003ace <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003aa4:	78fa      	ldrb	r2, [r7, #3]
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	334d      	adds	r3, #77	; 0x4d
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003ab8:	78fa      	ldrb	r2, [r7, #3]
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	334c      	adds	r3, #76	; 0x4c
 8003ac8:	2205      	movs	r2, #5
 8003aca:	701a      	strb	r2, [r3, #0]
 8003acc:	e2ac      	b.n	8004028 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003ace:	78fa      	ldrb	r2, [r7, #3]
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	1a9b      	subs	r3, r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	440b      	add	r3, r1
 8003adc:	334d      	adds	r3, #77	; 0x4d
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b07      	cmp	r3, #7
 8003ae2:	d00b      	beq.n	8003afc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003ae4:	78fa      	ldrb	r2, [r7, #3]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	1a9b      	subs	r3, r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	334d      	adds	r3, #77	; 0x4d
 8003af4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003af6:	2b09      	cmp	r3, #9
 8003af8:	f040 80a6 	bne.w	8003c48 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003afc:	78fa      	ldrb	r2, [r7, #3]
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	1a9b      	subs	r3, r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	334d      	adds	r3, #77	; 0x4d
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	3344      	adds	r3, #68	; 0x44
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	1c59      	adds	r1, r3, #1
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4403      	add	r3, r0
 8003b30:	3344      	adds	r3, #68	; 0x44
 8003b32:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b34:	78fa      	ldrb	r2, [r7, #3]
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	1a9b      	subs	r3, r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	3344      	adds	r3, #68	; 0x44
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d943      	bls.n	8003bd2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	1a9b      	subs	r3, r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	3344      	adds	r3, #68	; 0x44
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003b5e:	78fa      	ldrb	r2, [r7, #3]
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	331a      	adds	r3, #26
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d123      	bne.n	8003bbc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003b74:	78fa      	ldrb	r2, [r7, #3]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	331b      	adds	r3, #27
 8003b84:	2200      	movs	r2, #0
 8003b86:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	331c      	adds	r3, #28
 8003b98:	2200      	movs	r2, #0
 8003b9a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	0151      	lsls	r1, r2, #5
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	440a      	add	r2, r1
 8003bb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bba:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003bbc:	78fa      	ldrb	r2, [r7, #3]
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	334c      	adds	r3, #76	; 0x4c
 8003bcc:	2204      	movs	r2, #4
 8003bce:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003bd0:	e229      	b.n	8004026 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	334c      	adds	r3, #76	; 0x4c
 8003be2:	2202      	movs	r2, #2
 8003be4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	3326      	adds	r3, #38	; 0x26
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00b      	beq.n	8003c14 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003bfc:	78fa      	ldrb	r2, [r7, #3]
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	1a9b      	subs	r3, r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	3326      	adds	r3, #38	; 0x26
 8003c0c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	f040 8209 	bne.w	8004026 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c2a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c32:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c40:	461a      	mov	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c46:	e1ee      	b.n	8004026 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003c48:	78fa      	ldrb	r2, [r7, #3]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	334d      	adds	r3, #77	; 0x4d
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b05      	cmp	r3, #5
 8003c5c:	f040 80c8 	bne.w	8003df0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	334d      	adds	r3, #77	; 0x4d
 8003c70:	2202      	movs	r2, #2
 8003c72:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003c74:	78fa      	ldrb	r2, [r7, #3]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	331b      	adds	r3, #27
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	f040 81ce 	bne.w	8004028 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003c8c:	78fa      	ldrb	r2, [r7, #3]
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	4613      	mov	r3, r2
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	1a9b      	subs	r3, r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	3326      	adds	r3, #38	; 0x26
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d16b      	bne.n	8003d7a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003ca2:	78fa      	ldrb	r2, [r7, #3]
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	3348      	adds	r3, #72	; 0x48
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	1c59      	adds	r1, r3, #1
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4403      	add	r3, r0
 8003cc2:	3348      	adds	r3, #72	; 0x48
 8003cc4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003cc6:	78fa      	ldrb	r2, [r7, #3]
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	1a9b      	subs	r3, r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	3348      	adds	r3, #72	; 0x48
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d943      	bls.n	8003d64 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	3348      	adds	r3, #72	; 0x48
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003cf0:	78fa      	ldrb	r2, [r7, #3]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	331b      	adds	r3, #27
 8003d00:	2200      	movs	r2, #0
 8003d02:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	3344      	adds	r3, #68	; 0x44
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d809      	bhi.n	8003d2e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	331c      	adds	r3, #28
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d2e:	78fb      	ldrb	r3, [r7, #3]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	78fa      	ldrb	r2, [r7, #3]
 8003d3e:	0151      	lsls	r1, r2, #5
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	440a      	add	r2, r1
 8003d44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d4e:	78fa      	ldrb	r2, [r7, #3]
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	1a9b      	subs	r3, r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	334c      	adds	r3, #76	; 0x4c
 8003d5e:	2204      	movs	r2, #4
 8003d60:	701a      	strb	r2, [r3, #0]
 8003d62:	e014      	b.n	8003d8e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d64:	78fa      	ldrb	r2, [r7, #3]
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	334c      	adds	r3, #76	; 0x4c
 8003d74:	2202      	movs	r2, #2
 8003d76:	701a      	strb	r2, [r3, #0]
 8003d78:	e009      	b.n	8003d8e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	334c      	adds	r3, #76	; 0x4c
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	3326      	adds	r3, #38	; 0x26
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00b      	beq.n	8003dbc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003da4:	78fa      	ldrb	r2, [r7, #3]
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	4613      	mov	r3, r2
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	3326      	adds	r3, #38	; 0x26
 8003db4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	f040 8136 	bne.w	8004028 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003dd2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003dda:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de8:	461a      	mov	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	e11b      	b.n	8004028 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003df0:	78fa      	ldrb	r2, [r7, #3]
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	4613      	mov	r3, r2
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	1a9b      	subs	r3, r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	334d      	adds	r3, #77	; 0x4d
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	f040 8081 	bne.w	8003f0a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e08:	78fa      	ldrb	r2, [r7, #3]
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	1a9b      	subs	r3, r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	334d      	adds	r3, #77	; 0x4d
 8003e18:	2202      	movs	r2, #2
 8003e1a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e1c:	78fa      	ldrb	r2, [r7, #3]
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	1a9b      	subs	r3, r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	331b      	adds	r3, #27
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	f040 80fa 	bne.w	8004028 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e34:	78fa      	ldrb	r2, [r7, #3]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	334c      	adds	r3, #76	; 0x4c
 8003e44:	2202      	movs	r2, #2
 8003e46:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003e48:	78fb      	ldrb	r3, [r7, #3]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	78fa      	ldrb	r2, [r7, #3]
 8003e58:	0151      	lsls	r1, r2, #5
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	440a      	add	r2, r1
 8003e5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e66:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	78fa      	ldrb	r2, [r7, #3]
 8003e78:	0151      	lsls	r1, r2, #5
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	440a      	add	r2, r1
 8003e7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e86:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	78fa      	ldrb	r2, [r7, #3]
 8003e98:	0151      	lsls	r1, r2, #5
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	440a      	add	r2, r1
 8003e9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ea2:	f023 0320 	bic.w	r3, r3, #32
 8003ea6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	3326      	adds	r3, #38	; 0x26
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00b      	beq.n	8003ed6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ebe:	78fa      	ldrb	r2, [r7, #3]
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	3326      	adds	r3, #38	; 0x26
 8003ece:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	f040 80a9 	bne.w	8004028 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ed6:	78fb      	ldrb	r3, [r7, #3]
 8003ed8:	015a      	lsls	r2, r3, #5
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	4413      	add	r3, r2
 8003ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003eec:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ef4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ef6:	78fb      	ldrb	r3, [r7, #3]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f02:	461a      	mov	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	e08e      	b.n	8004028 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003f0a:	78fa      	ldrb	r2, [r7, #3]
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	334d      	adds	r3, #77	; 0x4d
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d143      	bne.n	8003fa8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f20:	78fa      	ldrb	r2, [r7, #3]
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	334d      	adds	r3, #77	; 0x4d
 8003f30:	2202      	movs	r2, #2
 8003f32:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f34:	78fa      	ldrb	r2, [r7, #3]
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	1a9b      	subs	r3, r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	334c      	adds	r3, #76	; 0x4c
 8003f44:	2202      	movs	r2, #2
 8003f46:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f48:	78fa      	ldrb	r2, [r7, #3]
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	1a9b      	subs	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	3326      	adds	r3, #38	; 0x26
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003f5e:	78fa      	ldrb	r2, [r7, #3]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	1a9b      	subs	r3, r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	3326      	adds	r3, #38	; 0x26
 8003f6e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d159      	bne.n	8004028 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f74:	78fb      	ldrb	r3, [r7, #3]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f8a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f92:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	e03f      	b.n	8004028 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003fa8:	78fa      	ldrb	r2, [r7, #3]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	1a9b      	subs	r3, r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	334d      	adds	r3, #77	; 0x4d
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d126      	bne.n	800400c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003fbe:	78fa      	ldrb	r2, [r7, #3]
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	1a9b      	subs	r3, r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	334d      	adds	r3, #77	; 0x4d
 8003fce:	2202      	movs	r2, #2
 8003fd0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003fd2:	78fa      	ldrb	r2, [r7, #3]
 8003fd4:	6879      	ldr	r1, [r7, #4]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	1a9b      	subs	r3, r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	440b      	add	r3, r1
 8003fe0:	3344      	adds	r3, #68	; 0x44
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	1c59      	adds	r1, r3, #1
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	1a9b      	subs	r3, r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4403      	add	r3, r0
 8003ff2:	3344      	adds	r3, #68	; 0x44
 8003ff4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ff6:	78fa      	ldrb	r2, [r7, #3]
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	1a9b      	subs	r3, r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	334c      	adds	r3, #76	; 0x4c
 8004006:	2204      	movs	r2, #4
 8004008:	701a      	strb	r2, [r3, #0]
 800400a:	e00d      	b.n	8004028 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800400c:	78fa      	ldrb	r2, [r7, #3]
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	4613      	mov	r3, r2
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	334d      	adds	r3, #77	; 0x4d
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b02      	cmp	r3, #2
 8004020:	f000 8100 	beq.w	8004224 <HCD_HC_IN_IRQHandler+0xcca>
 8004024:	e000      	b.n	8004028 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004026:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004028:	78fa      	ldrb	r2, [r7, #3]
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	334c      	adds	r3, #76	; 0x4c
 8004038:	781a      	ldrb	r2, [r3, #0]
 800403a:	78fb      	ldrb	r3, [r7, #3]
 800403c:	4619      	mov	r1, r3
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f009 ff26 	bl	800de90 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004044:	e0ef      	b.n	8004226 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	4611      	mov	r1, r2
 800404e:	4618      	mov	r0, r3
 8004050:	f005 fc8f 	bl	8009972 <USB_ReadChInterrupts>
 8004054:	4603      	mov	r3, r0
 8004056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405a:	2b40      	cmp	r3, #64	; 0x40
 800405c:	d12f      	bne.n	80040be <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	4413      	add	r3, r2
 8004066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800406a:	461a      	mov	r2, r3
 800406c:	2340      	movs	r3, #64	; 0x40
 800406e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004070:	78fa      	ldrb	r2, [r7, #3]
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	1a9b      	subs	r3, r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	334d      	adds	r3, #77	; 0x4d
 8004080:	2205      	movs	r2, #5
 8004082:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004084:	78fa      	ldrb	r2, [r7, #3]
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	4613      	mov	r3, r2
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	1a9b      	subs	r3, r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	331a      	adds	r3, #26
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800409a:	78fa      	ldrb	r2, [r7, #3]
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	4613      	mov	r3, r2
 80040a0:	011b      	lsls	r3, r3, #4
 80040a2:	1a9b      	subs	r3, r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	3344      	adds	r3, #68	; 0x44
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	78fa      	ldrb	r2, [r7, #3]
 80040b4:	4611      	mov	r1, r2
 80040b6:	4618      	mov	r0, r3
 80040b8:	f006 f9f3 	bl	800a4a2 <USB_HC_Halt>
 80040bc:	e0b3      	b.n	8004226 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	78fa      	ldrb	r2, [r7, #3]
 80040c4:	4611      	mov	r1, r2
 80040c6:	4618      	mov	r0, r3
 80040c8:	f005 fc53 	bl	8009972 <USB_ReadChInterrupts>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f003 0310 	and.w	r3, r3, #16
 80040d2:	2b10      	cmp	r3, #16
 80040d4:	f040 80a7 	bne.w	8004226 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80040d8:	78fa      	ldrb	r2, [r7, #3]
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	4613      	mov	r3, r2
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	3326      	adds	r3, #38	; 0x26
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d11b      	bne.n	8004126 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80040ee:	78fa      	ldrb	r2, [r7, #3]
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	4613      	mov	r3, r2
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	3344      	adds	r3, #68	; 0x44
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004102:	78fa      	ldrb	r2, [r7, #3]
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	334d      	adds	r3, #77	; 0x4d
 8004112:	2204      	movs	r2, #4
 8004114:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	78fa      	ldrb	r2, [r7, #3]
 800411c:	4611      	mov	r1, r2
 800411e:	4618      	mov	r0, r3
 8004120:	f006 f9bf 	bl	800a4a2 <USB_HC_Halt>
 8004124:	e03f      	b.n	80041a6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004126:	78fa      	ldrb	r2, [r7, #3]
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	3326      	adds	r3, #38	; 0x26
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800413c:	78fa      	ldrb	r2, [r7, #3]
 800413e:	6879      	ldr	r1, [r7, #4]
 8004140:	4613      	mov	r3, r2
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	440b      	add	r3, r1
 800414a:	3326      	adds	r3, #38	; 0x26
 800414c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800414e:	2b02      	cmp	r3, #2
 8004150:	d129      	bne.n	80041a6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004152:	78fa      	ldrb	r2, [r7, #3]
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	4613      	mov	r3, r2
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	1a9b      	subs	r3, r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	440b      	add	r3, r1
 8004160:	3344      	adds	r3, #68	; 0x44
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	799b      	ldrb	r3, [r3, #6]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <HCD_HC_IN_IRQHandler+0xc2a>
 800416e:	78fa      	ldrb	r2, [r7, #3]
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	4613      	mov	r3, r2
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	331b      	adds	r3, #27
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d110      	bne.n	80041a6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004184:	78fa      	ldrb	r2, [r7, #3]
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	4613      	mov	r3, r2
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	1a9b      	subs	r3, r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	334d      	adds	r3, #77	; 0x4d
 8004194:	2204      	movs	r2, #4
 8004196:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	78fa      	ldrb	r2, [r7, #3]
 800419e:	4611      	mov	r1, r2
 80041a0:	4618      	mov	r0, r3
 80041a2:	f006 f97e 	bl	800a4a2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80041a6:	78fa      	ldrb	r2, [r7, #3]
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	1a9b      	subs	r3, r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	331b      	adds	r3, #27
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d129      	bne.n	8004210 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80041bc:	78fa      	ldrb	r2, [r7, #3]
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	4613      	mov	r3, r2
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	1a9b      	subs	r3, r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	331b      	adds	r3, #27
 80041cc:	2200      	movs	r2, #0
 80041ce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	78fa      	ldrb	r2, [r7, #3]
 80041e0:	0151      	lsls	r1, r2, #5
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	440a      	add	r2, r1
 80041e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ee:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	78fa      	ldrb	r2, [r7, #3]
 8004200:	0151      	lsls	r1, r2, #5
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	440a      	add	r2, r1
 8004206:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800420a:	f043 0320 	orr.w	r3, r3, #32
 800420e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	4413      	add	r3, r2
 8004218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800421c:	461a      	mov	r2, r3
 800421e:	2310      	movs	r3, #16
 8004220:	6093      	str	r3, [r2, #8]
 8004222:	e000      	b.n	8004226 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004224:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	78fa      	ldrb	r2, [r7, #3]
 8004248:	4611      	mov	r1, r2
 800424a:	4618      	mov	r0, r3
 800424c:	f005 fb91 	bl	8009972 <USB_ReadChInterrupts>
 8004250:	4603      	mov	r3, r0
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b04      	cmp	r3, #4
 8004258:	d11b      	bne.n	8004292 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	4413      	add	r3, r2
 8004262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004266:	461a      	mov	r2, r3
 8004268:	2304      	movs	r3, #4
 800426a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800426c:	78fa      	ldrb	r2, [r7, #3]
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	4613      	mov	r3, r2
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	1a9b      	subs	r3, r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	334d      	adds	r3, #77	; 0x4d
 800427c:	2207      	movs	r2, #7
 800427e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	78fa      	ldrb	r2, [r7, #3]
 8004286:	4611      	mov	r1, r2
 8004288:	4618      	mov	r0, r3
 800428a:	f006 f90a 	bl	800a4a2 <USB_HC_Halt>
 800428e:	f000 bc6f 	b.w	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	78fa      	ldrb	r2, [r7, #3]
 8004298:	4611      	mov	r1, r2
 800429a:	4618      	mov	r0, r3
 800429c:	f005 fb69 	bl	8009972 <USB_ReadChInterrupts>
 80042a0:	4603      	mov	r3, r0
 80042a2:	f003 0320 	and.w	r3, r3, #32
 80042a6:	2b20      	cmp	r3, #32
 80042a8:	f040 8082 	bne.w	80043b0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b8:	461a      	mov	r2, r3
 80042ba:	2320      	movs	r3, #32
 80042bc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80042be:	78fa      	ldrb	r2, [r7, #3]
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	1a9b      	subs	r3, r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	3319      	adds	r3, #25
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d124      	bne.n	800431e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	3319      	adds	r3, #25
 80042e4:	2200      	movs	r2, #0
 80042e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042e8:	78fa      	ldrb	r2, [r7, #3]
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	1a9b      	subs	r3, r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	334c      	adds	r3, #76	; 0x4c
 80042f8:	2202      	movs	r2, #2
 80042fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80042fc:	78fa      	ldrb	r2, [r7, #3]
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	1a9b      	subs	r3, r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	334d      	adds	r3, #77	; 0x4d
 800430c:	2203      	movs	r2, #3
 800430e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	4611      	mov	r1, r2
 8004318:	4618      	mov	r0, r3
 800431a:	f006 f8c2 	bl	800a4a2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800431e:	78fa      	ldrb	r2, [r7, #3]
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	1a9b      	subs	r3, r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	440b      	add	r3, r1
 800432c:	331a      	adds	r3, #26
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b01      	cmp	r3, #1
 8004332:	f040 841d 	bne.w	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
 8004336:	78fa      	ldrb	r2, [r7, #3]
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	1a9b      	subs	r3, r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	331b      	adds	r3, #27
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	f040 8411 	bne.w	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800434e:	78fa      	ldrb	r2, [r7, #3]
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	1a9b      	subs	r3, r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	3326      	adds	r3, #38	; 0x26
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d009      	beq.n	8004378 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004364:	78fa      	ldrb	r2, [r7, #3]
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	331b      	adds	r3, #27
 8004374:	2201      	movs	r2, #1
 8004376:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004378:	78fa      	ldrb	r2, [r7, #3]
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	4613      	mov	r3, r2
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	1a9b      	subs	r3, r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	334d      	adds	r3, #77	; 0x4d
 8004388:	2203      	movs	r2, #3
 800438a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	78fa      	ldrb	r2, [r7, #3]
 8004392:	4611      	mov	r1, r2
 8004394:	4618      	mov	r0, r3
 8004396:	f006 f884 	bl	800a4a2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800439a:	78fa      	ldrb	r2, [r7, #3]
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	4613      	mov	r3, r2
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	1a9b      	subs	r3, r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	3344      	adds	r3, #68	; 0x44
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	e3df      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	78fa      	ldrb	r2, [r7, #3]
 80043b6:	4611      	mov	r1, r2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f005 fada 	bl	8009972 <USB_ReadChInterrupts>
 80043be:	4603      	mov	r3, r0
 80043c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c8:	d111      	bne.n	80043ee <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80043ca:	78fb      	ldrb	r3, [r7, #3]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d6:	461a      	mov	r2, r3
 80043d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043dc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	78fa      	ldrb	r2, [r7, #3]
 80043e4:	4611      	mov	r1, r2
 80043e6:	4618      	mov	r0, r3
 80043e8:	f006 f85b 	bl	800a4a2 <USB_HC_Halt>
 80043ec:	e3c0      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	78fa      	ldrb	r2, [r7, #3]
 80043f4:	4611      	mov	r1, r2
 80043f6:	4618      	mov	r0, r3
 80043f8:	f005 fabb 	bl	8009972 <USB_ReadChInterrupts>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b01      	cmp	r3, #1
 8004404:	d168      	bne.n	80044d8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004406:	78fa      	ldrb	r2, [r7, #3]
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	4613      	mov	r3, r2
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	1a9b      	subs	r3, r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	440b      	add	r3, r1
 8004414:	3344      	adds	r3, #68	; 0x44
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	78fa      	ldrb	r2, [r7, #3]
 8004420:	4611      	mov	r1, r2
 8004422:	4618      	mov	r0, r3
 8004424:	f005 faa5 	bl	8009972 <USB_ReadChInterrupts>
 8004428:	4603      	mov	r3, r0
 800442a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442e:	2b40      	cmp	r3, #64	; 0x40
 8004430:	d112      	bne.n	8004458 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004432:	78fa      	ldrb	r2, [r7, #3]
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	440b      	add	r3, r1
 8004440:	3319      	adds	r3, #25
 8004442:	2201      	movs	r2, #1
 8004444:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004446:	78fb      	ldrb	r3, [r7, #3]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	4413      	add	r3, r2
 800444e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004452:	461a      	mov	r2, r3
 8004454:	2340      	movs	r3, #64	; 0x40
 8004456:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004458:	78fa      	ldrb	r2, [r7, #3]
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	331b      	adds	r3, #27
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d019      	beq.n	80044a2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800446e:	78fa      	ldrb	r2, [r7, #3]
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	1a9b      	subs	r3, r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	331b      	adds	r3, #27
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004482:	78fb      	ldrb	r3, [r7, #3]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4413      	add	r3, r2
 800448a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	78fa      	ldrb	r2, [r7, #3]
 8004492:	0151      	lsls	r1, r2, #5
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	440a      	add	r2, r1
 8004498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800449c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80044a2:	78fb      	ldrb	r3, [r7, #3]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ae:	461a      	mov	r2, r3
 80044b0:	2301      	movs	r3, #1
 80044b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80044b4:	78fa      	ldrb	r2, [r7, #3]
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	4613      	mov	r3, r2
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	1a9b      	subs	r3, r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	334d      	adds	r3, #77	; 0x4d
 80044c4:	2201      	movs	r2, #1
 80044c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	78fa      	ldrb	r2, [r7, #3]
 80044ce:	4611      	mov	r1, r2
 80044d0:	4618      	mov	r0, r3
 80044d2:	f005 ffe6 	bl	800a4a2 <USB_HC_Halt>
 80044d6:	e34b      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	4611      	mov	r1, r2
 80044e0:	4618      	mov	r0, r3
 80044e2:	f005 fa46 	bl	8009972 <USB_ReadChInterrupts>
 80044e6:	4603      	mov	r3, r0
 80044e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ec:	2b40      	cmp	r3, #64	; 0x40
 80044ee:	d139      	bne.n	8004564 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80044f0:	78fa      	ldrb	r2, [r7, #3]
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	334d      	adds	r3, #77	; 0x4d
 8004500:	2205      	movs	r2, #5
 8004502:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004504:	78fa      	ldrb	r2, [r7, #3]
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	331a      	adds	r3, #26
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d109      	bne.n	800452e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800451a:	78fa      	ldrb	r2, [r7, #3]
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	3319      	adds	r3, #25
 800452a:	2201      	movs	r2, #1
 800452c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800452e:	78fa      	ldrb	r2, [r7, #3]
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	1a9b      	subs	r3, r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	3344      	adds	r3, #68	; 0x44
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	78fa      	ldrb	r2, [r7, #3]
 8004548:	4611      	mov	r1, r2
 800454a:	4618      	mov	r0, r3
 800454c:	f005 ffa9 	bl	800a4a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004550:	78fb      	ldrb	r3, [r7, #3]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	4413      	add	r3, r2
 8004558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455c:	461a      	mov	r2, r3
 800455e:	2340      	movs	r3, #64	; 0x40
 8004560:	6093      	str	r3, [r2, #8]
 8004562:	e305      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	78fa      	ldrb	r2, [r7, #3]
 800456a:	4611      	mov	r1, r2
 800456c:	4618      	mov	r0, r3
 800456e:	f005 fa00 	bl	8009972 <USB_ReadChInterrupts>
 8004572:	4603      	mov	r3, r0
 8004574:	f003 0308 	and.w	r3, r3, #8
 8004578:	2b08      	cmp	r3, #8
 800457a:	d11a      	bne.n	80045b2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800457c:	78fb      	ldrb	r3, [r7, #3]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4413      	add	r3, r2
 8004584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004588:	461a      	mov	r2, r3
 800458a:	2308      	movs	r3, #8
 800458c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	1a9b      	subs	r3, r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	334d      	adds	r3, #77	; 0x4d
 800459e:	2206      	movs	r2, #6
 80045a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	78fa      	ldrb	r2, [r7, #3]
 80045a8:	4611      	mov	r1, r2
 80045aa:	4618      	mov	r0, r3
 80045ac:	f005 ff79 	bl	800a4a2 <USB_HC_Halt>
 80045b0:	e2de      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	78fa      	ldrb	r2, [r7, #3]
 80045b8:	4611      	mov	r1, r2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f005 f9d9 	bl	8009972 <USB_ReadChInterrupts>
 80045c0:	4603      	mov	r3, r0
 80045c2:	f003 0310 	and.w	r3, r3, #16
 80045c6:	2b10      	cmp	r3, #16
 80045c8:	d144      	bne.n	8004654 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80045ca:	78fa      	ldrb	r2, [r7, #3]
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	3344      	adds	r3, #68	; 0x44
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80045de:	78fa      	ldrb	r2, [r7, #3]
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	334d      	adds	r3, #77	; 0x4d
 80045ee:	2204      	movs	r2, #4
 80045f0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80045f2:	78fa      	ldrb	r2, [r7, #3]
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	3319      	adds	r3, #25
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d114      	bne.n	8004632 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004608:	78fa      	ldrb	r2, [r7, #3]
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	1a9b      	subs	r3, r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	3318      	adds	r3, #24
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800461e:	78fa      	ldrb	r2, [r7, #3]
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	4613      	mov	r3, r2
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	1a9b      	subs	r3, r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	440b      	add	r3, r1
 800462c:	3319      	adds	r3, #25
 800462e:	2201      	movs	r2, #1
 8004630:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	78fa      	ldrb	r2, [r7, #3]
 8004638:	4611      	mov	r1, r2
 800463a:	4618      	mov	r0, r3
 800463c:	f005 ff31 	bl	800a4a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	4413      	add	r3, r2
 8004648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464c:	461a      	mov	r2, r3
 800464e:	2310      	movs	r3, #16
 8004650:	6093      	str	r3, [r2, #8]
 8004652:	e28d      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	78fa      	ldrb	r2, [r7, #3]
 800465a:	4611      	mov	r1, r2
 800465c:	4618      	mov	r0, r3
 800465e:	f005 f988 	bl	8009972 <USB_ReadChInterrupts>
 8004662:	4603      	mov	r3, r0
 8004664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004668:	2b80      	cmp	r3, #128	; 0x80
 800466a:	d169      	bne.n	8004740 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	799b      	ldrb	r3, [r3, #6]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d111      	bne.n	8004698 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004674:	78fa      	ldrb	r2, [r7, #3]
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	1a9b      	subs	r3, r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	334d      	adds	r3, #77	; 0x4d
 8004684:	2207      	movs	r2, #7
 8004686:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	78fa      	ldrb	r2, [r7, #3]
 800468e:	4611      	mov	r1, r2
 8004690:	4618      	mov	r0, r3
 8004692:	f005 ff06 	bl	800a4a2 <USB_HC_Halt>
 8004696:	e049      	b.n	800472c <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004698:	78fa      	ldrb	r2, [r7, #3]
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	3344      	adds	r3, #68	; 0x44
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	1c59      	adds	r1, r3, #1
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	4613      	mov	r3, r2
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	1a9b      	subs	r3, r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4403      	add	r3, r0
 80046b8:	3344      	adds	r3, #68	; 0x44
 80046ba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046bc:	78fa      	ldrb	r2, [r7, #3]
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	3344      	adds	r3, #68	; 0x44
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d922      	bls.n	8004718 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80046d2:	78fa      	ldrb	r2, [r7, #3]
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	1a9b      	subs	r3, r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	440b      	add	r3, r1
 80046e0:	3344      	adds	r3, #68	; 0x44
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80046e6:	78fa      	ldrb	r2, [r7, #3]
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	1a9b      	subs	r3, r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	440b      	add	r3, r1
 80046f4:	334c      	adds	r3, #76	; 0x4c
 80046f6:	2204      	movs	r2, #4
 80046f8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80046fa:	78fa      	ldrb	r2, [r7, #3]
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	4613      	mov	r3, r2
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	1a9b      	subs	r3, r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	440b      	add	r3, r1
 8004708:	334c      	adds	r3, #76	; 0x4c
 800470a:	781a      	ldrb	r2, [r3, #0]
 800470c:	78fb      	ldrb	r3, [r7, #3]
 800470e:	4619      	mov	r1, r3
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f009 fbbd 	bl	800de90 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004716:	e009      	b.n	800472c <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004718:	78fa      	ldrb	r2, [r7, #3]
 800471a:	6879      	ldr	r1, [r7, #4]
 800471c:	4613      	mov	r3, r2
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	1a9b      	subs	r3, r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	334c      	adds	r3, #76	; 0x4c
 8004728:	2202      	movs	r2, #2
 800472a:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800472c:	78fb      	ldrb	r3, [r7, #3]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	4413      	add	r3, r2
 8004734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004738:	461a      	mov	r2, r3
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	6093      	str	r3, [r2, #8]
 800473e:	e217      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	78fa      	ldrb	r2, [r7, #3]
 8004746:	4611      	mov	r1, r2
 8004748:	4618      	mov	r0, r3
 800474a:	f005 f912 	bl	8009972 <USB_ReadChInterrupts>
 800474e:	4603      	mov	r3, r0
 8004750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004758:	d11b      	bne.n	8004792 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800475a:	78fa      	ldrb	r2, [r7, #3]
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	4613      	mov	r3, r2
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	1a9b      	subs	r3, r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	440b      	add	r3, r1
 8004768:	334d      	adds	r3, #77	; 0x4d
 800476a:	2209      	movs	r2, #9
 800476c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	78fa      	ldrb	r2, [r7, #3]
 8004774:	4611      	mov	r1, r2
 8004776:	4618      	mov	r0, r3
 8004778:	f005 fe93 	bl	800a4a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	4413      	add	r3, r2
 8004784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004788:	461a      	mov	r2, r3
 800478a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800478e:	6093      	str	r3, [r2, #8]
 8004790:	e1ee      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	78fa      	ldrb	r2, [r7, #3]
 8004798:	4611      	mov	r1, r2
 800479a:	4618      	mov	r0, r3
 800479c:	f005 f8e9 	bl	8009972 <USB_ReadChInterrupts>
 80047a0:	4603      	mov	r3, r0
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	f040 81df 	bne.w	8004b6a <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b8:	461a      	mov	r2, r3
 80047ba:	2302      	movs	r3, #2
 80047bc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80047be:	78fa      	ldrb	r2, [r7, #3]
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	1a9b      	subs	r3, r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	334d      	adds	r3, #77	; 0x4d
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	f040 8093 	bne.w	80048fc <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047d6:	78fa      	ldrb	r2, [r7, #3]
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	4613      	mov	r3, r2
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	1a9b      	subs	r3, r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	440b      	add	r3, r1
 80047e4:	334d      	adds	r3, #77	; 0x4d
 80047e6:	2202      	movs	r2, #2
 80047e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80047ea:	78fa      	ldrb	r2, [r7, #3]
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	4613      	mov	r3, r2
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	1a9b      	subs	r3, r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	334c      	adds	r3, #76	; 0x4c
 80047fa:	2201      	movs	r2, #1
 80047fc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80047fe:	78fa      	ldrb	r2, [r7, #3]
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	4613      	mov	r3, r2
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	1a9b      	subs	r3, r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	440b      	add	r3, r1
 800480c:	3326      	adds	r3, #38	; 0x26
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b02      	cmp	r3, #2
 8004812:	d00b      	beq.n	800482c <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004814:	78fa      	ldrb	r2, [r7, #3]
 8004816:	6879      	ldr	r1, [r7, #4]
 8004818:	4613      	mov	r3, r2
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	1a9b      	subs	r3, r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	3326      	adds	r3, #38	; 0x26
 8004824:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004826:	2b03      	cmp	r3, #3
 8004828:	f040 8190 	bne.w	8004b4c <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	799b      	ldrb	r3, [r3, #6]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d115      	bne.n	8004860 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004834:	78fa      	ldrb	r2, [r7, #3]
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	4613      	mov	r3, r2
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	1a9b      	subs	r3, r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	333d      	adds	r3, #61	; 0x3d
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	78fa      	ldrb	r2, [r7, #3]
 8004848:	f083 0301 	eor.w	r3, r3, #1
 800484c:	b2d8      	uxtb	r0, r3
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	4613      	mov	r3, r2
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	333d      	adds	r3, #61	; 0x3d
 800485c:	4602      	mov	r2, r0
 800485e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	799b      	ldrb	r3, [r3, #6]
 8004864:	2b01      	cmp	r3, #1
 8004866:	f040 8171 	bne.w	8004b4c <HCD_HC_OUT_IRQHandler+0x920>
 800486a:	78fa      	ldrb	r2, [r7, #3]
 800486c:	6879      	ldr	r1, [r7, #4]
 800486e:	4613      	mov	r3, r2
 8004870:	011b      	lsls	r3, r3, #4
 8004872:	1a9b      	subs	r3, r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	440b      	add	r3, r1
 8004878:	3334      	adds	r3, #52	; 0x34
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 8165 	beq.w	8004b4c <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004882:	78fa      	ldrb	r2, [r7, #3]
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	440b      	add	r3, r1
 8004890:	3334      	adds	r3, #52	; 0x34
 8004892:	6819      	ldr	r1, [r3, #0]
 8004894:	78fa      	ldrb	r2, [r7, #3]
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	4613      	mov	r3, r2
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4403      	add	r3, r0
 80048a2:	3328      	adds	r3, #40	; 0x28
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	440b      	add	r3, r1
 80048a8:	1e59      	subs	r1, r3, #1
 80048aa:	78fa      	ldrb	r2, [r7, #3]
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	4613      	mov	r3, r2
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	1a9b      	subs	r3, r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4403      	add	r3, r0
 80048b8:	3328      	adds	r3, #40	; 0x28
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80048c0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 813f 	beq.w	8004b4c <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80048ce:	78fa      	ldrb	r2, [r7, #3]
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	4613      	mov	r3, r2
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	1a9b      	subs	r3, r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	440b      	add	r3, r1
 80048dc:	333d      	adds	r3, #61	; 0x3d
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	78fa      	ldrb	r2, [r7, #3]
 80048e2:	f083 0301 	eor.w	r3, r3, #1
 80048e6:	b2d8      	uxtb	r0, r3
 80048e8:	6879      	ldr	r1, [r7, #4]
 80048ea:	4613      	mov	r3, r2
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	1a9b      	subs	r3, r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	440b      	add	r3, r1
 80048f4:	333d      	adds	r3, #61	; 0x3d
 80048f6:	4602      	mov	r2, r0
 80048f8:	701a      	strb	r2, [r3, #0]
 80048fa:	e127      	b.n	8004b4c <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80048fc:	78fa      	ldrb	r2, [r7, #3]
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	4613      	mov	r3, r2
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	1a9b      	subs	r3, r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	334d      	adds	r3, #77	; 0x4d
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b03      	cmp	r3, #3
 8004910:	d120      	bne.n	8004954 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004912:	78fa      	ldrb	r2, [r7, #3]
 8004914:	6879      	ldr	r1, [r7, #4]
 8004916:	4613      	mov	r3, r2
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	1a9b      	subs	r3, r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	440b      	add	r3, r1
 8004920:	334d      	adds	r3, #77	; 0x4d
 8004922:	2202      	movs	r2, #2
 8004924:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004926:	78fa      	ldrb	r2, [r7, #3]
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	4613      	mov	r3, r2
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	1a9b      	subs	r3, r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	440b      	add	r3, r1
 8004934:	331b      	adds	r3, #27
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b01      	cmp	r3, #1
 800493a:	f040 8107 	bne.w	8004b4c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800493e:	78fa      	ldrb	r2, [r7, #3]
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	4613      	mov	r3, r2
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	440b      	add	r3, r1
 800494c:	334c      	adds	r3, #76	; 0x4c
 800494e:	2202      	movs	r2, #2
 8004950:	701a      	strb	r2, [r3, #0]
 8004952:	e0fb      	b.n	8004b4c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004954:	78fa      	ldrb	r2, [r7, #3]
 8004956:	6879      	ldr	r1, [r7, #4]
 8004958:	4613      	mov	r3, r2
 800495a:	011b      	lsls	r3, r3, #4
 800495c:	1a9b      	subs	r3, r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	440b      	add	r3, r1
 8004962:	334d      	adds	r3, #77	; 0x4d
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b04      	cmp	r3, #4
 8004968:	d13a      	bne.n	80049e0 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800496a:	78fa      	ldrb	r2, [r7, #3]
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	4613      	mov	r3, r2
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	1a9b      	subs	r3, r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	440b      	add	r3, r1
 8004978:	334d      	adds	r3, #77	; 0x4d
 800497a:	2202      	movs	r2, #2
 800497c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800497e:	78fa      	ldrb	r2, [r7, #3]
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	1a9b      	subs	r3, r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	334c      	adds	r3, #76	; 0x4c
 800498e:	2202      	movs	r2, #2
 8004990:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004992:	78fa      	ldrb	r2, [r7, #3]
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	4613      	mov	r3, r2
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	1a9b      	subs	r3, r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	440b      	add	r3, r1
 80049a0:	331b      	adds	r3, #27
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	f040 80d1 	bne.w	8004b4c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80049aa:	78fa      	ldrb	r2, [r7, #3]
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	4613      	mov	r3, r2
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	1a9b      	subs	r3, r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	440b      	add	r3, r1
 80049b8:	331b      	adds	r3, #27
 80049ba:	2200      	movs	r2, #0
 80049bc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80049be:	78fb      	ldrb	r3, [r7, #3]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	78fa      	ldrb	r2, [r7, #3]
 80049ce:	0151      	lsls	r1, r2, #5
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	440a      	add	r2, r1
 80049d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049dc:	6053      	str	r3, [r2, #4]
 80049de:	e0b5      	b.n	8004b4c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80049e0:	78fa      	ldrb	r2, [r7, #3]
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	4613      	mov	r3, r2
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	1a9b      	subs	r3, r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	334d      	adds	r3, #77	; 0x4d
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	2b05      	cmp	r3, #5
 80049f4:	d114      	bne.n	8004a20 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049f6:	78fa      	ldrb	r2, [r7, #3]
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	4613      	mov	r3, r2
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	334d      	adds	r3, #77	; 0x4d
 8004a06:	2202      	movs	r2, #2
 8004a08:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004a0a:	78fa      	ldrb	r2, [r7, #3]
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	1a9b      	subs	r3, r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	440b      	add	r3, r1
 8004a18:	334c      	adds	r3, #76	; 0x4c
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	e095      	b.n	8004b4c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004a20:	78fa      	ldrb	r2, [r7, #3]
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	4613      	mov	r3, r2
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	334d      	adds	r3, #77	; 0x4d
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b06      	cmp	r3, #6
 8004a34:	d114      	bne.n	8004a60 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a36:	78fa      	ldrb	r2, [r7, #3]
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	011b      	lsls	r3, r3, #4
 8004a3e:	1a9b      	subs	r3, r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	440b      	add	r3, r1
 8004a44:	334d      	adds	r3, #77	; 0x4d
 8004a46:	2202      	movs	r2, #2
 8004a48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004a4a:	78fa      	ldrb	r2, [r7, #3]
 8004a4c:	6879      	ldr	r1, [r7, #4]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	1a9b      	subs	r3, r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	440b      	add	r3, r1
 8004a58:	334c      	adds	r3, #76	; 0x4c
 8004a5a:	2205      	movs	r2, #5
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	e075      	b.n	8004b4c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004a60:	78fa      	ldrb	r2, [r7, #3]
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	4613      	mov	r3, r2
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	334d      	adds	r3, #77	; 0x4d
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	2b07      	cmp	r3, #7
 8004a74:	d00a      	beq.n	8004a8c <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004a76:	78fa      	ldrb	r2, [r7, #3]
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	1a9b      	subs	r3, r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	440b      	add	r3, r1
 8004a84:	334d      	adds	r3, #77	; 0x4d
 8004a86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004a88:	2b09      	cmp	r3, #9
 8004a8a:	d170      	bne.n	8004b6e <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a8c:	78fa      	ldrb	r2, [r7, #3]
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	334d      	adds	r3, #77	; 0x4d
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004aa0:	78fa      	ldrb	r2, [r7, #3]
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	1a9b      	subs	r3, r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	440b      	add	r3, r1
 8004aae:	3344      	adds	r3, #68	; 0x44
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	1c59      	adds	r1, r3, #1
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	1a9b      	subs	r3, r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4403      	add	r3, r0
 8004ac0:	3344      	adds	r3, #68	; 0x44
 8004ac2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004ac4:	78fa      	ldrb	r2, [r7, #3]
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	1a9b      	subs	r3, r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	3344      	adds	r3, #68	; 0x44
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d914      	bls.n	8004b04 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004ada:	78fa      	ldrb	r2, [r7, #3]
 8004adc:	6879      	ldr	r1, [r7, #4]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	1a9b      	subs	r3, r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	3344      	adds	r3, #68	; 0x44
 8004aea:	2200      	movs	r2, #0
 8004aec:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004aee:	78fa      	ldrb	r2, [r7, #3]
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	4613      	mov	r3, r2
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	1a9b      	subs	r3, r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	440b      	add	r3, r1
 8004afc:	334c      	adds	r3, #76	; 0x4c
 8004afe:	2204      	movs	r2, #4
 8004b00:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b02:	e022      	b.n	8004b4a <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b04:	78fa      	ldrb	r2, [r7, #3]
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	334c      	adds	r3, #76	; 0x4c
 8004b14:	2202      	movs	r2, #2
 8004b16:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b18:	78fb      	ldrb	r3, [r7, #3]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b2e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b36:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b38:	78fb      	ldrb	r3, [r7, #3]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b44:	461a      	mov	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b4a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b4c:	78fa      	ldrb	r2, [r7, #3]
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	1a9b      	subs	r3, r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	334c      	adds	r3, #76	; 0x4c
 8004b5c:	781a      	ldrb	r2, [r3, #0]
 8004b5e:	78fb      	ldrb	r3, [r7, #3]
 8004b60:	4619      	mov	r1, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f009 f994 	bl	800de90 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b68:	e002      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004b6a:	bf00      	nop
 8004b6c:	e000      	b.n	8004b70 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004b6e:	bf00      	nop
  }
}
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b08a      	sub	sp, #40	; 0x28
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	0c5b      	lsrs	r3, r3, #17
 8004b9c:	f003 030f 	and.w	r3, r3, #15
 8004ba0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	091b      	lsrs	r3, r3, #4
 8004ba6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004baa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d004      	beq.n	8004bbc <HCD_RXQLVL_IRQHandler+0x46>
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b05      	cmp	r3, #5
 8004bb6:	f000 80b6 	beq.w	8004d26 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004bba:	e0b7      	b.n	8004d2c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 80b3 	beq.w	8004d2a <HCD_RXQLVL_IRQHandler+0x1b4>
 8004bc4:	6879      	ldr	r1, [r7, #4]
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	1a9b      	subs	r3, r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	332c      	adds	r3, #44	; 0x2c
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 80a7 	beq.w	8004d2a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	4613      	mov	r3, r2
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	1a9b      	subs	r3, r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	3338      	adds	r3, #56	; 0x38
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	18d1      	adds	r1, r2, r3
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	1a9b      	subs	r3, r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4403      	add	r3, r0
 8004c00:	3334      	adds	r3, #52	; 0x34
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4299      	cmp	r1, r3
 8004c06:	f200 8083 	bhi.w	8004d10 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	4613      	mov	r3, r2
 8004c14:	011b      	lsls	r3, r3, #4
 8004c16:	1a9b      	subs	r3, r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	332c      	adds	r3, #44	; 0x2c
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	b292      	uxth	r2, r2
 8004c24:	4619      	mov	r1, r3
 8004c26:	f004 fe18 	bl	800985a <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	1a9b      	subs	r3, r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	440b      	add	r3, r1
 8004c38:	332c      	adds	r3, #44	; 0x2c
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	18d1      	adds	r1, r2, r3
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	4613      	mov	r3, r2
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	1a9b      	subs	r3, r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4403      	add	r3, r0
 8004c4e:	332c      	adds	r3, #44	; 0x2c
 8004c50:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	4613      	mov	r3, r2
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	1a9b      	subs	r3, r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	440b      	add	r3, r1
 8004c60:	3338      	adds	r3, #56	; 0x38
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	18d1      	adds	r1, r2, r3
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	1a9b      	subs	r3, r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4403      	add	r3, r0
 8004c76:	3338      	adds	r3, #56	; 0x38
 8004c78:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	0cdb      	lsrs	r3, r3, #19
 8004c8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c8e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	4613      	mov	r3, r2
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	1a9b      	subs	r3, r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	3328      	adds	r3, #40	; 0x28
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d13f      	bne.n	8004d2a <HCD_RXQLVL_IRQHandler+0x1b4>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d03c      	beq.n	8004d2a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004cc6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cce:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cdc:	461a      	mov	r2, r3
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	1a9b      	subs	r3, r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	440b      	add	r3, r1
 8004cf0:	333c      	adds	r3, #60	; 0x3c
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	f083 0301 	eor.w	r3, r3, #1
 8004cf8:	b2d8      	uxtb	r0, r3
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	1a9b      	subs	r3, r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	440b      	add	r3, r1
 8004d08:	333c      	adds	r3, #60	; 0x3c
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	701a      	strb	r2, [r3, #0]
      break;
 8004d0e:	e00c      	b.n	8004d2a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004d10:	6879      	ldr	r1, [r7, #4]
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	4613      	mov	r3, r2
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	1a9b      	subs	r3, r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	334c      	adds	r3, #76	; 0x4c
 8004d20:	2204      	movs	r2, #4
 8004d22:	701a      	strb	r2, [r3, #0]
      break;
 8004d24:	e001      	b.n	8004d2a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004d26:	bf00      	nop
 8004d28:	e000      	b.n	8004d2c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004d2a:	bf00      	nop
  }
}
 8004d2c:	bf00      	nop
 8004d2e:	3728      	adds	r7, #40	; 0x28
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d60:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d10b      	bne.n	8004d84 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d102      	bne.n	8004d7c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f009 f86e 	bl	800de58 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f043 0302 	orr.w	r3, r3, #2
 8004d82:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b08      	cmp	r3, #8
 8004d8c:	d132      	bne.n	8004df4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f043 0308 	orr.w	r3, r3, #8
 8004d94:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d126      	bne.n	8004dee <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	7a5b      	ldrb	r3, [r3, #9]
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d113      	bne.n	8004dd0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004dae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004db2:	d106      	bne.n	8004dc2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2102      	movs	r1, #2
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f004 fef2 	bl	8009ba4 <USB_InitFSLSPClkSel>
 8004dc0:	e011      	b.n	8004de6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f004 feeb 	bl	8009ba4 <USB_InitFSLSPClkSel>
 8004dce:	e00a      	b.n	8004de6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	79db      	ldrb	r3, [r3, #7]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d106      	bne.n	8004de6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dde:	461a      	mov	r2, r3
 8004de0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004de4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f009 f860 	bl	800deac <HAL_HCD_PortEnabled_Callback>
 8004dec:	e002      	b.n	8004df4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f009 f86a 	bl	800dec8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b20      	cmp	r3, #32
 8004dfc:	d103      	bne.n	8004e06 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f043 0320 	orr.w	r3, r3, #32
 8004e04:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	6013      	str	r3, [r2, #0]
}
 8004e12:	bf00      	nop
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e12b      	b.n	8005086 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fc f92e 	bl	80010a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2224      	movs	r2, #36	; 0x24
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0201 	bic.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e80:	f001 f9f2 	bl	8006268 <HAL_RCC_GetPCLK1Freq>
 8004e84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	4a81      	ldr	r2, [pc, #516]	; (8005090 <HAL_I2C_Init+0x274>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d807      	bhi.n	8004ea0 <HAL_I2C_Init+0x84>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4a80      	ldr	r2, [pc, #512]	; (8005094 <HAL_I2C_Init+0x278>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	bf94      	ite	ls
 8004e98:	2301      	movls	r3, #1
 8004e9a:	2300      	movhi	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	e006      	b.n	8004eae <HAL_I2C_Init+0x92>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4a7d      	ldr	r2, [pc, #500]	; (8005098 <HAL_I2C_Init+0x27c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	bf94      	ite	ls
 8004ea8:	2301      	movls	r3, #1
 8004eaa:	2300      	movhi	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e0e7      	b.n	8005086 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4a78      	ldr	r2, [pc, #480]	; (800509c <HAL_I2C_Init+0x280>)
 8004eba:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebe:	0c9b      	lsrs	r3, r3, #18
 8004ec0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	4a6a      	ldr	r2, [pc, #424]	; (8005090 <HAL_I2C_Init+0x274>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d802      	bhi.n	8004ef0 <HAL_I2C_Init+0xd4>
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	3301      	adds	r3, #1
 8004eee:	e009      	b.n	8004f04 <HAL_I2C_Init+0xe8>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ef6:	fb02 f303 	mul.w	r3, r2, r3
 8004efa:	4a69      	ldr	r2, [pc, #420]	; (80050a0 <HAL_I2C_Init+0x284>)
 8004efc:	fba2 2303 	umull	r2, r3, r2, r3
 8004f00:	099b      	lsrs	r3, r3, #6
 8004f02:	3301      	adds	r3, #1
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6812      	ldr	r2, [r2, #0]
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	495c      	ldr	r1, [pc, #368]	; (8005090 <HAL_I2C_Init+0x274>)
 8004f20:	428b      	cmp	r3, r1
 8004f22:	d819      	bhi.n	8004f58 <HAL_I2C_Init+0x13c>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	1e59      	subs	r1, r3, #1
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f32:	1c59      	adds	r1, r3, #1
 8004f34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f38:	400b      	ands	r3, r1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_I2C_Init+0x138>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	1e59      	subs	r1, r3, #1
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f52:	e051      	b.n	8004ff8 <HAL_I2C_Init+0x1dc>
 8004f54:	2304      	movs	r3, #4
 8004f56:	e04f      	b.n	8004ff8 <HAL_I2C_Init+0x1dc>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d111      	bne.n	8004f84 <HAL_I2C_Init+0x168>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	1e58      	subs	r0, r3, #1
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6859      	ldr	r1, [r3, #4]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	440b      	add	r3, r1
 8004f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f72:	3301      	adds	r3, #1
 8004f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	bf0c      	ite	eq
 8004f7c:	2301      	moveq	r3, #1
 8004f7e:	2300      	movne	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	e012      	b.n	8004faa <HAL_I2C_Init+0x18e>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	1e58      	subs	r0, r3, #1
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6859      	ldr	r1, [r3, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	0099      	lsls	r1, r3, #2
 8004f94:	440b      	add	r3, r1
 8004f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	bf0c      	ite	eq
 8004fa4:	2301      	moveq	r3, #1
 8004fa6:	2300      	movne	r3, #0
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <HAL_I2C_Init+0x196>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e022      	b.n	8004ff8 <HAL_I2C_Init+0x1dc>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10e      	bne.n	8004fd8 <HAL_I2C_Init+0x1bc>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	1e58      	subs	r0, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6859      	ldr	r1, [r3, #4]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	440b      	add	r3, r1
 8004fc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fcc:	3301      	adds	r3, #1
 8004fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd6:	e00f      	b.n	8004ff8 <HAL_I2C_Init+0x1dc>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	1e58      	subs	r0, r3, #1
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6859      	ldr	r1, [r3, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	0099      	lsls	r1, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fee:	3301      	adds	r3, #1
 8004ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ff4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ff8:	6879      	ldr	r1, [r7, #4]
 8004ffa:	6809      	ldr	r1, [r1, #0]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	69da      	ldr	r2, [r3, #28]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005026:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6911      	ldr	r1, [r2, #16]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	68d2      	ldr	r2, [r2, #12]
 8005032:	4311      	orrs	r1, r2
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6812      	ldr	r2, [r2, #0]
 8005038:	430b      	orrs	r3, r1
 800503a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	695a      	ldr	r2, [r3, #20]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0201 	orr.w	r2, r2, #1
 8005066:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2220      	movs	r2, #32
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	000186a0 	.word	0x000186a0
 8005094:	001e847f 	.word	0x001e847f
 8005098:	003d08ff 	.word	0x003d08ff
 800509c:	431bde83 	.word	0x431bde83
 80050a0:	10624dd3 	.word	0x10624dd3

080050a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	607a      	str	r2, [r7, #4]
 80050ae:	461a      	mov	r2, r3
 80050b0:	460b      	mov	r3, r1
 80050b2:	817b      	strh	r3, [r7, #10]
 80050b4:	4613      	mov	r3, r2
 80050b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050b8:	f7fc fc38 	bl	800192c <HAL_GetTick>
 80050bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b20      	cmp	r3, #32
 80050c8:	f040 80e0 	bne.w	800528c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	2319      	movs	r3, #25
 80050d2:	2201      	movs	r2, #1
 80050d4:	4970      	ldr	r1, [pc, #448]	; (8005298 <HAL_I2C_Master_Transmit+0x1f4>)
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 fc64 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80050e2:	2302      	movs	r3, #2
 80050e4:	e0d3      	b.n	800528e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_I2C_Master_Transmit+0x50>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e0cc      	b.n	800528e <HAL_I2C_Master_Transmit+0x1ea>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b01      	cmp	r3, #1
 8005108:	d007      	beq.n	800511a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0201 	orr.w	r2, r2, #1
 8005118:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005128:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2221      	movs	r2, #33	; 0x21
 800512e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2210      	movs	r2, #16
 8005136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	893a      	ldrh	r2, [r7, #8]
 800514a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4a50      	ldr	r2, [pc, #320]	; (800529c <HAL_I2C_Master_Transmit+0x1f8>)
 800515a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800515c:	8979      	ldrh	r1, [r7, #10]
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	6a3a      	ldr	r2, [r7, #32]
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 face 	bl	8005704 <I2C_MasterRequestWrite>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e08d      	b.n	800528e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005172:	2300      	movs	r3, #0
 8005174:	613b      	str	r3, [r7, #16]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	613b      	str	r3, [r7, #16]
 8005186:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005188:	e066      	b.n	8005258 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	6a39      	ldr	r1, [r7, #32]
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 fd22 	bl	8005bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00d      	beq.n	80051b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d107      	bne.n	80051b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e06b      	b.n	800528e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	781a      	ldrb	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	3b01      	subs	r3, #1
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d11b      	bne.n	800522c <HAL_I2C_Master_Transmit+0x188>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d017      	beq.n	800522c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	781a      	ldrb	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	1c5a      	adds	r2, r3, #1
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005216:	b29b      	uxth	r3, r3
 8005218:	3b01      	subs	r3, #1
 800521a:	b29a      	uxth	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	6a39      	ldr	r1, [r7, #32]
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 fd19 	bl	8005c68 <I2C_WaitOnBTFFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00d      	beq.n	8005258 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	2b04      	cmp	r3, #4
 8005242:	d107      	bne.n	8005254 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005252:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e01a      	b.n	800528e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525c:	2b00      	cmp	r3, #0
 800525e:	d194      	bne.n	800518a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800526e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2220      	movs	r2, #32
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005288:	2300      	movs	r3, #0
 800528a:	e000      	b.n	800528e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800528c:	2302      	movs	r3, #2
  }
}
 800528e:	4618      	mov	r0, r3
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	00100002 	.word	0x00100002
 800529c:	ffff0000 	.word	0xffff0000

080052a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08c      	sub	sp, #48	; 0x30
 80052a4:	af02      	add	r7, sp, #8
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	607a      	str	r2, [r7, #4]
 80052aa:	461a      	mov	r2, r3
 80052ac:	460b      	mov	r3, r1
 80052ae:	817b      	strh	r3, [r7, #10]
 80052b0:	4613      	mov	r3, r2
 80052b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052b4:	f7fc fb3a 	bl	800192c <HAL_GetTick>
 80052b8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b20      	cmp	r3, #32
 80052c4:	f040 8217 	bne.w	80056f6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	2319      	movs	r3, #25
 80052ce:	2201      	movs	r2, #1
 80052d0:	497c      	ldr	r1, [pc, #496]	; (80054c4 <HAL_I2C_Master_Receive+0x224>)
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 fb66 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80052de:	2302      	movs	r3, #2
 80052e0:	e20a      	b.n	80056f8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d101      	bne.n	80052f0 <HAL_I2C_Master_Receive+0x50>
 80052ec:	2302      	movs	r3, #2
 80052ee:	e203      	b.n	80056f8 <HAL_I2C_Master_Receive+0x458>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b01      	cmp	r3, #1
 8005304:	d007      	beq.n	8005316 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f042 0201 	orr.w	r2, r2, #1
 8005314:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005324:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2222      	movs	r2, #34	; 0x22
 800532a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2210      	movs	r2, #16
 8005332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	893a      	ldrh	r2, [r7, #8]
 8005346:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534c:	b29a      	uxth	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4a5c      	ldr	r2, [pc, #368]	; (80054c8 <HAL_I2C_Master_Receive+0x228>)
 8005356:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005358:	8979      	ldrh	r1, [r7, #10]
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 fa52 	bl	8005808 <I2C_MasterRequestRead>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e1c4      	b.n	80056f8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005372:	2b00      	cmp	r3, #0
 8005374:	d113      	bne.n	800539e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005376:	2300      	movs	r3, #0
 8005378:	623b      	str	r3, [r7, #32]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	623b      	str	r3, [r7, #32]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	623b      	str	r3, [r7, #32]
 800538a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	e198      	b.n	80056d0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d11b      	bne.n	80053de <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053b6:	2300      	movs	r3, #0
 80053b8:	61fb      	str	r3, [r7, #28]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	61fb      	str	r3, [r7, #28]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	61fb      	str	r3, [r7, #28]
 80053ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	e178      	b.n	80056d0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d11b      	bne.n	800541e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005404:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005406:	2300      	movs	r3, #0
 8005408:	61bb      	str	r3, [r7, #24]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	61bb      	str	r3, [r7, #24]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	61bb      	str	r3, [r7, #24]
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	e158      	b.n	80056d0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800542c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800542e:	2300      	movs	r3, #0
 8005430:	617b      	str	r3, [r7, #20]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	617b      	str	r3, [r7, #20]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	617b      	str	r3, [r7, #20]
 8005442:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005444:	e144      	b.n	80056d0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800544a:	2b03      	cmp	r3, #3
 800544c:	f200 80f1 	bhi.w	8005632 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005454:	2b01      	cmp	r3, #1
 8005456:	d123      	bne.n	80054a0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800545a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 fc4b 	bl	8005cf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e145      	b.n	80056f8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691a      	ldr	r2, [r3, #16]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	1c5a      	adds	r2, r3, #1
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005494:	b29b      	uxth	r3, r3
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800549e:	e117      	b.n	80056d0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d14e      	bne.n	8005546 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ae:	2200      	movs	r2, #0
 80054b0:	4906      	ldr	r1, [pc, #24]	; (80054cc <HAL_I2C_Master_Receive+0x22c>)
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f000 fa76 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d008      	beq.n	80054d0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e11a      	b.n	80056f8 <HAL_I2C_Master_Receive+0x458>
 80054c2:	bf00      	nop
 80054c4:	00100002 	.word	0x00100002
 80054c8:	ffff0000 	.word	0xffff0000
 80054cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691a      	ldr	r2, [r3, #16]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054fc:	3b01      	subs	r3, #1
 80054fe:	b29a      	uxth	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005508:	b29b      	uxth	r3, r3
 800550a:	3b01      	subs	r3, #1
 800550c:	b29a      	uxth	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691a      	ldr	r2, [r3, #16]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	b2d2      	uxtb	r2, r2
 800551e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800552e:	3b01      	subs	r3, #1
 8005530:	b29a      	uxth	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b01      	subs	r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005544:	e0c4      	b.n	80056d0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	2200      	movs	r2, #0
 800554e:	496c      	ldr	r1, [pc, #432]	; (8005700 <HAL_I2C_Master_Receive+0x460>)
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 fa27 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e0cb      	b.n	80056f8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800556e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691a      	ldr	r2, [r3, #16]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005598:	b29b      	uxth	r3, r3
 800559a:	3b01      	subs	r3, #1
 800559c:	b29a      	uxth	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	2200      	movs	r2, #0
 80055aa:	4955      	ldr	r1, [pc, #340]	; (8005700 <HAL_I2C_Master_Receive+0x460>)
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 f9f9 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e09d      	b.n	80056f8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691a      	ldr	r2, [r3, #16]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	691a      	ldr	r2, [r3, #16]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	b2d2      	uxtb	r2, r2
 800560a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800561a:	3b01      	subs	r3, #1
 800561c:	b29a      	uxth	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005630:	e04e      	b.n	80056d0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005634:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 fb5e 	bl	8005cf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e058      	b.n	80056f8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	691a      	ldr	r2, [r3, #16]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005662:	3b01      	subs	r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566e:	b29b      	uxth	r3, r3
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	f003 0304 	and.w	r3, r3, #4
 8005682:	2b04      	cmp	r3, #4
 8005684:	d124      	bne.n	80056d0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800568a:	2b03      	cmp	r3, #3
 800568c:	d107      	bne.n	800569e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800569c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	691a      	ldr	r2, [r3, #16]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f47f aeb6 	bne.w	8005446 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2220      	movs	r2, #32
 80056de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	e000      	b.n	80056f8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80056f6:	2302      	movs	r3, #2
  }
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3728      	adds	r7, #40	; 0x28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	00010004 	.word	0x00010004

08005704 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af02      	add	r7, sp, #8
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	607a      	str	r2, [r7, #4]
 800570e:	603b      	str	r3, [r7, #0]
 8005710:	460b      	mov	r3, r1
 8005712:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005718:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2b08      	cmp	r3, #8
 800571e:	d006      	beq.n	800572e <I2C_MasterRequestWrite+0x2a>
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d003      	beq.n	800572e <I2C_MasterRequestWrite+0x2a>
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800572c:	d108      	bne.n	8005740 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	e00b      	b.n	8005758 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005744:	2b12      	cmp	r3, #18
 8005746:	d107      	bne.n	8005758 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005756:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 f91d 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00d      	beq.n	800578c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800577e:	d103      	bne.n	8005788 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005786:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e035      	b.n	80057f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005794:	d108      	bne.n	80057a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005796:	897b      	ldrh	r3, [r7, #10]
 8005798:	b2db      	uxtb	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057a4:	611a      	str	r2, [r3, #16]
 80057a6:	e01b      	b.n	80057e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80057a8:	897b      	ldrh	r3, [r7, #10]
 80057aa:	11db      	asrs	r3, r3, #7
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	f003 0306 	and.w	r3, r3, #6
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	f063 030f 	orn	r3, r3, #15
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	490e      	ldr	r1, [pc, #56]	; (8005800 <I2C_MasterRequestWrite+0xfc>)
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 f966 	bl	8005a98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e010      	b.n	80057f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80057d6:	897b      	ldrh	r3, [r7, #10]
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	4907      	ldr	r1, [pc, #28]	; (8005804 <I2C_MasterRequestWrite+0x100>)
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 f956 	bl	8005a98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e000      	b.n	80057f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3718      	adds	r7, #24
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	00010008 	.word	0x00010008
 8005804:	00010002 	.word	0x00010002

08005808 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af02      	add	r7, sp, #8
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	607a      	str	r2, [r7, #4]
 8005812:	603b      	str	r3, [r7, #0]
 8005814:	460b      	mov	r3, r1
 8005816:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800582c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b08      	cmp	r3, #8
 8005832:	d006      	beq.n	8005842 <I2C_MasterRequestRead+0x3a>
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d003      	beq.n	8005842 <I2C_MasterRequestRead+0x3a>
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005840:	d108      	bne.n	8005854 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	e00b      	b.n	800586c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005858:	2b11      	cmp	r3, #17
 800585a:	d107      	bne.n	800586c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800586a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 f893 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00d      	beq.n	80058a0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005892:	d103      	bne.n	800589c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800589a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e079      	b.n	8005994 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058a8:	d108      	bne.n	80058bc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80058aa:	897b      	ldrh	r3, [r7, #10]
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	f043 0301 	orr.w	r3, r3, #1
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	611a      	str	r2, [r3, #16]
 80058ba:	e05f      	b.n	800597c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058bc:	897b      	ldrh	r3, [r7, #10]
 80058be:	11db      	asrs	r3, r3, #7
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	f003 0306 	and.w	r3, r3, #6
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	f063 030f 	orn	r3, r3, #15
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	4930      	ldr	r1, [pc, #192]	; (800599c <I2C_MasterRequestRead+0x194>)
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 f8dc 	bl	8005a98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e054      	b.n	8005994 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80058ea:	897b      	ldrh	r3, [r7, #10]
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	4929      	ldr	r1, [pc, #164]	; (80059a0 <I2C_MasterRequestRead+0x198>)
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 f8cc 	bl	8005a98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e044      	b.n	8005994 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800590a:	2300      	movs	r3, #0
 800590c:	613b      	str	r3, [r7, #16]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	613b      	str	r3, [r7, #16]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	613b      	str	r3, [r7, #16]
 800591e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800592e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 f831 	bl	80059a4 <I2C_WaitOnFlagUntilTimeout>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00d      	beq.n	8005964 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005956:	d103      	bne.n	8005960 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800595e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e017      	b.n	8005994 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005964:	897b      	ldrh	r3, [r7, #10]
 8005966:	11db      	asrs	r3, r3, #7
 8005968:	b2db      	uxtb	r3, r3
 800596a:	f003 0306 	and.w	r3, r3, #6
 800596e:	b2db      	uxtb	r3, r3
 8005970:	f063 030e 	orn	r3, r3, #14
 8005974:	b2da      	uxtb	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	4907      	ldr	r1, [pc, #28]	; (80059a0 <I2C_MasterRequestRead+0x198>)
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 f888 	bl	8005a98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e000      	b.n	8005994 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	00010008 	.word	0x00010008
 80059a0:	00010002 	.word	0x00010002

080059a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	603b      	str	r3, [r7, #0]
 80059b0:	4613      	mov	r3, r2
 80059b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059b4:	e048      	b.n	8005a48 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059bc:	d044      	beq.n	8005a48 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059be:	f7fb ffb5 	bl	800192c <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d302      	bcc.n	80059d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d139      	bne.n	8005a48 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	0c1b      	lsrs	r3, r3, #16
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d10d      	bne.n	80059fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	43da      	mvns	r2, r3
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	4013      	ands	r3, r2
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	bf0c      	ite	eq
 80059f0:	2301      	moveq	r3, #1
 80059f2:	2300      	movne	r3, #0
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	461a      	mov	r2, r3
 80059f8:	e00c      	b.n	8005a14 <I2C_WaitOnFlagUntilTimeout+0x70>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	43da      	mvns	r2, r3
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	4013      	ands	r3, r2
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	bf0c      	ite	eq
 8005a0c:	2301      	moveq	r3, #1
 8005a0e:	2300      	movne	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	461a      	mov	r2, r3
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d116      	bne.n	8005a48 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2220      	movs	r2, #32
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a34:	f043 0220 	orr.w	r2, r3, #32
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e023      	b.n	8005a90 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	0c1b      	lsrs	r3, r3, #16
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d10d      	bne.n	8005a6e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	43da      	mvns	r2, r3
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	bf0c      	ite	eq
 8005a64:	2301      	moveq	r3, #1
 8005a66:	2300      	movne	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	e00c      	b.n	8005a88 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	43da      	mvns	r2, r3
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	bf0c      	ite	eq
 8005a80:	2301      	moveq	r3, #1
 8005a82:	2300      	movne	r3, #0
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	461a      	mov	r2, r3
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d093      	beq.n	80059b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005aa6:	e071      	b.n	8005b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab6:	d123      	bne.n	8005b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ac6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ad0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aec:	f043 0204 	orr.w	r2, r3, #4
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e067      	b.n	8005bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b06:	d041      	beq.n	8005b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b08:	f7fb ff10 	bl	800192c <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d302      	bcc.n	8005b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d136      	bne.n	8005b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	0c1b      	lsrs	r3, r3, #16
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d10c      	bne.n	8005b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	43da      	mvns	r2, r3
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	4013      	ands	r3, r2
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	bf14      	ite	ne
 8005b3a:	2301      	movne	r3, #1
 8005b3c:	2300      	moveq	r3, #0
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	e00b      	b.n	8005b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	43da      	mvns	r2, r3
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	bf14      	ite	ne
 8005b54:	2301      	movne	r3, #1
 8005b56:	2300      	moveq	r3, #0
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d016      	beq.n	8005b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	f043 0220 	orr.w	r2, r3, #32
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e021      	b.n	8005bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	0c1b      	lsrs	r3, r3, #16
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d10c      	bne.n	8005bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	43da      	mvns	r2, r3
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	bf14      	ite	ne
 8005ba8:	2301      	movne	r3, #1
 8005baa:	2300      	moveq	r3, #0
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	e00b      	b.n	8005bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	43da      	mvns	r2, r3
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	bf14      	ite	ne
 8005bc2:	2301      	movne	r3, #1
 8005bc4:	2300      	moveq	r3, #0
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f47f af6d 	bne.w	8005aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005be4:	e034      	b.n	8005c50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 f8e3 	bl	8005db2 <I2C_IsAcknowledgeFailed>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e034      	b.n	8005c60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfc:	d028      	beq.n	8005c50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bfe:	f7fb fe95 	bl	800192c <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d302      	bcc.n	8005c14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d11d      	bne.n	8005c50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1e:	2b80      	cmp	r3, #128	; 0x80
 8005c20:	d016      	beq.n	8005c50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3c:	f043 0220 	orr.w	r2, r3, #32
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e007      	b.n	8005c60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c5a:	2b80      	cmp	r3, #128	; 0x80
 8005c5c:	d1c3      	bne.n	8005be6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c74:	e034      	b.n	8005ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 f89b 	bl	8005db2 <I2C_IsAcknowledgeFailed>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e034      	b.n	8005cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8c:	d028      	beq.n	8005ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c8e:	f7fb fe4d 	bl	800192c <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d302      	bcc.n	8005ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d11d      	bne.n	8005ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d016      	beq.n	8005ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	f043 0220 	orr.w	r2, r3, #32
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e007      	b.n	8005cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	f003 0304 	and.w	r3, r3, #4
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d1c3      	bne.n	8005c76 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d04:	e049      	b.n	8005d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	f003 0310 	and.w	r3, r3, #16
 8005d10:	2b10      	cmp	r3, #16
 8005d12:	d119      	bne.n	8005d48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f06f 0210 	mvn.w	r2, #16
 8005d1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2220      	movs	r2, #32
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e030      	b.n	8005daa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d48:	f7fb fdf0 	bl	800192c <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d302      	bcc.n	8005d5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d11d      	bne.n	8005d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d68:	2b40      	cmp	r3, #64	; 0x40
 8005d6a:	d016      	beq.n	8005d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	f043 0220 	orr.w	r2, r3, #32
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e007      	b.n	8005daa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da4:	2b40      	cmp	r3, #64	; 0x40
 8005da6:	d1ae      	bne.n	8005d06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dc8:	d11b      	bne.n	8005e02 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005dd2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	f043 0204 	orr.w	r2, r3, #4
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e000      	b.n	8005e04 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af02      	add	r7, sp, #8
 8005e16:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e108      	b.n	8006034 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d106      	bne.n	8005e42 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7fb fc0b 	bl	8001658 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2203      	movs	r2, #3
 8005e46:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e50:	d102      	bne.n	8005e58 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f003 fa8a 	bl	8009376 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6818      	ldr	r0, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	7c1a      	ldrb	r2, [r3, #16]
 8005e6a:	f88d 2000 	strb.w	r2, [sp]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e72:	f003 fa0b 	bl	800928c <USB_CoreInit>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d005      	beq.n	8005e88 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e0d5      	b.n	8006034 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f003 fa82 	bl	8009398 <USB_SetCurrentMode>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d005      	beq.n	8005ea6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e0c6      	b.n	8006034 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	73fb      	strb	r3, [r7, #15]
 8005eaa:	e04a      	b.n	8005f42 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005eac:	7bfa      	ldrb	r2, [r7, #15]
 8005eae:	6879      	ldr	r1, [r7, #4]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	3315      	adds	r3, #21
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005ec0:	7bfa      	ldrb	r2, [r7, #15]
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	4413      	add	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	3314      	adds	r3, #20
 8005ed0:	7bfa      	ldrb	r2, [r7, #15]
 8005ed2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005ed4:	7bfa      	ldrb	r2, [r7, #15]
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
 8005ed8:	b298      	uxth	r0, r3
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	4613      	mov	r3, r2
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	4413      	add	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	440b      	add	r3, r1
 8005ee6:	332e      	adds	r3, #46	; 0x2e
 8005ee8:	4602      	mov	r2, r0
 8005eea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005eec:	7bfa      	ldrb	r2, [r7, #15]
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	440b      	add	r3, r1
 8005efa:	3318      	adds	r3, #24
 8005efc:	2200      	movs	r2, #0
 8005efe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005f00:	7bfa      	ldrb	r2, [r7, #15]
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	4613      	mov	r3, r2
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	440b      	add	r3, r1
 8005f0e:	331c      	adds	r3, #28
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005f14:	7bfa      	ldrb	r2, [r7, #15]
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	4413      	add	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	440b      	add	r3, r1
 8005f22:	3320      	adds	r3, #32
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005f28:	7bfa      	ldrb	r2, [r7, #15]
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	4413      	add	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	440b      	add	r3, r1
 8005f36:	3324      	adds	r3, #36	; 0x24
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	73fb      	strb	r3, [r7, #15]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	791b      	ldrb	r3, [r3, #4]
 8005f46:	7bfa      	ldrb	r2, [r7, #15]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d3af      	bcc.n	8005eac <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	73fb      	strb	r3, [r7, #15]
 8005f50:	e044      	b.n	8005fdc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005f52:	7bfa      	ldrb	r2, [r7, #15]
 8005f54:	6879      	ldr	r1, [r7, #4]
 8005f56:	4613      	mov	r3, r2
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	4413      	add	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	440b      	add	r3, r1
 8005f60:	f203 2355 	addw	r3, r3, #597	; 0x255
 8005f64:	2200      	movs	r2, #0
 8005f66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005f68:	7bfa      	ldrb	r2, [r7, #15]
 8005f6a:	6879      	ldr	r1, [r7, #4]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	440b      	add	r3, r1
 8005f76:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8005f7a:	7bfa      	ldrb	r2, [r7, #15]
 8005f7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005f7e:	7bfa      	ldrb	r2, [r7, #15]
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	4613      	mov	r3, r2
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	4413      	add	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005f90:	2200      	movs	r2, #0
 8005f92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005f94:	7bfa      	ldrb	r2, [r7, #15]
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	4413      	add	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005faa:	7bfa      	ldrb	r2, [r7, #15]
 8005fac:	6879      	ldr	r1, [r7, #4]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	4413      	add	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	440b      	add	r3, r1
 8005fb8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005fc0:	7bfa      	ldrb	r2, [r7, #15]
 8005fc2:	6879      	ldr	r1, [r7, #4]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	4413      	add	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	440b      	add	r3, r1
 8005fce:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	73fb      	strb	r3, [r7, #15]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	791b      	ldrb	r3, [r3, #4]
 8005fe0:	7bfa      	ldrb	r2, [r7, #15]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d3b5      	bcc.n	8005f52 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6818      	ldr	r0, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	7c1a      	ldrb	r2, [r3, #16]
 8005fee:	f88d 2000 	strb.w	r2, [sp]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ff6:	f003 fa1b 	bl	8009430 <USB_DevInit>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d005      	beq.n	800600c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e013      	b.n	8006034 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	7b1b      	ldrb	r3, [r3, #12]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d102      	bne.n	8006028 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f80a 	bl	800603c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4618      	mov	r0, r3
 800602e:	f003 fc6c 	bl	800990a <USB_DevDisconnect>

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800606e:	f043 0303 	orr.w	r3, r3, #3
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e0cc      	b.n	8006232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006098:	4b68      	ldr	r3, [pc, #416]	; (800623c <HAL_RCC_ClockConfig+0x1b8>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 030f 	and.w	r3, r3, #15
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d90c      	bls.n	80060c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060a6:	4b65      	ldr	r3, [pc, #404]	; (800623c <HAL_RCC_ClockConfig+0x1b8>)
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	b2d2      	uxtb	r2, r2
 80060ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ae:	4b63      	ldr	r3, [pc, #396]	; (800623c <HAL_RCC_ClockConfig+0x1b8>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 030f 	and.w	r3, r3, #15
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d001      	beq.n	80060c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e0b8      	b.n	8006232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d020      	beq.n	800610e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0304 	and.w	r3, r3, #4
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d005      	beq.n	80060e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060d8:	4b59      	ldr	r3, [pc, #356]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	4a58      	ldr	r2, [pc, #352]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 80060de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0308 	and.w	r3, r3, #8
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d005      	beq.n	80060fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060f0:	4b53      	ldr	r3, [pc, #332]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	4a52      	ldr	r2, [pc, #328]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 80060f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060fc:	4b50      	ldr	r3, [pc, #320]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	494d      	ldr	r1, [pc, #308]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 800610a:	4313      	orrs	r3, r2
 800610c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d044      	beq.n	80061a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d107      	bne.n	8006132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006122:	4b47      	ldr	r3, [pc, #284]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d119      	bne.n	8006162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e07f      	b.n	8006232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	2b02      	cmp	r3, #2
 8006138:	d003      	beq.n	8006142 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800613e:	2b03      	cmp	r3, #3
 8006140:	d107      	bne.n	8006152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006142:	4b3f      	ldr	r3, [pc, #252]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d109      	bne.n	8006162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e06f      	b.n	8006232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006152:	4b3b      	ldr	r3, [pc, #236]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e067      	b.n	8006232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006162:	4b37      	ldr	r3, [pc, #220]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f023 0203 	bic.w	r2, r3, #3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	4934      	ldr	r1, [pc, #208]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 8006170:	4313      	orrs	r3, r2
 8006172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006174:	f7fb fbda 	bl	800192c <HAL_GetTick>
 8006178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800617a:	e00a      	b.n	8006192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800617c:	f7fb fbd6 	bl	800192c <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	f241 3288 	movw	r2, #5000	; 0x1388
 800618a:	4293      	cmp	r3, r2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e04f      	b.n	8006232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006192:	4b2b      	ldr	r3, [pc, #172]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f003 020c 	and.w	r2, r3, #12
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d1eb      	bne.n	800617c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061a4:	4b25      	ldr	r3, [pc, #148]	; (800623c <HAL_RCC_ClockConfig+0x1b8>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 030f 	and.w	r3, r3, #15
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d20c      	bcs.n	80061cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061b2:	4b22      	ldr	r3, [pc, #136]	; (800623c <HAL_RCC_ClockConfig+0x1b8>)
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ba:	4b20      	ldr	r3, [pc, #128]	; (800623c <HAL_RCC_ClockConfig+0x1b8>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 030f 	and.w	r3, r3, #15
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d001      	beq.n	80061cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e032      	b.n	8006232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d008      	beq.n	80061ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061d8:	4b19      	ldr	r3, [pc, #100]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	4916      	ldr	r1, [pc, #88]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0308 	and.w	r3, r3, #8
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d009      	beq.n	800620a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061f6:	4b12      	ldr	r3, [pc, #72]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	490e      	ldr	r1, [pc, #56]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 8006206:	4313      	orrs	r3, r2
 8006208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800620a:	f000 fb7f 	bl	800690c <HAL_RCC_GetSysClockFreq>
 800620e:	4602      	mov	r2, r0
 8006210:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <HAL_RCC_ClockConfig+0x1bc>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	091b      	lsrs	r3, r3, #4
 8006216:	f003 030f 	and.w	r3, r3, #15
 800621a:	490a      	ldr	r1, [pc, #40]	; (8006244 <HAL_RCC_ClockConfig+0x1c0>)
 800621c:	5ccb      	ldrb	r3, [r1, r3]
 800621e:	fa22 f303 	lsr.w	r3, r2, r3
 8006222:	4a09      	ldr	r2, [pc, #36]	; (8006248 <HAL_RCC_ClockConfig+0x1c4>)
 8006224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006226:	4b09      	ldr	r3, [pc, #36]	; (800624c <HAL_RCC_ClockConfig+0x1c8>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4618      	mov	r0, r3
 800622c:	f7fb fb3a 	bl	80018a4 <HAL_InitTick>

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	40023c00 	.word	0x40023c00
 8006240:	40023800 	.word	0x40023800
 8006244:	0800f240 	.word	0x0800f240
 8006248:	20000000 	.word	0x20000000
 800624c:	20000004 	.word	0x20000004

08006250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006250:	b480      	push	{r7}
 8006252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006254:	4b03      	ldr	r3, [pc, #12]	; (8006264 <HAL_RCC_GetHCLKFreq+0x14>)
 8006256:	681b      	ldr	r3, [r3, #0]
}
 8006258:	4618      	mov	r0, r3
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	20000000 	.word	0x20000000

08006268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800626c:	f7ff fff0 	bl	8006250 <HAL_RCC_GetHCLKFreq>
 8006270:	4602      	mov	r2, r0
 8006272:	4b05      	ldr	r3, [pc, #20]	; (8006288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	0a9b      	lsrs	r3, r3, #10
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	4903      	ldr	r1, [pc, #12]	; (800628c <HAL_RCC_GetPCLK1Freq+0x24>)
 800627e:	5ccb      	ldrb	r3, [r1, r3]
 8006280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006284:	4618      	mov	r0, r3
 8006286:	bd80      	pop	{r7, pc}
 8006288:	40023800 	.word	0x40023800
 800628c:	0800f250 	.word	0x0800f250

08006290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006294:	f7ff ffdc 	bl	8006250 <HAL_RCC_GetHCLKFreq>
 8006298:	4602      	mov	r2, r0
 800629a:	4b05      	ldr	r3, [pc, #20]	; (80062b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	0b5b      	lsrs	r3, r3, #13
 80062a0:	f003 0307 	and.w	r3, r3, #7
 80062a4:	4903      	ldr	r1, [pc, #12]	; (80062b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062a6:	5ccb      	ldrb	r3, [r1, r3]
 80062a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	40023800 	.word	0x40023800
 80062b4:	0800f250 	.word	0x0800f250

080062b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b08c      	sub	sp, #48	; 0x30
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80062c8:	2300      	movs	r3, #0
 80062ca:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d010      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80062f0:	4b6f      	ldr	r3, [pc, #444]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80062f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062f6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fe:	496c      	ldr	r1, [pc, #432]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006300:	4313      	orrs	r3, r2
 8006302:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800630e:	2301      	movs	r3, #1
 8006310:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d010      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800631e:	4b64      	ldr	r3, [pc, #400]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006324:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632c:	4960      	ldr	r1, [pc, #384]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800632e:	4313      	orrs	r3, r2
 8006330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800633c:	2301      	movs	r3, #1
 800633e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d017      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800634c:	4b58      	ldr	r3, [pc, #352]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800634e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006352:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635a:	4955      	ldr	r1, [pc, #340]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800635c:	4313      	orrs	r3, r2
 800635e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800636a:	d101      	bne.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800636c:	2301      	movs	r3, #1
 800636e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8006378:	2301      	movs	r3, #1
 800637a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0308 	and.w	r3, r3, #8
 8006384:	2b00      	cmp	r3, #0
 8006386:	d017      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006388:	4b49      	ldr	r3, [pc, #292]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800638a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800638e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006396:	4946      	ldr	r1, [pc, #280]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006398:	4313      	orrs	r3, r2
 800639a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063a6:	d101      	bne.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80063a8:	2301      	movs	r3, #1
 80063aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80063b4:	2301      	movs	r3, #1
 80063b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0320 	and.w	r3, r3, #32
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 808a 	beq.w	80064da <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80063c6:	2300      	movs	r3, #0
 80063c8:	60bb      	str	r3, [r7, #8]
 80063ca:	4b39      	ldr	r3, [pc, #228]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	4a38      	ldr	r2, [pc, #224]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80063d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063d4:	6413      	str	r3, [r2, #64]	; 0x40
 80063d6:	4b36      	ldr	r3, [pc, #216]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80063d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063de:	60bb      	str	r3, [r7, #8]
 80063e0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80063e2:	4b34      	ldr	r3, [pc, #208]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a33      	ldr	r2, [pc, #204]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80063e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80063ee:	f7fb fa9d 	bl	800192c <HAL_GetTick>
 80063f2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80063f4:	e008      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80063f6:	f7fb fa99 	bl	800192c <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d901      	bls.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e278      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006408:	4b2a      	ldr	r3, [pc, #168]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006410:	2b00      	cmp	r3, #0
 8006412:	d0f0      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006414:	4b26      	ldr	r3, [pc, #152]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800641c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d02f      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006428:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800642c:	6a3a      	ldr	r2, [r7, #32]
 800642e:	429a      	cmp	r2, r3
 8006430:	d028      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006432:	4b1f      	ldr	r3, [pc, #124]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800643a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800643c:	4b1e      	ldr	r3, [pc, #120]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800643e:	2201      	movs	r2, #1
 8006440:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006442:	4b1d      	ldr	r3, [pc, #116]	; (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006448:	4a19      	ldr	r2, [pc, #100]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800644e:	4b18      	ldr	r3, [pc, #96]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b01      	cmp	r3, #1
 8006458:	d114      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800645a:	f7fb fa67 	bl	800192c <HAL_GetTick>
 800645e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006460:	e00a      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006462:	f7fb fa63 	bl	800192c <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006470:	4293      	cmp	r3, r2
 8006472:	d901      	bls.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e240      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006478:	4b0d      	ldr	r3, [pc, #52]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800647a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0ee      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800648c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006490:	d114      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8006492:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80064a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064a6:	4902      	ldr	r1, [pc, #8]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	608b      	str	r3, [r1, #8]
 80064ac:	e00c      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80064ae:	bf00      	nop
 80064b0:	40023800 	.word	0x40023800
 80064b4:	40007000 	.word	0x40007000
 80064b8:	42470e40 	.word	0x42470e40
 80064bc:	4b4a      	ldr	r3, [pc, #296]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	4a49      	ldr	r2, [pc, #292]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80064c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80064c6:	6093      	str	r3, [r2, #8]
 80064c8:	4b47      	ldr	r3, [pc, #284]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80064ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064d4:	4944      	ldr	r1, [pc, #272]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0310 	and.w	r3, r3, #16
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d004      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80064ec:	4b3f      	ldr	r3, [pc, #252]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80064ee:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00a      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80064fc:	4b3a      	ldr	r3, [pc, #232]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80064fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006502:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800650a:	4937      	ldr	r1, [pc, #220]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800650c:	4313      	orrs	r3, r2
 800650e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00a      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800651e:	4b32      	ldr	r3, [pc, #200]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006524:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800652c:	492e      	ldr	r1, [pc, #184]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800652e:	4313      	orrs	r3, r2
 8006530:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800653c:	2b00      	cmp	r3, #0
 800653e:	d011      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006540:	4b29      	ldr	r3, [pc, #164]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006546:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654e:	4926      	ldr	r1, [pc, #152]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006550:	4313      	orrs	r3, r2
 8006552:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800655e:	d101      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006560:	2301      	movs	r3, #1
 8006562:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00a      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006570:	4b1d      	ldr	r3, [pc, #116]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006576:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657e:	491a      	ldr	r1, [pc, #104]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006580:	4313      	orrs	r3, r2
 8006582:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800658e:	2b00      	cmp	r3, #0
 8006590:	d011      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8006592:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006598:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065a0:	4911      	ldr	r1, [pc, #68]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065b0:	d101      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80065b2:	2301      	movs	r3, #1
 80065b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80065b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d005      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065c4:	f040 80ff 	bne.w	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80065c8:	4b09      	ldr	r3, [pc, #36]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065ce:	f7fb f9ad 	bl	800192c <HAL_GetTick>
 80065d2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065d4:	e00e      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80065d6:	f7fb f9a9 	bl	800192c <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d907      	bls.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e188      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x642>
 80065e8:	40023800 	.word	0x40023800
 80065ec:	424711e0 	.word	0x424711e0
 80065f0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065f4:	4b7e      	ldr	r3, [pc, #504]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1ea      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d003      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006610:	2b00      	cmp	r3, #0
 8006612:	d009      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800661c:	2b00      	cmp	r3, #0
 800661e:	d028      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006624:	2b00      	cmp	r3, #0
 8006626:	d124      	bne.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006628:	4b71      	ldr	r3, [pc, #452]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800662a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800662e:	0c1b      	lsrs	r3, r3, #16
 8006630:	f003 0303 	and.w	r3, r3, #3
 8006634:	3301      	adds	r3, #1
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800663a:	4b6d      	ldr	r3, [pc, #436]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800663c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006640:	0e1b      	lsrs	r3, r3, #24
 8006642:	f003 030f 	and.w	r3, r3, #15
 8006646:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	019b      	lsls	r3, r3, #6
 8006652:	431a      	orrs	r2, r3
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	085b      	lsrs	r3, r3, #1
 8006658:	3b01      	subs	r3, #1
 800665a:	041b      	lsls	r3, r3, #16
 800665c:	431a      	orrs	r2, r3
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	061b      	lsls	r3, r3, #24
 8006662:	431a      	orrs	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	071b      	lsls	r3, r3, #28
 800666a:	4961      	ldr	r1, [pc, #388]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800666c:	4313      	orrs	r3, r2
 800666e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0304 	and.w	r3, r3, #4
 800667a:	2b00      	cmp	r3, #0
 800667c:	d004      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006686:	d00a      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006690:	2b00      	cmp	r3, #0
 8006692:	d035      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006698:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800669c:	d130      	bne.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800669e:	4b54      	ldr	r3, [pc, #336]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80066a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066a4:	0c1b      	lsrs	r3, r3, #16
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	3301      	adds	r3, #1
 80066ac:	005b      	lsls	r3, r3, #1
 80066ae:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066b0:	4b4f      	ldr	r3, [pc, #316]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80066b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066b6:	0f1b      	lsrs	r3, r3, #28
 80066b8:	f003 0307 	and.w	r3, r3, #7
 80066bc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	019b      	lsls	r3, r3, #6
 80066c8:	431a      	orrs	r2, r3
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	085b      	lsrs	r3, r3, #1
 80066ce:	3b01      	subs	r3, #1
 80066d0:	041b      	lsls	r3, r3, #16
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	061b      	lsls	r3, r3, #24
 80066da:	431a      	orrs	r2, r3
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	071b      	lsls	r3, r3, #28
 80066e0:	4943      	ldr	r1, [pc, #268]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80066e8:	4b41      	ldr	r3, [pc, #260]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80066ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066ee:	f023 021f 	bic.w	r2, r3, #31
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f6:	3b01      	subs	r3, #1
 80066f8:	493d      	ldr	r1, [pc, #244]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006708:	2b00      	cmp	r3, #0
 800670a:	d029      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006714:	d124      	bne.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006716:	4b36      	ldr	r3, [pc, #216]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800671c:	0c1b      	lsrs	r3, r3, #16
 800671e:	f003 0303 	and.w	r3, r3, #3
 8006722:	3301      	adds	r3, #1
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006728:	4b31      	ldr	r3, [pc, #196]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800672a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800672e:	0f1b      	lsrs	r3, r3, #28
 8006730:	f003 0307 	and.w	r3, r3, #7
 8006734:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	019b      	lsls	r3, r3, #6
 8006740:	431a      	orrs	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	085b      	lsrs	r3, r3, #1
 8006748:	3b01      	subs	r3, #1
 800674a:	041b      	lsls	r3, r3, #16
 800674c:	431a      	orrs	r2, r3
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	061b      	lsls	r3, r3, #24
 8006752:	431a      	orrs	r2, r3
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	071b      	lsls	r3, r3, #28
 8006758:	4925      	ldr	r1, [pc, #148]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800675a:	4313      	orrs	r3, r2
 800675c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006768:	2b00      	cmp	r3, #0
 800676a:	d016      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	019b      	lsls	r3, r3, #6
 8006776:	431a      	orrs	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	085b      	lsrs	r3, r3, #1
 800677e:	3b01      	subs	r3, #1
 8006780:	041b      	lsls	r3, r3, #16
 8006782:	431a      	orrs	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	061b      	lsls	r3, r3, #24
 800678a:	431a      	orrs	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	071b      	lsls	r3, r3, #28
 8006792:	4917      	ldr	r1, [pc, #92]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006794:	4313      	orrs	r3, r2
 8006796:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800679a:	4b16      	ldr	r3, [pc, #88]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800679c:	2201      	movs	r2, #1
 800679e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067a0:	f7fb f8c4 	bl	800192c <HAL_GetTick>
 80067a4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067a6:	e008      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80067a8:	f7fb f8c0 	bl	800192c <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d901      	bls.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e09f      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067ba:	4b0d      	ldr	r3, [pc, #52]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d0f0      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80067c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	f040 8095 	bne.w	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80067ce:	4b0a      	ldr	r3, [pc, #40]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067d4:	f7fb f8aa 	bl	800192c <HAL_GetTick>
 80067d8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80067da:	e00f      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80067dc:	f7fb f8a6 	bl	800192c <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d908      	bls.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e085      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x642>
 80067ee:	bf00      	nop
 80067f0:	40023800 	.word	0x40023800
 80067f4:	42470068 	.word	0x42470068
 80067f8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80067fc:	4b41      	ldr	r3, [pc, #260]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006808:	d0e8      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0304 	and.w	r3, r3, #4
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681a:	2b00      	cmp	r3, #0
 800681c:	d009      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006826:	2b00      	cmp	r3, #0
 8006828:	d02b      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800682e:	2b00      	cmp	r3, #0
 8006830:	d127      	bne.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006832:	4b34      	ldr	r3, [pc, #208]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006838:	0c1b      	lsrs	r3, r3, #16
 800683a:	f003 0303 	and.w	r3, r3, #3
 800683e:	3301      	adds	r3, #1
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	699a      	ldr	r2, [r3, #24]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	019b      	lsls	r3, r3, #6
 800684e:	431a      	orrs	r2, r3
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	085b      	lsrs	r3, r3, #1
 8006854:	3b01      	subs	r3, #1
 8006856:	041b      	lsls	r3, r3, #16
 8006858:	431a      	orrs	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685e:	061b      	lsls	r3, r3, #24
 8006860:	4928      	ldr	r1, [pc, #160]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006862:	4313      	orrs	r3, r2
 8006864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006868:	4b26      	ldr	r3, [pc, #152]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800686a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800686e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006876:	3b01      	subs	r3, #1
 8006878:	021b      	lsls	r3, r3, #8
 800687a:	4922      	ldr	r1, [pc, #136]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800687c:	4313      	orrs	r3, r2
 800687e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800688a:	2b00      	cmp	r3, #0
 800688c:	d01d      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x612>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006892:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006896:	d118      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006898:	4b1a      	ldr	r3, [pc, #104]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800689a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800689e:	0e1b      	lsrs	r3, r3, #24
 80068a0:	f003 030f 	and.w	r3, r3, #15
 80068a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699a      	ldr	r2, [r3, #24]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	019b      	lsls	r3, r3, #6
 80068b0:	431a      	orrs	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	085b      	lsrs	r3, r3, #1
 80068b8:	3b01      	subs	r3, #1
 80068ba:	041b      	lsls	r3, r3, #16
 80068bc:	431a      	orrs	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	061b      	lsls	r3, r3, #24
 80068c2:	4910      	ldr	r1, [pc, #64]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80068ca:	4b0f      	ldr	r3, [pc, #60]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80068cc:	2201      	movs	r2, #1
 80068ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068d0:	f7fb f82c 	bl	800192c <HAL_GetTick>
 80068d4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068d6:	e008      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80068d8:	f7fb f828 	bl	800192c <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d901      	bls.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e007      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068ea:	4b06      	ldr	r3, [pc, #24]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068f6:	d1ef      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3730      	adds	r7, #48	; 0x30
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	40023800 	.word	0x40023800
 8006908:	42470070 	.word	0x42470070

0800690c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800690c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006910:	b0ae      	sub	sp, #184	; 0xb8
 8006912:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006914:	2300      	movs	r3, #0
 8006916:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006920:	2300      	movs	r3, #0
 8006922:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006932:	4bcb      	ldr	r3, [pc, #812]	; (8006c60 <HAL_RCC_GetSysClockFreq+0x354>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 030c 	and.w	r3, r3, #12
 800693a:	2b0c      	cmp	r3, #12
 800693c:	f200 8206 	bhi.w	8006d4c <HAL_RCC_GetSysClockFreq+0x440>
 8006940:	a201      	add	r2, pc, #4	; (adr r2, 8006948 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006946:	bf00      	nop
 8006948:	0800697d 	.word	0x0800697d
 800694c:	08006d4d 	.word	0x08006d4d
 8006950:	08006d4d 	.word	0x08006d4d
 8006954:	08006d4d 	.word	0x08006d4d
 8006958:	08006985 	.word	0x08006985
 800695c:	08006d4d 	.word	0x08006d4d
 8006960:	08006d4d 	.word	0x08006d4d
 8006964:	08006d4d 	.word	0x08006d4d
 8006968:	0800698d 	.word	0x0800698d
 800696c:	08006d4d 	.word	0x08006d4d
 8006970:	08006d4d 	.word	0x08006d4d
 8006974:	08006d4d 	.word	0x08006d4d
 8006978:	08006b7d 	.word	0x08006b7d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800697c:	4bb9      	ldr	r3, [pc, #740]	; (8006c64 <HAL_RCC_GetSysClockFreq+0x358>)
 800697e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006982:	e1e7      	b.n	8006d54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006984:	4bb8      	ldr	r3, [pc, #736]	; (8006c68 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006986:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800698a:	e1e3      	b.n	8006d54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800698c:	4bb4      	ldr	r3, [pc, #720]	; (8006c60 <HAL_RCC_GetSysClockFreq+0x354>)
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006994:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006998:	4bb1      	ldr	r3, [pc, #708]	; (8006c60 <HAL_RCC_GetSysClockFreq+0x354>)
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d071      	beq.n	8006a88 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069a4:	4bae      	ldr	r3, [pc, #696]	; (8006c60 <HAL_RCC_GetSysClockFreq+0x354>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	099b      	lsrs	r3, r3, #6
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069b0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80069b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069c0:	2300      	movs	r3, #0
 80069c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069ca:	4622      	mov	r2, r4
 80069cc:	462b      	mov	r3, r5
 80069ce:	f04f 0000 	mov.w	r0, #0
 80069d2:	f04f 0100 	mov.w	r1, #0
 80069d6:	0159      	lsls	r1, r3, #5
 80069d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069dc:	0150      	lsls	r0, r2, #5
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	4621      	mov	r1, r4
 80069e4:	1a51      	subs	r1, r2, r1
 80069e6:	6439      	str	r1, [r7, #64]	; 0x40
 80069e8:	4629      	mov	r1, r5
 80069ea:	eb63 0301 	sbc.w	r3, r3, r1
 80069ee:	647b      	str	r3, [r7, #68]	; 0x44
 80069f0:	f04f 0200 	mov.w	r2, #0
 80069f4:	f04f 0300 	mov.w	r3, #0
 80069f8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80069fc:	4649      	mov	r1, r9
 80069fe:	018b      	lsls	r3, r1, #6
 8006a00:	4641      	mov	r1, r8
 8006a02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a06:	4641      	mov	r1, r8
 8006a08:	018a      	lsls	r2, r1, #6
 8006a0a:	4641      	mov	r1, r8
 8006a0c:	1a51      	subs	r1, r2, r1
 8006a0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a10:	4649      	mov	r1, r9
 8006a12:	eb63 0301 	sbc.w	r3, r3, r1
 8006a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	f04f 0300 	mov.w	r3, #0
 8006a20:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006a24:	4649      	mov	r1, r9
 8006a26:	00cb      	lsls	r3, r1, #3
 8006a28:	4641      	mov	r1, r8
 8006a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a2e:	4641      	mov	r1, r8
 8006a30:	00ca      	lsls	r2, r1, #3
 8006a32:	4610      	mov	r0, r2
 8006a34:	4619      	mov	r1, r3
 8006a36:	4603      	mov	r3, r0
 8006a38:	4622      	mov	r2, r4
 8006a3a:	189b      	adds	r3, r3, r2
 8006a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8006a3e:	462b      	mov	r3, r5
 8006a40:	460a      	mov	r2, r1
 8006a42:	eb42 0303 	adc.w	r3, r2, r3
 8006a46:	637b      	str	r3, [r7, #52]	; 0x34
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	f04f 0300 	mov.w	r3, #0
 8006a50:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006a54:	4629      	mov	r1, r5
 8006a56:	024b      	lsls	r3, r1, #9
 8006a58:	4621      	mov	r1, r4
 8006a5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a5e:	4621      	mov	r1, r4
 8006a60:	024a      	lsls	r2, r1, #9
 8006a62:	4610      	mov	r0, r2
 8006a64:	4619      	mov	r1, r3
 8006a66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a74:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006a78:	f7f9 fbc4 	bl	8000204 <__aeabi_uldivmod>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	460b      	mov	r3, r1
 8006a80:	4613      	mov	r3, r2
 8006a82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a86:	e067      	b.n	8006b58 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a88:	4b75      	ldr	r3, [pc, #468]	; (8006c60 <HAL_RCC_GetSysClockFreq+0x354>)
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	099b      	lsrs	r3, r3, #6
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a94:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006a98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006aa6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006aaa:	4622      	mov	r2, r4
 8006aac:	462b      	mov	r3, r5
 8006aae:	f04f 0000 	mov.w	r0, #0
 8006ab2:	f04f 0100 	mov.w	r1, #0
 8006ab6:	0159      	lsls	r1, r3, #5
 8006ab8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006abc:	0150      	lsls	r0, r2, #5
 8006abe:	4602      	mov	r2, r0
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	1a51      	subs	r1, r2, r1
 8006ac6:	62b9      	str	r1, [r7, #40]	; 0x28
 8006ac8:	4629      	mov	r1, r5
 8006aca:	eb63 0301 	sbc.w	r3, r3, r1
 8006ace:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ad0:	f04f 0200 	mov.w	r2, #0
 8006ad4:	f04f 0300 	mov.w	r3, #0
 8006ad8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006adc:	4649      	mov	r1, r9
 8006ade:	018b      	lsls	r3, r1, #6
 8006ae0:	4641      	mov	r1, r8
 8006ae2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ae6:	4641      	mov	r1, r8
 8006ae8:	018a      	lsls	r2, r1, #6
 8006aea:	4641      	mov	r1, r8
 8006aec:	ebb2 0a01 	subs.w	sl, r2, r1
 8006af0:	4649      	mov	r1, r9
 8006af2:	eb63 0b01 	sbc.w	fp, r3, r1
 8006af6:	f04f 0200 	mov.w	r2, #0
 8006afa:	f04f 0300 	mov.w	r3, #0
 8006afe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b02:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b0a:	4692      	mov	sl, r2
 8006b0c:	469b      	mov	fp, r3
 8006b0e:	4623      	mov	r3, r4
 8006b10:	eb1a 0303 	adds.w	r3, sl, r3
 8006b14:	623b      	str	r3, [r7, #32]
 8006b16:	462b      	mov	r3, r5
 8006b18:	eb4b 0303 	adc.w	r3, fp, r3
 8006b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b1e:	f04f 0200 	mov.w	r2, #0
 8006b22:	f04f 0300 	mov.w	r3, #0
 8006b26:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	028b      	lsls	r3, r1, #10
 8006b2e:	4621      	mov	r1, r4
 8006b30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b34:	4621      	mov	r1, r4
 8006b36:	028a      	lsls	r2, r1, #10
 8006b38:	4610      	mov	r0, r2
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b40:	2200      	movs	r2, #0
 8006b42:	673b      	str	r3, [r7, #112]	; 0x70
 8006b44:	677a      	str	r2, [r7, #116]	; 0x74
 8006b46:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006b4a:	f7f9 fb5b 	bl	8000204 <__aeabi_uldivmod>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	4613      	mov	r3, r2
 8006b54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b58:	4b41      	ldr	r3, [pc, #260]	; (8006c60 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	0c1b      	lsrs	r3, r3, #16
 8006b5e:	f003 0303 	and.w	r3, r3, #3
 8006b62:	3301      	adds	r3, #1
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006b6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006b7a:	e0eb      	b.n	8006d54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b7c:	4b38      	ldr	r3, [pc, #224]	; (8006c60 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b88:	4b35      	ldr	r3, [pc, #212]	; (8006c60 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d06b      	beq.n	8006c6c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b94:	4b32      	ldr	r3, [pc, #200]	; (8006c60 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	099b      	lsrs	r3, r3, #6
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba6:	663b      	str	r3, [r7, #96]	; 0x60
 8006ba8:	2300      	movs	r3, #0
 8006baa:	667b      	str	r3, [r7, #100]	; 0x64
 8006bac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006bb0:	4622      	mov	r2, r4
 8006bb2:	462b      	mov	r3, r5
 8006bb4:	f04f 0000 	mov.w	r0, #0
 8006bb8:	f04f 0100 	mov.w	r1, #0
 8006bbc:	0159      	lsls	r1, r3, #5
 8006bbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006bc2:	0150      	lsls	r0, r2, #5
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4621      	mov	r1, r4
 8006bca:	1a51      	subs	r1, r2, r1
 8006bcc:	61b9      	str	r1, [r7, #24]
 8006bce:	4629      	mov	r1, r5
 8006bd0:	eb63 0301 	sbc.w	r3, r3, r1
 8006bd4:	61fb      	str	r3, [r7, #28]
 8006bd6:	f04f 0200 	mov.w	r2, #0
 8006bda:	f04f 0300 	mov.w	r3, #0
 8006bde:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006be2:	4659      	mov	r1, fp
 8006be4:	018b      	lsls	r3, r1, #6
 8006be6:	4651      	mov	r1, sl
 8006be8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006bec:	4651      	mov	r1, sl
 8006bee:	018a      	lsls	r2, r1, #6
 8006bf0:	4651      	mov	r1, sl
 8006bf2:	ebb2 0801 	subs.w	r8, r2, r1
 8006bf6:	4659      	mov	r1, fp
 8006bf8:	eb63 0901 	sbc.w	r9, r3, r1
 8006bfc:	f04f 0200 	mov.w	r2, #0
 8006c00:	f04f 0300 	mov.w	r3, #0
 8006c04:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c08:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c0c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c10:	4690      	mov	r8, r2
 8006c12:	4699      	mov	r9, r3
 8006c14:	4623      	mov	r3, r4
 8006c16:	eb18 0303 	adds.w	r3, r8, r3
 8006c1a:	613b      	str	r3, [r7, #16]
 8006c1c:	462b      	mov	r3, r5
 8006c1e:	eb49 0303 	adc.w	r3, r9, r3
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	f04f 0300 	mov.w	r3, #0
 8006c2c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006c30:	4629      	mov	r1, r5
 8006c32:	024b      	lsls	r3, r1, #9
 8006c34:	4621      	mov	r1, r4
 8006c36:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	024a      	lsls	r2, r1, #9
 8006c3e:	4610      	mov	r0, r2
 8006c40:	4619      	mov	r1, r3
 8006c42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c46:	2200      	movs	r2, #0
 8006c48:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c4a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006c4c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006c50:	f7f9 fad8 	bl	8000204 <__aeabi_uldivmod>
 8006c54:	4602      	mov	r2, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	4613      	mov	r3, r2
 8006c5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c5e:	e065      	b.n	8006d2c <HAL_RCC_GetSysClockFreq+0x420>
 8006c60:	40023800 	.word	0x40023800
 8006c64:	00f42400 	.word	0x00f42400
 8006c68:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c6c:	4b3d      	ldr	r3, [pc, #244]	; (8006d64 <HAL_RCC_GetSysClockFreq+0x458>)
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	099b      	lsrs	r3, r3, #6
 8006c72:	2200      	movs	r2, #0
 8006c74:	4618      	mov	r0, r3
 8006c76:	4611      	mov	r1, r2
 8006c78:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c7c:	653b      	str	r3, [r7, #80]	; 0x50
 8006c7e:	2300      	movs	r3, #0
 8006c80:	657b      	str	r3, [r7, #84]	; 0x54
 8006c82:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006c86:	4642      	mov	r2, r8
 8006c88:	464b      	mov	r3, r9
 8006c8a:	f04f 0000 	mov.w	r0, #0
 8006c8e:	f04f 0100 	mov.w	r1, #0
 8006c92:	0159      	lsls	r1, r3, #5
 8006c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c98:	0150      	lsls	r0, r2, #5
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4641      	mov	r1, r8
 8006ca0:	1a51      	subs	r1, r2, r1
 8006ca2:	60b9      	str	r1, [r7, #8]
 8006ca4:	4649      	mov	r1, r9
 8006ca6:	eb63 0301 	sbc.w	r3, r3, r1
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	f04f 0200 	mov.w	r2, #0
 8006cb0:	f04f 0300 	mov.w	r3, #0
 8006cb4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006cb8:	4659      	mov	r1, fp
 8006cba:	018b      	lsls	r3, r1, #6
 8006cbc:	4651      	mov	r1, sl
 8006cbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cc2:	4651      	mov	r1, sl
 8006cc4:	018a      	lsls	r2, r1, #6
 8006cc6:	4651      	mov	r1, sl
 8006cc8:	1a54      	subs	r4, r2, r1
 8006cca:	4659      	mov	r1, fp
 8006ccc:	eb63 0501 	sbc.w	r5, r3, r1
 8006cd0:	f04f 0200 	mov.w	r2, #0
 8006cd4:	f04f 0300 	mov.w	r3, #0
 8006cd8:	00eb      	lsls	r3, r5, #3
 8006cda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cde:	00e2      	lsls	r2, r4, #3
 8006ce0:	4614      	mov	r4, r2
 8006ce2:	461d      	mov	r5, r3
 8006ce4:	4643      	mov	r3, r8
 8006ce6:	18e3      	adds	r3, r4, r3
 8006ce8:	603b      	str	r3, [r7, #0]
 8006cea:	464b      	mov	r3, r9
 8006cec:	eb45 0303 	adc.w	r3, r5, r3
 8006cf0:	607b      	str	r3, [r7, #4]
 8006cf2:	f04f 0200 	mov.w	r2, #0
 8006cf6:	f04f 0300 	mov.w	r3, #0
 8006cfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006cfe:	4629      	mov	r1, r5
 8006d00:	028b      	lsls	r3, r1, #10
 8006d02:	4621      	mov	r1, r4
 8006d04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d08:	4621      	mov	r1, r4
 8006d0a:	028a      	lsls	r2, r1, #10
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	4619      	mov	r1, r3
 8006d10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d14:	2200      	movs	r2, #0
 8006d16:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d18:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006d1a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d1e:	f7f9 fa71 	bl	8000204 <__aeabi_uldivmod>
 8006d22:	4602      	mov	r2, r0
 8006d24:	460b      	mov	r3, r1
 8006d26:	4613      	mov	r3, r2
 8006d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006d2c:	4b0d      	ldr	r3, [pc, #52]	; (8006d64 <HAL_RCC_GetSysClockFreq+0x458>)
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	0f1b      	lsrs	r3, r3, #28
 8006d32:	f003 0307 	and.w	r3, r3, #7
 8006d36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006d3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006d4a:	e003      	b.n	8006d54 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d4c:	4b06      	ldr	r3, [pc, #24]	; (8006d68 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006d52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	37b8      	adds	r7, #184	; 0xb8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d62:	bf00      	nop
 8006d64:	40023800 	.word	0x40023800
 8006d68:	00f42400 	.word	0x00f42400

08006d6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e28d      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 8083 	beq.w	8006e92 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006d8c:	4b94      	ldr	r3, [pc, #592]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f003 030c 	and.w	r3, r3, #12
 8006d94:	2b04      	cmp	r3, #4
 8006d96:	d019      	beq.n	8006dcc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006d98:	4b91      	ldr	r3, [pc, #580]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	d106      	bne.n	8006db2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006da4:	4b8e      	ldr	r3, [pc, #568]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006db0:	d00c      	beq.n	8006dcc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006db2:	4b8b      	ldr	r3, [pc, #556]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006dba:	2b0c      	cmp	r3, #12
 8006dbc:	d112      	bne.n	8006de4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006dbe:	4b88      	ldr	r3, [pc, #544]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dca:	d10b      	bne.n	8006de4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dcc:	4b84      	ldr	r3, [pc, #528]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d05b      	beq.n	8006e90 <HAL_RCC_OscConfig+0x124>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d157      	bne.n	8006e90 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e25a      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dec:	d106      	bne.n	8006dfc <HAL_RCC_OscConfig+0x90>
 8006dee:	4b7c      	ldr	r3, [pc, #496]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a7b      	ldr	r2, [pc, #492]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006df8:	6013      	str	r3, [r2, #0]
 8006dfa:	e01d      	b.n	8006e38 <HAL_RCC_OscConfig+0xcc>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e04:	d10c      	bne.n	8006e20 <HAL_RCC_OscConfig+0xb4>
 8006e06:	4b76      	ldr	r3, [pc, #472]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a75      	ldr	r2, [pc, #468]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	4b73      	ldr	r3, [pc, #460]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a72      	ldr	r2, [pc, #456]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e1c:	6013      	str	r3, [r2, #0]
 8006e1e:	e00b      	b.n	8006e38 <HAL_RCC_OscConfig+0xcc>
 8006e20:	4b6f      	ldr	r3, [pc, #444]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a6e      	ldr	r2, [pc, #440]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e2a:	6013      	str	r3, [r2, #0]
 8006e2c:	4b6c      	ldr	r3, [pc, #432]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a6b      	ldr	r2, [pc, #428]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d013      	beq.n	8006e68 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e40:	f7fa fd74 	bl	800192c <HAL_GetTick>
 8006e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e46:	e008      	b.n	8006e5a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e48:	f7fa fd70 	bl	800192c <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	2b64      	cmp	r3, #100	; 0x64
 8006e54:	d901      	bls.n	8006e5a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e21f      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e5a:	4b61      	ldr	r3, [pc, #388]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d0f0      	beq.n	8006e48 <HAL_RCC_OscConfig+0xdc>
 8006e66:	e014      	b.n	8006e92 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e68:	f7fa fd60 	bl	800192c <HAL_GetTick>
 8006e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e6e:	e008      	b.n	8006e82 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e70:	f7fa fd5c 	bl	800192c <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b64      	cmp	r3, #100	; 0x64
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e20b      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e82:	4b57      	ldr	r3, [pc, #348]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1f0      	bne.n	8006e70 <HAL_RCC_OscConfig+0x104>
 8006e8e:	e000      	b.n	8006e92 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d06f      	beq.n	8006f7e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006e9e:	4b50      	ldr	r3, [pc, #320]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f003 030c 	and.w	r3, r3, #12
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d017      	beq.n	8006eda <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006eaa:	4b4d      	ldr	r3, [pc, #308]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006eb2:	2b08      	cmp	r3, #8
 8006eb4:	d105      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006eb6:	4b4a      	ldr	r3, [pc, #296]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00b      	beq.n	8006eda <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ec2:	4b47      	ldr	r3, [pc, #284]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006eca:	2b0c      	cmp	r3, #12
 8006ecc:	d11c      	bne.n	8006f08 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ece:	4b44      	ldr	r3, [pc, #272]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d116      	bne.n	8006f08 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eda:	4b41      	ldr	r3, [pc, #260]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d005      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x186>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d001      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e1d3      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ef2:	4b3b      	ldr	r3, [pc, #236]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	00db      	lsls	r3, r3, #3
 8006f00:	4937      	ldr	r1, [pc, #220]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f06:	e03a      	b.n	8006f7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d020      	beq.n	8006f52 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f10:	4b34      	ldr	r3, [pc, #208]	; (8006fe4 <HAL_RCC_OscConfig+0x278>)
 8006f12:	2201      	movs	r2, #1
 8006f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f16:	f7fa fd09 	bl	800192c <HAL_GetTick>
 8006f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f1c:	e008      	b.n	8006f30 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f1e:	f7fa fd05 	bl	800192c <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d901      	bls.n	8006f30 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e1b4      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f30:	4b2b      	ldr	r3, [pc, #172]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0f0      	beq.n	8006f1e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f3c:	4b28      	ldr	r3, [pc, #160]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	00db      	lsls	r3, r3, #3
 8006f4a:	4925      	ldr	r1, [pc, #148]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	600b      	str	r3, [r1, #0]
 8006f50:	e015      	b.n	8006f7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f52:	4b24      	ldr	r3, [pc, #144]	; (8006fe4 <HAL_RCC_OscConfig+0x278>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f58:	f7fa fce8 	bl	800192c <HAL_GetTick>
 8006f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f60:	f7fa fce4 	bl	800192c <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e193      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f72:	4b1b      	ldr	r3, [pc, #108]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1f0      	bne.n	8006f60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0308 	and.w	r3, r3, #8
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d036      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d016      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f92:	4b15      	ldr	r3, [pc, #84]	; (8006fe8 <HAL_RCC_OscConfig+0x27c>)
 8006f94:	2201      	movs	r2, #1
 8006f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f98:	f7fa fcc8 	bl	800192c <HAL_GetTick>
 8006f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f9e:	e008      	b.n	8006fb2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fa0:	f7fa fcc4 	bl	800192c <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d901      	bls.n	8006fb2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e173      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fb2:	4b0b      	ldr	r3, [pc, #44]	; (8006fe0 <HAL_RCC_OscConfig+0x274>)
 8006fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d0f0      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x234>
 8006fbe:	e01b      	b.n	8006ff8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fc0:	4b09      	ldr	r3, [pc, #36]	; (8006fe8 <HAL_RCC_OscConfig+0x27c>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fc6:	f7fa fcb1 	bl	800192c <HAL_GetTick>
 8006fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fcc:	e00e      	b.n	8006fec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fce:	f7fa fcad 	bl	800192c <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d907      	bls.n	8006fec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e15c      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
 8006fe0:	40023800 	.word	0x40023800
 8006fe4:	42470000 	.word	0x42470000
 8006fe8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fec:	4b8a      	ldr	r3, [pc, #552]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 8006fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1ea      	bne.n	8006fce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b00      	cmp	r3, #0
 8007002:	f000 8097 	beq.w	8007134 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007006:	2300      	movs	r3, #0
 8007008:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800700a:	4b83      	ldr	r3, [pc, #524]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 800700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10f      	bne.n	8007036 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007016:	2300      	movs	r3, #0
 8007018:	60bb      	str	r3, [r7, #8]
 800701a:	4b7f      	ldr	r3, [pc, #508]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	4a7e      	ldr	r2, [pc, #504]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 8007020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007024:	6413      	str	r3, [r2, #64]	; 0x40
 8007026:	4b7c      	ldr	r3, [pc, #496]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 8007028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800702e:	60bb      	str	r3, [r7, #8]
 8007030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007032:	2301      	movs	r3, #1
 8007034:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007036:	4b79      	ldr	r3, [pc, #484]	; (800721c <HAL_RCC_OscConfig+0x4b0>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800703e:	2b00      	cmp	r3, #0
 8007040:	d118      	bne.n	8007074 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007042:	4b76      	ldr	r3, [pc, #472]	; (800721c <HAL_RCC_OscConfig+0x4b0>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a75      	ldr	r2, [pc, #468]	; (800721c <HAL_RCC_OscConfig+0x4b0>)
 8007048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800704c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800704e:	f7fa fc6d 	bl	800192c <HAL_GetTick>
 8007052:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007054:	e008      	b.n	8007068 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007056:	f7fa fc69 	bl	800192c <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	2b02      	cmp	r3, #2
 8007062:	d901      	bls.n	8007068 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e118      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007068:	4b6c      	ldr	r3, [pc, #432]	; (800721c <HAL_RCC_OscConfig+0x4b0>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007070:	2b00      	cmp	r3, #0
 8007072:	d0f0      	beq.n	8007056 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d106      	bne.n	800708a <HAL_RCC_OscConfig+0x31e>
 800707c:	4b66      	ldr	r3, [pc, #408]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 800707e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007080:	4a65      	ldr	r2, [pc, #404]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 8007082:	f043 0301 	orr.w	r3, r3, #1
 8007086:	6713      	str	r3, [r2, #112]	; 0x70
 8007088:	e01c      	b.n	80070c4 <HAL_RCC_OscConfig+0x358>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	2b05      	cmp	r3, #5
 8007090:	d10c      	bne.n	80070ac <HAL_RCC_OscConfig+0x340>
 8007092:	4b61      	ldr	r3, [pc, #388]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 8007094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007096:	4a60      	ldr	r2, [pc, #384]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 8007098:	f043 0304 	orr.w	r3, r3, #4
 800709c:	6713      	str	r3, [r2, #112]	; 0x70
 800709e:	4b5e      	ldr	r3, [pc, #376]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 80070a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a2:	4a5d      	ldr	r2, [pc, #372]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 80070a4:	f043 0301 	orr.w	r3, r3, #1
 80070a8:	6713      	str	r3, [r2, #112]	; 0x70
 80070aa:	e00b      	b.n	80070c4 <HAL_RCC_OscConfig+0x358>
 80070ac:	4b5a      	ldr	r3, [pc, #360]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 80070ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b0:	4a59      	ldr	r2, [pc, #356]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 80070b2:	f023 0301 	bic.w	r3, r3, #1
 80070b6:	6713      	str	r3, [r2, #112]	; 0x70
 80070b8:	4b57      	ldr	r3, [pc, #348]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 80070ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070bc:	4a56      	ldr	r2, [pc, #344]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 80070be:	f023 0304 	bic.w	r3, r3, #4
 80070c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d015      	beq.n	80070f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070cc:	f7fa fc2e 	bl	800192c <HAL_GetTick>
 80070d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070d2:	e00a      	b.n	80070ea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070d4:	f7fa fc2a 	bl	800192c <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	f241 3288 	movw	r2, #5000	; 0x1388
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d901      	bls.n	80070ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e0d7      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070ea:	4b4b      	ldr	r3, [pc, #300]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 80070ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d0ee      	beq.n	80070d4 <HAL_RCC_OscConfig+0x368>
 80070f6:	e014      	b.n	8007122 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070f8:	f7fa fc18 	bl	800192c <HAL_GetTick>
 80070fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070fe:	e00a      	b.n	8007116 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007100:	f7fa fc14 	bl	800192c <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	f241 3288 	movw	r2, #5000	; 0x1388
 800710e:	4293      	cmp	r3, r2
 8007110:	d901      	bls.n	8007116 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e0c1      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007116:	4b40      	ldr	r3, [pc, #256]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 8007118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1ee      	bne.n	8007100 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007122:	7dfb      	ldrb	r3, [r7, #23]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d105      	bne.n	8007134 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007128:	4b3b      	ldr	r3, [pc, #236]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 800712a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712c:	4a3a      	ldr	r2, [pc, #232]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 800712e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007132:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 80ad 	beq.w	8007298 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800713e:	4b36      	ldr	r3, [pc, #216]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f003 030c 	and.w	r3, r3, #12
 8007146:	2b08      	cmp	r3, #8
 8007148:	d060      	beq.n	800720c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	2b02      	cmp	r3, #2
 8007150:	d145      	bne.n	80071de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007152:	4b33      	ldr	r3, [pc, #204]	; (8007220 <HAL_RCC_OscConfig+0x4b4>)
 8007154:	2200      	movs	r2, #0
 8007156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007158:	f7fa fbe8 	bl	800192c <HAL_GetTick>
 800715c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800715e:	e008      	b.n	8007172 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007160:	f7fa fbe4 	bl	800192c <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	2b02      	cmp	r3, #2
 800716c:	d901      	bls.n	8007172 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e093      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007172:	4b29      	ldr	r3, [pc, #164]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1f0      	bne.n	8007160 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	69da      	ldr	r2, [r3, #28]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	431a      	orrs	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	019b      	lsls	r3, r3, #6
 800718e:	431a      	orrs	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007194:	085b      	lsrs	r3, r3, #1
 8007196:	3b01      	subs	r3, #1
 8007198:	041b      	lsls	r3, r3, #16
 800719a:	431a      	orrs	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a0:	061b      	lsls	r3, r3, #24
 80071a2:	431a      	orrs	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a8:	071b      	lsls	r3, r3, #28
 80071aa:	491b      	ldr	r1, [pc, #108]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071b0:	4b1b      	ldr	r3, [pc, #108]	; (8007220 <HAL_RCC_OscConfig+0x4b4>)
 80071b2:	2201      	movs	r2, #1
 80071b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b6:	f7fa fbb9 	bl	800192c <HAL_GetTick>
 80071ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071bc:	e008      	b.n	80071d0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071be:	f7fa fbb5 	bl	800192c <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d901      	bls.n	80071d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e064      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071d0:	4b11      	ldr	r3, [pc, #68]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0f0      	beq.n	80071be <HAL_RCC_OscConfig+0x452>
 80071dc:	e05c      	b.n	8007298 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071de:	4b10      	ldr	r3, [pc, #64]	; (8007220 <HAL_RCC_OscConfig+0x4b4>)
 80071e0:	2200      	movs	r2, #0
 80071e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071e4:	f7fa fba2 	bl	800192c <HAL_GetTick>
 80071e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ea:	e008      	b.n	80071fe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071ec:	f7fa fb9e 	bl	800192c <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d901      	bls.n	80071fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e04d      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071fe:	4b06      	ldr	r3, [pc, #24]	; (8007218 <HAL_RCC_OscConfig+0x4ac>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1f0      	bne.n	80071ec <HAL_RCC_OscConfig+0x480>
 800720a:	e045      	b.n	8007298 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d107      	bne.n	8007224 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e040      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
 8007218:	40023800 	.word	0x40023800
 800721c:	40007000 	.word	0x40007000
 8007220:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007224:	4b1f      	ldr	r3, [pc, #124]	; (80072a4 <HAL_RCC_OscConfig+0x538>)
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d030      	beq.n	8007294 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800723c:	429a      	cmp	r2, r3
 800723e:	d129      	bne.n	8007294 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800724a:	429a      	cmp	r2, r3
 800724c:	d122      	bne.n	8007294 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007254:	4013      	ands	r3, r2
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800725a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800725c:	4293      	cmp	r3, r2
 800725e:	d119      	bne.n	8007294 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726a:	085b      	lsrs	r3, r3, #1
 800726c:	3b01      	subs	r3, #1
 800726e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007270:	429a      	cmp	r2, r3
 8007272:	d10f      	bne.n	8007294 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007280:	429a      	cmp	r2, r3
 8007282:	d107      	bne.n	8007294 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007290:	429a      	cmp	r2, r3
 8007292:	d001      	beq.n	8007298 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e000      	b.n	800729a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	40023800 	.word	0x40023800

080072a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e07b      	b.n	80073b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d108      	bne.n	80072d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072ca:	d009      	beq.n	80072e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	61da      	str	r2, [r3, #28]
 80072d2:	e005      	b.n	80072e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d106      	bne.n	8007300 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7f9 ff72 	bl	80011e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2202      	movs	r2, #2
 8007304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007316:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007328:	431a      	orrs	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007332:	431a      	orrs	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	431a      	orrs	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	431a      	orrs	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007350:	431a      	orrs	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800735a:	431a      	orrs	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007364:	ea42 0103 	orr.w	r1, r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	0c1b      	lsrs	r3, r3, #16
 800737e:	f003 0104 	and.w	r1, r3, #4
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	f003 0210 	and.w	r2, r3, #16
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	69da      	ldr	r2, [r3, #28]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b082      	sub	sp, #8
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d101      	bne.n	80073cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e041      	b.n	8007450 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d106      	bne.n	80073e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7f9 ff69 	bl	80012b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2202      	movs	r2, #2
 80073ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3304      	adds	r3, #4
 80073f6:	4619      	mov	r1, r3
 80073f8:	4610      	mov	r0, r2
 80073fa:	f000 fe27 	bl	800804c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e041      	b.n	80074ee <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d106      	bne.n	8007484 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f839 	bl	80074f6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2202      	movs	r2, #2
 8007488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	3304      	adds	r3, #4
 8007494:	4619      	mov	r1, r3
 8007496:	4610      	mov	r0, r2
 8007498:	f000 fdd8 	bl	800804c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80074fe:	bf00      	nop
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b082      	sub	sp, #8
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e041      	b.n	80075a0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b00      	cmp	r3, #0
 8007526:	d106      	bne.n	8007536 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 f839 	bl	80075a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2202      	movs	r2, #2
 800753a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	3304      	adds	r3, #4
 8007546:	4619      	mov	r1, r3
 8007548:	4610      	mov	r0, r2
 800754a:	f000 fd7f 	bl	800804c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d109      	bne.n	80075e0 <HAL_TIM_PWM_Start+0x24>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	bf14      	ite	ne
 80075d8:	2301      	movne	r3, #1
 80075da:	2300      	moveq	r3, #0
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	e022      	b.n	8007626 <HAL_TIM_PWM_Start+0x6a>
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2b04      	cmp	r3, #4
 80075e4:	d109      	bne.n	80075fa <HAL_TIM_PWM_Start+0x3e>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	bf14      	ite	ne
 80075f2:	2301      	movne	r3, #1
 80075f4:	2300      	moveq	r3, #0
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	e015      	b.n	8007626 <HAL_TIM_PWM_Start+0x6a>
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	2b08      	cmp	r3, #8
 80075fe:	d109      	bne.n	8007614 <HAL_TIM_PWM_Start+0x58>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007606:	b2db      	uxtb	r3, r3
 8007608:	2b01      	cmp	r3, #1
 800760a:	bf14      	ite	ne
 800760c:	2301      	movne	r3, #1
 800760e:	2300      	moveq	r3, #0
 8007610:	b2db      	uxtb	r3, r3
 8007612:	e008      	b.n	8007626 <HAL_TIM_PWM_Start+0x6a>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b01      	cmp	r3, #1
 800761e:	bf14      	ite	ne
 8007620:	2301      	movne	r3, #1
 8007622:	2300      	moveq	r3, #0
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d001      	beq.n	800762e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e07c      	b.n	8007728 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d104      	bne.n	800763e <HAL_TIM_PWM_Start+0x82>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2202      	movs	r2, #2
 8007638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800763c:	e013      	b.n	8007666 <HAL_TIM_PWM_Start+0xaa>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b04      	cmp	r3, #4
 8007642:	d104      	bne.n	800764e <HAL_TIM_PWM_Start+0x92>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800764c:	e00b      	b.n	8007666 <HAL_TIM_PWM_Start+0xaa>
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	2b08      	cmp	r3, #8
 8007652:	d104      	bne.n	800765e <HAL_TIM_PWM_Start+0xa2>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2202      	movs	r2, #2
 8007658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800765c:	e003      	b.n	8007666 <HAL_TIM_PWM_Start+0xaa>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2202      	movs	r2, #2
 8007662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2201      	movs	r2, #1
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	4618      	mov	r0, r3
 8007670:	f001 f90c 	bl	800888c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a2d      	ldr	r2, [pc, #180]	; (8007730 <HAL_TIM_PWM_Start+0x174>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d004      	beq.n	8007688 <HAL_TIM_PWM_Start+0xcc>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a2c      	ldr	r2, [pc, #176]	; (8007734 <HAL_TIM_PWM_Start+0x178>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d101      	bne.n	800768c <HAL_TIM_PWM_Start+0xd0>
 8007688:	2301      	movs	r3, #1
 800768a:	e000      	b.n	800768e <HAL_TIM_PWM_Start+0xd2>
 800768c:	2300      	movs	r3, #0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d007      	beq.n	80076a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a22      	ldr	r2, [pc, #136]	; (8007730 <HAL_TIM_PWM_Start+0x174>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d022      	beq.n	80076f2 <HAL_TIM_PWM_Start+0x136>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b4:	d01d      	beq.n	80076f2 <HAL_TIM_PWM_Start+0x136>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a1f      	ldr	r2, [pc, #124]	; (8007738 <HAL_TIM_PWM_Start+0x17c>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d018      	beq.n	80076f2 <HAL_TIM_PWM_Start+0x136>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a1d      	ldr	r2, [pc, #116]	; (800773c <HAL_TIM_PWM_Start+0x180>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d013      	beq.n	80076f2 <HAL_TIM_PWM_Start+0x136>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a1c      	ldr	r2, [pc, #112]	; (8007740 <HAL_TIM_PWM_Start+0x184>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d00e      	beq.n	80076f2 <HAL_TIM_PWM_Start+0x136>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a16      	ldr	r2, [pc, #88]	; (8007734 <HAL_TIM_PWM_Start+0x178>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d009      	beq.n	80076f2 <HAL_TIM_PWM_Start+0x136>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a18      	ldr	r2, [pc, #96]	; (8007744 <HAL_TIM_PWM_Start+0x188>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d004      	beq.n	80076f2 <HAL_TIM_PWM_Start+0x136>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a16      	ldr	r2, [pc, #88]	; (8007748 <HAL_TIM_PWM_Start+0x18c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d111      	bne.n	8007716 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f003 0307 	and.w	r3, r3, #7
 80076fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2b06      	cmp	r3, #6
 8007702:	d010      	beq.n	8007726 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f042 0201 	orr.w	r2, r2, #1
 8007712:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007714:	e007      	b.n	8007726 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f042 0201 	orr.w	r2, r2, #1
 8007724:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	40010000 	.word	0x40010000
 8007734:	40010400 	.word	0x40010400
 8007738:	40000400 	.word	0x40000400
 800773c:	40000800 	.word	0x40000800
 8007740:	40000c00 	.word	0x40000c00
 8007744:	40014000 	.word	0x40014000
 8007748:	40001800 	.word	0x40001800

0800774c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2200      	movs	r2, #0
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	4618      	mov	r0, r3
 8007760:	f001 f894 	bl	800888c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a2e      	ldr	r2, [pc, #184]	; (8007824 <HAL_TIM_PWM_Stop+0xd8>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d004      	beq.n	8007778 <HAL_TIM_PWM_Stop+0x2c>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a2d      	ldr	r2, [pc, #180]	; (8007828 <HAL_TIM_PWM_Stop+0xdc>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d101      	bne.n	800777c <HAL_TIM_PWM_Stop+0x30>
 8007778:	2301      	movs	r3, #1
 800777a:	e000      	b.n	800777e <HAL_TIM_PWM_Stop+0x32>
 800777c:	2300      	movs	r3, #0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d017      	beq.n	80077b2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	6a1a      	ldr	r2, [r3, #32]
 8007788:	f241 1311 	movw	r3, #4369	; 0x1111
 800778c:	4013      	ands	r3, r2
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10f      	bne.n	80077b2 <HAL_TIM_PWM_Stop+0x66>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	6a1a      	ldr	r2, [r3, #32]
 8007798:	f240 4344 	movw	r3, #1092	; 0x444
 800779c:	4013      	ands	r3, r2
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d107      	bne.n	80077b2 <HAL_TIM_PWM_Stop+0x66>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6a1a      	ldr	r2, [r3, #32]
 80077b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80077bc:	4013      	ands	r3, r2
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10f      	bne.n	80077e2 <HAL_TIM_PWM_Stop+0x96>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6a1a      	ldr	r2, [r3, #32]
 80077c8:	f240 4344 	movw	r3, #1092	; 0x444
 80077cc:	4013      	ands	r3, r2
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d107      	bne.n	80077e2 <HAL_TIM_PWM_Stop+0x96>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f022 0201 	bic.w	r2, r2, #1
 80077e0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d104      	bne.n	80077f2 <HAL_TIM_PWM_Stop+0xa6>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077f0:	e013      	b.n	800781a <HAL_TIM_PWM_Stop+0xce>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b04      	cmp	r3, #4
 80077f6:	d104      	bne.n	8007802 <HAL_TIM_PWM_Stop+0xb6>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007800:	e00b      	b.n	800781a <HAL_TIM_PWM_Stop+0xce>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b08      	cmp	r3, #8
 8007806:	d104      	bne.n	8007812 <HAL_TIM_PWM_Stop+0xc6>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007810:	e003      	b.n	800781a <HAL_TIM_PWM_Stop+0xce>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	40010000 	.word	0x40010000
 8007828:	40010400 	.word	0x40010400

0800782c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e041      	b.n	80078c2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d106      	bne.n	8007858 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7f9 fd7e 	bl	8001354 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2202      	movs	r2, #2
 800785c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	3304      	adds	r3, #4
 8007868:	4619      	mov	r1, r3
 800786a:	4610      	mov	r0, r2
 800786c:	f000 fbee 	bl	800804c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d104      	bne.n	80078e6 <HAL_TIM_IC_Start+0x1a>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	e013      	b.n	800790e <HAL_TIM_IC_Start+0x42>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b04      	cmp	r3, #4
 80078ea:	d104      	bne.n	80078f6 <HAL_TIM_IC_Start+0x2a>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	e00b      	b.n	800790e <HAL_TIM_IC_Start+0x42>
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b08      	cmp	r3, #8
 80078fa:	d104      	bne.n	8007906 <HAL_TIM_IC_Start+0x3a>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007902:	b2db      	uxtb	r3, r3
 8007904:	e003      	b.n	800790e <HAL_TIM_IC_Start+0x42>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800790c:	b2db      	uxtb	r3, r3
 800790e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d104      	bne.n	8007920 <HAL_TIM_IC_Start+0x54>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800791c:	b2db      	uxtb	r3, r3
 800791e:	e013      	b.n	8007948 <HAL_TIM_IC_Start+0x7c>
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2b04      	cmp	r3, #4
 8007924:	d104      	bne.n	8007930 <HAL_TIM_IC_Start+0x64>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800792c:	b2db      	uxtb	r3, r3
 800792e:	e00b      	b.n	8007948 <HAL_TIM_IC_Start+0x7c>
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	2b08      	cmp	r3, #8
 8007934:	d104      	bne.n	8007940 <HAL_TIM_IC_Start+0x74>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800793c:	b2db      	uxtb	r3, r3
 800793e:	e003      	b.n	8007948 <HAL_TIM_IC_Start+0x7c>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007946:	b2db      	uxtb	r3, r3
 8007948:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800794a:	7bfb      	ldrb	r3, [r7, #15]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d102      	bne.n	8007956 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d001      	beq.n	800795a <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e081      	b.n	8007a5e <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d104      	bne.n	800796a <HAL_TIM_IC_Start+0x9e>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007968:	e013      	b.n	8007992 <HAL_TIM_IC_Start+0xc6>
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b04      	cmp	r3, #4
 800796e:	d104      	bne.n	800797a <HAL_TIM_IC_Start+0xae>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2202      	movs	r2, #2
 8007974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007978:	e00b      	b.n	8007992 <HAL_TIM_IC_Start+0xc6>
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	2b08      	cmp	r3, #8
 800797e:	d104      	bne.n	800798a <HAL_TIM_IC_Start+0xbe>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2202      	movs	r2, #2
 8007984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007988:	e003      	b.n	8007992 <HAL_TIM_IC_Start+0xc6>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2202      	movs	r2, #2
 800798e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d104      	bne.n	80079a2 <HAL_TIM_IC_Start+0xd6>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2202      	movs	r2, #2
 800799c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079a0:	e013      	b.n	80079ca <HAL_TIM_IC_Start+0xfe>
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	2b04      	cmp	r3, #4
 80079a6:	d104      	bne.n	80079b2 <HAL_TIM_IC_Start+0xe6>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2202      	movs	r2, #2
 80079ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079b0:	e00b      	b.n	80079ca <HAL_TIM_IC_Start+0xfe>
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	2b08      	cmp	r3, #8
 80079b6:	d104      	bne.n	80079c2 <HAL_TIM_IC_Start+0xf6>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2202      	movs	r2, #2
 80079bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079c0:	e003      	b.n	80079ca <HAL_TIM_IC_Start+0xfe>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2202      	movs	r2, #2
 80079c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2201      	movs	r2, #1
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f000 ff5a 	bl	800888c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a22      	ldr	r2, [pc, #136]	; (8007a68 <HAL_TIM_IC_Start+0x19c>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d022      	beq.n	8007a28 <HAL_TIM_IC_Start+0x15c>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ea:	d01d      	beq.n	8007a28 <HAL_TIM_IC_Start+0x15c>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a1e      	ldr	r2, [pc, #120]	; (8007a6c <HAL_TIM_IC_Start+0x1a0>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d018      	beq.n	8007a28 <HAL_TIM_IC_Start+0x15c>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a1d      	ldr	r2, [pc, #116]	; (8007a70 <HAL_TIM_IC_Start+0x1a4>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d013      	beq.n	8007a28 <HAL_TIM_IC_Start+0x15c>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a1b      	ldr	r2, [pc, #108]	; (8007a74 <HAL_TIM_IC_Start+0x1a8>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d00e      	beq.n	8007a28 <HAL_TIM_IC_Start+0x15c>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a1a      	ldr	r2, [pc, #104]	; (8007a78 <HAL_TIM_IC_Start+0x1ac>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d009      	beq.n	8007a28 <HAL_TIM_IC_Start+0x15c>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a18      	ldr	r2, [pc, #96]	; (8007a7c <HAL_TIM_IC_Start+0x1b0>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d004      	beq.n	8007a28 <HAL_TIM_IC_Start+0x15c>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a17      	ldr	r2, [pc, #92]	; (8007a80 <HAL_TIM_IC_Start+0x1b4>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d111      	bne.n	8007a4c <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f003 0307 	and.w	r3, r3, #7
 8007a32:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	2b06      	cmp	r3, #6
 8007a38:	d010      	beq.n	8007a5c <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f042 0201 	orr.w	r2, r2, #1
 8007a48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a4a:	e007      	b.n	8007a5c <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f042 0201 	orr.w	r2, r2, #1
 8007a5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	40010000 	.word	0x40010000
 8007a6c:	40000400 	.word	0x40000400
 8007a70:	40000800 	.word	0x40000800
 8007a74:	40000c00 	.word	0x40000c00
 8007a78:	40010400 	.word	0x40010400
 8007a7c:	40014000 	.word	0x40014000
 8007a80:	40001800 	.word	0x40001800

08007a84 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2200      	movs	r2, #0
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 fef8 	bl	800888c <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6a1a      	ldr	r2, [r3, #32]
 8007aa2:	f241 1311 	movw	r3, #4369	; 0x1111
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10f      	bne.n	8007acc <HAL_TIM_IC_Stop+0x48>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6a1a      	ldr	r2, [r3, #32]
 8007ab2:	f240 4344 	movw	r3, #1092	; 0x444
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d107      	bne.n	8007acc <HAL_TIM_IC_Stop+0x48>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f022 0201 	bic.w	r2, r2, #1
 8007aca:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d104      	bne.n	8007adc <HAL_TIM_IC_Stop+0x58>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ada:	e013      	b.n	8007b04 <HAL_TIM_IC_Stop+0x80>
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2b04      	cmp	r3, #4
 8007ae0:	d104      	bne.n	8007aec <HAL_TIM_IC_Stop+0x68>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007aea:	e00b      	b.n	8007b04 <HAL_TIM_IC_Stop+0x80>
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2b08      	cmp	r3, #8
 8007af0:	d104      	bne.n	8007afc <HAL_TIM_IC_Stop+0x78>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007afa:	e003      	b.n	8007b04 <HAL_TIM_IC_Stop+0x80>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d104      	bne.n	8007b14 <HAL_TIM_IC_Stop+0x90>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b12:	e013      	b.n	8007b3c <HAL_TIM_IC_Stop+0xb8>
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	2b04      	cmp	r3, #4
 8007b18:	d104      	bne.n	8007b24 <HAL_TIM_IC_Stop+0xa0>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b22:	e00b      	b.n	8007b3c <HAL_TIM_IC_Stop+0xb8>
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	2b08      	cmp	r3, #8
 8007b28:	d104      	bne.n	8007b34 <HAL_TIM_IC_Stop+0xb0>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b32:	e003      	b.n	8007b3c <HAL_TIM_IC_Stop+0xb8>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
	...

08007b48 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d101      	bne.n	8007b66 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007b62:	2302      	movs	r3, #2
 8007b64:	e048      	b.n	8007bf8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b0c      	cmp	r3, #12
 8007b72:	d839      	bhi.n	8007be8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8007b74:	a201      	add	r2, pc, #4	; (adr r2, 8007b7c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7a:	bf00      	nop
 8007b7c:	08007bb1 	.word	0x08007bb1
 8007b80:	08007be9 	.word	0x08007be9
 8007b84:	08007be9 	.word	0x08007be9
 8007b88:	08007be9 	.word	0x08007be9
 8007b8c:	08007bbf 	.word	0x08007bbf
 8007b90:	08007be9 	.word	0x08007be9
 8007b94:	08007be9 	.word	0x08007be9
 8007b98:	08007be9 	.word	0x08007be9
 8007b9c:	08007bcd 	.word	0x08007bcd
 8007ba0:	08007be9 	.word	0x08007be9
 8007ba4:	08007be9 	.word	0x08007be9
 8007ba8:	08007be9 	.word	0x08007be9
 8007bac:	08007bdb 	.word	0x08007bdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68b9      	ldr	r1, [r7, #8]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 faf4 	bl	80081a4 <TIM_OC1_SetConfig>
      break;
 8007bbc:	e017      	b.n	8007bee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68b9      	ldr	r1, [r7, #8]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 fb5d 	bl	8008284 <TIM_OC2_SetConfig>
      break;
 8007bca:	e010      	b.n	8007bee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68b9      	ldr	r1, [r7, #8]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 fbcc 	bl	8008370 <TIM_OC3_SetConfig>
      break;
 8007bd8:	e009      	b.n	8007bee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68b9      	ldr	r1, [r7, #8]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f000 fc39 	bl	8008458 <TIM_OC4_SetConfig>
      break;
 8007be6:	e002      	b.n	8007bee <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	75fb      	strb	r3, [r7, #23]
      break;
 8007bec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3718      	adds	r7, #24
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d101      	bne.n	8007c1e <HAL_TIM_IC_ConfigChannel+0x1e>
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	e088      	b.n	8007d30 <HAL_TIM_IC_ConfigChannel+0x130>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d11b      	bne.n	8007c64 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007c3c:	f000 fc62 	bl	8008504 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	699a      	ldr	r2, [r3, #24]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f022 020c 	bic.w	r2, r2, #12
 8007c4e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6999      	ldr	r1, [r3, #24]
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	689a      	ldr	r2, [r3, #8]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	619a      	str	r2, [r3, #24]
 8007c62:	e060      	b.n	8007d26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b04      	cmp	r3, #4
 8007c68:	d11c      	bne.n	8007ca4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007c7a:	f000 fce6 	bl	800864a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	699a      	ldr	r2, [r3, #24]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007c8c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6999      	ldr	r1, [r3, #24]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	021a      	lsls	r2, r3, #8
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	619a      	str	r2, [r3, #24]
 8007ca2:	e040      	b.n	8007d26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b08      	cmp	r3, #8
 8007ca8:	d11b      	bne.n	8007ce2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007cba:	f000 fd33 	bl	8008724 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69da      	ldr	r2, [r3, #28]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f022 020c 	bic.w	r2, r2, #12
 8007ccc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	69d9      	ldr	r1, [r3, #28]
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	689a      	ldr	r2, [r3, #8]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	430a      	orrs	r2, r1
 8007cde:	61da      	str	r2, [r3, #28]
 8007ce0:	e021      	b.n	8007d26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b0c      	cmp	r3, #12
 8007ce6:	d11c      	bne.n	8007d22 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007cf8:	f000 fd50 	bl	800879c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	69da      	ldr	r2, [r3, #28]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007d0a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	69d9      	ldr	r1, [r3, #28]
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	021a      	lsls	r2, r3, #8
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	61da      	str	r2, [r3, #28]
 8007d20:	e001      	b.n	8007d26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3718      	adds	r7, #24
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d101      	bne.n	8007d56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d52:	2302      	movs	r3, #2
 8007d54:	e0ae      	b.n	8007eb4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b0c      	cmp	r3, #12
 8007d62:	f200 809f 	bhi.w	8007ea4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007d66:	a201      	add	r2, pc, #4	; (adr r2, 8007d6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6c:	08007da1 	.word	0x08007da1
 8007d70:	08007ea5 	.word	0x08007ea5
 8007d74:	08007ea5 	.word	0x08007ea5
 8007d78:	08007ea5 	.word	0x08007ea5
 8007d7c:	08007de1 	.word	0x08007de1
 8007d80:	08007ea5 	.word	0x08007ea5
 8007d84:	08007ea5 	.word	0x08007ea5
 8007d88:	08007ea5 	.word	0x08007ea5
 8007d8c:	08007e23 	.word	0x08007e23
 8007d90:	08007ea5 	.word	0x08007ea5
 8007d94:	08007ea5 	.word	0x08007ea5
 8007d98:	08007ea5 	.word	0x08007ea5
 8007d9c:	08007e63 	.word	0x08007e63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68b9      	ldr	r1, [r7, #8]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 f9fc 	bl	80081a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	699a      	ldr	r2, [r3, #24]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f042 0208 	orr.w	r2, r2, #8
 8007dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	699a      	ldr	r2, [r3, #24]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f022 0204 	bic.w	r2, r2, #4
 8007dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6999      	ldr	r1, [r3, #24]
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	691a      	ldr	r2, [r3, #16]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	619a      	str	r2, [r3, #24]
      break;
 8007dde:	e064      	b.n	8007eaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68b9      	ldr	r1, [r7, #8]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 fa4c 	bl	8008284 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	699a      	ldr	r2, [r3, #24]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	699a      	ldr	r2, [r3, #24]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6999      	ldr	r1, [r3, #24]
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	021a      	lsls	r2, r3, #8
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	619a      	str	r2, [r3, #24]
      break;
 8007e20:	e043      	b.n	8007eaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68b9      	ldr	r1, [r7, #8]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 faa1 	bl	8008370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	69da      	ldr	r2, [r3, #28]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f042 0208 	orr.w	r2, r2, #8
 8007e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	69da      	ldr	r2, [r3, #28]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f022 0204 	bic.w	r2, r2, #4
 8007e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	69d9      	ldr	r1, [r3, #28]
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	691a      	ldr	r2, [r3, #16]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	61da      	str	r2, [r3, #28]
      break;
 8007e60:	e023      	b.n	8007eaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68b9      	ldr	r1, [r7, #8]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f000 faf5 	bl	8008458 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	69da      	ldr	r2, [r3, #28]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	69da      	ldr	r2, [r3, #28]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	69d9      	ldr	r1, [r3, #28]
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	021a      	lsls	r2, r3, #8
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	61da      	str	r2, [r3, #28]
      break;
 8007ea2:	e002      	b.n	8007eaa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ea8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3718      	adds	r7, #24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d101      	bne.n	8007ed8 <HAL_TIM_ConfigClockSource+0x1c>
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	e0b4      	b.n	8008042 <HAL_TIM_ConfigClockSource+0x186>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007ef6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007efe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f10:	d03e      	beq.n	8007f90 <HAL_TIM_ConfigClockSource+0xd4>
 8007f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f16:	f200 8087 	bhi.w	8008028 <HAL_TIM_ConfigClockSource+0x16c>
 8007f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f1e:	f000 8086 	beq.w	800802e <HAL_TIM_ConfigClockSource+0x172>
 8007f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f26:	d87f      	bhi.n	8008028 <HAL_TIM_ConfigClockSource+0x16c>
 8007f28:	2b70      	cmp	r3, #112	; 0x70
 8007f2a:	d01a      	beq.n	8007f62 <HAL_TIM_ConfigClockSource+0xa6>
 8007f2c:	2b70      	cmp	r3, #112	; 0x70
 8007f2e:	d87b      	bhi.n	8008028 <HAL_TIM_ConfigClockSource+0x16c>
 8007f30:	2b60      	cmp	r3, #96	; 0x60
 8007f32:	d050      	beq.n	8007fd6 <HAL_TIM_ConfigClockSource+0x11a>
 8007f34:	2b60      	cmp	r3, #96	; 0x60
 8007f36:	d877      	bhi.n	8008028 <HAL_TIM_ConfigClockSource+0x16c>
 8007f38:	2b50      	cmp	r3, #80	; 0x50
 8007f3a:	d03c      	beq.n	8007fb6 <HAL_TIM_ConfigClockSource+0xfa>
 8007f3c:	2b50      	cmp	r3, #80	; 0x50
 8007f3e:	d873      	bhi.n	8008028 <HAL_TIM_ConfigClockSource+0x16c>
 8007f40:	2b40      	cmp	r3, #64	; 0x40
 8007f42:	d058      	beq.n	8007ff6 <HAL_TIM_ConfigClockSource+0x13a>
 8007f44:	2b40      	cmp	r3, #64	; 0x40
 8007f46:	d86f      	bhi.n	8008028 <HAL_TIM_ConfigClockSource+0x16c>
 8007f48:	2b30      	cmp	r3, #48	; 0x30
 8007f4a:	d064      	beq.n	8008016 <HAL_TIM_ConfigClockSource+0x15a>
 8007f4c:	2b30      	cmp	r3, #48	; 0x30
 8007f4e:	d86b      	bhi.n	8008028 <HAL_TIM_ConfigClockSource+0x16c>
 8007f50:	2b20      	cmp	r3, #32
 8007f52:	d060      	beq.n	8008016 <HAL_TIM_ConfigClockSource+0x15a>
 8007f54:	2b20      	cmp	r3, #32
 8007f56:	d867      	bhi.n	8008028 <HAL_TIM_ConfigClockSource+0x16c>
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d05c      	beq.n	8008016 <HAL_TIM_ConfigClockSource+0x15a>
 8007f5c:	2b10      	cmp	r3, #16
 8007f5e:	d05a      	beq.n	8008016 <HAL_TIM_ConfigClockSource+0x15a>
 8007f60:	e062      	b.n	8008028 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f72:	f000 fc6b 	bl	800884c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	609a      	str	r2, [r3, #8]
      break;
 8007f8e:	e04f      	b.n	8008030 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fa0:	f000 fc54 	bl	800884c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	689a      	ldr	r2, [r3, #8]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fb2:	609a      	str	r2, [r3, #8]
      break;
 8007fb4:	e03c      	b.n	8008030 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	f000 fb12 	bl	80085ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2150      	movs	r1, #80	; 0x50
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 fc21 	bl	8008816 <TIM_ITRx_SetConfig>
      break;
 8007fd4:	e02c      	b.n	8008030 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	f000 fb6e 	bl	80086c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2160      	movs	r1, #96	; 0x60
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 fc11 	bl	8008816 <TIM_ITRx_SetConfig>
      break;
 8007ff4:	e01c      	b.n	8008030 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008002:	461a      	mov	r2, r3
 8008004:	f000 faf2 	bl	80085ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2140      	movs	r1, #64	; 0x40
 800800e:	4618      	mov	r0, r3
 8008010:	f000 fc01 	bl	8008816 <TIM_ITRx_SetConfig>
      break;
 8008014:	e00c      	b.n	8008030 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4619      	mov	r1, r3
 8008020:	4610      	mov	r0, r2
 8008022:	f000 fbf8 	bl	8008816 <TIM_ITRx_SetConfig>
      break;
 8008026:	e003      	b.n	8008030 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	73fb      	strb	r3, [r7, #15]
      break;
 800802c:	e000      	b.n	8008030 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800802e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008040:	7bfb      	ldrb	r3, [r7, #15]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
	...

0800804c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a46      	ldr	r2, [pc, #280]	; (8008178 <TIM_Base_SetConfig+0x12c>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d013      	beq.n	800808c <TIM_Base_SetConfig+0x40>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800806a:	d00f      	beq.n	800808c <TIM_Base_SetConfig+0x40>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a43      	ldr	r2, [pc, #268]	; (800817c <TIM_Base_SetConfig+0x130>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d00b      	beq.n	800808c <TIM_Base_SetConfig+0x40>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a42      	ldr	r2, [pc, #264]	; (8008180 <TIM_Base_SetConfig+0x134>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d007      	beq.n	800808c <TIM_Base_SetConfig+0x40>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a41      	ldr	r2, [pc, #260]	; (8008184 <TIM_Base_SetConfig+0x138>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d003      	beq.n	800808c <TIM_Base_SetConfig+0x40>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a40      	ldr	r2, [pc, #256]	; (8008188 <TIM_Base_SetConfig+0x13c>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d108      	bne.n	800809e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	4313      	orrs	r3, r2
 800809c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a35      	ldr	r2, [pc, #212]	; (8008178 <TIM_Base_SetConfig+0x12c>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d02b      	beq.n	80080fe <TIM_Base_SetConfig+0xb2>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ac:	d027      	beq.n	80080fe <TIM_Base_SetConfig+0xb2>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a32      	ldr	r2, [pc, #200]	; (800817c <TIM_Base_SetConfig+0x130>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d023      	beq.n	80080fe <TIM_Base_SetConfig+0xb2>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a31      	ldr	r2, [pc, #196]	; (8008180 <TIM_Base_SetConfig+0x134>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d01f      	beq.n	80080fe <TIM_Base_SetConfig+0xb2>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a30      	ldr	r2, [pc, #192]	; (8008184 <TIM_Base_SetConfig+0x138>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d01b      	beq.n	80080fe <TIM_Base_SetConfig+0xb2>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a2f      	ldr	r2, [pc, #188]	; (8008188 <TIM_Base_SetConfig+0x13c>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d017      	beq.n	80080fe <TIM_Base_SetConfig+0xb2>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a2e      	ldr	r2, [pc, #184]	; (800818c <TIM_Base_SetConfig+0x140>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d013      	beq.n	80080fe <TIM_Base_SetConfig+0xb2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a2d      	ldr	r2, [pc, #180]	; (8008190 <TIM_Base_SetConfig+0x144>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d00f      	beq.n	80080fe <TIM_Base_SetConfig+0xb2>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a2c      	ldr	r2, [pc, #176]	; (8008194 <TIM_Base_SetConfig+0x148>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d00b      	beq.n	80080fe <TIM_Base_SetConfig+0xb2>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a2b      	ldr	r2, [pc, #172]	; (8008198 <TIM_Base_SetConfig+0x14c>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d007      	beq.n	80080fe <TIM_Base_SetConfig+0xb2>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a2a      	ldr	r2, [pc, #168]	; (800819c <TIM_Base_SetConfig+0x150>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d003      	beq.n	80080fe <TIM_Base_SetConfig+0xb2>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a29      	ldr	r2, [pc, #164]	; (80081a0 <TIM_Base_SetConfig+0x154>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d108      	bne.n	8008110 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	4313      	orrs	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	695b      	ldr	r3, [r3, #20]
 800811a:	4313      	orrs	r3, r2
 800811c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	689a      	ldr	r2, [r3, #8]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a10      	ldr	r2, [pc, #64]	; (8008178 <TIM_Base_SetConfig+0x12c>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d003      	beq.n	8008144 <TIM_Base_SetConfig+0xf8>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a12      	ldr	r2, [pc, #72]	; (8008188 <TIM_Base_SetConfig+0x13c>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d103      	bne.n	800814c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	691a      	ldr	r2, [r3, #16]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	2b01      	cmp	r3, #1
 800815c:	d105      	bne.n	800816a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	f023 0201 	bic.w	r2, r3, #1
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	611a      	str	r2, [r3, #16]
  }
}
 800816a:	bf00      	nop
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	40010000 	.word	0x40010000
 800817c:	40000400 	.word	0x40000400
 8008180:	40000800 	.word	0x40000800
 8008184:	40000c00 	.word	0x40000c00
 8008188:	40010400 	.word	0x40010400
 800818c:	40014000 	.word	0x40014000
 8008190:	40014400 	.word	0x40014400
 8008194:	40014800 	.word	0x40014800
 8008198:	40001800 	.word	0x40001800
 800819c:	40001c00 	.word	0x40001c00
 80081a0:	40002000 	.word	0x40002000

080081a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b087      	sub	sp, #28
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a1b      	ldr	r3, [r3, #32]
 80081b8:	f023 0201 	bic.w	r2, r3, #1
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f023 0303 	bic.w	r3, r3, #3
 80081da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	f023 0302 	bic.w	r3, r3, #2
 80081ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a20      	ldr	r2, [pc, #128]	; (800827c <TIM_OC1_SetConfig+0xd8>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d003      	beq.n	8008208 <TIM_OC1_SetConfig+0x64>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a1f      	ldr	r2, [pc, #124]	; (8008280 <TIM_OC1_SetConfig+0xdc>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d10c      	bne.n	8008222 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	f023 0308 	bic.w	r3, r3, #8
 800820e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	697a      	ldr	r2, [r7, #20]
 8008216:	4313      	orrs	r3, r2
 8008218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f023 0304 	bic.w	r3, r3, #4
 8008220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a15      	ldr	r2, [pc, #84]	; (800827c <TIM_OC1_SetConfig+0xd8>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d003      	beq.n	8008232 <TIM_OC1_SetConfig+0x8e>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a14      	ldr	r2, [pc, #80]	; (8008280 <TIM_OC1_SetConfig+0xdc>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d111      	bne.n	8008256 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	4313      	orrs	r3, r2
 800824a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	693a      	ldr	r2, [r7, #16]
 8008252:	4313      	orrs	r3, r2
 8008254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	621a      	str	r2, [r3, #32]
}
 8008270:	bf00      	nop
 8008272:	371c      	adds	r7, #28
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	40010000 	.word	0x40010000
 8008280:	40010400 	.word	0x40010400

08008284 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008284:	b480      	push	{r7}
 8008286:	b087      	sub	sp, #28
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a1b      	ldr	r3, [r3, #32]
 8008298:	f023 0210 	bic.w	r2, r3, #16
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	021b      	lsls	r3, r3, #8
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	f023 0320 	bic.w	r3, r3, #32
 80082ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	011b      	lsls	r3, r3, #4
 80082d6:	697a      	ldr	r2, [r7, #20]
 80082d8:	4313      	orrs	r3, r2
 80082da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a22      	ldr	r2, [pc, #136]	; (8008368 <TIM_OC2_SetConfig+0xe4>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d003      	beq.n	80082ec <TIM_OC2_SetConfig+0x68>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a21      	ldr	r2, [pc, #132]	; (800836c <TIM_OC2_SetConfig+0xe8>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d10d      	bne.n	8008308 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	011b      	lsls	r3, r3, #4
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008306:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a17      	ldr	r2, [pc, #92]	; (8008368 <TIM_OC2_SetConfig+0xe4>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d003      	beq.n	8008318 <TIM_OC2_SetConfig+0x94>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a16      	ldr	r2, [pc, #88]	; (800836c <TIM_OC2_SetConfig+0xe8>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d113      	bne.n	8008340 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800831e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008326:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	695b      	ldr	r3, [r3, #20]
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	4313      	orrs	r3, r2
 8008332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	4313      	orrs	r3, r2
 800833e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	621a      	str	r2, [r3, #32]
}
 800835a:	bf00      	nop
 800835c:	371c      	adds	r7, #28
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	40010000 	.word	0x40010000
 800836c:	40010400 	.word	0x40010400

08008370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008370:	b480      	push	{r7}
 8008372:	b087      	sub	sp, #28
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a1b      	ldr	r3, [r3, #32]
 8008384:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800839e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f023 0303 	bic.w	r3, r3, #3
 80083a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	021b      	lsls	r3, r3, #8
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a21      	ldr	r2, [pc, #132]	; (8008450 <TIM_OC3_SetConfig+0xe0>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d003      	beq.n	80083d6 <TIM_OC3_SetConfig+0x66>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a20      	ldr	r2, [pc, #128]	; (8008454 <TIM_OC3_SetConfig+0xe4>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d10d      	bne.n	80083f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	021b      	lsls	r3, r3, #8
 80083e4:	697a      	ldr	r2, [r7, #20]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a16      	ldr	r2, [pc, #88]	; (8008450 <TIM_OC3_SetConfig+0xe0>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d003      	beq.n	8008402 <TIM_OC3_SetConfig+0x92>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a15      	ldr	r2, [pc, #84]	; (8008454 <TIM_OC3_SetConfig+0xe4>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d113      	bne.n	800842a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	011b      	lsls	r3, r3, #4
 8008418:	693a      	ldr	r2, [r7, #16]
 800841a:	4313      	orrs	r3, r2
 800841c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	011b      	lsls	r3, r3, #4
 8008424:	693a      	ldr	r2, [r7, #16]
 8008426:	4313      	orrs	r3, r2
 8008428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	693a      	ldr	r2, [r7, #16]
 800842e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	685a      	ldr	r2, [r3, #4]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	621a      	str	r2, [r3, #32]
}
 8008444:	bf00      	nop
 8008446:	371c      	adds	r7, #28
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr
 8008450:	40010000 	.word	0x40010000
 8008454:	40010400 	.word	0x40010400

08008458 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008458:	b480      	push	{r7}
 800845a:	b087      	sub	sp, #28
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a1b      	ldr	r3, [r3, #32]
 8008466:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a1b      	ldr	r3, [r3, #32]
 800846c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	69db      	ldr	r3, [r3, #28]
 800847e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800848e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	021b      	lsls	r3, r3, #8
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	4313      	orrs	r3, r2
 800849a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	031b      	lsls	r3, r3, #12
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a12      	ldr	r2, [pc, #72]	; (80084fc <TIM_OC4_SetConfig+0xa4>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d003      	beq.n	80084c0 <TIM_OC4_SetConfig+0x68>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a11      	ldr	r2, [pc, #68]	; (8008500 <TIM_OC4_SetConfig+0xa8>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d109      	bne.n	80084d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	695b      	ldr	r3, [r3, #20]
 80084cc:	019b      	lsls	r3, r3, #6
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	685a      	ldr	r2, [r3, #4]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	621a      	str	r2, [r3, #32]
}
 80084ee:	bf00      	nop
 80084f0:	371c      	adds	r7, #28
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	40010000 	.word	0x40010000
 8008500:	40010400 	.word	0x40010400

08008504 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008504:	b480      	push	{r7}
 8008506:	b087      	sub	sp, #28
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
 8008510:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6a1b      	ldr	r3, [r3, #32]
 800851c:	f023 0201 	bic.w	r2, r3, #1
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	4a28      	ldr	r2, [pc, #160]	; (80085d0 <TIM_TI1_SetConfig+0xcc>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d01b      	beq.n	800856a <TIM_TI1_SetConfig+0x66>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008538:	d017      	beq.n	800856a <TIM_TI1_SetConfig+0x66>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	4a25      	ldr	r2, [pc, #148]	; (80085d4 <TIM_TI1_SetConfig+0xd0>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d013      	beq.n	800856a <TIM_TI1_SetConfig+0x66>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	4a24      	ldr	r2, [pc, #144]	; (80085d8 <TIM_TI1_SetConfig+0xd4>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d00f      	beq.n	800856a <TIM_TI1_SetConfig+0x66>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	4a23      	ldr	r2, [pc, #140]	; (80085dc <TIM_TI1_SetConfig+0xd8>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d00b      	beq.n	800856a <TIM_TI1_SetConfig+0x66>
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	4a22      	ldr	r2, [pc, #136]	; (80085e0 <TIM_TI1_SetConfig+0xdc>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d007      	beq.n	800856a <TIM_TI1_SetConfig+0x66>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	4a21      	ldr	r2, [pc, #132]	; (80085e4 <TIM_TI1_SetConfig+0xe0>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d003      	beq.n	800856a <TIM_TI1_SetConfig+0x66>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	4a20      	ldr	r2, [pc, #128]	; (80085e8 <TIM_TI1_SetConfig+0xe4>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d101      	bne.n	800856e <TIM_TI1_SetConfig+0x6a>
 800856a:	2301      	movs	r3, #1
 800856c:	e000      	b.n	8008570 <TIM_TI1_SetConfig+0x6c>
 800856e:	2300      	movs	r3, #0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d008      	beq.n	8008586 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	f023 0303 	bic.w	r3, r3, #3
 800857a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800857c:	697a      	ldr	r2, [r7, #20]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4313      	orrs	r3, r2
 8008582:	617b      	str	r3, [r7, #20]
 8008584:	e003      	b.n	800858e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	f043 0301 	orr.w	r3, r3, #1
 800858c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	011b      	lsls	r3, r3, #4
 800859a:	b2db      	uxtb	r3, r3
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	4313      	orrs	r3, r2
 80085a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	f023 030a 	bic.w	r3, r3, #10
 80085a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	f003 030a 	and.w	r3, r3, #10
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	697a      	ldr	r2, [r7, #20]
 80085ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	693a      	ldr	r2, [r7, #16]
 80085c0:	621a      	str	r2, [r3, #32]
}
 80085c2:	bf00      	nop
 80085c4:	371c      	adds	r7, #28
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	40010000 	.word	0x40010000
 80085d4:	40000400 	.word	0x40000400
 80085d8:	40000800 	.word	0x40000800
 80085dc:	40000c00 	.word	0x40000c00
 80085e0:	40010400 	.word	0x40010400
 80085e4:	40014000 	.word	0x40014000
 80085e8:	40001800 	.word	0x40001800

080085ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b087      	sub	sp, #28
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6a1b      	ldr	r3, [r3, #32]
 80085fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	f023 0201 	bic.w	r2, r3, #1
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	011b      	lsls	r3, r3, #4
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	4313      	orrs	r3, r2
 8008620:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	f023 030a 	bic.w	r3, r3, #10
 8008628:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800862a:	697a      	ldr	r2, [r7, #20]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	4313      	orrs	r3, r2
 8008630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	693a      	ldr	r2, [r7, #16]
 8008636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	621a      	str	r2, [r3, #32]
}
 800863e:	bf00      	nop
 8008640:	371c      	adds	r7, #28
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr

0800864a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800864a:	b480      	push	{r7}
 800864c:	b087      	sub	sp, #28
 800864e:	af00      	add	r7, sp, #0
 8008650:	60f8      	str	r0, [r7, #12]
 8008652:	60b9      	str	r1, [r7, #8]
 8008654:	607a      	str	r2, [r7, #4]
 8008656:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6a1b      	ldr	r3, [r3, #32]
 800865c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	f023 0210 	bic.w	r2, r3, #16
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	699b      	ldr	r3, [r3, #24]
 800866e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	021b      	lsls	r3, r3, #8
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	4313      	orrs	r3, r2
 8008680:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008688:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	031b      	lsls	r3, r3, #12
 800868e:	b29b      	uxth	r3, r3
 8008690:	693a      	ldr	r2, [r7, #16]
 8008692:	4313      	orrs	r3, r2
 8008694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800869c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	011b      	lsls	r3, r3, #4
 80086a2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	697a      	ldr	r2, [r7, #20]
 80086b6:	621a      	str	r2, [r3, #32]
}
 80086b8:	bf00      	nop
 80086ba:	371c      	adds	r7, #28
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6a1b      	ldr	r3, [r3, #32]
 80086d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6a1b      	ldr	r3, [r3, #32]
 80086da:	f023 0210 	bic.w	r2, r3, #16
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	031b      	lsls	r3, r3, #12
 80086f4:	693a      	ldr	r2, [r7, #16]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008700:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	011b      	lsls	r3, r3, #4
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	4313      	orrs	r3, r2
 800870a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	693a      	ldr	r2, [r7, #16]
 8008710:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	697a      	ldr	r2, [r7, #20]
 8008716:	621a      	str	r2, [r3, #32]
}
 8008718:	bf00      	nop
 800871a:	371c      	adds	r7, #28
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008724:	b480      	push	{r7}
 8008726:	b087      	sub	sp, #28
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
 8008730:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6a1b      	ldr	r3, [r3, #32]
 8008736:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6a1b      	ldr	r3, [r3, #32]
 800873c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	69db      	ldr	r3, [r3, #28]
 8008748:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	f023 0303 	bic.w	r3, r3, #3
 8008750:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008752:	693a      	ldr	r2, [r7, #16]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4313      	orrs	r3, r2
 8008758:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008760:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	011b      	lsls	r3, r3, #4
 8008766:	b2db      	uxtb	r3, r3
 8008768:	693a      	ldr	r2, [r7, #16]
 800876a:	4313      	orrs	r3, r2
 800876c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008774:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	021b      	lsls	r3, r3, #8
 800877a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800877e:	697a      	ldr	r2, [r7, #20]
 8008780:	4313      	orrs	r3, r2
 8008782:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	621a      	str	r2, [r3, #32]
}
 8008790:	bf00      	nop
 8008792:	371c      	adds	r7, #28
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800879c:	b480      	push	{r7}
 800879e:	b087      	sub	sp, #28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
 80087a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6a1b      	ldr	r3, [r3, #32]
 80087b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	69db      	ldr	r3, [r3, #28]
 80087c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	021b      	lsls	r3, r3, #8
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087da:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	031b      	lsls	r3, r3, #12
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	693a      	ldr	r2, [r7, #16]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80087ee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	031b      	lsls	r3, r3, #12
 80087f4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80087f8:	697a      	ldr	r2, [r7, #20]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	621a      	str	r2, [r3, #32]
}
 800880a:	bf00      	nop
 800880c:	371c      	adds	r7, #28
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008816:	b480      	push	{r7}
 8008818:	b085      	sub	sp, #20
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800882c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800882e:	683a      	ldr	r2, [r7, #0]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	4313      	orrs	r3, r2
 8008834:	f043 0307 	orr.w	r3, r3, #7
 8008838:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	609a      	str	r2, [r3, #8]
}
 8008840:	bf00      	nop
 8008842:	3714      	adds	r7, #20
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800884c:	b480      	push	{r7}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
 8008858:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008866:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	021a      	lsls	r2, r3, #8
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	431a      	orrs	r2, r3
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	4313      	orrs	r3, r2
 8008874:	697a      	ldr	r2, [r7, #20]
 8008876:	4313      	orrs	r3, r2
 8008878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	697a      	ldr	r2, [r7, #20]
 800887e:	609a      	str	r2, [r3, #8]
}
 8008880:	bf00      	nop
 8008882:	371c      	adds	r7, #28
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800888c:	b480      	push	{r7}
 800888e:	b087      	sub	sp, #28
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	f003 031f 	and.w	r3, r3, #31
 800889e:	2201      	movs	r2, #1
 80088a0:	fa02 f303 	lsl.w	r3, r2, r3
 80088a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6a1a      	ldr	r2, [r3, #32]
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	43db      	mvns	r3, r3
 80088ae:	401a      	ands	r2, r3
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6a1a      	ldr	r2, [r3, #32]
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	f003 031f 	and.w	r3, r3, #31
 80088be:	6879      	ldr	r1, [r7, #4]
 80088c0:	fa01 f303 	lsl.w	r3, r1, r3
 80088c4:	431a      	orrs	r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	621a      	str	r2, [r3, #32]
}
 80088ca:	bf00      	nop
 80088cc:	371c      	adds	r7, #28
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
	...

080088d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d101      	bne.n	80088f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088ec:	2302      	movs	r3, #2
 80088ee:	e05a      	b.n	80089a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2202      	movs	r2, #2
 80088fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	4313      	orrs	r3, r2
 8008920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a21      	ldr	r2, [pc, #132]	; (80089b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d022      	beq.n	800897a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800893c:	d01d      	beq.n	800897a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a1d      	ldr	r2, [pc, #116]	; (80089b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d018      	beq.n	800897a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a1b      	ldr	r2, [pc, #108]	; (80089bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d013      	beq.n	800897a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a1a      	ldr	r2, [pc, #104]	; (80089c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d00e      	beq.n	800897a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a18      	ldr	r2, [pc, #96]	; (80089c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d009      	beq.n	800897a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a17      	ldr	r2, [pc, #92]	; (80089c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d004      	beq.n	800897a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a15      	ldr	r2, [pc, #84]	; (80089cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d10c      	bne.n	8008994 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008980:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	68ba      	ldr	r2, [r7, #8]
 8008988:	4313      	orrs	r3, r2
 800898a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3714      	adds	r7, #20
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	40010000 	.word	0x40010000
 80089b8:	40000400 	.word	0x40000400
 80089bc:	40000800 	.word	0x40000800
 80089c0:	40000c00 	.word	0x40000c00
 80089c4:	40010400 	.word	0x40010400
 80089c8:	40014000 	.word	0x40014000
 80089cc:	40001800 	.word	0x40001800

080089d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80089da:	2300      	movs	r3, #0
 80089dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d101      	bne.n	80089ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80089e8:	2302      	movs	r3, #2
 80089ea:	e03d      	b.n	8008a68 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	695b      	ldr	r3, [r3, #20]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	69db      	ldr	r3, [r3, #28]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3714      	adds	r7, #20
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d101      	bne.n	8008a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e042      	b.n	8008b0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d106      	bne.n	8008aa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f7f8 fd2a 	bl	80014f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2224      	movs	r2, #36	; 0x24
 8008aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68da      	ldr	r2, [r3, #12]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ab6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f973 	bl	8008da4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	691a      	ldr	r2, [r3, #16]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008acc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	695a      	ldr	r2, [r3, #20]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008adc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68da      	ldr	r2, [r3, #12]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008aec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2220      	movs	r2, #32
 8008af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2220      	movs	r2, #32
 8008b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b08a      	sub	sp, #40	; 0x28
 8008b18:	af02      	add	r7, sp, #8
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	603b      	str	r3, [r7, #0]
 8008b20:	4613      	mov	r3, r2
 8008b22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008b24:	2300      	movs	r3, #0
 8008b26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	2b20      	cmp	r3, #32
 8008b32:	d175      	bne.n	8008c20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d002      	beq.n	8008b40 <HAL_UART_Transmit+0x2c>
 8008b3a:	88fb      	ldrh	r3, [r7, #6]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d101      	bne.n	8008b44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	e06e      	b.n	8008c22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2221      	movs	r2, #33	; 0x21
 8008b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b52:	f7f8 feeb 	bl	800192c <HAL_GetTick>
 8008b56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	88fa      	ldrh	r2, [r7, #6]
 8008b5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	88fa      	ldrh	r2, [r7, #6]
 8008b62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b6c:	d108      	bne.n	8008b80 <HAL_UART_Transmit+0x6c>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d104      	bne.n	8008b80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008b76:	2300      	movs	r3, #0
 8008b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	61bb      	str	r3, [r7, #24]
 8008b7e:	e003      	b.n	8008b88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b84:	2300      	movs	r3, #0
 8008b86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008b88:	e02e      	b.n	8008be8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	2200      	movs	r2, #0
 8008b92:	2180      	movs	r1, #128	; 0x80
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f000 f848 	bl	8008c2a <UART_WaitOnFlagUntilTimeout>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d005      	beq.n	8008bac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	e03a      	b.n	8008c22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d10b      	bne.n	8008bca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	881b      	ldrh	r3, [r3, #0]
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	3302      	adds	r3, #2
 8008bc6:	61bb      	str	r3, [r7, #24]
 8008bc8:	e007      	b.n	8008bda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	781a      	ldrb	r2, [r3, #0]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	3b01      	subs	r3, #1
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1cb      	bne.n	8008b8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	2140      	movs	r1, #64	; 0x40
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 f814 	bl	8008c2a <UART_WaitOnFlagUntilTimeout>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d005      	beq.n	8008c14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2220      	movs	r2, #32
 8008c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e006      	b.n	8008c22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2220      	movs	r2, #32
 8008c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	e000      	b.n	8008c22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008c20:	2302      	movs	r3, #2
  }
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3720      	adds	r7, #32
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b086      	sub	sp, #24
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	60f8      	str	r0, [r7, #12]
 8008c32:	60b9      	str	r1, [r7, #8]
 8008c34:	603b      	str	r3, [r7, #0]
 8008c36:	4613      	mov	r3, r2
 8008c38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c3a:	e03b      	b.n	8008cb4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c3c:	6a3b      	ldr	r3, [r7, #32]
 8008c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c42:	d037      	beq.n	8008cb4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c44:	f7f8 fe72 	bl	800192c <HAL_GetTick>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	6a3a      	ldr	r2, [r7, #32]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d302      	bcc.n	8008c5a <UART_WaitOnFlagUntilTimeout+0x30>
 8008c54:	6a3b      	ldr	r3, [r7, #32]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d101      	bne.n	8008c5e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	e03a      	b.n	8008cd4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	f003 0304 	and.w	r3, r3, #4
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d023      	beq.n	8008cb4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	2b80      	cmp	r3, #128	; 0x80
 8008c70:	d020      	beq.n	8008cb4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	2b40      	cmp	r3, #64	; 0x40
 8008c76:	d01d      	beq.n	8008cb4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0308 	and.w	r3, r3, #8
 8008c82:	2b08      	cmp	r3, #8
 8008c84:	d116      	bne.n	8008cb4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008c86:	2300      	movs	r3, #0
 8008c88:	617b      	str	r3, [r7, #20]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	617b      	str	r3, [r7, #20]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	617b      	str	r3, [r7, #20]
 8008c9a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f000 f81d 	bl	8008cdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2208      	movs	r2, #8
 8008ca6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e00f      	b.n	8008cd4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	bf0c      	ite	eq
 8008cc4:	2301      	moveq	r3, #1
 8008cc6:	2300      	movne	r3, #0
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	461a      	mov	r2, r3
 8008ccc:	79fb      	ldrb	r3, [r7, #7]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d0b4      	beq.n	8008c3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3718      	adds	r7, #24
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b095      	sub	sp, #84	; 0x54
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	330c      	adds	r3, #12
 8008cea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cee:	e853 3f00 	ldrex	r3, [r3]
 8008cf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	330c      	adds	r3, #12
 8008d02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d04:	643a      	str	r2, [r7, #64]	; 0x40
 8008d06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d0c:	e841 2300 	strex	r3, r2, [r1]
 8008d10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d1e5      	bne.n	8008ce4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3314      	adds	r3, #20
 8008d1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d20:	6a3b      	ldr	r3, [r7, #32]
 8008d22:	e853 3f00 	ldrex	r3, [r3]
 8008d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	f023 0301 	bic.w	r3, r3, #1
 8008d2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3314      	adds	r3, #20
 8008d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d40:	e841 2300 	strex	r3, r2, [r1]
 8008d44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1e5      	bne.n	8008d18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d119      	bne.n	8008d88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	330c      	adds	r3, #12
 8008d5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	e853 3f00 	ldrex	r3, [r3]
 8008d62:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	f023 0310 	bic.w	r3, r3, #16
 8008d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	330c      	adds	r3, #12
 8008d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d74:	61ba      	str	r2, [r7, #24]
 8008d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d78:	6979      	ldr	r1, [r7, #20]
 8008d7a:	69ba      	ldr	r2, [r7, #24]
 8008d7c:	e841 2300 	strex	r3, r2, [r1]
 8008d80:	613b      	str	r3, [r7, #16]
   return(result);
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1e5      	bne.n	8008d54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2220      	movs	r2, #32
 8008d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008d96:	bf00      	nop
 8008d98:	3754      	adds	r7, #84	; 0x54
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
	...

08008da4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008da8:	b0c0      	sub	sp, #256	; 0x100
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dc0:	68d9      	ldr	r1, [r3, #12]
 8008dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	ea40 0301 	orr.w	r3, r0, r1
 8008dcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dd2:	689a      	ldr	r2, [r3, #8]
 8008dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dd8:	691b      	ldr	r3, [r3, #16]
 8008dda:	431a      	orrs	r2, r3
 8008ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008de0:	695b      	ldr	r3, [r3, #20]
 8008de2:	431a      	orrs	r2, r3
 8008de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008dfc:	f021 010c 	bic.w	r1, r1, #12
 8008e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e0a:	430b      	orrs	r3, r1
 8008e0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	695b      	ldr	r3, [r3, #20]
 8008e16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e1e:	6999      	ldr	r1, [r3, #24]
 8008e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	ea40 0301 	orr.w	r3, r0, r1
 8008e2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	4b8f      	ldr	r3, [pc, #572]	; (8009070 <UART_SetConfig+0x2cc>)
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d005      	beq.n	8008e44 <UART_SetConfig+0xa0>
 8008e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	4b8d      	ldr	r3, [pc, #564]	; (8009074 <UART_SetConfig+0x2d0>)
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d104      	bne.n	8008e4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e44:	f7fd fa24 	bl	8006290 <HAL_RCC_GetPCLK2Freq>
 8008e48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008e4c:	e003      	b.n	8008e56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e4e:	f7fd fa0b 	bl	8006268 <HAL_RCC_GetPCLK1Freq>
 8008e52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e5a:	69db      	ldr	r3, [r3, #28]
 8008e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e60:	f040 810c 	bne.w	800907c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008e6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008e72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008e76:	4622      	mov	r2, r4
 8008e78:	462b      	mov	r3, r5
 8008e7a:	1891      	adds	r1, r2, r2
 8008e7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8008e7e:	415b      	adcs	r3, r3
 8008e80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008e86:	4621      	mov	r1, r4
 8008e88:	eb12 0801 	adds.w	r8, r2, r1
 8008e8c:	4629      	mov	r1, r5
 8008e8e:	eb43 0901 	adc.w	r9, r3, r1
 8008e92:	f04f 0200 	mov.w	r2, #0
 8008e96:	f04f 0300 	mov.w	r3, #0
 8008e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ea6:	4690      	mov	r8, r2
 8008ea8:	4699      	mov	r9, r3
 8008eaa:	4623      	mov	r3, r4
 8008eac:	eb18 0303 	adds.w	r3, r8, r3
 8008eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008eb4:	462b      	mov	r3, r5
 8008eb6:	eb49 0303 	adc.w	r3, r9, r3
 8008eba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008eca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008ece:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	18db      	adds	r3, r3, r3
 8008ed6:	653b      	str	r3, [r7, #80]	; 0x50
 8008ed8:	4613      	mov	r3, r2
 8008eda:	eb42 0303 	adc.w	r3, r2, r3
 8008ede:	657b      	str	r3, [r7, #84]	; 0x54
 8008ee0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008ee4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008ee8:	f7f7 f98c 	bl	8000204 <__aeabi_uldivmod>
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4b61      	ldr	r3, [pc, #388]	; (8009078 <UART_SetConfig+0x2d4>)
 8008ef2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ef6:	095b      	lsrs	r3, r3, #5
 8008ef8:	011c      	lsls	r4, r3, #4
 8008efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008efe:	2200      	movs	r2, #0
 8008f00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008f08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008f0c:	4642      	mov	r2, r8
 8008f0e:	464b      	mov	r3, r9
 8008f10:	1891      	adds	r1, r2, r2
 8008f12:	64b9      	str	r1, [r7, #72]	; 0x48
 8008f14:	415b      	adcs	r3, r3
 8008f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008f1c:	4641      	mov	r1, r8
 8008f1e:	eb12 0a01 	adds.w	sl, r2, r1
 8008f22:	4649      	mov	r1, r9
 8008f24:	eb43 0b01 	adc.w	fp, r3, r1
 8008f28:	f04f 0200 	mov.w	r2, #0
 8008f2c:	f04f 0300 	mov.w	r3, #0
 8008f30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f3c:	4692      	mov	sl, r2
 8008f3e:	469b      	mov	fp, r3
 8008f40:	4643      	mov	r3, r8
 8008f42:	eb1a 0303 	adds.w	r3, sl, r3
 8008f46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f4a:	464b      	mov	r3, r9
 8008f4c:	eb4b 0303 	adc.w	r3, fp, r3
 8008f50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008f64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	18db      	adds	r3, r3, r3
 8008f6c:	643b      	str	r3, [r7, #64]	; 0x40
 8008f6e:	4613      	mov	r3, r2
 8008f70:	eb42 0303 	adc.w	r3, r2, r3
 8008f74:	647b      	str	r3, [r7, #68]	; 0x44
 8008f76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008f7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008f7e:	f7f7 f941 	bl	8000204 <__aeabi_uldivmod>
 8008f82:	4602      	mov	r2, r0
 8008f84:	460b      	mov	r3, r1
 8008f86:	4611      	mov	r1, r2
 8008f88:	4b3b      	ldr	r3, [pc, #236]	; (8009078 <UART_SetConfig+0x2d4>)
 8008f8a:	fba3 2301 	umull	r2, r3, r3, r1
 8008f8e:	095b      	lsrs	r3, r3, #5
 8008f90:	2264      	movs	r2, #100	; 0x64
 8008f92:	fb02 f303 	mul.w	r3, r2, r3
 8008f96:	1acb      	subs	r3, r1, r3
 8008f98:	00db      	lsls	r3, r3, #3
 8008f9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008f9e:	4b36      	ldr	r3, [pc, #216]	; (8009078 <UART_SetConfig+0x2d4>)
 8008fa0:	fba3 2302 	umull	r2, r3, r3, r2
 8008fa4:	095b      	lsrs	r3, r3, #5
 8008fa6:	005b      	lsls	r3, r3, #1
 8008fa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008fac:	441c      	add	r4, r3
 8008fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008fb8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008fbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008fc0:	4642      	mov	r2, r8
 8008fc2:	464b      	mov	r3, r9
 8008fc4:	1891      	adds	r1, r2, r2
 8008fc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8008fc8:	415b      	adcs	r3, r3
 8008fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008fd0:	4641      	mov	r1, r8
 8008fd2:	1851      	adds	r1, r2, r1
 8008fd4:	6339      	str	r1, [r7, #48]	; 0x30
 8008fd6:	4649      	mov	r1, r9
 8008fd8:	414b      	adcs	r3, r1
 8008fda:	637b      	str	r3, [r7, #52]	; 0x34
 8008fdc:	f04f 0200 	mov.w	r2, #0
 8008fe0:	f04f 0300 	mov.w	r3, #0
 8008fe4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008fe8:	4659      	mov	r1, fp
 8008fea:	00cb      	lsls	r3, r1, #3
 8008fec:	4651      	mov	r1, sl
 8008fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ff2:	4651      	mov	r1, sl
 8008ff4:	00ca      	lsls	r2, r1, #3
 8008ff6:	4610      	mov	r0, r2
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	4642      	mov	r2, r8
 8008ffe:	189b      	adds	r3, r3, r2
 8009000:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009004:	464b      	mov	r3, r9
 8009006:	460a      	mov	r2, r1
 8009008:	eb42 0303 	adc.w	r3, r2, r3
 800900c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800901c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009020:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009024:	460b      	mov	r3, r1
 8009026:	18db      	adds	r3, r3, r3
 8009028:	62bb      	str	r3, [r7, #40]	; 0x28
 800902a:	4613      	mov	r3, r2
 800902c:	eb42 0303 	adc.w	r3, r2, r3
 8009030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009032:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009036:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800903a:	f7f7 f8e3 	bl	8000204 <__aeabi_uldivmod>
 800903e:	4602      	mov	r2, r0
 8009040:	460b      	mov	r3, r1
 8009042:	4b0d      	ldr	r3, [pc, #52]	; (8009078 <UART_SetConfig+0x2d4>)
 8009044:	fba3 1302 	umull	r1, r3, r3, r2
 8009048:	095b      	lsrs	r3, r3, #5
 800904a:	2164      	movs	r1, #100	; 0x64
 800904c:	fb01 f303 	mul.w	r3, r1, r3
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	00db      	lsls	r3, r3, #3
 8009054:	3332      	adds	r3, #50	; 0x32
 8009056:	4a08      	ldr	r2, [pc, #32]	; (8009078 <UART_SetConfig+0x2d4>)
 8009058:	fba2 2303 	umull	r2, r3, r2, r3
 800905c:	095b      	lsrs	r3, r3, #5
 800905e:	f003 0207 	and.w	r2, r3, #7
 8009062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4422      	add	r2, r4
 800906a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800906c:	e106      	b.n	800927c <UART_SetConfig+0x4d8>
 800906e:	bf00      	nop
 8009070:	40011000 	.word	0x40011000
 8009074:	40011400 	.word	0x40011400
 8009078:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800907c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009080:	2200      	movs	r2, #0
 8009082:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009086:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800908a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800908e:	4642      	mov	r2, r8
 8009090:	464b      	mov	r3, r9
 8009092:	1891      	adds	r1, r2, r2
 8009094:	6239      	str	r1, [r7, #32]
 8009096:	415b      	adcs	r3, r3
 8009098:	627b      	str	r3, [r7, #36]	; 0x24
 800909a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800909e:	4641      	mov	r1, r8
 80090a0:	1854      	adds	r4, r2, r1
 80090a2:	4649      	mov	r1, r9
 80090a4:	eb43 0501 	adc.w	r5, r3, r1
 80090a8:	f04f 0200 	mov.w	r2, #0
 80090ac:	f04f 0300 	mov.w	r3, #0
 80090b0:	00eb      	lsls	r3, r5, #3
 80090b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80090b6:	00e2      	lsls	r2, r4, #3
 80090b8:	4614      	mov	r4, r2
 80090ba:	461d      	mov	r5, r3
 80090bc:	4643      	mov	r3, r8
 80090be:	18e3      	adds	r3, r4, r3
 80090c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80090c4:	464b      	mov	r3, r9
 80090c6:	eb45 0303 	adc.w	r3, r5, r3
 80090ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80090ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80090de:	f04f 0200 	mov.w	r2, #0
 80090e2:	f04f 0300 	mov.w	r3, #0
 80090e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80090ea:	4629      	mov	r1, r5
 80090ec:	008b      	lsls	r3, r1, #2
 80090ee:	4621      	mov	r1, r4
 80090f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090f4:	4621      	mov	r1, r4
 80090f6:	008a      	lsls	r2, r1, #2
 80090f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80090fc:	f7f7 f882 	bl	8000204 <__aeabi_uldivmod>
 8009100:	4602      	mov	r2, r0
 8009102:	460b      	mov	r3, r1
 8009104:	4b60      	ldr	r3, [pc, #384]	; (8009288 <UART_SetConfig+0x4e4>)
 8009106:	fba3 2302 	umull	r2, r3, r3, r2
 800910a:	095b      	lsrs	r3, r3, #5
 800910c:	011c      	lsls	r4, r3, #4
 800910e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009112:	2200      	movs	r2, #0
 8009114:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009118:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800911c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009120:	4642      	mov	r2, r8
 8009122:	464b      	mov	r3, r9
 8009124:	1891      	adds	r1, r2, r2
 8009126:	61b9      	str	r1, [r7, #24]
 8009128:	415b      	adcs	r3, r3
 800912a:	61fb      	str	r3, [r7, #28]
 800912c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009130:	4641      	mov	r1, r8
 8009132:	1851      	adds	r1, r2, r1
 8009134:	6139      	str	r1, [r7, #16]
 8009136:	4649      	mov	r1, r9
 8009138:	414b      	adcs	r3, r1
 800913a:	617b      	str	r3, [r7, #20]
 800913c:	f04f 0200 	mov.w	r2, #0
 8009140:	f04f 0300 	mov.w	r3, #0
 8009144:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009148:	4659      	mov	r1, fp
 800914a:	00cb      	lsls	r3, r1, #3
 800914c:	4651      	mov	r1, sl
 800914e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009152:	4651      	mov	r1, sl
 8009154:	00ca      	lsls	r2, r1, #3
 8009156:	4610      	mov	r0, r2
 8009158:	4619      	mov	r1, r3
 800915a:	4603      	mov	r3, r0
 800915c:	4642      	mov	r2, r8
 800915e:	189b      	adds	r3, r3, r2
 8009160:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009164:	464b      	mov	r3, r9
 8009166:	460a      	mov	r2, r1
 8009168:	eb42 0303 	adc.w	r3, r2, r3
 800916c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	67bb      	str	r3, [r7, #120]	; 0x78
 800917a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800917c:	f04f 0200 	mov.w	r2, #0
 8009180:	f04f 0300 	mov.w	r3, #0
 8009184:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009188:	4649      	mov	r1, r9
 800918a:	008b      	lsls	r3, r1, #2
 800918c:	4641      	mov	r1, r8
 800918e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009192:	4641      	mov	r1, r8
 8009194:	008a      	lsls	r2, r1, #2
 8009196:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800919a:	f7f7 f833 	bl	8000204 <__aeabi_uldivmod>
 800919e:	4602      	mov	r2, r0
 80091a0:	460b      	mov	r3, r1
 80091a2:	4611      	mov	r1, r2
 80091a4:	4b38      	ldr	r3, [pc, #224]	; (8009288 <UART_SetConfig+0x4e4>)
 80091a6:	fba3 2301 	umull	r2, r3, r3, r1
 80091aa:	095b      	lsrs	r3, r3, #5
 80091ac:	2264      	movs	r2, #100	; 0x64
 80091ae:	fb02 f303 	mul.w	r3, r2, r3
 80091b2:	1acb      	subs	r3, r1, r3
 80091b4:	011b      	lsls	r3, r3, #4
 80091b6:	3332      	adds	r3, #50	; 0x32
 80091b8:	4a33      	ldr	r2, [pc, #204]	; (8009288 <UART_SetConfig+0x4e4>)
 80091ba:	fba2 2303 	umull	r2, r3, r2, r3
 80091be:	095b      	lsrs	r3, r3, #5
 80091c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091c4:	441c      	add	r4, r3
 80091c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091ca:	2200      	movs	r2, #0
 80091cc:	673b      	str	r3, [r7, #112]	; 0x70
 80091ce:	677a      	str	r2, [r7, #116]	; 0x74
 80091d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80091d4:	4642      	mov	r2, r8
 80091d6:	464b      	mov	r3, r9
 80091d8:	1891      	adds	r1, r2, r2
 80091da:	60b9      	str	r1, [r7, #8]
 80091dc:	415b      	adcs	r3, r3
 80091de:	60fb      	str	r3, [r7, #12]
 80091e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80091e4:	4641      	mov	r1, r8
 80091e6:	1851      	adds	r1, r2, r1
 80091e8:	6039      	str	r1, [r7, #0]
 80091ea:	4649      	mov	r1, r9
 80091ec:	414b      	adcs	r3, r1
 80091ee:	607b      	str	r3, [r7, #4]
 80091f0:	f04f 0200 	mov.w	r2, #0
 80091f4:	f04f 0300 	mov.w	r3, #0
 80091f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80091fc:	4659      	mov	r1, fp
 80091fe:	00cb      	lsls	r3, r1, #3
 8009200:	4651      	mov	r1, sl
 8009202:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009206:	4651      	mov	r1, sl
 8009208:	00ca      	lsls	r2, r1, #3
 800920a:	4610      	mov	r0, r2
 800920c:	4619      	mov	r1, r3
 800920e:	4603      	mov	r3, r0
 8009210:	4642      	mov	r2, r8
 8009212:	189b      	adds	r3, r3, r2
 8009214:	66bb      	str	r3, [r7, #104]	; 0x68
 8009216:	464b      	mov	r3, r9
 8009218:	460a      	mov	r2, r1
 800921a:	eb42 0303 	adc.w	r3, r2, r3
 800921e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	663b      	str	r3, [r7, #96]	; 0x60
 800922a:	667a      	str	r2, [r7, #100]	; 0x64
 800922c:	f04f 0200 	mov.w	r2, #0
 8009230:	f04f 0300 	mov.w	r3, #0
 8009234:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009238:	4649      	mov	r1, r9
 800923a:	008b      	lsls	r3, r1, #2
 800923c:	4641      	mov	r1, r8
 800923e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009242:	4641      	mov	r1, r8
 8009244:	008a      	lsls	r2, r1, #2
 8009246:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800924a:	f7f6 ffdb 	bl	8000204 <__aeabi_uldivmod>
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	4b0d      	ldr	r3, [pc, #52]	; (8009288 <UART_SetConfig+0x4e4>)
 8009254:	fba3 1302 	umull	r1, r3, r3, r2
 8009258:	095b      	lsrs	r3, r3, #5
 800925a:	2164      	movs	r1, #100	; 0x64
 800925c:	fb01 f303 	mul.w	r3, r1, r3
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	011b      	lsls	r3, r3, #4
 8009264:	3332      	adds	r3, #50	; 0x32
 8009266:	4a08      	ldr	r2, [pc, #32]	; (8009288 <UART_SetConfig+0x4e4>)
 8009268:	fba2 2303 	umull	r2, r3, r2, r3
 800926c:	095b      	lsrs	r3, r3, #5
 800926e:	f003 020f 	and.w	r2, r3, #15
 8009272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4422      	add	r2, r4
 800927a:	609a      	str	r2, [r3, #8]
}
 800927c:	bf00      	nop
 800927e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009282:	46bd      	mov	sp, r7
 8009284:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009288:	51eb851f 	.word	0x51eb851f

0800928c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800928c:	b084      	sub	sp, #16
 800928e:	b580      	push	{r7, lr}
 8009290:	b084      	sub	sp, #16
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
 8009296:	f107 001c 	add.w	r0, r7, #28
 800929a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800929e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d123      	bne.n	80092ee <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80092ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80092ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d105      	bne.n	80092e2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 fb74 	bl	80099d0 <USB_CoreReset>
 80092e8:	4603      	mov	r3, r0
 80092ea:	73fb      	strb	r3, [r7, #15]
 80092ec:	e01b      	b.n	8009326 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fb68 	bl	80099d0 <USB_CoreReset>
 8009300:	4603      	mov	r3, r0
 8009302:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009304:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009308:	2b00      	cmp	r3, #0
 800930a:	d106      	bne.n	800931a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009310:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	639a      	str	r2, [r3, #56]	; 0x38
 8009318:	e005      	b.n	8009326 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009326:	7fbb      	ldrb	r3, [r7, #30]
 8009328:	2b01      	cmp	r3, #1
 800932a:	d10b      	bne.n	8009344 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f043 0206 	orr.w	r2, r3, #6
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	f043 0220 	orr.w	r2, r3, #32
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009344:	7bfb      	ldrb	r3, [r7, #15]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009350:	b004      	add	sp, #16
 8009352:	4770      	bx	lr

08009354 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f043 0201 	orr.w	r2, r3, #1
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	370c      	adds	r7, #12
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr

08009376 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009376:	b480      	push	{r7}
 8009378:	b083      	sub	sp, #12
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f023 0201 	bic.w	r2, r3, #1
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	460b      	mov	r3, r1
 80093a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80093a4:	2300      	movs	r3, #0
 80093a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80093b4:	78fb      	ldrb	r3, [r7, #3]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d115      	bne.n	80093e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80093c6:	200a      	movs	r0, #10
 80093c8:	f7f8 fabc 	bl	8001944 <HAL_Delay>
      ms += 10U;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	330a      	adds	r3, #10
 80093d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 faee 	bl	80099b4 <USB_GetMode>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d01e      	beq.n	800941c <USB_SetCurrentMode+0x84>
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2bc7      	cmp	r3, #199	; 0xc7
 80093e2:	d9f0      	bls.n	80093c6 <USB_SetCurrentMode+0x2e>
 80093e4:	e01a      	b.n	800941c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80093e6:	78fb      	ldrb	r3, [r7, #3]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d115      	bne.n	8009418 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80093f8:	200a      	movs	r0, #10
 80093fa:	f7f8 faa3 	bl	8001944 <HAL_Delay>
      ms += 10U;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	330a      	adds	r3, #10
 8009402:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fad5 	bl	80099b4 <USB_GetMode>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d005      	beq.n	800941c <USB_SetCurrentMode+0x84>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2bc7      	cmp	r3, #199	; 0xc7
 8009414:	d9f0      	bls.n	80093f8 <USB_SetCurrentMode+0x60>
 8009416:	e001      	b.n	800941c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	e005      	b.n	8009428 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2bc8      	cmp	r3, #200	; 0xc8
 8009420:	d101      	bne.n	8009426 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	e000      	b.n	8009428 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009430:	b084      	sub	sp, #16
 8009432:	b580      	push	{r7, lr}
 8009434:	b086      	sub	sp, #24
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800943e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800944a:	2300      	movs	r3, #0
 800944c:	613b      	str	r3, [r7, #16]
 800944e:	e009      	b.n	8009464 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	3340      	adds	r3, #64	; 0x40
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4413      	add	r3, r2
 800945a:	2200      	movs	r2, #0
 800945c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	3301      	adds	r3, #1
 8009462:	613b      	str	r3, [r7, #16]
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	2b0e      	cmp	r3, #14
 8009468:	d9f2      	bls.n	8009450 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800946a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800946e:	2b00      	cmp	r3, #0
 8009470:	d11c      	bne.n	80094ac <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009480:	f043 0302 	orr.w	r3, r3, #2
 8009484:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800948a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	601a      	str	r2, [r3, #0]
 80094aa:	e005      	b.n	80094b8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094be:	461a      	mov	r2, r3
 80094c0:	2300      	movs	r3, #0
 80094c2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094c4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d10d      	bne.n	80094e8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80094cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d104      	bne.n	80094de <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80094d4:	2100      	movs	r1, #0
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 f968 	bl	80097ac <USB_SetDevSpeed>
 80094dc:	e008      	b.n	80094f0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80094de:	2101      	movs	r1, #1
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f963 	bl	80097ac <USB_SetDevSpeed>
 80094e6:	e003      	b.n	80094f0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80094e8:	2103      	movs	r1, #3
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 f95e 	bl	80097ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80094f0:	2110      	movs	r1, #16
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 f8fa 	bl	80096ec <USB_FlushTxFifo>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d001      	beq.n	8009502 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f924 	bl	8009750 <USB_FlushRxFifo>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d001      	beq.n	8009512 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009518:	461a      	mov	r2, r3
 800951a:	2300      	movs	r3, #0
 800951c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009524:	461a      	mov	r2, r3
 8009526:	2300      	movs	r3, #0
 8009528:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009530:	461a      	mov	r2, r3
 8009532:	2300      	movs	r3, #0
 8009534:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009536:	2300      	movs	r3, #0
 8009538:	613b      	str	r3, [r7, #16]
 800953a:	e043      	b.n	80095c4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	015a      	lsls	r2, r3, #5
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	4413      	add	r3, r2
 8009544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800954e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009552:	d118      	bne.n	8009586 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d10a      	bne.n	8009570 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	015a      	lsls	r2, r3, #5
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	4413      	add	r3, r2
 8009562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009566:	461a      	mov	r2, r3
 8009568:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800956c:	6013      	str	r3, [r2, #0]
 800956e:	e013      	b.n	8009598 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	015a      	lsls	r2, r3, #5
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	4413      	add	r3, r2
 8009578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800957c:	461a      	mov	r2, r3
 800957e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009582:	6013      	str	r3, [r2, #0]
 8009584:	e008      	b.n	8009598 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	015a      	lsls	r2, r3, #5
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	4413      	add	r3, r2
 800958e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009592:	461a      	mov	r2, r3
 8009594:	2300      	movs	r3, #0
 8009596:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	015a      	lsls	r2, r3, #5
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	4413      	add	r3, r2
 80095a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095a4:	461a      	mov	r2, r3
 80095a6:	2300      	movs	r3, #0
 80095a8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	015a      	lsls	r2, r3, #5
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	4413      	add	r3, r2
 80095b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b6:	461a      	mov	r2, r3
 80095b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80095bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	3301      	adds	r3, #1
 80095c2:	613b      	str	r3, [r7, #16]
 80095c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80095c8:	461a      	mov	r2, r3
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d3b5      	bcc.n	800953c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095d0:	2300      	movs	r3, #0
 80095d2:	613b      	str	r3, [r7, #16]
 80095d4:	e043      	b.n	800965e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	015a      	lsls	r2, r3, #5
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	4413      	add	r3, r2
 80095de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095ec:	d118      	bne.n	8009620 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d10a      	bne.n	800960a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	015a      	lsls	r2, r3, #5
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	4413      	add	r3, r2
 80095fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009600:	461a      	mov	r2, r3
 8009602:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009606:	6013      	str	r3, [r2, #0]
 8009608:	e013      	b.n	8009632 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	015a      	lsls	r2, r3, #5
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	4413      	add	r3, r2
 8009612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009616:	461a      	mov	r2, r3
 8009618:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800961c:	6013      	str	r3, [r2, #0]
 800961e:	e008      	b.n	8009632 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	015a      	lsls	r2, r3, #5
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	4413      	add	r3, r2
 8009628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800962c:	461a      	mov	r2, r3
 800962e:	2300      	movs	r3, #0
 8009630:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	015a      	lsls	r2, r3, #5
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	4413      	add	r3, r2
 800963a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800963e:	461a      	mov	r2, r3
 8009640:	2300      	movs	r3, #0
 8009642:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	015a      	lsls	r2, r3, #5
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	4413      	add	r3, r2
 800964c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009650:	461a      	mov	r2, r3
 8009652:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009656:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	3301      	adds	r3, #1
 800965c:	613b      	str	r3, [r7, #16]
 800965e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009662:	461a      	mov	r2, r3
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	4293      	cmp	r3, r2
 8009668:	d3b5      	bcc.n	80095d6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800967c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800968a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800968c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009690:	2b00      	cmp	r3, #0
 8009692:	d105      	bne.n	80096a0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	699b      	ldr	r3, [r3, #24]
 8009698:	f043 0210 	orr.w	r2, r3, #16
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	699a      	ldr	r2, [r3, #24]
 80096a4:	4b10      	ldr	r3, [pc, #64]	; (80096e8 <USB_DevInit+0x2b8>)
 80096a6:	4313      	orrs	r3, r2
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80096ac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d005      	beq.n	80096c0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	f043 0208 	orr.w	r2, r3, #8
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80096c0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d107      	bne.n	80096d8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	699b      	ldr	r3, [r3, #24]
 80096cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096d0:	f043 0304 	orr.w	r3, r3, #4
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80096d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3718      	adds	r7, #24
 80096de:	46bd      	mov	sp, r7
 80096e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096e4:	b004      	add	sp, #16
 80096e6:	4770      	bx	lr
 80096e8:	803c3800 	.word	0x803c3800

080096ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b085      	sub	sp, #20
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80096f6:	2300      	movs	r3, #0
 80096f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	3301      	adds	r3, #1
 80096fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009706:	d901      	bls.n	800970c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009708:	2303      	movs	r3, #3
 800970a:	e01b      	b.n	8009744 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	691b      	ldr	r3, [r3, #16]
 8009710:	2b00      	cmp	r3, #0
 8009712:	daf2      	bge.n	80096fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009714:	2300      	movs	r3, #0
 8009716:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	019b      	lsls	r3, r3, #6
 800971c:	f043 0220 	orr.w	r2, r3, #32
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	3301      	adds	r3, #1
 8009728:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009730:	d901      	bls.n	8009736 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009732:	2303      	movs	r3, #3
 8009734:	e006      	b.n	8009744 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	691b      	ldr	r3, [r3, #16]
 800973a:	f003 0320 	and.w	r3, r3, #32
 800973e:	2b20      	cmp	r3, #32
 8009740:	d0f0      	beq.n	8009724 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3714      	adds	r7, #20
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009750:	b480      	push	{r7}
 8009752:	b085      	sub	sp, #20
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009758:	2300      	movs	r3, #0
 800975a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	3301      	adds	r3, #1
 8009760:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009768:	d901      	bls.n	800976e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800976a:	2303      	movs	r3, #3
 800976c:	e018      	b.n	80097a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	2b00      	cmp	r3, #0
 8009774:	daf2      	bge.n	800975c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009776:	2300      	movs	r3, #0
 8009778:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2210      	movs	r2, #16
 800977e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	3301      	adds	r3, #1
 8009784:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800978c:	d901      	bls.n	8009792 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800978e:	2303      	movs	r3, #3
 8009790:	e006      	b.n	80097a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	f003 0310 	and.w	r3, r3, #16
 800979a:	2b10      	cmp	r3, #16
 800979c:	d0f0      	beq.n	8009780 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3714      	adds	r7, #20
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	460b      	mov	r3, r1
 80097b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	78fb      	ldrb	r3, [r7, #3]
 80097c6:	68f9      	ldr	r1, [r7, #12]
 80097c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097cc:	4313      	orrs	r3, r2
 80097ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3714      	adds	r7, #20
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr

080097de <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80097de:	b480      	push	{r7}
 80097e0:	b089      	sub	sp, #36	; 0x24
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	60f8      	str	r0, [r7, #12]
 80097e6:	60b9      	str	r1, [r7, #8]
 80097e8:	4611      	mov	r1, r2
 80097ea:	461a      	mov	r2, r3
 80097ec:	460b      	mov	r3, r1
 80097ee:	71fb      	strb	r3, [r7, #7]
 80097f0:	4613      	mov	r3, r2
 80097f2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80097fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009800:	2b00      	cmp	r3, #0
 8009802:	d123      	bne.n	800984c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009804:	88bb      	ldrh	r3, [r7, #4]
 8009806:	3303      	adds	r3, #3
 8009808:	089b      	lsrs	r3, r3, #2
 800980a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800980c:	2300      	movs	r3, #0
 800980e:	61bb      	str	r3, [r7, #24]
 8009810:	e018      	b.n	8009844 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009812:	79fb      	ldrb	r3, [r7, #7]
 8009814:	031a      	lsls	r2, r3, #12
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	4413      	add	r3, r2
 800981a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800981e:	461a      	mov	r2, r3
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	3301      	adds	r3, #1
 800982a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	3301      	adds	r3, #1
 8009830:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	3301      	adds	r3, #1
 8009836:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	3301      	adds	r3, #1
 800983c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	3301      	adds	r3, #1
 8009842:	61bb      	str	r3, [r7, #24]
 8009844:	69ba      	ldr	r2, [r7, #24]
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	429a      	cmp	r2, r3
 800984a:	d3e2      	bcc.n	8009812 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3724      	adds	r7, #36	; 0x24
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800985a:	b480      	push	{r7}
 800985c:	b08b      	sub	sp, #44	; 0x2c
 800985e:	af00      	add	r7, sp, #0
 8009860:	60f8      	str	r0, [r7, #12]
 8009862:	60b9      	str	r1, [r7, #8]
 8009864:	4613      	mov	r3, r2
 8009866:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009870:	88fb      	ldrh	r3, [r7, #6]
 8009872:	089b      	lsrs	r3, r3, #2
 8009874:	b29b      	uxth	r3, r3
 8009876:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009878:	88fb      	ldrh	r3, [r7, #6]
 800987a:	f003 0303 	and.w	r3, r3, #3
 800987e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009880:	2300      	movs	r3, #0
 8009882:	623b      	str	r3, [r7, #32]
 8009884:	e014      	b.n	80098b0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009890:	601a      	str	r2, [r3, #0]
    pDest++;
 8009892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009894:	3301      	adds	r3, #1
 8009896:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989a:	3301      	adds	r3, #1
 800989c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800989e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a0:	3301      	adds	r3, #1
 80098a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80098a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a6:	3301      	adds	r3, #1
 80098a8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80098aa:	6a3b      	ldr	r3, [r7, #32]
 80098ac:	3301      	adds	r3, #1
 80098ae:	623b      	str	r3, [r7, #32]
 80098b0:	6a3a      	ldr	r2, [r7, #32]
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d3e6      	bcc.n	8009886 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80098b8:	8bfb      	ldrh	r3, [r7, #30]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d01e      	beq.n	80098fc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80098be:	2300      	movs	r3, #0
 80098c0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098c8:	461a      	mov	r2, r3
 80098ca:	f107 0310 	add.w	r3, r7, #16
 80098ce:	6812      	ldr	r2, [r2, #0]
 80098d0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80098d2:	693a      	ldr	r2, [r7, #16]
 80098d4:	6a3b      	ldr	r3, [r7, #32]
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	00db      	lsls	r3, r3, #3
 80098da:	fa22 f303 	lsr.w	r3, r2, r3
 80098de:	b2da      	uxtb	r2, r3
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e2:	701a      	strb	r2, [r3, #0]
      i++;
 80098e4:	6a3b      	ldr	r3, [r7, #32]
 80098e6:	3301      	adds	r3, #1
 80098e8:	623b      	str	r3, [r7, #32]
      pDest++;
 80098ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ec:	3301      	adds	r3, #1
 80098ee:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80098f0:	8bfb      	ldrh	r3, [r7, #30]
 80098f2:	3b01      	subs	r3, #1
 80098f4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80098f6:	8bfb      	ldrh	r3, [r7, #30]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1ea      	bne.n	80098d2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80098fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80098fe:	4618      	mov	r0, r3
 8009900:	372c      	adds	r7, #44	; 0x2c
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800990a:	b480      	push	{r7}
 800990c:	b085      	sub	sp, #20
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009924:	f023 0303 	bic.w	r3, r3, #3
 8009928:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	68fa      	ldr	r2, [r7, #12]
 8009934:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009938:	f043 0302 	orr.w	r3, r3, #2
 800993c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3714      	adds	r7, #20
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	695b      	ldr	r3, [r3, #20]
 8009958:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	699b      	ldr	r3, [r3, #24]
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	4013      	ands	r3, r2
 8009962:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009964:	68fb      	ldr	r3, [r7, #12]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3714      	adds	r7, #20
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr

08009972 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8009972:	b480      	push	{r7}
 8009974:	b085      	sub	sp, #20
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	460b      	mov	r3, r1
 800997c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8009982:	78fb      	ldrb	r3, [r7, #3]
 8009984:	015a      	lsls	r2, r3, #5
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	4413      	add	r3, r2
 800998a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8009992:	78fb      	ldrb	r3, [r7, #3]
 8009994:	015a      	lsls	r2, r3, #5
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	4413      	add	r3, r2
 800999a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	68ba      	ldr	r2, [r7, #8]
 80099a2:	4013      	ands	r3, r2
 80099a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80099a6:	68bb      	ldr	r3, [r7, #8]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3714      	adds	r7, #20
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	695b      	ldr	r3, [r3, #20]
 80099c0:	f003 0301 	and.w	r3, r3, #1
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80099d8:	2300      	movs	r3, #0
 80099da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	3301      	adds	r3, #1
 80099e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80099e8:	d901      	bls.n	80099ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80099ea:	2303      	movs	r3, #3
 80099ec:	e01b      	b.n	8009a26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	daf2      	bge.n	80099dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80099f6:	2300      	movs	r3, #0
 80099f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	f043 0201 	orr.w	r2, r3, #1
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009a12:	d901      	bls.n	8009a18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009a14:	2303      	movs	r3, #3
 8009a16:	e006      	b.n	8009a26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	f003 0301 	and.w	r3, r3, #1
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d0f0      	beq.n	8009a06 <USB_CoreReset+0x36>

  return HAL_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3714      	adds	r7, #20
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
	...

08009a34 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a34:	b084      	sub	sp, #16
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b086      	sub	sp, #24
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
 8009a3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009a42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a54:	461a      	mov	r2, r3
 8009a56:	2300      	movs	r3, #0
 8009a58:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d119      	bne.n	8009aa6 <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009a72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d10a      	bne.n	8009a90 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009a88:	f043 0304 	orr.w	r3, r3, #4
 8009a8c:	6013      	str	r3, [r2, #0]
 8009a8e:	e014      	b.n	8009aba <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009a9e:	f023 0304 	bic.w	r3, r3, #4
 8009aa2:	6013      	str	r3, [r2, #0]
 8009aa4:	e009      	b.n	8009aba <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	68fa      	ldr	r2, [r7, #12]
 8009ab0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ab4:	f023 0304 	bic.w	r3, r3, #4
 8009ab8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009aba:	2110      	movs	r1, #16
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7ff fe15 	bl	80096ec <USB_FlushTxFifo>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d001      	beq.n	8009acc <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f7ff fe3f 	bl	8009750 <USB_FlushRxFifo>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d001      	beq.n	8009adc <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009adc:	2300      	movs	r3, #0
 8009ade:	613b      	str	r3, [r7, #16]
 8009ae0:	e015      	b.n	8009b0e <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	015a      	lsls	r2, r3, #5
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	4413      	add	r3, r2
 8009aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aee:	461a      	mov	r2, r3
 8009af0:	f04f 33ff 	mov.w	r3, #4294967295
 8009af4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	015a      	lsls	r2, r3, #5
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	4413      	add	r3, r2
 8009afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b02:	461a      	mov	r2, r3
 8009b04:	2300      	movs	r3, #0
 8009b06:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	613b      	str	r3, [r7, #16]
 8009b0e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009b12:	461a      	mov	r2, r3
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d3e3      	bcc.n	8009ae2 <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f04f 32ff 	mov.w	r2, #4294967295
 8009b26:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4a18      	ldr	r2, [pc, #96]	; (8009b8c <USB_HostInit+0x158>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d10b      	bne.n	8009b48 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b36:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4a15      	ldr	r2, [pc, #84]	; (8009b90 <USB_HostInit+0x15c>)
 8009b3c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4a14      	ldr	r2, [pc, #80]	; (8009b94 <USB_HostInit+0x160>)
 8009b42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009b46:	e009      	b.n	8009b5c <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2280      	movs	r2, #128	; 0x80
 8009b4c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a11      	ldr	r2, [pc, #68]	; (8009b98 <USB_HostInit+0x164>)
 8009b52:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4a11      	ldr	r2, [pc, #68]	; (8009b9c <USB_HostInit+0x168>)
 8009b58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009b5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d105      	bne.n	8009b70 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	f043 0210 	orr.w	r2, r3, #16
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	699a      	ldr	r2, [r3, #24]
 8009b74:	4b0a      	ldr	r3, [pc, #40]	; (8009ba0 <USB_HostInit+0x16c>)
 8009b76:	4313      	orrs	r3, r2
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3718      	adds	r7, #24
 8009b82:	46bd      	mov	sp, r7
 8009b84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b88:	b004      	add	sp, #16
 8009b8a:	4770      	bx	lr
 8009b8c:	40040000 	.word	0x40040000
 8009b90:	01000200 	.word	0x01000200
 8009b94:	00e00300 	.word	0x00e00300
 8009b98:	00600080 	.word	0x00600080
 8009b9c:	004000e0 	.word	0x004000e0
 8009ba0:	a3200008 	.word	0xa3200008

08009ba4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	460b      	mov	r3, r1
 8009bae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009bc2:	f023 0303 	bic.w	r3, r3, #3
 8009bc6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	78fb      	ldrb	r3, [r7, #3]
 8009bd2:	f003 0303 	and.w	r3, r3, #3
 8009bd6:	68f9      	ldr	r1, [r7, #12]
 8009bd8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009be0:	78fb      	ldrb	r3, [r7, #3]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d107      	bne.n	8009bf6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bec:	461a      	mov	r2, r3
 8009bee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009bf2:	6053      	str	r3, [r2, #4]
 8009bf4:	e00c      	b.n	8009c10 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8009bf6:	78fb      	ldrb	r3, [r7, #3]
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d107      	bne.n	8009c0c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c02:	461a      	mov	r2, r3
 8009c04:	f241 7370 	movw	r3, #6000	; 0x1770
 8009c08:	6053      	str	r3, [r2, #4]
 8009c0a:	e001      	b.n	8009c10 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e000      	b.n	8009c12 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3714      	adds	r7, #20
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr

08009c1e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b084      	sub	sp, #16
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009c3e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c4c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009c4e:	2064      	movs	r0, #100	; 0x64
 8009c50:	f7f7 fe78 	bl	8001944 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c60:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009c62:	200a      	movs	r0, #10
 8009c64:	f7f7 fe6e 	bl	8001944 <HAL_Delay>

  return HAL_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009c72:	b480      	push	{r7}
 8009c74:	b085      	sub	sp, #20
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009c82:	2300      	movs	r3, #0
 8009c84:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009c96:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d109      	bne.n	8009cb6 <USB_DriveVbus+0x44>
 8009ca2:	78fb      	ldrb	r3, [r7, #3]
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d106      	bne.n	8009cb6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009cb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009cb4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cc0:	d109      	bne.n	8009cd6 <USB_DriveVbus+0x64>
 8009cc2:	78fb      	ldrb	r3, [r7, #3]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d106      	bne.n	8009cd6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009cd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cd4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3714      	adds	r7, #20
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	0c5b      	lsrs	r3, r3, #17
 8009d02:	f003 0303 	and.w	r3, r3, #3
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3714      	adds	r7, #20
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr

08009d12 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8009d12:	b480      	push	{r7}
 8009d14:	b085      	sub	sp, #20
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	b29b      	uxth	r3, r3
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3714      	adds	r7, #20
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b088      	sub	sp, #32
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	4608      	mov	r0, r1
 8009d3e:	4611      	mov	r1, r2
 8009d40:	461a      	mov	r2, r3
 8009d42:	4603      	mov	r3, r0
 8009d44:	70fb      	strb	r3, [r7, #3]
 8009d46:	460b      	mov	r3, r1
 8009d48:	70bb      	strb	r3, [r7, #2]
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8009d56:	78fb      	ldrb	r3, [r7, #3]
 8009d58:	015a      	lsls	r2, r3, #5
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d62:	461a      	mov	r2, r3
 8009d64:	f04f 33ff 	mov.w	r3, #4294967295
 8009d68:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009d6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009d6e:	2b03      	cmp	r3, #3
 8009d70:	d87c      	bhi.n	8009e6c <USB_HC_Init+0x138>
 8009d72:	a201      	add	r2, pc, #4	; (adr r2, 8009d78 <USB_HC_Init+0x44>)
 8009d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d78:	08009d89 	.word	0x08009d89
 8009d7c:	08009e2f 	.word	0x08009e2f
 8009d80:	08009d89 	.word	0x08009d89
 8009d84:	08009df1 	.word	0x08009df1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009d88:	78fb      	ldrb	r3, [r7, #3]
 8009d8a:	015a      	lsls	r2, r3, #5
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	4413      	add	r3, r2
 8009d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d94:	461a      	mov	r2, r3
 8009d96:	f240 439d 	movw	r3, #1181	; 0x49d
 8009d9a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009d9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	da10      	bge.n	8009dc6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009da4:	78fb      	ldrb	r3, [r7, #3]
 8009da6:	015a      	lsls	r2, r3, #5
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	4413      	add	r3, r2
 8009dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	78fa      	ldrb	r2, [r7, #3]
 8009db4:	0151      	lsls	r1, r2, #5
 8009db6:	693a      	ldr	r2, [r7, #16]
 8009db8:	440a      	add	r2, r1
 8009dba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dc2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8009dc4:	e055      	b.n	8009e72 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4a6f      	ldr	r2, [pc, #444]	; (8009f88 <USB_HC_Init+0x254>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d151      	bne.n	8009e72 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009dce:	78fb      	ldrb	r3, [r7, #3]
 8009dd0:	015a      	lsls	r2, r3, #5
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	78fa      	ldrb	r2, [r7, #3]
 8009dde:	0151      	lsls	r1, r2, #5
 8009de0:	693a      	ldr	r2, [r7, #16]
 8009de2:	440a      	add	r2, r1
 8009de4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009de8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009dec:	60d3      	str	r3, [r2, #12]
      break;
 8009dee:	e040      	b.n	8009e72 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009df0:	78fb      	ldrb	r3, [r7, #3]
 8009df2:	015a      	lsls	r2, r3, #5
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	4413      	add	r3, r2
 8009df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	f240 639d 	movw	r3, #1693	; 0x69d
 8009e02:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009e04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	da34      	bge.n	8009e76 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009e0c:	78fb      	ldrb	r3, [r7, #3]
 8009e0e:	015a      	lsls	r2, r3, #5
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	4413      	add	r3, r2
 8009e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	78fa      	ldrb	r2, [r7, #3]
 8009e1c:	0151      	lsls	r1, r2, #5
 8009e1e:	693a      	ldr	r2, [r7, #16]
 8009e20:	440a      	add	r2, r1
 8009e22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e2a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009e2c:	e023      	b.n	8009e76 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009e2e:	78fb      	ldrb	r3, [r7, #3]
 8009e30:	015a      	lsls	r2, r3, #5
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	4413      	add	r3, r2
 8009e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	f240 2325 	movw	r3, #549	; 0x225
 8009e40:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009e42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	da17      	bge.n	8009e7a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009e4a:	78fb      	ldrb	r3, [r7, #3]
 8009e4c:	015a      	lsls	r2, r3, #5
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	4413      	add	r3, r2
 8009e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	78fa      	ldrb	r2, [r7, #3]
 8009e5a:	0151      	lsls	r1, r2, #5
 8009e5c:	693a      	ldr	r2, [r7, #16]
 8009e5e:	440a      	add	r2, r1
 8009e60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e64:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009e68:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009e6a:	e006      	b.n	8009e7a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	77fb      	strb	r3, [r7, #31]
      break;
 8009e70:	e004      	b.n	8009e7c <USB_HC_Init+0x148>
      break;
 8009e72:	bf00      	nop
 8009e74:	e002      	b.n	8009e7c <USB_HC_Init+0x148>
      break;
 8009e76:	bf00      	nop
 8009e78:	e000      	b.n	8009e7c <USB_HC_Init+0x148>
      break;
 8009e7a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009e7c:	78fb      	ldrb	r3, [r7, #3]
 8009e7e:	015a      	lsls	r2, r3, #5
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	4413      	add	r3, r2
 8009e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e88:	461a      	mov	r2, r3
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009e8e:	78fb      	ldrb	r3, [r7, #3]
 8009e90:	015a      	lsls	r2, r3, #5
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	4413      	add	r3, r2
 8009e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	78fa      	ldrb	r2, [r7, #3]
 8009e9e:	0151      	lsls	r1, r2, #5
 8009ea0:	693a      	ldr	r2, [r7, #16]
 8009ea2:	440a      	add	r2, r1
 8009ea4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ea8:	f043 0302 	orr.w	r3, r3, #2
 8009eac:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009eb4:	699a      	ldr	r2, [r3, #24]
 8009eb6:	78fb      	ldrb	r3, [r7, #3]
 8009eb8:	f003 030f 	and.w	r3, r3, #15
 8009ebc:	2101      	movs	r1, #1
 8009ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8009ec2:	6939      	ldr	r1, [r7, #16]
 8009ec4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	699b      	ldr	r3, [r3, #24]
 8009ed0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009ed8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	da03      	bge.n	8009ee8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009ee0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ee4:	61bb      	str	r3, [r7, #24]
 8009ee6:	e001      	b.n	8009eec <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f7ff fef9 	bl	8009ce4 <USB_GetHostSpeed>
 8009ef2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009ef4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009ef8:	2b02      	cmp	r3, #2
 8009efa:	d106      	bne.n	8009f0a <USB_HC_Init+0x1d6>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2b02      	cmp	r3, #2
 8009f00:	d003      	beq.n	8009f0a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009f02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009f06:	617b      	str	r3, [r7, #20]
 8009f08:	e001      	b.n	8009f0e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f0e:	787b      	ldrb	r3, [r7, #1]
 8009f10:	059b      	lsls	r3, r3, #22
 8009f12:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009f16:	78bb      	ldrb	r3, [r7, #2]
 8009f18:	02db      	lsls	r3, r3, #11
 8009f1a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f1e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009f20:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009f24:	049b      	lsls	r3, r3, #18
 8009f26:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009f2a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009f2c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009f2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009f32:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	431a      	orrs	r2, r3
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f3c:	78fa      	ldrb	r2, [r7, #3]
 8009f3e:	0151      	lsls	r1, r2, #5
 8009f40:	693a      	ldr	r2, [r7, #16]
 8009f42:	440a      	add	r2, r1
 8009f44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009f48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f4c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009f4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009f52:	2b03      	cmp	r3, #3
 8009f54:	d003      	beq.n	8009f5e <USB_HC_Init+0x22a>
 8009f56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d10f      	bne.n	8009f7e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009f5e:	78fb      	ldrb	r3, [r7, #3]
 8009f60:	015a      	lsls	r2, r3, #5
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	4413      	add	r3, r2
 8009f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	78fa      	ldrb	r2, [r7, #3]
 8009f6e:	0151      	lsls	r1, r2, #5
 8009f70:	693a      	ldr	r2, [r7, #16]
 8009f72:	440a      	add	r2, r1
 8009f74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f7c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009f7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3720      	adds	r7, #32
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	40040000 	.word	0x40040000

08009f8c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b08c      	sub	sp, #48	; 0x30
 8009f90:	af02      	add	r7, sp, #8
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	4613      	mov	r3, r2
 8009f98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	785b      	ldrb	r3, [r3, #1]
 8009fa2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8009fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fa8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	4a5d      	ldr	r2, [pc, #372]	; (800a124 <USB_HC_StartXfer+0x198>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d12f      	bne.n	800a012 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8009fb2:	79fb      	ldrb	r3, [r7, #7]
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d11c      	bne.n	8009ff2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	7c9b      	ldrb	r3, [r3, #18]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d003      	beq.n	8009fc8 <USB_HC_StartXfer+0x3c>
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	7c9b      	ldrb	r3, [r3, #18]
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d124      	bne.n	800a012 <USB_HC_StartXfer+0x86>
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	799b      	ldrb	r3, [r3, #6]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d120      	bne.n	800a012 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	015a      	lsls	r2, r3, #5
 8009fd4:	6a3b      	ldr	r3, [r7, #32]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	69fa      	ldr	r2, [r7, #28]
 8009fe0:	0151      	lsls	r1, r2, #5
 8009fe2:	6a3a      	ldr	r2, [r7, #32]
 8009fe4:	440a      	add	r2, r1
 8009fe6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fee:	60d3      	str	r3, [r2, #12]
 8009ff0:	e00f      	b.n	800a012 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	791b      	ldrb	r3, [r3, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d10b      	bne.n	800a012 <USB_HC_StartXfer+0x86>
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	795b      	ldrb	r3, [r3, #5]
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d107      	bne.n	800a012 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	785b      	ldrb	r3, [r3, #1]
 800a006:	4619      	mov	r1, r3
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 fb6b 	bl	800a6e4 <USB_DoPing>
        return HAL_OK;
 800a00e:	2300      	movs	r3, #0
 800a010:	e232      	b.n	800a478 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	799b      	ldrb	r3, [r3, #6]
 800a016:	2b01      	cmp	r3, #1
 800a018:	d158      	bne.n	800a0cc <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800a01a:	2301      	movs	r3, #1
 800a01c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	78db      	ldrb	r3, [r3, #3]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d007      	beq.n	800a036 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a026:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a028:	68ba      	ldr	r2, [r7, #8]
 800a02a:	8a92      	ldrh	r2, [r2, #20]
 800a02c:	fb03 f202 	mul.w	r2, r3, r2
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	61da      	str	r2, [r3, #28]
 800a034:	e07c      	b.n	800a130 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	7c9b      	ldrb	r3, [r3, #18]
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d130      	bne.n	800a0a0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	2bbc      	cmp	r3, #188	; 0xbc
 800a044:	d918      	bls.n	800a078 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	8a9b      	ldrh	r3, [r3, #20]
 800a04a:	461a      	mov	r2, r3
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	69da      	ldr	r2, [r3, #28]
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d003      	beq.n	800a068 <USB_HC_StartXfer+0xdc>
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	2b02      	cmp	r3, #2
 800a066:	d103      	bne.n	800a070 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	2202      	movs	r2, #2
 800a06c:	60da      	str	r2, [r3, #12]
 800a06e:	e05f      	b.n	800a130 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	2201      	movs	r2, #1
 800a074:	60da      	str	r2, [r3, #12]
 800a076:	e05b      	b.n	800a130 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	6a1a      	ldr	r2, [r3, #32]
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	2b01      	cmp	r3, #1
 800a086:	d007      	beq.n	800a098 <USB_HC_StartXfer+0x10c>
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	d003      	beq.n	800a098 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	2204      	movs	r2, #4
 800a094:	60da      	str	r2, [r3, #12]
 800a096:	e04b      	b.n	800a130 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	2203      	movs	r2, #3
 800a09c:	60da      	str	r2, [r3, #12]
 800a09e:	e047      	b.n	800a130 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800a0a0:	79fb      	ldrb	r3, [r7, #7]
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d10d      	bne.n	800a0c2 <USB_HC_StartXfer+0x136>
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	6a1b      	ldr	r3, [r3, #32]
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	8a92      	ldrh	r2, [r2, #20]
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d907      	bls.n	800a0c2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a0b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	8a92      	ldrh	r2, [r2, #20]
 800a0b8:	fb03 f202 	mul.w	r2, r3, r2
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	61da      	str	r2, [r3, #28]
 800a0c0:	e036      	b.n	800a130 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	6a1a      	ldr	r2, [r3, #32]
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	61da      	str	r2, [r3, #28]
 800a0ca:	e031      	b.n	800a130 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	6a1b      	ldr	r3, [r3, #32]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d018      	beq.n	800a106 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	6a1b      	ldr	r3, [r3, #32]
 800a0d8:	68ba      	ldr	r2, [r7, #8]
 800a0da:	8a92      	ldrh	r2, [r2, #20]
 800a0dc:	4413      	add	r3, r2
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	68ba      	ldr	r2, [r7, #8]
 800a0e2:	8a92      	ldrh	r2, [r2, #20]
 800a0e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0e8:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 800a0ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a0ec:	8b7b      	ldrh	r3, [r7, #26]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d90b      	bls.n	800a10a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800a0f2:	8b7b      	ldrh	r3, [r7, #26]
 800a0f4:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a0f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0f8:	68ba      	ldr	r2, [r7, #8]
 800a0fa:	8a92      	ldrh	r2, [r2, #20]
 800a0fc:	fb03 f202 	mul.w	r2, r3, r2
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	61da      	str	r2, [r3, #28]
 800a104:	e001      	b.n	800a10a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800a106:	2301      	movs	r3, #1
 800a108:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	78db      	ldrb	r3, [r3, #3]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00a      	beq.n	800a128 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a112:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a114:	68ba      	ldr	r2, [r7, #8]
 800a116:	8a92      	ldrh	r2, [r2, #20]
 800a118:	fb03 f202 	mul.w	r2, r3, r2
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	61da      	str	r2, [r3, #28]
 800a120:	e006      	b.n	800a130 <USB_HC_StartXfer+0x1a4>
 800a122:	bf00      	nop
 800a124:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	6a1a      	ldr	r2, [r3, #32]
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	69db      	ldr	r3, [r3, #28]
 800a134:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a138:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a13a:	04d9      	lsls	r1, r3, #19
 800a13c:	4ba3      	ldr	r3, [pc, #652]	; (800a3cc <USB_HC_StartXfer+0x440>)
 800a13e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a140:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	7d9b      	ldrb	r3, [r3, #22]
 800a146:	075b      	lsls	r3, r3, #29
 800a148:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a14c:	69f9      	ldr	r1, [r7, #28]
 800a14e:	0148      	lsls	r0, r1, #5
 800a150:	6a39      	ldr	r1, [r7, #32]
 800a152:	4401      	add	r1, r0
 800a154:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a158:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a15a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a15c:	79fb      	ldrb	r3, [r7, #7]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d009      	beq.n	800a176 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	6999      	ldr	r1, [r3, #24]
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	015a      	lsls	r2, r3, #5
 800a16a:	6a3b      	ldr	r3, [r7, #32]
 800a16c:	4413      	add	r3, r2
 800a16e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a172:	460a      	mov	r2, r1
 800a174:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a176:	6a3b      	ldr	r3, [r7, #32]
 800a178:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	f003 0301 	and.w	r3, r3, #1
 800a182:	2b00      	cmp	r3, #0
 800a184:	bf0c      	ite	eq
 800a186:	2301      	moveq	r3, #1
 800a188:	2300      	movne	r3, #0
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	015a      	lsls	r2, r3, #5
 800a192:	6a3b      	ldr	r3, [r7, #32]
 800a194:	4413      	add	r3, r2
 800a196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	69fa      	ldr	r2, [r7, #28]
 800a19e:	0151      	lsls	r1, r2, #5
 800a1a0:	6a3a      	ldr	r2, [r7, #32]
 800a1a2:	440a      	add	r2, r1
 800a1a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a1a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a1ac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	015a      	lsls	r2, r3, #5
 800a1b2:	6a3b      	ldr	r3, [r7, #32]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	7e7b      	ldrb	r3, [r7, #25]
 800a1be:	075b      	lsls	r3, r3, #29
 800a1c0:	69f9      	ldr	r1, [r7, #28]
 800a1c2:	0148      	lsls	r0, r1, #5
 800a1c4:	6a39      	ldr	r1, [r7, #32]
 800a1c6:	4401      	add	r1, r0
 800a1c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	799b      	ldrb	r3, [r3, #6]
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	f040 80c3 	bne.w	800a360 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	7c5b      	ldrb	r3, [r3, #17]
 800a1de:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a1e0:	68ba      	ldr	r2, [r7, #8]
 800a1e2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	69fa      	ldr	r2, [r7, #28]
 800a1e8:	0151      	lsls	r1, r2, #5
 800a1ea:	6a3a      	ldr	r2, [r7, #32]
 800a1ec:	440a      	add	r2, r1
 800a1ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a1f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a1f6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	015a      	lsls	r2, r3, #5
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	4413      	add	r3, r2
 800a200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	69fa      	ldr	r2, [r7, #28]
 800a208:	0151      	lsls	r1, r2, #5
 800a20a:	6a3a      	ldr	r2, [r7, #32]
 800a20c:	440a      	add	r2, r1
 800a20e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a212:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a216:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	79db      	ldrb	r3, [r3, #7]
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d123      	bne.n	800a268 <USB_HC_StartXfer+0x2dc>
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	78db      	ldrb	r3, [r3, #3]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d11f      	bne.n	800a268 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	015a      	lsls	r2, r3, #5
 800a22c:	6a3b      	ldr	r3, [r7, #32]
 800a22e:	4413      	add	r3, r2
 800a230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	69fa      	ldr	r2, [r7, #28]
 800a238:	0151      	lsls	r1, r2, #5
 800a23a:	6a3a      	ldr	r2, [r7, #32]
 800a23c:	440a      	add	r2, r1
 800a23e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a246:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	015a      	lsls	r2, r3, #5
 800a24c:	6a3b      	ldr	r3, [r7, #32]
 800a24e:	4413      	add	r3, r2
 800a250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	69fa      	ldr	r2, [r7, #28]
 800a258:	0151      	lsls	r1, r2, #5
 800a25a:	6a3a      	ldr	r2, [r7, #32]
 800a25c:	440a      	add	r2, r1
 800a25e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a266:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	7c9b      	ldrb	r3, [r3, #18]
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d003      	beq.n	800a278 <USB_HC_StartXfer+0x2ec>
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	7c9b      	ldrb	r3, [r3, #18]
 800a274:	2b03      	cmp	r3, #3
 800a276:	d117      	bne.n	800a2a8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d113      	bne.n	800a2a8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	78db      	ldrb	r3, [r3, #3]
 800a284:	2b01      	cmp	r3, #1
 800a286:	d10f      	bne.n	800a2a8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	015a      	lsls	r2, r3, #5
 800a28c:	6a3b      	ldr	r3, [r7, #32]
 800a28e:	4413      	add	r3, r2
 800a290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	69fa      	ldr	r2, [r7, #28]
 800a298:	0151      	lsls	r1, r2, #5
 800a29a:	6a3a      	ldr	r2, [r7, #32]
 800a29c:	440a      	add	r2, r1
 800a29e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2a6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	7c9b      	ldrb	r3, [r3, #18]
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d162      	bne.n	800a376 <USB_HC_StartXfer+0x3ea>
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	78db      	ldrb	r3, [r3, #3]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d15e      	bne.n	800a376 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	2b03      	cmp	r3, #3
 800a2c0:	d858      	bhi.n	800a374 <USB_HC_StartXfer+0x3e8>
 800a2c2:	a201      	add	r2, pc, #4	; (adr r2, 800a2c8 <USB_HC_StartXfer+0x33c>)
 800a2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c8:	0800a2d9 	.word	0x0800a2d9
 800a2cc:	0800a2fb 	.word	0x0800a2fb
 800a2d0:	0800a31d 	.word	0x0800a31d
 800a2d4:	0800a33f 	.word	0x0800a33f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	015a      	lsls	r2, r3, #5
 800a2dc:	6a3b      	ldr	r3, [r7, #32]
 800a2de:	4413      	add	r3, r2
 800a2e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	69fa      	ldr	r2, [r7, #28]
 800a2e8:	0151      	lsls	r1, r2, #5
 800a2ea:	6a3a      	ldr	r2, [r7, #32]
 800a2ec:	440a      	add	r2, r1
 800a2ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2f6:	6053      	str	r3, [r2, #4]
          break;
 800a2f8:	e03d      	b.n	800a376 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	015a      	lsls	r2, r3, #5
 800a2fe:	6a3b      	ldr	r3, [r7, #32]
 800a300:	4413      	add	r3, r2
 800a302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	69fa      	ldr	r2, [r7, #28]
 800a30a:	0151      	lsls	r1, r2, #5
 800a30c:	6a3a      	ldr	r2, [r7, #32]
 800a30e:	440a      	add	r2, r1
 800a310:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a314:	f043 030e 	orr.w	r3, r3, #14
 800a318:	6053      	str	r3, [r2, #4]
          break;
 800a31a:	e02c      	b.n	800a376 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	015a      	lsls	r2, r3, #5
 800a320:	6a3b      	ldr	r3, [r7, #32]
 800a322:	4413      	add	r3, r2
 800a324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	69fa      	ldr	r2, [r7, #28]
 800a32c:	0151      	lsls	r1, r2, #5
 800a32e:	6a3a      	ldr	r2, [r7, #32]
 800a330:	440a      	add	r2, r1
 800a332:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a336:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a33a:	6053      	str	r3, [r2, #4]
          break;
 800a33c:	e01b      	b.n	800a376 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	015a      	lsls	r2, r3, #5
 800a342:	6a3b      	ldr	r3, [r7, #32]
 800a344:	4413      	add	r3, r2
 800a346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	69fa      	ldr	r2, [r7, #28]
 800a34e:	0151      	lsls	r1, r2, #5
 800a350:	6a3a      	ldr	r2, [r7, #32]
 800a352:	440a      	add	r2, r1
 800a354:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a35c:	6053      	str	r3, [r2, #4]
          break;
 800a35e:	e00a      	b.n	800a376 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	015a      	lsls	r2, r3, #5
 800a364:	6a3b      	ldr	r3, [r7, #32]
 800a366:	4413      	add	r3, r2
 800a368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a36c:	461a      	mov	r2, r3
 800a36e:	2300      	movs	r3, #0
 800a370:	6053      	str	r3, [r2, #4]
 800a372:	e000      	b.n	800a376 <USB_HC_StartXfer+0x3ea>
          break;
 800a374:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a376:	69fb      	ldr	r3, [r7, #28]
 800a378:	015a      	lsls	r2, r3, #5
 800a37a:	6a3b      	ldr	r3, [r7, #32]
 800a37c:	4413      	add	r3, r2
 800a37e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a38c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	78db      	ldrb	r3, [r3, #3]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d004      	beq.n	800a3a0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a39c:	613b      	str	r3, [r7, #16]
 800a39e:	e003      	b.n	800a3a8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a3a6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a3ae:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	015a      	lsls	r2, r3, #5
 800a3b4:	6a3b      	ldr	r3, [r7, #32]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3bc:	461a      	mov	r2, r3
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a3c2:	79fb      	ldrb	r3, [r7, #7]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d003      	beq.n	800a3d0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	e055      	b.n	800a478 <USB_HC_StartXfer+0x4ec>
 800a3cc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	78db      	ldrb	r3, [r3, #3]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d14e      	bne.n	800a476 <USB_HC_StartXfer+0x4ea>
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	6a1b      	ldr	r3, [r3, #32]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d04a      	beq.n	800a476 <USB_HC_StartXfer+0x4ea>
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	79db      	ldrb	r3, [r3, #7]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d146      	bne.n	800a476 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	7c9b      	ldrb	r3, [r3, #18]
 800a3ec:	2b03      	cmp	r3, #3
 800a3ee:	d831      	bhi.n	800a454 <USB_HC_StartXfer+0x4c8>
 800a3f0:	a201      	add	r2, pc, #4	; (adr r2, 800a3f8 <USB_HC_StartXfer+0x46c>)
 800a3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f6:	bf00      	nop
 800a3f8:	0800a409 	.word	0x0800a409
 800a3fc:	0800a42d 	.word	0x0800a42d
 800a400:	0800a409 	.word	0x0800a409
 800a404:	0800a42d 	.word	0x0800a42d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	6a1b      	ldr	r3, [r3, #32]
 800a40c:	3303      	adds	r3, #3
 800a40e:	089b      	lsrs	r3, r3, #2
 800a410:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a412:	8afa      	ldrh	r2, [r7, #22]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a418:	b29b      	uxth	r3, r3
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d91c      	bls.n	800a458 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	699b      	ldr	r3, [r3, #24]
 800a422:	f043 0220 	orr.w	r2, r3, #32
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	619a      	str	r2, [r3, #24]
        }
        break;
 800a42a:	e015      	b.n	800a458 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	6a1b      	ldr	r3, [r3, #32]
 800a430:	3303      	adds	r3, #3
 800a432:	089b      	lsrs	r3, r3, #2
 800a434:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a436:	8afa      	ldrh	r2, [r7, #22]
 800a438:	6a3b      	ldr	r3, [r7, #32]
 800a43a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a43e:	691b      	ldr	r3, [r3, #16]
 800a440:	b29b      	uxth	r3, r3
 800a442:	429a      	cmp	r2, r3
 800a444:	d90a      	bls.n	800a45c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	699b      	ldr	r3, [r3, #24]
 800a44a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	619a      	str	r2, [r3, #24]
        }
        break;
 800a452:	e003      	b.n	800a45c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800a454:	bf00      	nop
 800a456:	e002      	b.n	800a45e <USB_HC_StartXfer+0x4d2>
        break;
 800a458:	bf00      	nop
 800a45a:	e000      	b.n	800a45e <USB_HC_StartXfer+0x4d2>
        break;
 800a45c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	6999      	ldr	r1, [r3, #24]
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	785a      	ldrb	r2, [r3, #1]
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	6a1b      	ldr	r3, [r3, #32]
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	2000      	movs	r0, #0
 800a46e:	9000      	str	r0, [sp, #0]
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f7ff f9b4 	bl	80097de <USB_WritePacket>
  }

  return HAL_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3728      	adds	r7, #40	; 0x28
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a480:	b480      	push	{r7}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a492:	695b      	ldr	r3, [r3, #20]
 800a494:	b29b      	uxth	r3, r3
}
 800a496:	4618      	mov	r0, r3
 800a498:	3714      	adds	r7, #20
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b089      	sub	sp, #36	; 0x24
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a4b2:	78fb      	ldrb	r3, [r7, #3]
 800a4b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	015a      	lsls	r2, r3, #5
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	0c9b      	lsrs	r3, r3, #18
 800a4ca:	f003 0303 	and.w	r3, r3, #3
 800a4ce:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	015a      	lsls	r2, r3, #5
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	0fdb      	lsrs	r3, r3, #31
 800a4e0:	f003 0301 	and.w	r3, r3, #1
 800a4e4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	015a      	lsls	r2, r3, #5
 800a4ea:	69fb      	ldr	r3, [r7, #28]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	0fdb      	lsrs	r3, r3, #31
 800a4f6:	f003 0301 	and.w	r3, r3, #1
 800a4fa:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	f003 0320 	and.w	r3, r3, #32
 800a504:	2b20      	cmp	r3, #32
 800a506:	d10d      	bne.n	800a524 <USB_HC_Halt+0x82>
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d10a      	bne.n	800a524 <USB_HC_Halt+0x82>
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d005      	beq.n	800a520 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	2b01      	cmp	r3, #1
 800a518:	d002      	beq.n	800a520 <USB_HC_Halt+0x7e>
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	2b03      	cmp	r3, #3
 800a51e:	d101      	bne.n	800a524 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800a520:	2300      	movs	r3, #0
 800a522:	e0d8      	b.n	800a6d6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d002      	beq.n	800a530 <USB_HC_Halt+0x8e>
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d173      	bne.n	800a618 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	015a      	lsls	r2, r3, #5
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	4413      	add	r3, r2
 800a538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	69ba      	ldr	r2, [r7, #24]
 800a540:	0151      	lsls	r1, r2, #5
 800a542:	69fa      	ldr	r2, [r7, #28]
 800a544:	440a      	add	r2, r1
 800a546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a54a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a54e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	f003 0320 	and.w	r3, r3, #32
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d14a      	bne.n	800a5f2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a560:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a564:	2b00      	cmp	r3, #0
 800a566:	d133      	bne.n	800a5d0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	015a      	lsls	r2, r3, #5
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	4413      	add	r3, r2
 800a570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	69ba      	ldr	r2, [r7, #24]
 800a578:	0151      	lsls	r1, r2, #5
 800a57a:	69fa      	ldr	r2, [r7, #28]
 800a57c:	440a      	add	r2, r1
 800a57e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a582:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a586:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	015a      	lsls	r2, r3, #5
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	4413      	add	r3, r2
 800a590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	69ba      	ldr	r2, [r7, #24]
 800a598:	0151      	lsls	r1, r2, #5
 800a59a:	69fa      	ldr	r2, [r7, #28]
 800a59c:	440a      	add	r2, r1
 800a59e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a5a6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a5b4:	d82e      	bhi.n	800a614 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	015a      	lsls	r2, r3, #5
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	4413      	add	r3, r2
 800a5be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5cc:	d0ec      	beq.n	800a5a8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a5ce:	e081      	b.n	800a6d4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	015a      	lsls	r2, r3, #5
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	69ba      	ldr	r2, [r7, #24]
 800a5e0:	0151      	lsls	r1, r2, #5
 800a5e2:	69fa      	ldr	r2, [r7, #28]
 800a5e4:	440a      	add	r2, r1
 800a5e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a5ee:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a5f0:	e070      	b.n	800a6d4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a5f2:	69bb      	ldr	r3, [r7, #24]
 800a5f4:	015a      	lsls	r2, r3, #5
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	69ba      	ldr	r2, [r7, #24]
 800a602:	0151      	lsls	r1, r2, #5
 800a604:	69fa      	ldr	r2, [r7, #28]
 800a606:	440a      	add	r2, r1
 800a608:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a60c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a610:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a612:	e05f      	b.n	800a6d4 <USB_HC_Halt+0x232>
            break;
 800a614:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a616:	e05d      	b.n	800a6d4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	015a      	lsls	r2, r3, #5
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	4413      	add	r3, r2
 800a620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	69ba      	ldr	r2, [r7, #24]
 800a628:	0151      	lsls	r1, r2, #5
 800a62a:	69fa      	ldr	r2, [r7, #28]
 800a62c:	440a      	add	r2, r1
 800a62e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a632:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a636:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a638:	69fb      	ldr	r3, [r7, #28]
 800a63a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a63e:	691b      	ldr	r3, [r3, #16]
 800a640:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a644:	2b00      	cmp	r3, #0
 800a646:	d133      	bne.n	800a6b0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	015a      	lsls	r2, r3, #5
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	4413      	add	r3, r2
 800a650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	69ba      	ldr	r2, [r7, #24]
 800a658:	0151      	lsls	r1, r2, #5
 800a65a:	69fa      	ldr	r2, [r7, #28]
 800a65c:	440a      	add	r2, r1
 800a65e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a662:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a666:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a668:	69bb      	ldr	r3, [r7, #24]
 800a66a:	015a      	lsls	r2, r3, #5
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	4413      	add	r3, r2
 800a670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	69ba      	ldr	r2, [r7, #24]
 800a678:	0151      	lsls	r1, r2, #5
 800a67a:	69fa      	ldr	r2, [r7, #28]
 800a67c:	440a      	add	r2, r1
 800a67e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a682:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a686:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	3301      	adds	r3, #1
 800a68c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a694:	d81d      	bhi.n	800a6d2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a696:	69bb      	ldr	r3, [r7, #24]
 800a698:	015a      	lsls	r2, r3, #5
 800a69a:	69fb      	ldr	r3, [r7, #28]
 800a69c:	4413      	add	r3, r2
 800a69e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6ac:	d0ec      	beq.n	800a688 <USB_HC_Halt+0x1e6>
 800a6ae:	e011      	b.n	800a6d4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	015a      	lsls	r2, r3, #5
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	4413      	add	r3, r2
 800a6b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	69ba      	ldr	r2, [r7, #24]
 800a6c0:	0151      	lsls	r1, r2, #5
 800a6c2:	69fa      	ldr	r2, [r7, #28]
 800a6c4:	440a      	add	r2, r1
 800a6c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a6ce:	6013      	str	r3, [r2, #0]
 800a6d0:	e000      	b.n	800a6d4 <USB_HC_Halt+0x232>
          break;
 800a6d2:	bf00      	nop
    }
  }

  return HAL_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3724      	adds	r7, #36	; 0x24
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
	...

0800a6e4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b087      	sub	sp, #28
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a6f4:	78fb      	ldrb	r3, [r7, #3]
 800a6f6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	04da      	lsls	r2, r3, #19
 800a700:	4b15      	ldr	r3, [pc, #84]	; (800a758 <USB_DoPing+0x74>)
 800a702:	4013      	ands	r3, r2
 800a704:	693a      	ldr	r2, [r7, #16]
 800a706:	0151      	lsls	r1, r2, #5
 800a708:	697a      	ldr	r2, [r7, #20]
 800a70a:	440a      	add	r2, r1
 800a70c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a710:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a714:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	015a      	lsls	r2, r3, #5
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	4413      	add	r3, r2
 800a71e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a72c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a734:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	015a      	lsls	r2, r3, #5
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	4413      	add	r3, r2
 800a73e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a742:	461a      	mov	r2, r3
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a748:	2300      	movs	r3, #0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	371c      	adds	r7, #28
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop
 800a758:	1ff80000 	.word	0x1ff80000

0800a75c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b088      	sub	sp, #32
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a764:	2300      	movs	r3, #0
 800a766:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a76c:	2300      	movs	r3, #0
 800a76e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f7fe fe00 	bl	8009376 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a776:	2110      	movs	r1, #16
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f7fe ffb7 	bl	80096ec <USB_FlushTxFifo>
 800a77e:	4603      	mov	r3, r0
 800a780:	2b00      	cmp	r3, #0
 800a782:	d001      	beq.n	800a788 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f7fe ffe1 	bl	8009750 <USB_FlushRxFifo>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a798:	2300      	movs	r3, #0
 800a79a:	61bb      	str	r3, [r7, #24]
 800a79c:	e01f      	b.n	800a7de <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	015a      	lsls	r2, r3, #5
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7bc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a7c4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a7c6:	69bb      	ldr	r3, [r7, #24]
 800a7c8:	015a      	lsls	r2, r3, #5
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a7d8:	69bb      	ldr	r3, [r7, #24]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	61bb      	str	r3, [r7, #24]
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	2b0f      	cmp	r3, #15
 800a7e2:	d9dc      	bls.n	800a79e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	61bb      	str	r3, [r7, #24]
 800a7e8:	e034      	b.n	800a854 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	015a      	lsls	r2, r3, #5
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a800:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a808:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a810:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	015a      	lsls	r2, r3, #5
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	4413      	add	r3, r2
 800a81a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a81e:	461a      	mov	r2, r3
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	3301      	adds	r3, #1
 800a828:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a830:	d80c      	bhi.n	800a84c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	015a      	lsls	r2, r3, #5
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	4413      	add	r3, r2
 800a83a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a844:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a848:	d0ec      	beq.n	800a824 <USB_StopHost+0xc8>
 800a84a:	e000      	b.n	800a84e <USB_StopHost+0xf2>
        break;
 800a84c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	3301      	adds	r3, #1
 800a852:	61bb      	str	r3, [r7, #24]
 800a854:	69bb      	ldr	r3, [r7, #24]
 800a856:	2b0f      	cmp	r3, #15
 800a858:	d9c7      	bls.n	800a7ea <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a860:	461a      	mov	r2, r3
 800a862:	f04f 33ff 	mov.w	r3, #4294967295
 800a866:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f04f 32ff 	mov.w	r2, #4294967295
 800a86e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f7fe fd6f 	bl	8009354 <USB_EnableGlobalInt>

  return ret;
 800a876:	7ffb      	ldrb	r3, [r7, #31]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3720      	adds	r7, #32
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800a884:	4904      	ldr	r1, [pc, #16]	; (800a898 <MX_FATFS_Init+0x18>)
 800a886:	4805      	ldr	r0, [pc, #20]	; (800a89c <MX_FATFS_Init+0x1c>)
 800a888:	f003 fa00 	bl	800dc8c <FATFS_LinkDriver>
 800a88c:	4603      	mov	r3, r0
 800a88e:	461a      	mov	r2, r3
 800a890:	4b03      	ldr	r3, [pc, #12]	; (800a8a0 <MX_FATFS_Init+0x20>)
 800a892:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a894:	bf00      	nop
 800a896:	bd80      	pop	{r7, pc}
 800a898:	2000090c 	.word	0x2000090c
 800a89c:	0800f258 	.word	0x0800f258
 800a8a0:	20000908 	.word	0x20000908

0800a8a4 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800a8ca:	79fb      	ldrb	r3, [r7, #7]
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	4808      	ldr	r0, [pc, #32]	; (800a8f0 <USBH_status+0x34>)
 800a8d0:	f000 fe32 	bl	800b538 <USBH_MSC_UnitIsReady>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d002      	beq.n	800a8e0 <USBH_status+0x24>
  {
    res = RES_OK;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	73fb      	strb	r3, [r7, #15]
 800a8de:	e001      	b.n	800a8e4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a8e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3710      	adds	r7, #16
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	2000091c 	.word	0x2000091c

0800a8f4 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b094      	sub	sp, #80	; 0x50
 800a8f8:	af02      	add	r7, sp, #8
 800a8fa:	60b9      	str	r1, [r7, #8]
 800a8fc:	607a      	str	r2, [r7, #4]
 800a8fe:	603b      	str	r3, [r7, #0]
 800a900:	4603      	mov	r3, r0
 800a902:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a904:	2301      	movs	r3, #1
 800a906:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800a90a:	7bf9      	ldrb	r1, [r7, #15]
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	4813      	ldr	r0, [pc, #76]	; (800a964 <USBH_read+0x70>)
 800a916:	f000 fe59 	bl	800b5cc <USBH_MSC_Read>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d103      	bne.n	800a928 <USBH_read+0x34>
  {
    res = RES_OK;
 800a920:	2300      	movs	r3, #0
 800a922:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a926:	e017      	b.n	800a958 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a928:	f107 0210 	add.w	r2, r7, #16
 800a92c:	7bfb      	ldrb	r3, [r7, #15]
 800a92e:	4619      	mov	r1, r3
 800a930:	480c      	ldr	r0, [pc, #48]	; (800a964 <USBH_read+0x70>)
 800a932:	f000 fe27 	bl	800b584 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a936:	7f7b      	ldrb	r3, [r7, #29]
 800a938:	2b3a      	cmp	r3, #58	; 0x3a
 800a93a:	d005      	beq.n	800a948 <USBH_read+0x54>
 800a93c:	2b3a      	cmp	r3, #58	; 0x3a
 800a93e:	dc07      	bgt.n	800a950 <USBH_read+0x5c>
 800a940:	2b04      	cmp	r3, #4
 800a942:	d001      	beq.n	800a948 <USBH_read+0x54>
 800a944:	2b28      	cmp	r3, #40	; 0x28
 800a946:	d103      	bne.n	800a950 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a948:	2303      	movs	r3, #3
 800a94a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a94e:	e003      	b.n	800a958 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a956:	bf00      	nop
    }
  }

  return res;
 800a958:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3748      	adds	r7, #72	; 0x48
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	2000091c 	.word	0x2000091c

0800a968 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b094      	sub	sp, #80	; 0x50
 800a96c:	af02      	add	r7, sp, #8
 800a96e:	60b9      	str	r1, [r7, #8]
 800a970:	607a      	str	r2, [r7, #4]
 800a972:	603b      	str	r3, [r7, #0]
 800a974:	4603      	mov	r3, r0
 800a976:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800a97e:	7bf9      	ldrb	r1, [r7, #15]
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	9300      	str	r3, [sp, #0]
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	4817      	ldr	r0, [pc, #92]	; (800a9e8 <USBH_write+0x80>)
 800a98a:	f000 fe88 	bl	800b69e <USBH_MSC_Write>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d103      	bne.n	800a99c <USBH_write+0x34>
  {
    res = RES_OK;
 800a994:	2300      	movs	r3, #0
 800a996:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a99a:	e01f      	b.n	800a9dc <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a99c:	f107 0210 	add.w	r2, r7, #16
 800a9a0:	7bfb      	ldrb	r3, [r7, #15]
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	4810      	ldr	r0, [pc, #64]	; (800a9e8 <USBH_write+0x80>)
 800a9a6:	f000 fded 	bl	800b584 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a9aa:	7f7b      	ldrb	r3, [r7, #29]
 800a9ac:	2b3a      	cmp	r3, #58	; 0x3a
 800a9ae:	d00d      	beq.n	800a9cc <USBH_write+0x64>
 800a9b0:	2b3a      	cmp	r3, #58	; 0x3a
 800a9b2:	dc0f      	bgt.n	800a9d4 <USBH_write+0x6c>
 800a9b4:	2b28      	cmp	r3, #40	; 0x28
 800a9b6:	d009      	beq.n	800a9cc <USBH_write+0x64>
 800a9b8:	2b28      	cmp	r3, #40	; 0x28
 800a9ba:	dc0b      	bgt.n	800a9d4 <USBH_write+0x6c>
 800a9bc:	2b04      	cmp	r3, #4
 800a9be:	d005      	beq.n	800a9cc <USBH_write+0x64>
 800a9c0:	2b27      	cmp	r3, #39	; 0x27
 800a9c2:	d107      	bne.n	800a9d4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a9ca:	e007      	b.n	800a9dc <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a9cc:	2303      	movs	r3, #3
 800a9ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a9d2:	e003      	b.n	800a9dc <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a9da:	bf00      	nop
    }
  }

  return res;
 800a9dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3748      	adds	r7, #72	; 0x48
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	2000091c 	.word	0x2000091c

0800a9ec <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b090      	sub	sp, #64	; 0x40
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	603a      	str	r2, [r7, #0]
 800a9f6:	71fb      	strb	r3, [r7, #7]
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800aa02:	79bb      	ldrb	r3, [r7, #6]
 800aa04:	2b03      	cmp	r3, #3
 800aa06:	d852      	bhi.n	800aaae <USBH_ioctl+0xc2>
 800aa08:	a201      	add	r2, pc, #4	; (adr r2, 800aa10 <USBH_ioctl+0x24>)
 800aa0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa0e:	bf00      	nop
 800aa10:	0800aa21 	.word	0x0800aa21
 800aa14:	0800aa29 	.word	0x0800aa29
 800aa18:	0800aa53 	.word	0x0800aa53
 800aa1c:	0800aa7f 	.word	0x0800aa7f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800aa20:	2300      	movs	r3, #0
 800aa22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800aa26:	e045      	b.n	800aab4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800aa28:	f107 0208 	add.w	r2, r7, #8
 800aa2c:	79fb      	ldrb	r3, [r7, #7]
 800aa2e:	4619      	mov	r1, r3
 800aa30:	4823      	ldr	r0, [pc, #140]	; (800aac0 <USBH_ioctl+0xd4>)
 800aa32:	f000 fda7 	bl	800b584 <USBH_MSC_GetLUNInfo>
 800aa36:	4603      	mov	r3, r0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d106      	bne.n	800aa4a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800aa42:	2300      	movs	r3, #0
 800aa44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800aa48:	e034      	b.n	800aab4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800aa50:	e030      	b.n	800aab4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800aa52:	f107 0208 	add.w	r2, r7, #8
 800aa56:	79fb      	ldrb	r3, [r7, #7]
 800aa58:	4619      	mov	r1, r3
 800aa5a:	4819      	ldr	r0, [pc, #100]	; (800aac0 <USBH_ioctl+0xd4>)
 800aa5c:	f000 fd92 	bl	800b584 <USBH_MSC_GetLUNInfo>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d107      	bne.n	800aa76 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800aa66:	8a3b      	ldrh	r3, [r7, #16]
 800aa68:	461a      	mov	r2, r3
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800aa74:	e01e      	b.n	800aab4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800aa76:	2301      	movs	r3, #1
 800aa78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800aa7c:	e01a      	b.n	800aab4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800aa7e:	f107 0208 	add.w	r2, r7, #8
 800aa82:	79fb      	ldrb	r3, [r7, #7]
 800aa84:	4619      	mov	r1, r3
 800aa86:	480e      	ldr	r0, [pc, #56]	; (800aac0 <USBH_ioctl+0xd4>)
 800aa88:	f000 fd7c 	bl	800b584 <USBH_MSC_GetLUNInfo>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d109      	bne.n	800aaa6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800aa92:	8a3b      	ldrh	r3, [r7, #16]
 800aa94:	0a5b      	lsrs	r3, r3, #9
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	461a      	mov	r2, r3
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800aaa4:	e006      	b.n	800aab4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800aaac:	e002      	b.n	800aab4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800aaae:	2304      	movs	r3, #4
 800aab0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800aab4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3740      	adds	r7, #64	; 0x40
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	2000091c 	.word	0x2000091c

0800aac4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800aac4:	b590      	push	{r4, r7, lr}
 800aac6:	b089      	sub	sp, #36	; 0x24
 800aac8:	af04      	add	r7, sp, #16
 800aaca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aad2:	7919      	ldrb	r1, [r3, #4]
 800aad4:	2350      	movs	r3, #80	; 0x50
 800aad6:	2206      	movs	r2, #6
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f001 fc8a 	bl	800c3f2 <USBH_FindInterface>
 800aade:	4603      	mov	r3, r0
 800aae0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800aae2:	7bfb      	ldrb	r3, [r7, #15]
 800aae4:	2bff      	cmp	r3, #255	; 0xff
 800aae6:	d002      	beq.n	800aaee <USBH_MSC_InterfaceInit+0x2a>
 800aae8:	7bfb      	ldrb	r3, [r7, #15]
 800aaea:	2b01      	cmp	r3, #1
 800aaec:	d901      	bls.n	800aaf2 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800aaee:	2302      	movs	r3, #2
 800aaf0:	e106      	b.n	800ad00 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800aaf2:	7bfb      	ldrb	r3, [r7, #15]
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f001 fc5f 	bl	800c3ba <USBH_SelectInterface>
 800aafc:	4603      	mov	r3, r0
 800aafe:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800ab00:	7bbb      	ldrb	r3, [r7, #14]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d001      	beq.n	800ab0a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800ab06:	2302      	movs	r3, #2
 800ab08:	e0fa      	b.n	800ad00 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800ab10:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ab14:	f004 fa2a 	bl	800ef6c <malloc>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab22:	69db      	ldr	r3, [r3, #28]
 800ab24:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d101      	bne.n	800ab30 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800ab2c:	2302      	movs	r3, #2
 800ab2e:	e0e7      	b.n	800ad00 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800ab30:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab34:	2100      	movs	r1, #0
 800ab36:	68b8      	ldr	r0, [r7, #8]
 800ab38:	f004 fad4 	bl	800f0e4 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ab3c:	7bfb      	ldrb	r3, [r7, #15]
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	211a      	movs	r1, #26
 800ab42:	fb01 f303 	mul.w	r3, r1, r3
 800ab46:	4413      	add	r3, r2
 800ab48:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	b25b      	sxtb	r3, r3
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	da16      	bge.n	800ab82 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800ab54:	7bfb      	ldrb	r3, [r7, #15]
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	211a      	movs	r1, #26
 800ab5a:	fb01 f303 	mul.w	r3, r1, r3
 800ab5e:	4413      	add	r3, r2
 800ab60:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ab64:	781a      	ldrb	r2, [r3, #0]
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ab6a:	7bfb      	ldrb	r3, [r7, #15]
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	211a      	movs	r1, #26
 800ab70:	fb01 f303 	mul.w	r3, r1, r3
 800ab74:	4413      	add	r3, r2
 800ab76:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ab7a:	881a      	ldrh	r2, [r3, #0]
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	815a      	strh	r2, [r3, #10]
 800ab80:	e015      	b.n	800abae <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800ab82:	7bfb      	ldrb	r3, [r7, #15]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	211a      	movs	r1, #26
 800ab88:	fb01 f303 	mul.w	r3, r1, r3
 800ab8c:	4413      	add	r3, r2
 800ab8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ab92:	781a      	ldrb	r2, [r3, #0]
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ab98:	7bfb      	ldrb	r3, [r7, #15]
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	211a      	movs	r1, #26
 800ab9e:	fb01 f303 	mul.w	r3, r1, r3
 800aba2:	4413      	add	r3, r2
 800aba4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800aba8:	881a      	ldrh	r2, [r3, #0]
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800abae:	7bfb      	ldrb	r3, [r7, #15]
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	211a      	movs	r1, #26
 800abb4:	fb01 f303 	mul.w	r3, r1, r3
 800abb8:	4413      	add	r3, r2
 800abba:	f203 3356 	addw	r3, r3, #854	; 0x356
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	b25b      	sxtb	r3, r3
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	da16      	bge.n	800abf4 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800abc6:	7bfb      	ldrb	r3, [r7, #15]
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	211a      	movs	r1, #26
 800abcc:	fb01 f303 	mul.w	r3, r1, r3
 800abd0:	4413      	add	r3, r2
 800abd2:	f203 3356 	addw	r3, r3, #854	; 0x356
 800abd6:	781a      	ldrb	r2, [r3, #0]
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800abdc:	7bfb      	ldrb	r3, [r7, #15]
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	211a      	movs	r1, #26
 800abe2:	fb01 f303 	mul.w	r3, r1, r3
 800abe6:	4413      	add	r3, r2
 800abe8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800abec:	881a      	ldrh	r2, [r3, #0]
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	815a      	strh	r2, [r3, #10]
 800abf2:	e015      	b.n	800ac20 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800abf4:	7bfb      	ldrb	r3, [r7, #15]
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	211a      	movs	r1, #26
 800abfa:	fb01 f303 	mul.w	r3, r1, r3
 800abfe:	4413      	add	r3, r2
 800ac00:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ac04:	781a      	ldrb	r2, [r3, #0]
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ac0a:	7bfb      	ldrb	r3, [r7, #15]
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	211a      	movs	r1, #26
 800ac10:	fb01 f303 	mul.w	r3, r1, r3
 800ac14:	4413      	add	r3, r2
 800ac16:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ac1a:	881a      	ldrh	r2, [r3, #0]
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	2200      	movs	r2, #0
 800ac24:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	799b      	ldrb	r3, [r3, #6]
 800ac36:	4619      	mov	r1, r3
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f002 ff78 	bl	800db2e <USBH_AllocPipe>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	461a      	mov	r2, r3
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	79db      	ldrb	r3, [r3, #7]
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f002 ff6e 	bl	800db2e <USBH_AllocPipe>
 800ac52:	4603      	mov	r3, r0
 800ac54:	461a      	mov	r2, r3
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 fdc4 	bl	800b7e8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	799b      	ldrb	r3, [r3, #6]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d01e      	beq.n	800aca6 <USBH_MSC_InterfaceInit+0x1e2>
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	891b      	ldrh	r3, [r3, #8]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d01a      	beq.n	800aca6 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	7959      	ldrb	r1, [r3, #5]
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	7998      	ldrb	r0, [r3, #6]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ac84:	68ba      	ldr	r2, [r7, #8]
 800ac86:	8912      	ldrh	r2, [r2, #8]
 800ac88:	9202      	str	r2, [sp, #8]
 800ac8a:	2202      	movs	r2, #2
 800ac8c:	9201      	str	r2, [sp, #4]
 800ac8e:	9300      	str	r3, [sp, #0]
 800ac90:	4623      	mov	r3, r4
 800ac92:	4602      	mov	r2, r0
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f002 ff1b 	bl	800dad0 <USBH_OpenPipe>
 800ac9a:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	79db      	ldrb	r3, [r3, #7]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d02c      	beq.n	800acfe <USBH_MSC_InterfaceInit+0x23a>
 800aca4:	e001      	b.n	800acaa <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800aca6:	2303      	movs	r3, #3
 800aca8:	e02a      	b.n	800ad00 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	895b      	ldrh	r3, [r3, #10]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d025      	beq.n	800acfe <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	7919      	ldrb	r1, [r3, #4]
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	79d8      	ldrb	r0, [r3, #7]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800acc6:	68ba      	ldr	r2, [r7, #8]
 800acc8:	8952      	ldrh	r2, [r2, #10]
 800acca:	9202      	str	r2, [sp, #8]
 800accc:	2202      	movs	r2, #2
 800acce:	9201      	str	r2, [sp, #4]
 800acd0:	9300      	str	r3, [sp, #0]
 800acd2:	4623      	mov	r3, r4
 800acd4:	4602      	mov	r2, r0
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f002 fefa 	bl	800dad0 <USBH_OpenPipe>
 800acdc:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	791b      	ldrb	r3, [r3, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	4619      	mov	r1, r3
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f003 fa63 	bl	800e1b2 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	795b      	ldrb	r3, [r3, #5]
 800acf0:	2200      	movs	r2, #0
 800acf2:	4619      	mov	r1, r3
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f003 fa5c 	bl	800e1b2 <USBH_LL_SetToggle>

  return USBH_OK;
 800acfa:	2300      	movs	r3, #0
 800acfc:	e000      	b.n	800ad00 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800acfe:	2303      	movs	r3, #3
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3714      	adds	r7, #20
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd90      	pop	{r4, r7, pc}

0800ad08 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad16:	69db      	ldr	r3, [r3, #28]
 800ad18:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	795b      	ldrb	r3, [r3, #5]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00e      	beq.n	800ad40 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	795b      	ldrb	r3, [r3, #5]
 800ad26:	4619      	mov	r1, r3
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f002 fef0 	bl	800db0e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	795b      	ldrb	r3, [r3, #5]
 800ad32:	4619      	mov	r1, r3
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f002 ff1b 	bl	800db70 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	791b      	ldrb	r3, [r3, #4]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d00e      	beq.n	800ad66 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	791b      	ldrb	r3, [r3, #4]
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f002 fedd 	bl	800db0e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	791b      	ldrb	r3, [r3, #4]
 800ad58:	4619      	mov	r1, r3
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f002 ff08 	bl	800db70 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2200      	movs	r2, #0
 800ad64:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad6c:	69db      	ldr	r3, [r3, #28]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d00b      	beq.n	800ad8a <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad78:	69db      	ldr	r3, [r3, #28]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f004 f8fe 	bl	800ef7c <free>
    phost->pActiveClass->pData = 0U;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad86:	2200      	movs	r2, #0
 800ad88:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800ad8a:	2300      	movs	r3, #0
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3710      	adds	r7, #16
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ada2:	69db      	ldr	r3, [r3, #28]
 800ada4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ada6:	2301      	movs	r3, #1
 800ada8:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	7b9b      	ldrb	r3, [r3, #14]
 800adae:	2b03      	cmp	r3, #3
 800adb0:	d041      	beq.n	800ae36 <USBH_MSC_ClassRequest+0xa2>
 800adb2:	2b03      	cmp	r3, #3
 800adb4:	dc4b      	bgt.n	800ae4e <USBH_MSC_ClassRequest+0xba>
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d001      	beq.n	800adbe <USBH_MSC_ClassRequest+0x2a>
 800adba:	2b02      	cmp	r3, #2
 800adbc:	d147      	bne.n	800ae4e <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	4619      	mov	r1, r3
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 fcf1 	bl	800b7aa <USBH_MSC_BOT_REQ_GetMaxLUN>
 800adc8:	4603      	mov	r3, r0
 800adca:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800adcc:	7bfb      	ldrb	r3, [r7, #15]
 800adce:	2b03      	cmp	r3, #3
 800add0:	d104      	bne.n	800addc <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	2200      	movs	r2, #0
 800add6:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800add8:	2300      	movs	r3, #0
 800adda:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800addc:	7bfb      	ldrb	r3, [r7, #15]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d137      	bne.n	800ae52 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d804      	bhi.n	800adf4 <USBH_MSC_ClassRequest+0x60>
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	3301      	adds	r3, #1
 800adf0:	b2da      	uxtb	r2, r3
 800adf2:	e000      	b.n	800adf6 <USBH_MSC_ClassRequest+0x62>
 800adf4:	2202      	movs	r2, #2
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800adfa:	2300      	movs	r3, #0
 800adfc:	73bb      	strb	r3, [r7, #14]
 800adfe:	e014      	b.n	800ae2a <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800ae00:	7bbb      	ldrb	r3, [r7, #14]
 800ae02:	68ba      	ldr	r2, [r7, #8]
 800ae04:	2134      	movs	r1, #52	; 0x34
 800ae06:	fb01 f303 	mul.w	r3, r1, r3
 800ae0a:	4413      	add	r3, r2
 800ae0c:	3392      	adds	r3, #146	; 0x92
 800ae0e:	2202      	movs	r2, #2
 800ae10:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800ae12:	7bbb      	ldrb	r3, [r7, #14]
 800ae14:	68ba      	ldr	r2, [r7, #8]
 800ae16:	2134      	movs	r1, #52	; 0x34
 800ae18:	fb01 f303 	mul.w	r3, r1, r3
 800ae1c:	4413      	add	r3, r2
 800ae1e:	33c1      	adds	r3, #193	; 0xc1
 800ae20:	2200      	movs	r2, #0
 800ae22:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800ae24:	7bbb      	ldrb	r3, [r7, #14]
 800ae26:	3301      	adds	r3, #1
 800ae28:	73bb      	strb	r3, [r7, #14]
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	7bba      	ldrb	r2, [r7, #14]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d3e5      	bcc.n	800ae00 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800ae34:	e00d      	b.n	800ae52 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800ae36:	2100      	movs	r1, #0
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f002 f8bb 	bl	800cfb4 <USBH_ClrFeature>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d108      	bne.n	800ae56 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	7bda      	ldrb	r2, [r3, #15]
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	739a      	strb	r2, [r3, #14]
      }
      break;
 800ae4c:	e003      	b.n	800ae56 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800ae4e:	bf00      	nop
 800ae50:	e002      	b.n	800ae58 <USBH_MSC_ClassRequest+0xc4>
      break;
 800ae52:	bf00      	nop
 800ae54:	e000      	b.n	800ae58 <USBH_MSC_ClassRequest+0xc4>
      break;
 800ae56:	bf00      	nop
  }

  return status;
 800ae58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
	...

0800ae64 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b086      	sub	sp, #24
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae72:	69db      	ldr	r3, [r3, #28]
 800ae74:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800ae76:	2301      	movs	r3, #1
 800ae78:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	7b1b      	ldrb	r3, [r3, #12]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d003      	beq.n	800ae92 <USBH_MSC_Process+0x2e>
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	f000 8271 	beq.w	800b372 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800ae90:	e272      	b.n	800b378 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	f080 824f 	bcs.w	800b342 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aeaa:	4619      	mov	r1, r3
 800aeac:	693a      	ldr	r2, [r7, #16]
 800aeae:	2334      	movs	r3, #52	; 0x34
 800aeb0:	fb01 f303 	mul.w	r3, r1, r3
 800aeb4:	4413      	add	r3, r2
 800aeb6:	3391      	adds	r3, #145	; 0x91
 800aeb8:	2201      	movs	r2, #1
 800aeba:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aec2:	4619      	mov	r1, r3
 800aec4:	693a      	ldr	r2, [r7, #16]
 800aec6:	2334      	movs	r3, #52	; 0x34
 800aec8:	fb01 f303 	mul.w	r3, r1, r3
 800aecc:	4413      	add	r3, r2
 800aece:	3390      	adds	r3, #144	; 0x90
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	2b08      	cmp	r3, #8
 800aed4:	f200 8243 	bhi.w	800b35e <USBH_MSC_Process+0x4fa>
 800aed8:	a201      	add	r2, pc, #4	; (adr r2, 800aee0 <USBH_MSC_Process+0x7c>)
 800aeda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aede:	bf00      	nop
 800aee0:	0800af05 	.word	0x0800af05
 800aee4:	0800b35f 	.word	0x0800b35f
 800aee8:	0800afcd 	.word	0x0800afcd
 800aeec:	0800b151 	.word	0x0800b151
 800aef0:	0800af2b 	.word	0x0800af2b
 800aef4:	0800b21d 	.word	0x0800b21d
 800aef8:	0800b35f 	.word	0x0800b35f
 800aefc:	0800b35f 	.word	0x0800b35f
 800af00:	0800b331 	.word	0x0800b331
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af0a:	4619      	mov	r1, r3
 800af0c:	693a      	ldr	r2, [r7, #16]
 800af0e:	2334      	movs	r3, #52	; 0x34
 800af10:	fb01 f303 	mul.w	r3, r1, r3
 800af14:	4413      	add	r3, r2
 800af16:	3390      	adds	r3, #144	; 0x90
 800af18:	2204      	movs	r2, #4
 800af1a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800af28:	e222      	b.n	800b370 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af30:	b2d9      	uxtb	r1, r3
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af38:	461a      	mov	r2, r3
 800af3a:	2334      	movs	r3, #52	; 0x34
 800af3c:	fb02 f303 	mul.w	r3, r2, r3
 800af40:	3398      	adds	r3, #152	; 0x98
 800af42:	693a      	ldr	r2, [r7, #16]
 800af44:	4413      	add	r3, r2
 800af46:	3307      	adds	r3, #7
 800af48:	461a      	mov	r2, r3
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 ff6a 	bl	800be24 <USBH_MSC_SCSI_Inquiry>
 800af50:	4603      	mov	r3, r0
 800af52:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800af54:	7bfb      	ldrb	r3, [r7, #15]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d10b      	bne.n	800af72 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af60:	4619      	mov	r1, r3
 800af62:	693a      	ldr	r2, [r7, #16]
 800af64:	2334      	movs	r3, #52	; 0x34
 800af66:	fb01 f303 	mul.w	r3, r1, r3
 800af6a:	4413      	add	r3, r2
 800af6c:	3390      	adds	r3, #144	; 0x90
 800af6e:	2202      	movs	r2, #2
 800af70:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800af72:	7bfb      	ldrb	r3, [r7, #15]
 800af74:	2b02      	cmp	r3, #2
 800af76:	d10c      	bne.n	800af92 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af7e:	4619      	mov	r1, r3
 800af80:	693a      	ldr	r2, [r7, #16]
 800af82:	2334      	movs	r3, #52	; 0x34
 800af84:	fb01 f303 	mul.w	r3, r1, r3
 800af88:	4413      	add	r3, r2
 800af8a:	3390      	adds	r3, #144	; 0x90
 800af8c:	2205      	movs	r2, #5
 800af8e:	701a      	strb	r2, [r3, #0]
            break;
 800af90:	e1e7      	b.n	800b362 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800af92:	7bfb      	ldrb	r3, [r7, #15]
 800af94:	2b04      	cmp	r3, #4
 800af96:	f040 81e4 	bne.w	800b362 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afa0:	4619      	mov	r1, r3
 800afa2:	693a      	ldr	r2, [r7, #16]
 800afa4:	2334      	movs	r3, #52	; 0x34
 800afa6:	fb01 f303 	mul.w	r3, r1, r3
 800afaa:	4413      	add	r3, r2
 800afac:	3390      	adds	r3, #144	; 0x90
 800afae:	2201      	movs	r2, #1
 800afb0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afb8:	4619      	mov	r1, r3
 800afba:	693a      	ldr	r2, [r7, #16]
 800afbc:	2334      	movs	r3, #52	; 0x34
 800afbe:	fb01 f303 	mul.w	r3, r1, r3
 800afc2:	4413      	add	r3, r2
 800afc4:	3391      	adds	r3, #145	; 0x91
 800afc6:	2202      	movs	r2, #2
 800afc8:	701a      	strb	r2, [r3, #0]
            break;
 800afca:	e1ca      	b.n	800b362 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	4619      	mov	r1, r3
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fe66 	bl	800bca8 <USBH_MSC_SCSI_TestUnitReady>
 800afdc:	4603      	mov	r3, r0
 800afde:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800afe0:	7bbb      	ldrb	r3, [r7, #14]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d149      	bne.n	800b07a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afec:	4619      	mov	r1, r3
 800afee:	693a      	ldr	r2, [r7, #16]
 800aff0:	2334      	movs	r3, #52	; 0x34
 800aff2:	fb01 f303 	mul.w	r3, r1, r3
 800aff6:	4413      	add	r3, r2
 800aff8:	3392      	adds	r3, #146	; 0x92
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d00c      	beq.n	800b01a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b006:	4619      	mov	r1, r3
 800b008:	693a      	ldr	r2, [r7, #16]
 800b00a:	2334      	movs	r3, #52	; 0x34
 800b00c:	fb01 f303 	mul.w	r3, r1, r3
 800b010:	4413      	add	r3, r2
 800b012:	33c1      	adds	r3, #193	; 0xc1
 800b014:	2201      	movs	r2, #1
 800b016:	701a      	strb	r2, [r3, #0]
 800b018:	e00b      	b.n	800b032 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b020:	4619      	mov	r1, r3
 800b022:	693a      	ldr	r2, [r7, #16]
 800b024:	2334      	movs	r3, #52	; 0x34
 800b026:	fb01 f303 	mul.w	r3, r1, r3
 800b02a:	4413      	add	r3, r2
 800b02c:	33c1      	adds	r3, #193	; 0xc1
 800b02e:	2200      	movs	r2, #0
 800b030:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b038:	4619      	mov	r1, r3
 800b03a:	693a      	ldr	r2, [r7, #16]
 800b03c:	2334      	movs	r3, #52	; 0x34
 800b03e:	fb01 f303 	mul.w	r3, r1, r3
 800b042:	4413      	add	r3, r2
 800b044:	3390      	adds	r3, #144	; 0x90
 800b046:	2203      	movs	r2, #3
 800b048:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b050:	4619      	mov	r1, r3
 800b052:	693a      	ldr	r2, [r7, #16]
 800b054:	2334      	movs	r3, #52	; 0x34
 800b056:	fb01 f303 	mul.w	r3, r1, r3
 800b05a:	4413      	add	r3, r2
 800b05c:	3391      	adds	r3, #145	; 0x91
 800b05e:	2200      	movs	r2, #0
 800b060:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b068:	4619      	mov	r1, r3
 800b06a:	693a      	ldr	r2, [r7, #16]
 800b06c:	2334      	movs	r3, #52	; 0x34
 800b06e:	fb01 f303 	mul.w	r3, r1, r3
 800b072:	4413      	add	r3, r2
 800b074:	3392      	adds	r3, #146	; 0x92
 800b076:	2200      	movs	r2, #0
 800b078:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800b07a:	7bbb      	ldrb	r3, [r7, #14]
 800b07c:	2b02      	cmp	r3, #2
 800b07e:	d14a      	bne.n	800b116 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b086:	4619      	mov	r1, r3
 800b088:	693a      	ldr	r2, [r7, #16]
 800b08a:	2334      	movs	r3, #52	; 0x34
 800b08c:	fb01 f303 	mul.w	r3, r1, r3
 800b090:	4413      	add	r3, r2
 800b092:	3392      	adds	r3, #146	; 0x92
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	2b02      	cmp	r3, #2
 800b098:	d00c      	beq.n	800b0b4 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	693a      	ldr	r2, [r7, #16]
 800b0a4:	2334      	movs	r3, #52	; 0x34
 800b0a6:	fb01 f303 	mul.w	r3, r1, r3
 800b0aa:	4413      	add	r3, r2
 800b0ac:	33c1      	adds	r3, #193	; 0xc1
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	701a      	strb	r2, [r3, #0]
 800b0b2:	e00b      	b.n	800b0cc <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	693a      	ldr	r2, [r7, #16]
 800b0be:	2334      	movs	r3, #52	; 0x34
 800b0c0:	fb01 f303 	mul.w	r3, r1, r3
 800b0c4:	4413      	add	r3, r2
 800b0c6:	33c1      	adds	r3, #193	; 0xc1
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	693a      	ldr	r2, [r7, #16]
 800b0d6:	2334      	movs	r3, #52	; 0x34
 800b0d8:	fb01 f303 	mul.w	r3, r1, r3
 800b0dc:	4413      	add	r3, r2
 800b0de:	3390      	adds	r3, #144	; 0x90
 800b0e0:	2205      	movs	r2, #5
 800b0e2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	693a      	ldr	r2, [r7, #16]
 800b0ee:	2334      	movs	r3, #52	; 0x34
 800b0f0:	fb01 f303 	mul.w	r3, r1, r3
 800b0f4:	4413      	add	r3, r2
 800b0f6:	3391      	adds	r3, #145	; 0x91
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b102:	4619      	mov	r1, r3
 800b104:	693a      	ldr	r2, [r7, #16]
 800b106:	2334      	movs	r3, #52	; 0x34
 800b108:	fb01 f303 	mul.w	r3, r1, r3
 800b10c:	4413      	add	r3, r2
 800b10e:	3392      	adds	r3, #146	; 0x92
 800b110:	2202      	movs	r2, #2
 800b112:	701a      	strb	r2, [r3, #0]
            break;
 800b114:	e127      	b.n	800b366 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800b116:	7bbb      	ldrb	r3, [r7, #14]
 800b118:	2b04      	cmp	r3, #4
 800b11a:	f040 8124 	bne.w	800b366 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b124:	4619      	mov	r1, r3
 800b126:	693a      	ldr	r2, [r7, #16]
 800b128:	2334      	movs	r3, #52	; 0x34
 800b12a:	fb01 f303 	mul.w	r3, r1, r3
 800b12e:	4413      	add	r3, r2
 800b130:	3390      	adds	r3, #144	; 0x90
 800b132:	2201      	movs	r2, #1
 800b134:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b13c:	4619      	mov	r1, r3
 800b13e:	693a      	ldr	r2, [r7, #16]
 800b140:	2334      	movs	r3, #52	; 0x34
 800b142:	fb01 f303 	mul.w	r3, r1, r3
 800b146:	4413      	add	r3, r2
 800b148:	3391      	adds	r3, #145	; 0x91
 800b14a:	2202      	movs	r2, #2
 800b14c:	701a      	strb	r2, [r3, #0]
            break;
 800b14e:	e10a      	b.n	800b366 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b156:	b2d9      	uxtb	r1, r3
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b15e:	461a      	mov	r2, r3
 800b160:	2334      	movs	r3, #52	; 0x34
 800b162:	fb02 f303 	mul.w	r3, r2, r3
 800b166:	3390      	adds	r3, #144	; 0x90
 800b168:	693a      	ldr	r2, [r7, #16]
 800b16a:	4413      	add	r3, r2
 800b16c:	3304      	adds	r3, #4
 800b16e:	461a      	mov	r2, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 fddc 	bl	800bd2e <USBH_MSC_SCSI_ReadCapacity>
 800b176:	4603      	mov	r3, r0
 800b178:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b17a:	7bfb      	ldrb	r3, [r7, #15]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d120      	bne.n	800b1c2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b186:	4619      	mov	r1, r3
 800b188:	693a      	ldr	r2, [r7, #16]
 800b18a:	2334      	movs	r3, #52	; 0x34
 800b18c:	fb01 f303 	mul.w	r3, r1, r3
 800b190:	4413      	add	r3, r2
 800b192:	3390      	adds	r3, #144	; 0x90
 800b194:	2201      	movs	r2, #1
 800b196:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b19e:	4619      	mov	r1, r3
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	2334      	movs	r3, #52	; 0x34
 800b1a4:	fb01 f303 	mul.w	r3, r1, r3
 800b1a8:	4413      	add	r3, r2
 800b1aa:	3391      	adds	r3, #145	; 0x91
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	b29a      	uxth	r2, r3
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b1c0:	e0d3      	b.n	800b36a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800b1c2:	7bfb      	ldrb	r3, [r7, #15]
 800b1c4:	2b02      	cmp	r3, #2
 800b1c6:	d10c      	bne.n	800b1e2 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	693a      	ldr	r2, [r7, #16]
 800b1d2:	2334      	movs	r3, #52	; 0x34
 800b1d4:	fb01 f303 	mul.w	r3, r1, r3
 800b1d8:	4413      	add	r3, r2
 800b1da:	3390      	adds	r3, #144	; 0x90
 800b1dc:	2205      	movs	r2, #5
 800b1de:	701a      	strb	r2, [r3, #0]
            break;
 800b1e0:	e0c3      	b.n	800b36a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b1e2:	7bfb      	ldrb	r3, [r7, #15]
 800b1e4:	2b04      	cmp	r3, #4
 800b1e6:	f040 80c0 	bne.w	800b36a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	693a      	ldr	r2, [r7, #16]
 800b1f4:	2334      	movs	r3, #52	; 0x34
 800b1f6:	fb01 f303 	mul.w	r3, r1, r3
 800b1fa:	4413      	add	r3, r2
 800b1fc:	3390      	adds	r3, #144	; 0x90
 800b1fe:	2201      	movs	r2, #1
 800b200:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b208:	4619      	mov	r1, r3
 800b20a:	693a      	ldr	r2, [r7, #16]
 800b20c:	2334      	movs	r3, #52	; 0x34
 800b20e:	fb01 f303 	mul.w	r3, r1, r3
 800b212:	4413      	add	r3, r2
 800b214:	3391      	adds	r3, #145	; 0x91
 800b216:	2202      	movs	r2, #2
 800b218:	701a      	strb	r2, [r3, #0]
            break;
 800b21a:	e0a6      	b.n	800b36a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b222:	b2d9      	uxtb	r1, r3
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b22a:	461a      	mov	r2, r3
 800b22c:	2334      	movs	r3, #52	; 0x34
 800b22e:	fb02 f303 	mul.w	r3, r2, r3
 800b232:	3398      	adds	r3, #152	; 0x98
 800b234:	693a      	ldr	r2, [r7, #16]
 800b236:	4413      	add	r3, r2
 800b238:	3304      	adds	r3, #4
 800b23a:	461a      	mov	r2, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 fe96 	bl	800bf6e <USBH_MSC_SCSI_RequestSense>
 800b242:	4603      	mov	r3, r0
 800b244:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b246:	7bfb      	ldrb	r3, [r7, #15]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d145      	bne.n	800b2d8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b252:	4619      	mov	r1, r3
 800b254:	693a      	ldr	r2, [r7, #16]
 800b256:	2334      	movs	r3, #52	; 0x34
 800b258:	fb01 f303 	mul.w	r3, r1, r3
 800b25c:	4413      	add	r3, r2
 800b25e:	339c      	adds	r3, #156	; 0x9c
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	2b06      	cmp	r3, #6
 800b264:	d00c      	beq.n	800b280 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b26c:	4619      	mov	r1, r3
 800b26e:	693a      	ldr	r2, [r7, #16]
 800b270:	2334      	movs	r3, #52	; 0x34
 800b272:	fb01 f303 	mul.w	r3, r1, r3
 800b276:	4413      	add	r3, r2
 800b278:	339c      	adds	r3, #156	; 0x9c
 800b27a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b27c:	2b02      	cmp	r3, #2
 800b27e:	d117      	bne.n	800b2b0 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b28c:	1ad3      	subs	r3, r2, r3
 800b28e:	f242 720f 	movw	r2, #9999	; 0x270f
 800b292:	4293      	cmp	r3, r2
 800b294:	d80c      	bhi.n	800b2b0 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b29c:	4619      	mov	r1, r3
 800b29e:	693a      	ldr	r2, [r7, #16]
 800b2a0:	2334      	movs	r3, #52	; 0x34
 800b2a2:	fb01 f303 	mul.w	r3, r1, r3
 800b2a6:	4413      	add	r3, r2
 800b2a8:	3390      	adds	r3, #144	; 0x90
 800b2aa:	2202      	movs	r2, #2
 800b2ac:	701a      	strb	r2, [r3, #0]
                  break;
 800b2ae:	e05f      	b.n	800b370 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	693a      	ldr	r2, [r7, #16]
 800b2ba:	2334      	movs	r3, #52	; 0x34
 800b2bc:	fb01 f303 	mul.w	r3, r1, r3
 800b2c0:	4413      	add	r3, r2
 800b2c2:	3390      	adds	r3, #144	; 0x90
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	b29a      	uxth	r2, r3
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800b2d8:	7bfb      	ldrb	r3, [r7, #15]
 800b2da:	2b02      	cmp	r3, #2
 800b2dc:	d10c      	bne.n	800b2f8 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	693a      	ldr	r2, [r7, #16]
 800b2e8:	2334      	movs	r3, #52	; 0x34
 800b2ea:	fb01 f303 	mul.w	r3, r1, r3
 800b2ee:	4413      	add	r3, r2
 800b2f0:	3390      	adds	r3, #144	; 0x90
 800b2f2:	2208      	movs	r2, #8
 800b2f4:	701a      	strb	r2, [r3, #0]
            break;
 800b2f6:	e03a      	b.n	800b36e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b2f8:	7bfb      	ldrb	r3, [r7, #15]
 800b2fa:	2b04      	cmp	r3, #4
 800b2fc:	d137      	bne.n	800b36e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b304:	4619      	mov	r1, r3
 800b306:	693a      	ldr	r2, [r7, #16]
 800b308:	2334      	movs	r3, #52	; 0x34
 800b30a:	fb01 f303 	mul.w	r3, r1, r3
 800b30e:	4413      	add	r3, r2
 800b310:	3390      	adds	r3, #144	; 0x90
 800b312:	2201      	movs	r2, #1
 800b314:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b31c:	4619      	mov	r1, r3
 800b31e:	693a      	ldr	r2, [r7, #16]
 800b320:	2334      	movs	r3, #52	; 0x34
 800b322:	fb01 f303 	mul.w	r3, r1, r3
 800b326:	4413      	add	r3, r2
 800b328:	3391      	adds	r3, #145	; 0x91
 800b32a:	2202      	movs	r2, #2
 800b32c:	701a      	strb	r2, [r3, #0]
            break;
 800b32e:	e01e      	b.n	800b36e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b336:	3301      	adds	r3, #1
 800b338:	b29a      	uxth	r2, r3
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b340:	e016      	b.n	800b370 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	2200      	movs	r2, #0
 800b346:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	2201      	movs	r2, #1
 800b34e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b356:	2102      	movs	r1, #2
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	4798      	blx	r3
      break;
 800b35c:	e00c      	b.n	800b378 <USBH_MSC_Process+0x514>
            break;
 800b35e:	bf00      	nop
 800b360:	e00a      	b.n	800b378 <USBH_MSC_Process+0x514>
            break;
 800b362:	bf00      	nop
 800b364:	e008      	b.n	800b378 <USBH_MSC_Process+0x514>
            break;
 800b366:	bf00      	nop
 800b368:	e006      	b.n	800b378 <USBH_MSC_Process+0x514>
            break;
 800b36a:	bf00      	nop
 800b36c:	e004      	b.n	800b378 <USBH_MSC_Process+0x514>
            break;
 800b36e:	bf00      	nop
      break;
 800b370:	e002      	b.n	800b378 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800b372:	2300      	movs	r3, #0
 800b374:	75fb      	strb	r3, [r7, #23]
      break;
 800b376:	bf00      	nop
  }
  return error;
 800b378:	7dfb      	ldrb	r3, [r7, #23]
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3718      	adds	r7, #24
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop

0800b384 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b38c:	2300      	movs	r3, #0
}
 800b38e:	4618      	mov	r0, r3
 800b390:	370c      	adds	r7, #12
 800b392:	46bd      	mov	sp, r7
 800b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b398:	4770      	bx	lr

0800b39a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b39a:	b580      	push	{r7, lr}
 800b39c:	b088      	sub	sp, #32
 800b39e:	af02      	add	r7, sp, #8
 800b3a0:	6078      	str	r0, [r7, #4]
 800b3a2:	460b      	mov	r3, r1
 800b3a4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3ac:	69db      	ldr	r3, [r3, #28]
 800b3ae:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800b3b8:	78fb      	ldrb	r3, [r7, #3]
 800b3ba:	693a      	ldr	r2, [r7, #16]
 800b3bc:	2134      	movs	r1, #52	; 0x34
 800b3be:	fb01 f303 	mul.w	r3, r1, r3
 800b3c2:	4413      	add	r3, r2
 800b3c4:	3390      	adds	r3, #144	; 0x90
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	2b07      	cmp	r3, #7
 800b3ca:	d03c      	beq.n	800b446 <USBH_MSC_RdWrProcess+0xac>
 800b3cc:	2b07      	cmp	r3, #7
 800b3ce:	f300 80a7 	bgt.w	800b520 <USBH_MSC_RdWrProcess+0x186>
 800b3d2:	2b05      	cmp	r3, #5
 800b3d4:	d06c      	beq.n	800b4b0 <USBH_MSC_RdWrProcess+0x116>
 800b3d6:	2b06      	cmp	r3, #6
 800b3d8:	f040 80a2 	bne.w	800b520 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800b3dc:	78f9      	ldrb	r1, [r7, #3]
 800b3de:	2300      	movs	r3, #0
 800b3e0:	9300      	str	r3, [sp, #0]
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 fea5 	bl	800c136 <USBH_MSC_SCSI_Read>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b3f0:	7bfb      	ldrb	r3, [r7, #15]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d10b      	bne.n	800b40e <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b3f6:	78fb      	ldrb	r3, [r7, #3]
 800b3f8:	693a      	ldr	r2, [r7, #16]
 800b3fa:	2134      	movs	r1, #52	; 0x34
 800b3fc:	fb01 f303 	mul.w	r3, r1, r3
 800b400:	4413      	add	r3, r2
 800b402:	3390      	adds	r3, #144	; 0x90
 800b404:	2201      	movs	r2, #1
 800b406:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b408:	2300      	movs	r3, #0
 800b40a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b40c:	e08a      	b.n	800b524 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800b40e:	7bfb      	ldrb	r3, [r7, #15]
 800b410:	2b02      	cmp	r3, #2
 800b412:	d109      	bne.n	800b428 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b414:	78fb      	ldrb	r3, [r7, #3]
 800b416:	693a      	ldr	r2, [r7, #16]
 800b418:	2134      	movs	r1, #52	; 0x34
 800b41a:	fb01 f303 	mul.w	r3, r1, r3
 800b41e:	4413      	add	r3, r2
 800b420:	3390      	adds	r3, #144	; 0x90
 800b422:	2205      	movs	r2, #5
 800b424:	701a      	strb	r2, [r3, #0]
      break;
 800b426:	e07d      	b.n	800b524 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b428:	7bfb      	ldrb	r3, [r7, #15]
 800b42a:	2b04      	cmp	r3, #4
 800b42c:	d17a      	bne.n	800b524 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b42e:	78fb      	ldrb	r3, [r7, #3]
 800b430:	693a      	ldr	r2, [r7, #16]
 800b432:	2134      	movs	r1, #52	; 0x34
 800b434:	fb01 f303 	mul.w	r3, r1, r3
 800b438:	4413      	add	r3, r2
 800b43a:	3390      	adds	r3, #144	; 0x90
 800b43c:	2208      	movs	r2, #8
 800b43e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b440:	2302      	movs	r3, #2
 800b442:	75fb      	strb	r3, [r7, #23]
      break;
 800b444:	e06e      	b.n	800b524 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800b446:	78f9      	ldrb	r1, [r7, #3]
 800b448:	2300      	movs	r3, #0
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	2300      	movs	r3, #0
 800b44e:	2200      	movs	r2, #0
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 fe05 	bl	800c060 <USBH_MSC_SCSI_Write>
 800b456:	4603      	mov	r3, r0
 800b458:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b45a:	7bfb      	ldrb	r3, [r7, #15]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d10b      	bne.n	800b478 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b460:	78fb      	ldrb	r3, [r7, #3]
 800b462:	693a      	ldr	r2, [r7, #16]
 800b464:	2134      	movs	r1, #52	; 0x34
 800b466:	fb01 f303 	mul.w	r3, r1, r3
 800b46a:	4413      	add	r3, r2
 800b46c:	3390      	adds	r3, #144	; 0x90
 800b46e:	2201      	movs	r2, #1
 800b470:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b472:	2300      	movs	r3, #0
 800b474:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b476:	e057      	b.n	800b528 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800b478:	7bfb      	ldrb	r3, [r7, #15]
 800b47a:	2b02      	cmp	r3, #2
 800b47c:	d109      	bne.n	800b492 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b47e:	78fb      	ldrb	r3, [r7, #3]
 800b480:	693a      	ldr	r2, [r7, #16]
 800b482:	2134      	movs	r1, #52	; 0x34
 800b484:	fb01 f303 	mul.w	r3, r1, r3
 800b488:	4413      	add	r3, r2
 800b48a:	3390      	adds	r3, #144	; 0x90
 800b48c:	2205      	movs	r2, #5
 800b48e:	701a      	strb	r2, [r3, #0]
      break;
 800b490:	e04a      	b.n	800b528 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b492:	7bfb      	ldrb	r3, [r7, #15]
 800b494:	2b04      	cmp	r3, #4
 800b496:	d147      	bne.n	800b528 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b498:	78fb      	ldrb	r3, [r7, #3]
 800b49a:	693a      	ldr	r2, [r7, #16]
 800b49c:	2134      	movs	r1, #52	; 0x34
 800b49e:	fb01 f303 	mul.w	r3, r1, r3
 800b4a2:	4413      	add	r3, r2
 800b4a4:	3390      	adds	r3, #144	; 0x90
 800b4a6:	2208      	movs	r2, #8
 800b4a8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b4aa:	2302      	movs	r3, #2
 800b4ac:	75fb      	strb	r3, [r7, #23]
      break;
 800b4ae:	e03b      	b.n	800b528 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800b4b0:	78fb      	ldrb	r3, [r7, #3]
 800b4b2:	2234      	movs	r2, #52	; 0x34
 800b4b4:	fb02 f303 	mul.w	r3, r2, r3
 800b4b8:	3398      	adds	r3, #152	; 0x98
 800b4ba:	693a      	ldr	r2, [r7, #16]
 800b4bc:	4413      	add	r3, r2
 800b4be:	1d1a      	adds	r2, r3, #4
 800b4c0:	78fb      	ldrb	r3, [r7, #3]
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 fd52 	bl	800bf6e <USBH_MSC_SCSI_RequestSense>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b4ce:	7bfb      	ldrb	r3, [r7, #15]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d113      	bne.n	800b4fc <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b4d4:	78fb      	ldrb	r3, [r7, #3]
 800b4d6:	693a      	ldr	r2, [r7, #16]
 800b4d8:	2134      	movs	r1, #52	; 0x34
 800b4da:	fb01 f303 	mul.w	r3, r1, r3
 800b4de:	4413      	add	r3, r2
 800b4e0:	3390      	adds	r3, #144	; 0x90
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800b4e6:	78fb      	ldrb	r3, [r7, #3]
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	2134      	movs	r1, #52	; 0x34
 800b4ec:	fb01 f303 	mul.w	r3, r1, r3
 800b4f0:	4413      	add	r3, r2
 800b4f2:	3391      	adds	r3, #145	; 0x91
 800b4f4:	2202      	movs	r2, #2
 800b4f6:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800b4f8:	2302      	movs	r3, #2
 800b4fa:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800b4fc:	7bfb      	ldrb	r3, [r7, #15]
 800b4fe:	2b02      	cmp	r3, #2
 800b500:	d014      	beq.n	800b52c <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b502:	7bfb      	ldrb	r3, [r7, #15]
 800b504:	2b04      	cmp	r3, #4
 800b506:	d111      	bne.n	800b52c <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b508:	78fb      	ldrb	r3, [r7, #3]
 800b50a:	693a      	ldr	r2, [r7, #16]
 800b50c:	2134      	movs	r1, #52	; 0x34
 800b50e:	fb01 f303 	mul.w	r3, r1, r3
 800b512:	4413      	add	r3, r2
 800b514:	3390      	adds	r3, #144	; 0x90
 800b516:	2208      	movs	r2, #8
 800b518:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b51a:	2302      	movs	r3, #2
 800b51c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b51e:	e005      	b.n	800b52c <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800b520:	bf00      	nop
 800b522:	e004      	b.n	800b52e <USBH_MSC_RdWrProcess+0x194>
      break;
 800b524:	bf00      	nop
 800b526:	e002      	b.n	800b52e <USBH_MSC_RdWrProcess+0x194>
      break;
 800b528:	bf00      	nop
 800b52a:	e000      	b.n	800b52e <USBH_MSC_RdWrProcess+0x194>
      break;
 800b52c:	bf00      	nop

  }
  return error;
 800b52e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b530:	4618      	mov	r0, r3
 800b532:	3718      	adds	r7, #24
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b538:	b480      	push	{r7}
 800b53a:	b085      	sub	sp, #20
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	460b      	mov	r3, r1
 800b542:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b54a:	69db      	ldr	r3, [r3, #28]
 800b54c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	b2db      	uxtb	r3, r3
 800b554:	2b0b      	cmp	r3, #11
 800b556:	d10c      	bne.n	800b572 <USBH_MSC_UnitIsReady+0x3a>
 800b558:	78fb      	ldrb	r3, [r7, #3]
 800b55a:	68ba      	ldr	r2, [r7, #8]
 800b55c:	2134      	movs	r1, #52	; 0x34
 800b55e:	fb01 f303 	mul.w	r3, r1, r3
 800b562:	4413      	add	r3, r2
 800b564:	3391      	adds	r3, #145	; 0x91
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d102      	bne.n	800b572 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800b56c:	2301      	movs	r3, #1
 800b56e:	73fb      	strb	r3, [r7, #15]
 800b570:	e001      	b.n	800b576 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800b572:	2300      	movs	r3, #0
 800b574:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800b576:	7bfb      	ldrb	r3, [r7, #15]
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3714      	adds	r7, #20
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr

0800b584 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b086      	sub	sp, #24
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	460b      	mov	r3, r1
 800b58e:	607a      	str	r2, [r7, #4]
 800b590:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b598:	69db      	ldr	r3, [r3, #28]
 800b59a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	2b0b      	cmp	r3, #11
 800b5a4:	d10d      	bne.n	800b5c2 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800b5a6:	7afb      	ldrb	r3, [r7, #11]
 800b5a8:	2234      	movs	r2, #52	; 0x34
 800b5aa:	fb02 f303 	mul.w	r3, r2, r3
 800b5ae:	3390      	adds	r3, #144	; 0x90
 800b5b0:	697a      	ldr	r2, [r7, #20]
 800b5b2:	4413      	add	r3, r2
 800b5b4:	2234      	movs	r2, #52	; 0x34
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f003 fdd7 	bl	800f16c <memcpy>
    return USBH_OK;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	e000      	b.n	800b5c4 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800b5c2:	2302      	movs	r3, #2
  }
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3718      	adds	r7, #24
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b088      	sub	sp, #32
 800b5d0:	af02      	add	r7, sp, #8
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	607a      	str	r2, [r7, #4]
 800b5d6:	603b      	str	r3, [r7, #0]
 800b5d8:	460b      	mov	r3, r1
 800b5da:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5e2:	69db      	ldr	r3, [r3, #28]
 800b5e4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b5ec:	b2db      	uxtb	r3, r3
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d00e      	beq.n	800b610 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800b5f8:	2b0b      	cmp	r3, #11
 800b5fa:	d109      	bne.n	800b610 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800b5fc:	7afb      	ldrb	r3, [r7, #11]
 800b5fe:	697a      	ldr	r2, [r7, #20]
 800b600:	2134      	movs	r1, #52	; 0x34
 800b602:	fb01 f303 	mul.w	r3, r1, r3
 800b606:	4413      	add	r3, r2
 800b608:	3390      	adds	r3, #144	; 0x90
 800b60a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d001      	beq.n	800b614 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800b610:	2302      	movs	r3, #2
 800b612:	e040      	b.n	800b696 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	2206      	movs	r2, #6
 800b618:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800b61a:	7afb      	ldrb	r3, [r7, #11]
 800b61c:	697a      	ldr	r2, [r7, #20]
 800b61e:	2134      	movs	r1, #52	; 0x34
 800b620:	fb01 f303 	mul.w	r3, r1, r3
 800b624:	4413      	add	r3, r2
 800b626:	3390      	adds	r3, #144	; 0x90
 800b628:	2206      	movs	r2, #6
 800b62a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800b62c:	7afb      	ldrb	r3, [r7, #11]
 800b62e:	b29a      	uxth	r2, r3
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800b636:	7af9      	ldrb	r1, [r7, #11]
 800b638:	6a3b      	ldr	r3, [r7, #32]
 800b63a:	9300      	str	r3, [sp, #0]
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f000 fd78 	bl	800c136 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b64c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b64e:	e016      	b.n	800b67e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	1ad2      	subs	r2, r2, r3
 800b65a:	6a3b      	ldr	r3, [r7, #32]
 800b65c:	f242 7110 	movw	r1, #10000	; 0x2710
 800b660:	fb01 f303 	mul.w	r3, r1, r3
 800b664:	429a      	cmp	r2, r3
 800b666:	d805      	bhi.n	800b674 <USBH_MSC_Read+0xa8>
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	2b00      	cmp	r3, #0
 800b672:	d104      	bne.n	800b67e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	2201      	movs	r2, #1
 800b678:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800b67a:	2302      	movs	r3, #2
 800b67c:	e00b      	b.n	800b696 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b67e:	7afb      	ldrb	r3, [r7, #11]
 800b680:	4619      	mov	r1, r3
 800b682:	68f8      	ldr	r0, [r7, #12]
 800b684:	f7ff fe89 	bl	800b39a <USBH_MSC_RdWrProcess>
 800b688:	4603      	mov	r3, r0
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d0e0      	beq.n	800b650 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	2201      	movs	r2, #1
 800b692:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800b694:	2300      	movs	r3, #0
}
 800b696:	4618      	mov	r0, r3
 800b698:	3718      	adds	r7, #24
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}

0800b69e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b088      	sub	sp, #32
 800b6a2:	af02      	add	r7, sp, #8
 800b6a4:	60f8      	str	r0, [r7, #12]
 800b6a6:	607a      	str	r2, [r7, #4]
 800b6a8:	603b      	str	r3, [r7, #0]
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b6b4:	69db      	ldr	r3, [r3, #28]
 800b6b6:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d00e      	beq.n	800b6e2 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800b6ca:	2b0b      	cmp	r3, #11
 800b6cc:	d109      	bne.n	800b6e2 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800b6ce:	7afb      	ldrb	r3, [r7, #11]
 800b6d0:	697a      	ldr	r2, [r7, #20]
 800b6d2:	2134      	movs	r1, #52	; 0x34
 800b6d4:	fb01 f303 	mul.w	r3, r1, r3
 800b6d8:	4413      	add	r3, r2
 800b6da:	3390      	adds	r3, #144	; 0x90
 800b6dc:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d001      	beq.n	800b6e6 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800b6e2:	2302      	movs	r3, #2
 800b6e4:	e040      	b.n	800b768 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	2207      	movs	r2, #7
 800b6ea:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800b6ec:	7afb      	ldrb	r3, [r7, #11]
 800b6ee:	697a      	ldr	r2, [r7, #20]
 800b6f0:	2134      	movs	r1, #52	; 0x34
 800b6f2:	fb01 f303 	mul.w	r3, r1, r3
 800b6f6:	4413      	add	r3, r2
 800b6f8:	3390      	adds	r3, #144	; 0x90
 800b6fa:	2207      	movs	r2, #7
 800b6fc:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800b6fe:	7afb      	ldrb	r3, [r7, #11]
 800b700:	b29a      	uxth	r2, r3
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800b708:	7af9      	ldrb	r1, [r7, #11]
 800b70a:	6a3b      	ldr	r3, [r7, #32]
 800b70c:	9300      	str	r3, [sp, #0]
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	f000 fca4 	bl	800c060 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b71e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b720:	e016      	b.n	800b750 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	1ad2      	subs	r2, r2, r3
 800b72c:	6a3b      	ldr	r3, [r7, #32]
 800b72e:	f242 7110 	movw	r1, #10000	; 0x2710
 800b732:	fb01 f303 	mul.w	r3, r1, r3
 800b736:	429a      	cmp	r2, r3
 800b738:	d805      	bhi.n	800b746 <USBH_MSC_Write+0xa8>
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b740:	b2db      	uxtb	r3, r3
 800b742:	2b00      	cmp	r3, #0
 800b744:	d104      	bne.n	800b750 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	2201      	movs	r2, #1
 800b74a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800b74c:	2302      	movs	r3, #2
 800b74e:	e00b      	b.n	800b768 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b750:	7afb      	ldrb	r3, [r7, #11]
 800b752:	4619      	mov	r1, r3
 800b754:	68f8      	ldr	r0, [r7, #12]
 800b756:	f7ff fe20 	bl	800b39a <USBH_MSC_RdWrProcess>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d0e0      	beq.n	800b722 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	2201      	movs	r2, #1
 800b764:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800b766:	2300      	movs	r3, #0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3718      	adds	r7, #24
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2221      	movs	r2, #33	; 0x21
 800b77c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	22ff      	movs	r2, #255	; 0xff
 800b782:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2200      	movs	r2, #0
 800b794:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800b796:	2200      	movs	r2, #0
 800b798:	2100      	movs	r1, #0
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f001 ff46 	bl	800d62c <USBH_CtlReq>
 800b7a0:	4603      	mov	r3, r0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3708      	adds	r7, #8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b082      	sub	sp, #8
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
 800b7b2:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	22a1      	movs	r2, #161	; 0xa1
 800b7b8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	22fe      	movs	r2, #254	; 0xfe
 800b7be:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	6839      	ldr	r1, [r7, #0]
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f001 ff28 	bl	800d62c <USBH_CtlReq>
 800b7dc:	4603      	mov	r3, r0
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3708      	adds	r7, #8
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
	...

0800b7e8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7f6:	69db      	ldr	r3, [r3, #28]
 800b7f8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	4a09      	ldr	r2, [pc, #36]	; (800b824 <USBH_MSC_BOT_Init+0x3c>)
 800b7fe:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	4a09      	ldr	r2, [pc, #36]	; (800b828 <USBH_MSC_BOT_Init+0x40>)
 800b804:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2201      	movs	r2, #1
 800b80a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2201      	movs	r2, #1
 800b812:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800b816:	2300      	movs	r3, #0
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3714      	adds	r7, #20
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr
 800b824:	43425355 	.word	0x43425355
 800b828:	20304050 	.word	0x20304050

0800b82c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b088      	sub	sp, #32
 800b830:	af02      	add	r7, sp, #8
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	460b      	mov	r3, r1
 800b836:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800b838:	2301      	movs	r3, #1
 800b83a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800b83c:	2301      	movs	r3, #1
 800b83e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800b840:	2301      	movs	r3, #1
 800b842:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b844:	2300      	movs	r3, #0
 800b846:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b84e:	69db      	ldr	r3, [r3, #28]
 800b850:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800b852:	2300      	movs	r3, #0
 800b854:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b85c:	3b01      	subs	r3, #1
 800b85e:	2b0a      	cmp	r3, #10
 800b860:	f200 819e 	bhi.w	800bba0 <USBH_MSC_BOT_Process+0x374>
 800b864:	a201      	add	r2, pc, #4	; (adr r2, 800b86c <USBH_MSC_BOT_Process+0x40>)
 800b866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b86a:	bf00      	nop
 800b86c:	0800b899 	.word	0x0800b899
 800b870:	0800b8c1 	.word	0x0800b8c1
 800b874:	0800b92b 	.word	0x0800b92b
 800b878:	0800b949 	.word	0x0800b949
 800b87c:	0800b9cd 	.word	0x0800b9cd
 800b880:	0800b9ef 	.word	0x0800b9ef
 800b884:	0800ba87 	.word	0x0800ba87
 800b888:	0800baa3 	.word	0x0800baa3
 800b88c:	0800baf5 	.word	0x0800baf5
 800b890:	0800bb25 	.word	0x0800bb25
 800b894:	0800bb87 	.word	0x0800bb87
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	78fa      	ldrb	r2, [r7, #3]
 800b89c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	2202      	movs	r2, #2
 800b8a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	795b      	ldrb	r3, [r3, #5]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	9200      	str	r2, [sp, #0]
 800b8b6:	221f      	movs	r2, #31
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f002 f8c6 	bl	800da4a <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800b8be:	e17e      	b.n	800bbbe <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	795b      	ldrb	r3, [r3, #5]
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f002 fc52 	bl	800e170 <USBH_LL_GetURBState>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b8d0:	7d3b      	ldrb	r3, [r7, #20]
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d118      	bne.n	800b908 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00f      	beq.n	800b8fe <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800b8e4:	b25b      	sxtb	r3, r3
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	da04      	bge.n	800b8f4 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	2203      	movs	r2, #3
 800b8ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b8f2:	e157      	b.n	800bba4 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	2205      	movs	r2, #5
 800b8f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b8fc:	e152      	b.n	800bba4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	2207      	movs	r2, #7
 800b902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b906:	e14d      	b.n	800bba4 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b908:	7d3b      	ldrb	r3, [r7, #20]
 800b90a:	2b02      	cmp	r3, #2
 800b90c:	d104      	bne.n	800b918 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	2201      	movs	r2, #1
 800b912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b916:	e145      	b.n	800bba4 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800b918:	7d3b      	ldrb	r3, [r7, #20]
 800b91a:	2b05      	cmp	r3, #5
 800b91c:	f040 8142 	bne.w	800bba4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	220a      	movs	r2, #10
 800b924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b928:	e13c      	b.n	800bba4 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	895a      	ldrh	r2, [r3, #10]
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	791b      	ldrb	r3, [r3, #4]
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f002 f8ab 	bl	800da94 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	2204      	movs	r2, #4
 800b942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800b946:	e13a      	b.n	800bbbe <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	791b      	ldrb	r3, [r3, #4]
 800b94c:	4619      	mov	r1, r3
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f002 fc0e 	bl	800e170 <USBH_LL_GetURBState>
 800b954:	4603      	mov	r3, r0
 800b956:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b958:	7d3b      	ldrb	r3, [r7, #20]
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d12d      	bne.n	800b9ba <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b962:	693a      	ldr	r2, [r7, #16]
 800b964:	8952      	ldrh	r2, [r2, #10]
 800b966:	4293      	cmp	r3, r2
 800b968:	d910      	bls.n	800b98c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b970:	693a      	ldr	r2, [r7, #16]
 800b972:	8952      	ldrh	r2, [r2, #10]
 800b974:	441a      	add	r2, r3
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b980:	693a      	ldr	r2, [r7, #16]
 800b982:	8952      	ldrh	r2, [r2, #10]
 800b984:	1a9a      	subs	r2, r3, r2
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	65da      	str	r2, [r3, #92]	; 0x5c
 800b98a:	e002      	b.n	800b992 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	2200      	movs	r2, #0
 800b990:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00a      	beq.n	800b9b0 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	895a      	ldrh	r2, [r3, #10]
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	791b      	ldrb	r3, [r3, #4]
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f002 f873 	bl	800da94 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800b9ae:	e0fb      	b.n	800bba8 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	2207      	movs	r2, #7
 800b9b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b9b8:	e0f6      	b.n	800bba8 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800b9ba:	7d3b      	ldrb	r3, [r7, #20]
 800b9bc:	2b05      	cmp	r3, #5
 800b9be:	f040 80f3 	bne.w	800bba8 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	2209      	movs	r2, #9
 800b9c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b9ca:	e0ed      	b.n	800bba8 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	891a      	ldrh	r2, [r3, #8]
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	795b      	ldrb	r3, [r3, #5]
 800b9da:	2001      	movs	r0, #1
 800b9dc:	9000      	str	r0, [sp, #0]
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f002 f833 	bl	800da4a <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	2206      	movs	r2, #6
 800b9e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b9ec:	e0e7      	b.n	800bbbe <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	795b      	ldrb	r3, [r3, #5]
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f002 fbbb 	bl	800e170 <USBH_LL_GetURBState>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b9fe:	7d3b      	ldrb	r3, [r7, #20]
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d12f      	bne.n	800ba64 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba08:	693a      	ldr	r2, [r7, #16]
 800ba0a:	8912      	ldrh	r2, [r2, #8]
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d910      	bls.n	800ba32 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba16:	693a      	ldr	r2, [r7, #16]
 800ba18:	8912      	ldrh	r2, [r2, #8]
 800ba1a:	441a      	add	r2, r3
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba26:	693a      	ldr	r2, [r7, #16]
 800ba28:	8912      	ldrh	r2, [r2, #8]
 800ba2a:	1a9a      	subs	r2, r3, r2
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	65da      	str	r2, [r3, #92]	; 0x5c
 800ba30:	e002      	b.n	800ba38 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	2200      	movs	r2, #0
 800ba36:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d00c      	beq.n	800ba5a <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	891a      	ldrh	r2, [r3, #8]
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	795b      	ldrb	r3, [r3, #5]
 800ba4e:	2001      	movs	r0, #1
 800ba50:	9000      	str	r0, [sp, #0]
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f001 fff9 	bl	800da4a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800ba58:	e0a8      	b.n	800bbac <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	2207      	movs	r2, #7
 800ba5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ba62:	e0a3      	b.n	800bbac <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ba64:	7d3b      	ldrb	r3, [r7, #20]
 800ba66:	2b02      	cmp	r3, #2
 800ba68:	d104      	bne.n	800ba74 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	2205      	movs	r2, #5
 800ba6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ba72:	e09b      	b.n	800bbac <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800ba74:	7d3b      	ldrb	r3, [r7, #20]
 800ba76:	2b05      	cmp	r3, #5
 800ba78:	f040 8098 	bne.w	800bbac <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	220a      	movs	r2, #10
 800ba80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ba84:	e092      	b.n	800bbac <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	791b      	ldrb	r3, [r3, #4]
 800ba90:	220d      	movs	r2, #13
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f001 fffe 	bl	800da94 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	2208      	movs	r2, #8
 800ba9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800baa0:	e08d      	b.n	800bbbe <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	791b      	ldrb	r3, [r3, #4]
 800baa6:	4619      	mov	r1, r3
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f002 fb61 	bl	800e170 <USBH_LL_GetURBState>
 800baae:	4603      	mov	r3, r0
 800bab0:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800bab2:	7d3b      	ldrb	r3, [r7, #20]
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	d115      	bne.n	800bae4 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	2201      	movs	r2, #1
 800babc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	2201      	movs	r2, #1
 800bac4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 f8a9 	bl	800bc20 <USBH_MSC_DecodeCSW>
 800bace:	4603      	mov	r3, r0
 800bad0:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800bad2:	7d7b      	ldrb	r3, [r7, #21]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d102      	bne.n	800bade <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800bad8:	2300      	movs	r3, #0
 800bada:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800badc:	e068      	b.n	800bbb0 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800bade:	2302      	movs	r3, #2
 800bae0:	75fb      	strb	r3, [r7, #23]
      break;
 800bae2:	e065      	b.n	800bbb0 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800bae4:	7d3b      	ldrb	r3, [r7, #20]
 800bae6:	2b05      	cmp	r3, #5
 800bae8:	d162      	bne.n	800bbb0 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	2209      	movs	r2, #9
 800baee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800baf2:	e05d      	b.n	800bbb0 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800baf4:	78fb      	ldrb	r3, [r7, #3]
 800baf6:	2200      	movs	r2, #0
 800baf8:	4619      	mov	r1, r3
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f000 f864 	bl	800bbc8 <USBH_MSC_BOT_Abort>
 800bb00:	4603      	mov	r3, r0
 800bb02:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800bb04:	7dbb      	ldrb	r3, [r7, #22]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d104      	bne.n	800bb14 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	2207      	movs	r2, #7
 800bb0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800bb12:	e04f      	b.n	800bbb4 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800bb14:	7dbb      	ldrb	r3, [r7, #22]
 800bb16:	2b04      	cmp	r3, #4
 800bb18:	d14c      	bne.n	800bbb4 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	220b      	movs	r2, #11
 800bb1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bb22:	e047      	b.n	800bbb4 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800bb24:	78fb      	ldrb	r3, [r7, #3]
 800bb26:	2201      	movs	r2, #1
 800bb28:	4619      	mov	r1, r3
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 f84c 	bl	800bbc8 <USBH_MSC_BOT_Abort>
 800bb30:	4603      	mov	r3, r0
 800bb32:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800bb34:	7dbb      	ldrb	r3, [r7, #22]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d11d      	bne.n	800bb76 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	795b      	ldrb	r3, [r3, #5]
 800bb3e:	4619      	mov	r1, r3
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f002 fb69 	bl	800e218 <USBH_LL_GetToggle>
 800bb46:	4603      	mov	r3, r0
 800bb48:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	7959      	ldrb	r1, [r3, #5]
 800bb4e:	7bfb      	ldrb	r3, [r7, #15]
 800bb50:	f1c3 0301 	rsb	r3, r3, #1
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	461a      	mov	r2, r3
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f002 fb2a 	bl	800e1b2 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	791b      	ldrb	r3, [r3, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	4619      	mov	r1, r3
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f002 fb23 	bl	800e1b2 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	2209      	movs	r2, #9
 800bb70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800bb74:	e020      	b.n	800bbb8 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800bb76:	7dbb      	ldrb	r3, [r7, #22]
 800bb78:	2b04      	cmp	r3, #4
 800bb7a:	d11d      	bne.n	800bbb8 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	220b      	movs	r2, #11
 800bb80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800bb84:	e018      	b.n	800bbb8 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f7ff fdf2 	bl	800b770 <USBH_MSC_BOT_REQ_Reset>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800bb90:	7dfb      	ldrb	r3, [r7, #23]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d112      	bne.n	800bbbc <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800bb9e:	e00d      	b.n	800bbbc <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800bba0:	bf00      	nop
 800bba2:	e00c      	b.n	800bbbe <USBH_MSC_BOT_Process+0x392>
      break;
 800bba4:	bf00      	nop
 800bba6:	e00a      	b.n	800bbbe <USBH_MSC_BOT_Process+0x392>
      break;
 800bba8:	bf00      	nop
 800bbaa:	e008      	b.n	800bbbe <USBH_MSC_BOT_Process+0x392>
      break;
 800bbac:	bf00      	nop
 800bbae:	e006      	b.n	800bbbe <USBH_MSC_BOT_Process+0x392>
      break;
 800bbb0:	bf00      	nop
 800bbb2:	e004      	b.n	800bbbe <USBH_MSC_BOT_Process+0x392>
      break;
 800bbb4:	bf00      	nop
 800bbb6:	e002      	b.n	800bbbe <USBH_MSC_BOT_Process+0x392>
      break;
 800bbb8:	bf00      	nop
 800bbba:	e000      	b.n	800bbbe <USBH_MSC_BOT_Process+0x392>
      break;
 800bbbc:	bf00      	nop
  }
  return status;
 800bbbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3718      	adds	r7, #24
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	70fb      	strb	r3, [r7, #3]
 800bbd4:	4613      	mov	r3, r2
 800bbd6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800bbd8:	2302      	movs	r3, #2
 800bbda:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbe2:	69db      	ldr	r3, [r3, #28]
 800bbe4:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800bbe6:	78bb      	ldrb	r3, [r7, #2]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d002      	beq.n	800bbf2 <USBH_MSC_BOT_Abort+0x2a>
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d009      	beq.n	800bc04 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800bbf0:	e011      	b.n	800bc16 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	79db      	ldrb	r3, [r3, #7]
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f001 f9db 	bl	800cfb4 <USBH_ClrFeature>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	73fb      	strb	r3, [r7, #15]
      break;
 800bc02:	e008      	b.n	800bc16 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	799b      	ldrb	r3, [r3, #6]
 800bc08:	4619      	mov	r1, r3
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f001 f9d2 	bl	800cfb4 <USBH_ClrFeature>
 800bc10:	4603      	mov	r3, r0
 800bc12:	73fb      	strb	r3, [r7, #15]
      break;
 800bc14:	bf00      	nop
  }
  return status;
 800bc16:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3710      	adds	r7, #16
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc2e:	69db      	ldr	r3, [r3, #28]
 800bc30:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800bc32:	2301      	movs	r3, #1
 800bc34:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	791b      	ldrb	r3, [r3, #4]
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f002 fa05 	bl	800e04c <USBH_LL_GetLastXferSize>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b0d      	cmp	r3, #13
 800bc46:	d002      	beq.n	800bc4e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800bc48:	2302      	movs	r3, #2
 800bc4a:	73fb      	strb	r3, [r7, #15]
 800bc4c:	e024      	b.n	800bc98 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc52:	4a14      	ldr	r2, [pc, #80]	; (800bca4 <USBH_MSC_DecodeCSW+0x84>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d11d      	bne.n	800bc94 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d119      	bne.n	800bc98 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d102      	bne.n	800bc74 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	73fb      	strb	r3, [r7, #15]
 800bc72:	e011      	b.n	800bc98 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d102      	bne.n	800bc84 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800bc7e:	2301      	movs	r3, #1
 800bc80:	73fb      	strb	r3, [r7, #15]
 800bc82:	e009      	b.n	800bc98 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bc8a:	2b02      	cmp	r3, #2
 800bc8c:	d104      	bne.n	800bc98 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800bc8e:	2302      	movs	r3, #2
 800bc90:	73fb      	strb	r3, [r7, #15]
 800bc92:	e001      	b.n	800bc98 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800bc94:	2302      	movs	r3, #2
 800bc96:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800bc98:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3710      	adds	r7, #16
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	bf00      	nop
 800bca4:	53425355 	.word	0x53425355

0800bca8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b084      	sub	sp, #16
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800bcb4:	2302      	movs	r3, #2
 800bcb6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bcbe:	69db      	ldr	r3, [r3, #28]
 800bcc0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d002      	beq.n	800bcd2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800bccc:	2b02      	cmp	r3, #2
 800bcce:	d021      	beq.n	800bd14 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800bcd0:	e028      	b.n	800bd24 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	220a      	movs	r2, #10
 800bce4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	3363      	adds	r3, #99	; 0x63
 800bcec:	2210      	movs	r2, #16
 800bcee:	2100      	movs	r1, #0
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f003 f9f7 	bl	800f0e4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	2201      	movs	r2, #1
 800bd02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	2202      	movs	r2, #2
 800bd0a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	73fb      	strb	r3, [r7, #15]
      break;
 800bd12:	e007      	b.n	800bd24 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bd14:	78fb      	ldrb	r3, [r7, #3]
 800bd16:	4619      	mov	r1, r3
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f7ff fd87 	bl	800b82c <USBH_MSC_BOT_Process>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	73fb      	strb	r3, [r7, #15]
      break;
 800bd22:	bf00      	nop
  }

  return error;
 800bd24:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}

0800bd2e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b086      	sub	sp, #24
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	60f8      	str	r0, [r7, #12]
 800bd36:	460b      	mov	r3, r1
 800bd38:	607a      	str	r2, [r7, #4]
 800bd3a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd46:	69db      	ldr	r3, [r3, #28]
 800bd48:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d002      	beq.n	800bd5a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800bd54:	2b02      	cmp	r3, #2
 800bd56:	d027      	beq.n	800bda8 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800bd58:	e05f      	b.n	800be1a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	2208      	movs	r2, #8
 800bd5e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	2280      	movs	r2, #128	; 0x80
 800bd64:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	220a      	movs	r2, #10
 800bd6c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	3363      	adds	r3, #99	; 0x63
 800bd74:	2210      	movs	r2, #16
 800bd76:	2100      	movs	r1, #0
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f003 f9b3 	bl	800f0e4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	2225      	movs	r2, #37	; 0x25
 800bd82:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	2201      	movs	r2, #1
 800bd8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	2202      	movs	r2, #2
 800bd92:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	f103 0210 	add.w	r2, r3, #16
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bda2:	2301      	movs	r3, #1
 800bda4:	75fb      	strb	r3, [r7, #23]
      break;
 800bda6:	e038      	b.n	800be1a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bda8:	7afb      	ldrb	r3, [r7, #11]
 800bdaa:	4619      	mov	r1, r3
 800bdac:	68f8      	ldr	r0, [r7, #12]
 800bdae:	f7ff fd3d 	bl	800b82c <USBH_MSC_BOT_Process>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800bdb6:	7dfb      	ldrb	r3, [r7, #23]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d12d      	bne.n	800be18 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdc2:	3303      	adds	r3, #3
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdce:	3302      	adds	r3, #2
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	021b      	lsls	r3, r3, #8
 800bdd4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bddc:	3301      	adds	r3, #1
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bde2:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	061b      	lsls	r3, r3, #24
 800bdee:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdfa:	3307      	adds	r3, #7
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	b29a      	uxth	r2, r3
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be06:	3306      	adds	r3, #6
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	021b      	lsls	r3, r3, #8
 800be0e:	b29b      	uxth	r3, r3
 800be10:	4313      	orrs	r3, r2
 800be12:	b29a      	uxth	r2, r3
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	809a      	strh	r2, [r3, #4]
      break;
 800be18:	bf00      	nop
  }

  return error;
 800be1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3718      	adds	r7, #24
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b086      	sub	sp, #24
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	460b      	mov	r3, r1
 800be2e:	607a      	str	r2, [r7, #4]
 800be30:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800be32:	2302      	movs	r3, #2
 800be34:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be3c:	69db      	ldr	r3, [r3, #28]
 800be3e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800be46:	2b01      	cmp	r3, #1
 800be48:	d002      	beq.n	800be50 <USBH_MSC_SCSI_Inquiry+0x2c>
 800be4a:	2b02      	cmp	r3, #2
 800be4c:	d03d      	beq.n	800beca <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800be4e:	e089      	b.n	800bf64 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	2224      	movs	r2, #36	; 0x24
 800be54:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	2280      	movs	r2, #128	; 0x80
 800be5a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	220a      	movs	r2, #10
 800be62:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	3363      	adds	r3, #99	; 0x63
 800be6a:	220a      	movs	r2, #10
 800be6c:	2100      	movs	r1, #0
 800be6e:	4618      	mov	r0, r3
 800be70:	f003 f938 	bl	800f0e4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	2212      	movs	r2, #18
 800be78:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800be7c:	7afb      	ldrb	r3, [r7, #11]
 800be7e:	015b      	lsls	r3, r3, #5
 800be80:	b2da      	uxtb	r2, r3
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	2200      	movs	r2, #0
 800be94:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	2224      	movs	r2, #36	; 0x24
 800be9c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	2200      	movs	r2, #0
 800bea4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	2201      	movs	r2, #1
 800beac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	2202      	movs	r2, #2
 800beb4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	f103 0210 	add.w	r2, r3, #16
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bec4:	2301      	movs	r3, #1
 800bec6:	75fb      	strb	r3, [r7, #23]
      break;
 800bec8:	e04c      	b.n	800bf64 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800beca:	7afb      	ldrb	r3, [r7, #11]
 800becc:	4619      	mov	r1, r3
 800bece:	68f8      	ldr	r0, [r7, #12]
 800bed0:	f7ff fcac 	bl	800b82c <USBH_MSC_BOT_Process>
 800bed4:	4603      	mov	r3, r0
 800bed6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800bed8:	7dfb      	ldrb	r3, [r7, #23]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d141      	bne.n	800bf62 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800bede:	2222      	movs	r2, #34	; 0x22
 800bee0:	2100      	movs	r1, #0
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f003 f8fe 	bl	800f0e4 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	f003 031f 	and.w	r3, r3, #31
 800bef4:	b2da      	uxtb	r2, r3
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	095b      	lsrs	r3, r3, #5
 800bf04:	b2da      	uxtb	r2, r3
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf10:	3301      	adds	r3, #1
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	b25b      	sxtb	r3, r3
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	da03      	bge.n	800bf22 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	709a      	strb	r2, [r3, #2]
 800bf20:	e002      	b.n	800bf28 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	1cd8      	adds	r0, r3, #3
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf32:	3308      	adds	r3, #8
 800bf34:	2208      	movs	r2, #8
 800bf36:	4619      	mov	r1, r3
 800bf38:	f003 f918 	bl	800f16c <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f103 000c 	add.w	r0, r3, #12
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf48:	3310      	adds	r3, #16
 800bf4a:	2210      	movs	r2, #16
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	f003 f90d 	bl	800f16c <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	331d      	adds	r3, #29
 800bf56:	693a      	ldr	r2, [r7, #16]
 800bf58:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800bf5c:	3220      	adds	r2, #32
 800bf5e:	6812      	ldr	r2, [r2, #0]
 800bf60:	601a      	str	r2, [r3, #0]
      break;
 800bf62:	bf00      	nop
  }

  return error;
 800bf64:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3718      	adds	r7, #24
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}

0800bf6e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800bf6e:	b580      	push	{r7, lr}
 800bf70:	b086      	sub	sp, #24
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	60f8      	str	r0, [r7, #12]
 800bf76:	460b      	mov	r3, r1
 800bf78:	607a      	str	r2, [r7, #4]
 800bf7a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800bf7c:	2302      	movs	r3, #2
 800bf7e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf86:	69db      	ldr	r3, [r3, #28]
 800bf88:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d002      	beq.n	800bf9a <USBH_MSC_SCSI_RequestSense+0x2c>
 800bf94:	2b02      	cmp	r3, #2
 800bf96:	d03d      	beq.n	800c014 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800bf98:	e05d      	b.n	800c056 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	220e      	movs	r2, #14
 800bf9e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	2280      	movs	r2, #128	; 0x80
 800bfa4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	220a      	movs	r2, #10
 800bfac:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	3363      	adds	r3, #99	; 0x63
 800bfb4:	2210      	movs	r2, #16
 800bfb6:	2100      	movs	r1, #0
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f003 f893 	bl	800f0e4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	2203      	movs	r2, #3
 800bfc2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800bfc6:	7afb      	ldrb	r3, [r7, #11]
 800bfc8:	015b      	lsls	r3, r3, #5
 800bfca:	b2da      	uxtb	r2, r3
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	220e      	movs	r2, #14
 800bfe6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	2200      	movs	r2, #0
 800bfee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	2201      	movs	r2, #1
 800bff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	2202      	movs	r2, #2
 800bffe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	f103 0210 	add.w	r2, r3, #16
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c00e:	2301      	movs	r3, #1
 800c010:	75fb      	strb	r3, [r7, #23]
      break;
 800c012:	e020      	b.n	800c056 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c014:	7afb      	ldrb	r3, [r7, #11]
 800c016:	4619      	mov	r1, r3
 800c018:	68f8      	ldr	r0, [r7, #12]
 800c01a:	f7ff fc07 	bl	800b82c <USBH_MSC_BOT_Process>
 800c01e:	4603      	mov	r3, r0
 800c020:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c022:	7dfb      	ldrb	r3, [r7, #23]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d115      	bne.n	800c054 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c02e:	3302      	adds	r3, #2
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	f003 030f 	and.w	r3, r3, #15
 800c036:	b2da      	uxtb	r2, r3
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c042:	7b1a      	ldrb	r2, [r3, #12]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c04e:	7b5a      	ldrb	r2, [r3, #13]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	709a      	strb	r2, [r3, #2]
      break;
 800c054:	bf00      	nop
  }

  return error;
 800c056:	7dfb      	ldrb	r3, [r7, #23]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3718      	adds	r7, #24
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b086      	sub	sp, #24
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	607a      	str	r2, [r7, #4]
 800c06a:	603b      	str	r3, [r7, #0]
 800c06c:	460b      	mov	r3, r1
 800c06e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800c070:	2302      	movs	r3, #2
 800c072:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c07a:	69db      	ldr	r3, [r3, #28]
 800c07c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c084:	2b01      	cmp	r3, #1
 800c086:	d002      	beq.n	800c08e <USBH_MSC_SCSI_Write+0x2e>
 800c088:	2b02      	cmp	r3, #2
 800c08a:	d047      	beq.n	800c11c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c08c:	e04e      	b.n	800c12c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c094:	461a      	mov	r2, r3
 800c096:	6a3b      	ldr	r3, [r7, #32]
 800c098:	fb03 f202 	mul.w	r2, r3, r2
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	220a      	movs	r2, #10
 800c0ac:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	3363      	adds	r3, #99	; 0x63
 800c0b4:	2210      	movs	r2, #16
 800c0b6:	2100      	movs	r1, #0
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f003 f813 	bl	800f0e4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	222a      	movs	r2, #42	; 0x2a
 800c0c2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c0c6:	79fa      	ldrb	r2, [r7, #7]
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c0ce:	79ba      	ldrb	r2, [r7, #6]
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c0d6:	797a      	ldrb	r2, [r7, #5]
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c0de:	1d3b      	adds	r3, r7, #4
 800c0e0:	781a      	ldrb	r2, [r3, #0]
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 800c0e8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 800c0f2:	f107 0320 	add.w	r3, r7, #32
 800c0f6:	781a      	ldrb	r2, [r3, #0]
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	2201      	movs	r2, #1
 800c102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	2202      	movs	r2, #2
 800c10a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	683a      	ldr	r2, [r7, #0]
 800c112:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c116:	2301      	movs	r3, #1
 800c118:	75fb      	strb	r3, [r7, #23]
      break;
 800c11a:	e007      	b.n	800c12c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c11c:	7afb      	ldrb	r3, [r7, #11]
 800c11e:	4619      	mov	r1, r3
 800c120:	68f8      	ldr	r0, [r7, #12]
 800c122:	f7ff fb83 	bl	800b82c <USBH_MSC_BOT_Process>
 800c126:	4603      	mov	r3, r0
 800c128:	75fb      	strb	r3, [r7, #23]
      break;
 800c12a:	bf00      	nop
  }

  return error;
 800c12c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3718      	adds	r7, #24
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}

0800c136 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800c136:	b580      	push	{r7, lr}
 800c138:	b086      	sub	sp, #24
 800c13a:	af00      	add	r7, sp, #0
 800c13c:	60f8      	str	r0, [r7, #12]
 800c13e:	607a      	str	r2, [r7, #4]
 800c140:	603b      	str	r3, [r7, #0]
 800c142:	460b      	mov	r3, r1
 800c144:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800c146:	2302      	movs	r3, #2
 800c148:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c150:	69db      	ldr	r3, [r3, #28]
 800c152:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d002      	beq.n	800c164 <USBH_MSC_SCSI_Read+0x2e>
 800c15e:	2b02      	cmp	r3, #2
 800c160:	d047      	beq.n	800c1f2 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c162:	e04e      	b.n	800c202 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c16a:	461a      	mov	r2, r3
 800c16c:	6a3b      	ldr	r3, [r7, #32]
 800c16e:	fb03 f202 	mul.w	r2, r3, r2
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	2280      	movs	r2, #128	; 0x80
 800c17a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	220a      	movs	r2, #10
 800c182:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	3363      	adds	r3, #99	; 0x63
 800c18a:	2210      	movs	r2, #16
 800c18c:	2100      	movs	r1, #0
 800c18e:	4618      	mov	r0, r3
 800c190:	f002 ffa8 	bl	800f0e4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	2228      	movs	r2, #40	; 0x28
 800c198:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c19c:	79fa      	ldrb	r2, [r7, #7]
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c1a4:	79ba      	ldrb	r2, [r7, #6]
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c1ac:	797a      	ldrb	r2, [r7, #5]
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c1b4:	1d3b      	adds	r3, r7, #4
 800c1b6:	781a      	ldrb	r2, [r3, #0]
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 800c1be:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 800c1c8:	f107 0320 	add.w	r3, r7, #32
 800c1cc:	781a      	ldrb	r2, [r3, #0]
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	2202      	movs	r2, #2
 800c1e0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	683a      	ldr	r2, [r7, #0]
 800c1e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	75fb      	strb	r3, [r7, #23]
      break;
 800c1f0:	e007      	b.n	800c202 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c1f2:	7afb      	ldrb	r3, [r7, #11]
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	68f8      	ldr	r0, [r7, #12]
 800c1f8:	f7ff fb18 	bl	800b82c <USBH_MSC_BOT_Process>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	75fb      	strb	r3, [r7, #23]
      break;
 800c200:	bf00      	nop
  }

  return error;
 800c202:	7dfb      	ldrb	r3, [r7, #23]
}
 800c204:	4618      	mov	r0, r3
 800c206:	3718      	adds	r7, #24
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	4613      	mov	r3, r2
 800c218:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d101      	bne.n	800c224 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c220:	2302      	movs	r3, #2
 800c222:	e029      	b.n	800c278 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	79fa      	ldrb	r2, [r7, #7]
 800c228:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2200      	movs	r2, #0
 800c230:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2200      	movs	r2, #0
 800c238:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800c23c:	68f8      	ldr	r0, [r7, #12]
 800c23e:	f000 f81f 	bl	800c280 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2200      	movs	r2, #0
 800c246:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2200      	movs	r2, #0
 800c24e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2200      	movs	r2, #0
 800c256:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2200      	movs	r2, #0
 800c25e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d003      	beq.n	800c270 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	68ba      	ldr	r2, [r7, #8]
 800c26c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800c270:	68f8      	ldr	r0, [r7, #12]
 800c272:	f001 fe37 	bl	800dee4 <USBH_LL_Init>

  return USBH_OK;
 800c276:	2300      	movs	r3, #0
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3710      	adds	r7, #16
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c288:	2300      	movs	r3, #0
 800c28a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c28c:	2300      	movs	r3, #0
 800c28e:	60fb      	str	r3, [r7, #12]
 800c290:	e009      	b.n	800c2a6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	33e0      	adds	r3, #224	; 0xe0
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	4413      	add	r3, r2
 800c29c:	2200      	movs	r2, #0
 800c29e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	60fb      	str	r3, [r7, #12]
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2b0f      	cmp	r3, #15
 800c2aa:	d9f2      	bls.n	800c292 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	60fb      	str	r3, [r7, #12]
 800c2b0:	e009      	b.n	800c2c6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c2b2:	687a      	ldr	r2, [r7, #4]
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	4413      	add	r3, r2
 800c2b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c2bc:	2200      	movs	r2, #0
 800c2be:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	60fb      	str	r3, [r7, #12]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2cc:	d3f1      	bcc.n	800c2b2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2201      	movs	r2, #1
 800c2de:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2240      	movs	r2, #64	; 0x40
 800c2f2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2201      	movs	r2, #1
 800c306:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2200      	movs	r2, #0
 800c30e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2200      	movs	r2, #0
 800c316:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	331c      	adds	r3, #28
 800c31e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c322:	2100      	movs	r1, #0
 800c324:	4618      	mov	r0, r3
 800c326:	f002 fedd 	bl	800f0e4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c330:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c334:	2100      	movs	r1, #0
 800c336:	4618      	mov	r0, r3
 800c338:	f002 fed4 	bl	800f0e4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f203 3326 	addw	r3, r3, #806	; 0x326
 800c342:	2212      	movs	r2, #18
 800c344:	2100      	movs	r1, #0
 800c346:	4618      	mov	r0, r3
 800c348:	f002 fecc 	bl	800f0e4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c352:	223e      	movs	r2, #62	; 0x3e
 800c354:	2100      	movs	r1, #0
 800c356:	4618      	mov	r0, r3
 800c358:	f002 fec4 	bl	800f0e4 <memset>

  return USBH_OK;
 800c35c:	2300      	movs	r3, #0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c366:	b480      	push	{r7}
 800c368:	b085      	sub	sp, #20
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
 800c36e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c370:	2300      	movs	r3, #0
 800c372:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d016      	beq.n	800c3a8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c380:	2b00      	cmp	r3, #0
 800c382:	d10e      	bne.n	800c3a2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c38a:	1c59      	adds	r1, r3, #1
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	33de      	adds	r3, #222	; 0xde
 800c396:	6839      	ldr	r1, [r7, #0]
 800c398:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c39c:	2300      	movs	r3, #0
 800c39e:	73fb      	strb	r3, [r7, #15]
 800c3a0:	e004      	b.n	800c3ac <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c3a2:	2302      	movs	r3, #2
 800c3a4:	73fb      	strb	r3, [r7, #15]
 800c3a6:	e001      	b.n	800c3ac <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c3a8:	2302      	movs	r3, #2
 800c3aa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3714      	adds	r7, #20
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr

0800c3ba <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c3ba:	b480      	push	{r7}
 800c3bc:	b085      	sub	sp, #20
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c3d0:	78fa      	ldrb	r2, [r7, #3]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d204      	bcs.n	800c3e0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	78fa      	ldrb	r2, [r7, #3]
 800c3da:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c3de:	e001      	b.n	800c3e4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c3e0:	2302      	movs	r3, #2
 800c3e2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3714      	adds	r7, #20
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr

0800c3f2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c3f2:	b480      	push	{r7}
 800c3f4:	b087      	sub	sp, #28
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
 800c3fa:	4608      	mov	r0, r1
 800c3fc:	4611      	mov	r1, r2
 800c3fe:	461a      	mov	r2, r3
 800c400:	4603      	mov	r3, r0
 800c402:	70fb      	strb	r3, [r7, #3]
 800c404:	460b      	mov	r3, r1
 800c406:	70bb      	strb	r3, [r7, #2]
 800c408:	4613      	mov	r3, r2
 800c40a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c40c:	2300      	movs	r3, #0
 800c40e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c410:	2300      	movs	r3, #0
 800c412:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c41a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c41c:	e025      	b.n	800c46a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c41e:	7dfb      	ldrb	r3, [r7, #23]
 800c420:	221a      	movs	r2, #26
 800c422:	fb02 f303 	mul.w	r3, r2, r3
 800c426:	3308      	adds	r3, #8
 800c428:	68fa      	ldr	r2, [r7, #12]
 800c42a:	4413      	add	r3, r2
 800c42c:	3302      	adds	r3, #2
 800c42e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	795b      	ldrb	r3, [r3, #5]
 800c434:	78fa      	ldrb	r2, [r7, #3]
 800c436:	429a      	cmp	r2, r3
 800c438:	d002      	beq.n	800c440 <USBH_FindInterface+0x4e>
 800c43a:	78fb      	ldrb	r3, [r7, #3]
 800c43c:	2bff      	cmp	r3, #255	; 0xff
 800c43e:	d111      	bne.n	800c464 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c444:	78ba      	ldrb	r2, [r7, #2]
 800c446:	429a      	cmp	r2, r3
 800c448:	d002      	beq.n	800c450 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c44a:	78bb      	ldrb	r3, [r7, #2]
 800c44c:	2bff      	cmp	r3, #255	; 0xff
 800c44e:	d109      	bne.n	800c464 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c454:	787a      	ldrb	r2, [r7, #1]
 800c456:	429a      	cmp	r2, r3
 800c458:	d002      	beq.n	800c460 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c45a:	787b      	ldrb	r3, [r7, #1]
 800c45c:	2bff      	cmp	r3, #255	; 0xff
 800c45e:	d101      	bne.n	800c464 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c460:	7dfb      	ldrb	r3, [r7, #23]
 800c462:	e006      	b.n	800c472 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c464:	7dfb      	ldrb	r3, [r7, #23]
 800c466:	3301      	adds	r3, #1
 800c468:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c46a:	7dfb      	ldrb	r3, [r7, #23]
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d9d6      	bls.n	800c41e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c470:	23ff      	movs	r3, #255	; 0xff
}
 800c472:	4618      	mov	r0, r3
 800c474:	371c      	adds	r7, #28
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr

0800c47e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800c47e:	b580      	push	{r7, lr}
 800c480:	b082      	sub	sp, #8
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f001 fd68 	bl	800df5c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c48c:	2101      	movs	r1, #1
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f001 fe81 	bl	800e196 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c494:	2300      	movs	r3, #0
}
 800c496:	4618      	mov	r0, r3
 800c498:	3708      	adds	r7, #8
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
	...

0800c4a0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b088      	sub	sp, #32
 800c4a4:	af04      	add	r7, sp, #16
 800c4a6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c4a8:	2302      	movs	r3, #2
 800c4aa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	d102      	bne.n	800c4c2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2203      	movs	r2, #3
 800c4c0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	2b0b      	cmp	r3, #11
 800c4ca:	f200 81be 	bhi.w	800c84a <USBH_Process+0x3aa>
 800c4ce:	a201      	add	r2, pc, #4	; (adr r2, 800c4d4 <USBH_Process+0x34>)
 800c4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4d4:	0800c505 	.word	0x0800c505
 800c4d8:	0800c537 	.word	0x0800c537
 800c4dc:	0800c59f 	.word	0x0800c59f
 800c4e0:	0800c7e5 	.word	0x0800c7e5
 800c4e4:	0800c84b 	.word	0x0800c84b
 800c4e8:	0800c643 	.word	0x0800c643
 800c4ec:	0800c78b 	.word	0x0800c78b
 800c4f0:	0800c679 	.word	0x0800c679
 800c4f4:	0800c699 	.word	0x0800c699
 800c4f8:	0800c6b9 	.word	0x0800c6b9
 800c4fc:	0800c6fd 	.word	0x0800c6fd
 800c500:	0800c7cd 	.word	0x0800c7cd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c50a:	b2db      	uxtb	r3, r3
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f000 819e 	beq.w	800c84e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2201      	movs	r2, #1
 800c516:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c518:	20c8      	movs	r0, #200	; 0xc8
 800c51a:	f001 feb0 	bl	800e27e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f001 fd79 	bl	800e016 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2200      	movs	r2, #0
 800c528:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2200      	movs	r2, #0
 800c530:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c534:	e18b      	b.n	800c84e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d107      	bne.n	800c550 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2202      	movs	r2, #2
 800c54c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c54e:	e18d      	b.n	800c86c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c55a:	d914      	bls.n	800c586 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c562:	3301      	adds	r3, #1
 800c564:	b2da      	uxtb	r2, r3
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c572:	2b03      	cmp	r3, #3
 800c574:	d903      	bls.n	800c57e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	220d      	movs	r2, #13
 800c57a:	701a      	strb	r2, [r3, #0]
      break;
 800c57c:	e176      	b.n	800c86c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2200      	movs	r2, #0
 800c582:	701a      	strb	r2, [r3, #0]
      break;
 800c584:	e172      	b.n	800c86c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c58c:	f103 020a 	add.w	r2, r3, #10
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c596:	200a      	movs	r0, #10
 800c598:	f001 fe71 	bl	800e27e <USBH_Delay>
      break;
 800c59c:	e166      	b.n	800c86c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d005      	beq.n	800c5b4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c5ae:	2104      	movs	r1, #4
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c5b4:	2064      	movs	r0, #100	; 0x64
 800c5b6:	f001 fe62 	bl	800e27e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f001 fd04 	bl	800dfc8 <USBH_LL_GetSpeed>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2205      	movs	r2, #5
 800c5ce:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c5d0:	2100      	movs	r1, #0
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f001 faab 	bl	800db2e <USBH_AllocPipe>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	461a      	mov	r2, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c5e0:	2180      	movs	r1, #128	; 0x80
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f001 faa3 	bl	800db2e <USBH_AllocPipe>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	7919      	ldrb	r1, [r3, #4]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c604:	b292      	uxth	r2, r2
 800c606:	9202      	str	r2, [sp, #8]
 800c608:	2200      	movs	r2, #0
 800c60a:	9201      	str	r2, [sp, #4]
 800c60c:	9300      	str	r3, [sp, #0]
 800c60e:	4603      	mov	r3, r0
 800c610:	2280      	movs	r2, #128	; 0x80
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f001 fa5c 	bl	800dad0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	7959      	ldrb	r1, [r3, #5]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c62c:	b292      	uxth	r2, r2
 800c62e:	9202      	str	r2, [sp, #8]
 800c630:	2200      	movs	r2, #0
 800c632:	9201      	str	r2, [sp, #4]
 800c634:	9300      	str	r3, [sp, #0]
 800c636:	4603      	mov	r3, r0
 800c638:	2200      	movs	r2, #0
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f001 fa48 	bl	800dad0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c640:	e114      	b.n	800c86c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 f918 	bl	800c878 <USBH_HandleEnum>
 800c648:	4603      	mov	r3, r0
 800c64a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c64c:	7bbb      	ldrb	r3, [r7, #14]
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	2b00      	cmp	r3, #0
 800c652:	f040 80fe 	bne.w	800c852 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2200      	movs	r2, #0
 800c65a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c664:	2b01      	cmp	r3, #1
 800c666:	d103      	bne.n	800c670 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2208      	movs	r2, #8
 800c66c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c66e:	e0f0      	b.n	800c852 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2207      	movs	r2, #7
 800c674:	701a      	strb	r2, [r3, #0]
      break;
 800c676:	e0ec      	b.n	800c852 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c67e:	2b00      	cmp	r3, #0
 800c680:	f000 80e9 	beq.w	800c856 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c68a:	2101      	movs	r1, #1
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2208      	movs	r2, #8
 800c694:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800c696:	e0de      	b.n	800c856 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f000 fc3f 	bl	800cf26 <USBH_SetCfg>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	f040 80d5 	bne.w	800c85a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2209      	movs	r2, #9
 800c6b4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c6b6:	e0d0      	b.n	800c85a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c6be:	f003 0320 	and.w	r3, r3, #32
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d016      	beq.n	800c6f4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800c6c6:	2101      	movs	r1, #1
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 fc4f 	bl	800cf6c <USBH_SetFeature>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c6d2:	7bbb      	ldrb	r3, [r7, #14]
 800c6d4:	b2db      	uxtb	r3, r3
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d103      	bne.n	800c6e2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	220a      	movs	r2, #10
 800c6de:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c6e0:	e0bd      	b.n	800c85e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800c6e2:	7bbb      	ldrb	r3, [r7, #14]
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	2b03      	cmp	r3, #3
 800c6e8:	f040 80b9 	bne.w	800c85e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	220a      	movs	r2, #10
 800c6f0:	701a      	strb	r2, [r3, #0]
      break;
 800c6f2:	e0b4      	b.n	800c85e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	220a      	movs	r2, #10
 800c6f8:	701a      	strb	r2, [r3, #0]
      break;
 800c6fa:	e0b0      	b.n	800c85e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c702:	2b00      	cmp	r3, #0
 800c704:	f000 80ad 	beq.w	800c862 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c710:	2300      	movs	r3, #0
 800c712:	73fb      	strb	r3, [r7, #15]
 800c714:	e016      	b.n	800c744 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c716:	7bfa      	ldrb	r2, [r7, #15]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	32de      	adds	r2, #222	; 0xde
 800c71c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c720:	791a      	ldrb	r2, [r3, #4]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c728:	429a      	cmp	r2, r3
 800c72a:	d108      	bne.n	800c73e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c72c:	7bfa      	ldrb	r2, [r7, #15]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	32de      	adds	r2, #222	; 0xde
 800c732:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c73c:	e005      	b.n	800c74a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c73e:	7bfb      	ldrb	r3, [r7, #15]
 800c740:	3301      	adds	r3, #1
 800c742:	73fb      	strb	r3, [r7, #15]
 800c744:	7bfb      	ldrb	r3, [r7, #15]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d0e5      	beq.n	800c716 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c750:	2b00      	cmp	r3, #0
 800c752:	d016      	beq.n	800c782 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c75a:	689b      	ldr	r3, [r3, #8]
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	4798      	blx	r3
 800c760:	4603      	mov	r3, r0
 800c762:	2b00      	cmp	r3, #0
 800c764:	d109      	bne.n	800c77a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2206      	movs	r2, #6
 800c76a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c772:	2103      	movs	r1, #3
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c778:	e073      	b.n	800c862 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	220d      	movs	r2, #13
 800c77e:	701a      	strb	r2, [r3, #0]
      break;
 800c780:	e06f      	b.n	800c862 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	220d      	movs	r2, #13
 800c786:	701a      	strb	r2, [r3, #0]
      break;
 800c788:	e06b      	b.n	800c862 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c790:	2b00      	cmp	r3, #0
 800c792:	d017      	beq.n	800c7c4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c79a:	691b      	ldr	r3, [r3, #16]
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	4798      	blx	r3
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c7a4:	7bbb      	ldrb	r3, [r7, #14]
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d103      	bne.n	800c7b4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	220b      	movs	r2, #11
 800c7b0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c7b2:	e058      	b.n	800c866 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800c7b4:	7bbb      	ldrb	r3, [r7, #14]
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	2b02      	cmp	r3, #2
 800c7ba:	d154      	bne.n	800c866 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	220d      	movs	r2, #13
 800c7c0:	701a      	strb	r2, [r3, #0]
      break;
 800c7c2:	e050      	b.n	800c866 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	220d      	movs	r2, #13
 800c7c8:	701a      	strb	r2, [r3, #0]
      break;
 800c7ca:	e04c      	b.n	800c866 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d049      	beq.n	800c86a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c7dc:	695b      	ldr	r3, [r3, #20]
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	4798      	blx	r3
      }
      break;
 800c7e2:	e042      	b.n	800c86a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f7ff fd47 	bl	800c280 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d009      	beq.n	800c810 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c816:	2b00      	cmp	r3, #0
 800c818:	d005      	beq.n	800c826 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c820:	2105      	movs	r1, #5
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c82c:	b2db      	uxtb	r3, r3
 800c82e:	2b01      	cmp	r3, #1
 800c830:	d107      	bne.n	800c842 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2200      	movs	r2, #0
 800c836:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f7ff fe1f 	bl	800c47e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c840:	e014      	b.n	800c86c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f001 fb8a 	bl	800df5c <USBH_LL_Start>
      break;
 800c848:	e010      	b.n	800c86c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800c84a:	bf00      	nop
 800c84c:	e00e      	b.n	800c86c <USBH_Process+0x3cc>
      break;
 800c84e:	bf00      	nop
 800c850:	e00c      	b.n	800c86c <USBH_Process+0x3cc>
      break;
 800c852:	bf00      	nop
 800c854:	e00a      	b.n	800c86c <USBH_Process+0x3cc>
    break;
 800c856:	bf00      	nop
 800c858:	e008      	b.n	800c86c <USBH_Process+0x3cc>
      break;
 800c85a:	bf00      	nop
 800c85c:	e006      	b.n	800c86c <USBH_Process+0x3cc>
      break;
 800c85e:	bf00      	nop
 800c860:	e004      	b.n	800c86c <USBH_Process+0x3cc>
      break;
 800c862:	bf00      	nop
 800c864:	e002      	b.n	800c86c <USBH_Process+0x3cc>
      break;
 800c866:	bf00      	nop
 800c868:	e000      	b.n	800c86c <USBH_Process+0x3cc>
      break;
 800c86a:	bf00      	nop
  }
  return USBH_OK;
 800c86c:	2300      	movs	r3, #0
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3710      	adds	r7, #16
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop

0800c878 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b088      	sub	sp, #32
 800c87c:	af04      	add	r7, sp, #16
 800c87e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c880:	2301      	movs	r3, #1
 800c882:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c884:	2301      	movs	r3, #1
 800c886:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	785b      	ldrb	r3, [r3, #1]
 800c88c:	2b07      	cmp	r3, #7
 800c88e:	f200 81c1 	bhi.w	800cc14 <USBH_HandleEnum+0x39c>
 800c892:	a201      	add	r2, pc, #4	; (adr r2, 800c898 <USBH_HandleEnum+0x20>)
 800c894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c898:	0800c8b9 	.word	0x0800c8b9
 800c89c:	0800c977 	.word	0x0800c977
 800c8a0:	0800c9e1 	.word	0x0800c9e1
 800c8a4:	0800ca6f 	.word	0x0800ca6f
 800c8a8:	0800cad9 	.word	0x0800cad9
 800c8ac:	0800cb49 	.word	0x0800cb49
 800c8b0:	0800cb8f 	.word	0x0800cb8f
 800c8b4:	0800cbd5 	.word	0x0800cbd5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c8b8:	2108      	movs	r1, #8
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 fa50 	bl	800cd60 <USBH_Get_DevDesc>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c8c4:	7bbb      	ldrb	r3, [r7, #14]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d130      	bne.n	800c92c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	7919      	ldrb	r1, [r3, #4]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c8ee:	b292      	uxth	r2, r2
 800c8f0:	9202      	str	r2, [sp, #8]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	9201      	str	r2, [sp, #4]
 800c8f6:	9300      	str	r3, [sp, #0]
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	2280      	movs	r2, #128	; 0x80
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f001 f8e7 	bl	800dad0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	7959      	ldrb	r1, [r3, #5]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c916:	b292      	uxth	r2, r2
 800c918:	9202      	str	r2, [sp, #8]
 800c91a:	2200      	movs	r2, #0
 800c91c:	9201      	str	r2, [sp, #4]
 800c91e:	9300      	str	r3, [sp, #0]
 800c920:	4603      	mov	r3, r0
 800c922:	2200      	movs	r2, #0
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f001 f8d3 	bl	800dad0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c92a:	e175      	b.n	800cc18 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c92c:	7bbb      	ldrb	r3, [r7, #14]
 800c92e:	2b03      	cmp	r3, #3
 800c930:	f040 8172 	bne.w	800cc18 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c93a:	3301      	adds	r3, #1
 800c93c:	b2da      	uxtb	r2, r3
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c94a:	2b03      	cmp	r3, #3
 800c94c:	d903      	bls.n	800c956 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	220d      	movs	r2, #13
 800c952:	701a      	strb	r2, [r3, #0]
      break;
 800c954:	e160      	b.n	800cc18 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	795b      	ldrb	r3, [r3, #5]
 800c95a:	4619      	mov	r1, r3
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f001 f907 	bl	800db70 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	791b      	ldrb	r3, [r3, #4]
 800c966:	4619      	mov	r1, r3
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f001 f901 	bl	800db70 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2200      	movs	r2, #0
 800c972:	701a      	strb	r2, [r3, #0]
      break;
 800c974:	e150      	b.n	800cc18 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c976:	2112      	movs	r1, #18
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 f9f1 	bl	800cd60 <USBH_Get_DevDesc>
 800c97e:	4603      	mov	r3, r0
 800c980:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c982:	7bbb      	ldrb	r3, [r7, #14]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d103      	bne.n	800c990 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2202      	movs	r2, #2
 800c98c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c98e:	e145      	b.n	800cc1c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c990:	7bbb      	ldrb	r3, [r7, #14]
 800c992:	2b03      	cmp	r3, #3
 800c994:	f040 8142 	bne.w	800cc1c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c99e:	3301      	adds	r3, #1
 800c9a0:	b2da      	uxtb	r2, r3
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c9ae:	2b03      	cmp	r3, #3
 800c9b0:	d903      	bls.n	800c9ba <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	220d      	movs	r2, #13
 800c9b6:	701a      	strb	r2, [r3, #0]
      break;
 800c9b8:	e130      	b.n	800cc1c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	795b      	ldrb	r3, [r3, #5]
 800c9be:	4619      	mov	r1, r3
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f001 f8d5 	bl	800db70 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	791b      	ldrb	r3, [r3, #4]
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f001 f8cf 	bl	800db70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	701a      	strb	r2, [r3, #0]
      break;
 800c9de:	e11d      	b.n	800cc1c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c9e0:	2101      	movs	r1, #1
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 fa7b 	bl	800cede <USBH_SetAddress>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c9ec:	7bbb      	ldrb	r3, [r7, #14]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d132      	bne.n	800ca58 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c9f2:	2002      	movs	r0, #2
 800c9f4:	f001 fc43 	bl	800e27e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2203      	movs	r2, #3
 800ca04:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	7919      	ldrb	r1, [r3, #4]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ca16:	687a      	ldr	r2, [r7, #4]
 800ca18:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ca1a:	b292      	uxth	r2, r2
 800ca1c:	9202      	str	r2, [sp, #8]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	9201      	str	r2, [sp, #4]
 800ca22:	9300      	str	r3, [sp, #0]
 800ca24:	4603      	mov	r3, r0
 800ca26:	2280      	movs	r2, #128	; 0x80
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f001 f851 	bl	800dad0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	7959      	ldrb	r1, [r3, #5]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ca42:	b292      	uxth	r2, r2
 800ca44:	9202      	str	r2, [sp, #8]
 800ca46:	2200      	movs	r2, #0
 800ca48:	9201      	str	r2, [sp, #4]
 800ca4a:	9300      	str	r3, [sp, #0]
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2200      	movs	r2, #0
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f001 f83d 	bl	800dad0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ca56:	e0e3      	b.n	800cc20 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ca58:	7bbb      	ldrb	r3, [r7, #14]
 800ca5a:	2b03      	cmp	r3, #3
 800ca5c:	f040 80e0 	bne.w	800cc20 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	220d      	movs	r2, #13
 800ca64:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	705a      	strb	r2, [r3, #1]
      break;
 800ca6c:	e0d8      	b.n	800cc20 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ca6e:	2109      	movs	r1, #9
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f000 f9a1 	bl	800cdb8 <USBH_Get_CfgDesc>
 800ca76:	4603      	mov	r3, r0
 800ca78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ca7a:	7bbb      	ldrb	r3, [r7, #14]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d103      	bne.n	800ca88 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2204      	movs	r2, #4
 800ca84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ca86:	e0cd      	b.n	800cc24 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ca88:	7bbb      	ldrb	r3, [r7, #14]
 800ca8a:	2b03      	cmp	r3, #3
 800ca8c:	f040 80ca 	bne.w	800cc24 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ca96:	3301      	adds	r3, #1
 800ca98:	b2da      	uxtb	r2, r3
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800caa6:	2b03      	cmp	r3, #3
 800caa8:	d903      	bls.n	800cab2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	220d      	movs	r2, #13
 800caae:	701a      	strb	r2, [r3, #0]
      break;
 800cab0:	e0b8      	b.n	800cc24 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	795b      	ldrb	r3, [r3, #5]
 800cab6:	4619      	mov	r1, r3
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f001 f859 	bl	800db70 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	791b      	ldrb	r3, [r3, #4]
 800cac2:	4619      	mov	r1, r3
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f001 f853 	bl	800db70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2200      	movs	r2, #0
 800cad4:	701a      	strb	r2, [r3, #0]
      break;
 800cad6:	e0a5      	b.n	800cc24 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800cade:	4619      	mov	r1, r3
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f000 f969 	bl	800cdb8 <USBH_Get_CfgDesc>
 800cae6:	4603      	mov	r3, r0
 800cae8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800caea:	7bbb      	ldrb	r3, [r7, #14]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d103      	bne.n	800caf8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2205      	movs	r2, #5
 800caf4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800caf6:	e097      	b.n	800cc28 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800caf8:	7bbb      	ldrb	r3, [r7, #14]
 800cafa:	2b03      	cmp	r3, #3
 800cafc:	f040 8094 	bne.w	800cc28 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cb06:	3301      	adds	r3, #1
 800cb08:	b2da      	uxtb	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cb16:	2b03      	cmp	r3, #3
 800cb18:	d903      	bls.n	800cb22 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	220d      	movs	r2, #13
 800cb1e:	701a      	strb	r2, [r3, #0]
      break;
 800cb20:	e082      	b.n	800cc28 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	795b      	ldrb	r3, [r3, #5]
 800cb26:	4619      	mov	r1, r3
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f001 f821 	bl	800db70 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	791b      	ldrb	r3, [r3, #4]
 800cb32:	4619      	mov	r1, r3
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f001 f81b 	bl	800db70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2200      	movs	r2, #0
 800cb44:	701a      	strb	r2, [r3, #0]
      break;
 800cb46:	e06f      	b.n	800cc28 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d019      	beq.n	800cb86 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cb5e:	23ff      	movs	r3, #255	; 0xff
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 f953 	bl	800ce0c <USBH_Get_StringDesc>
 800cb66:	4603      	mov	r3, r0
 800cb68:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cb6a:	7bbb      	ldrb	r3, [r7, #14]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d103      	bne.n	800cb78 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2206      	movs	r2, #6
 800cb74:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cb76:	e059      	b.n	800cc2c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cb78:	7bbb      	ldrb	r3, [r7, #14]
 800cb7a:	2b03      	cmp	r3, #3
 800cb7c:	d156      	bne.n	800cc2c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2206      	movs	r2, #6
 800cb82:	705a      	strb	r2, [r3, #1]
      break;
 800cb84:	e052      	b.n	800cc2c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2206      	movs	r2, #6
 800cb8a:	705a      	strb	r2, [r3, #1]
      break;
 800cb8c:	e04e      	b.n	800cc2c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d019      	beq.n	800cbcc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cba4:	23ff      	movs	r3, #255	; 0xff
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f000 f930 	bl	800ce0c <USBH_Get_StringDesc>
 800cbac:	4603      	mov	r3, r0
 800cbae:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cbb0:	7bbb      	ldrb	r3, [r7, #14]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d103      	bne.n	800cbbe <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2207      	movs	r2, #7
 800cbba:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cbbc:	e038      	b.n	800cc30 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cbbe:	7bbb      	ldrb	r3, [r7, #14]
 800cbc0:	2b03      	cmp	r3, #3
 800cbc2:	d135      	bne.n	800cc30 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2207      	movs	r2, #7
 800cbc8:	705a      	strb	r2, [r3, #1]
      break;
 800cbca:	e031      	b.n	800cc30 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2207      	movs	r2, #7
 800cbd0:	705a      	strb	r2, [r3, #1]
      break;
 800cbd2:	e02d      	b.n	800cc30 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d017      	beq.n	800cc0e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cbea:	23ff      	movs	r3, #255	; 0xff
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f000 f90d 	bl	800ce0c <USBH_Get_StringDesc>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cbf6:	7bbb      	ldrb	r3, [r7, #14]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d102      	bne.n	800cc02 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800cc00:	e018      	b.n	800cc34 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cc02:	7bbb      	ldrb	r3, [r7, #14]
 800cc04:	2b03      	cmp	r3, #3
 800cc06:	d115      	bne.n	800cc34 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	73fb      	strb	r3, [r7, #15]
      break;
 800cc0c:	e012      	b.n	800cc34 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	73fb      	strb	r3, [r7, #15]
      break;
 800cc12:	e00f      	b.n	800cc34 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800cc14:	bf00      	nop
 800cc16:	e00e      	b.n	800cc36 <USBH_HandleEnum+0x3be>
      break;
 800cc18:	bf00      	nop
 800cc1a:	e00c      	b.n	800cc36 <USBH_HandleEnum+0x3be>
      break;
 800cc1c:	bf00      	nop
 800cc1e:	e00a      	b.n	800cc36 <USBH_HandleEnum+0x3be>
      break;
 800cc20:	bf00      	nop
 800cc22:	e008      	b.n	800cc36 <USBH_HandleEnum+0x3be>
      break;
 800cc24:	bf00      	nop
 800cc26:	e006      	b.n	800cc36 <USBH_HandleEnum+0x3be>
      break;
 800cc28:	bf00      	nop
 800cc2a:	e004      	b.n	800cc36 <USBH_HandleEnum+0x3be>
      break;
 800cc2c:	bf00      	nop
 800cc2e:	e002      	b.n	800cc36 <USBH_HandleEnum+0x3be>
      break;
 800cc30:	bf00      	nop
 800cc32:	e000      	b.n	800cc36 <USBH_HandleEnum+0x3be>
      break;
 800cc34:	bf00      	nop
  }
  return Status;
 800cc36:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3710      	adds	r7, #16
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b083      	sub	sp, #12
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	683a      	ldr	r2, [r7, #0]
 800cc4e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800cc52:	bf00      	nop
 800cc54:	370c      	adds	r7, #12
 800cc56:	46bd      	mov	sp, r7
 800cc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5c:	4770      	bx	lr

0800cc5e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800cc5e:	b580      	push	{r7, lr}
 800cc60:	b082      	sub	sp, #8
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cc6c:	1c5a      	adds	r2, r3, #1
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f000 f804 	bl	800cc82 <USBH_HandleSof>
}
 800cc7a:	bf00      	nop
 800cc7c:	3708      	adds	r7, #8
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}

0800cc82 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b082      	sub	sp, #8
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	2b0b      	cmp	r3, #11
 800cc92:	d10a      	bne.n	800ccaa <USBH_HandleSof+0x28>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d005      	beq.n	800ccaa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cca4:	699b      	ldr	r3, [r3, #24]
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	4798      	blx	r3
  }
}
 800ccaa:	bf00      	nop
 800ccac:	3708      	adds	r7, #8
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}

0800ccb2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ccb2:	b480      	push	{r7}
 800ccb4:	b083      	sub	sp, #12
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800ccc2:	bf00      	nop
}
 800ccc4:	370c      	adds	r7, #12
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cccc:	4770      	bx	lr

0800ccce <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ccce:	b480      	push	{r7}
 800ccd0:	b083      	sub	sp, #12
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ccde:	bf00      	nop
}
 800cce0:	370c      	adds	r7, #12
 800cce2:	46bd      	mov	sp, r7
 800cce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce8:	4770      	bx	lr

0800ccea <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ccea:	b480      	push	{r7}
 800ccec:	b083      	sub	sp, #12
 800ccee:	af00      	add	r7, sp, #0
 800ccf0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2201      	movs	r2, #1
 800ccf6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2200      	movs	r2, #0
 800cd06:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800cd0a:	2300      	movs	r3, #0
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	370c      	adds	r7, #12
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr

0800cd18 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2201      	movs	r2, #1
 800cd24:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2200      	movs	r2, #0
 800cd34:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f001 f92a 	bl	800df92 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	791b      	ldrb	r3, [r3, #4]
 800cd42:	4619      	mov	r1, r3
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f000 ff13 	bl	800db70 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	795b      	ldrb	r3, [r3, #5]
 800cd4e:	4619      	mov	r1, r3
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f000 ff0d 	bl	800db70 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800cd56:	2300      	movs	r3, #0
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3708      	adds	r7, #8
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}

0800cd60 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b086      	sub	sp, #24
 800cd64:	af02      	add	r7, sp, #8
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	460b      	mov	r3, r1
 800cd6a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800cd6c:	887b      	ldrh	r3, [r7, #2]
 800cd6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd72:	d901      	bls.n	800cd78 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800cd74:	2303      	movs	r3, #3
 800cd76:	e01b      	b.n	800cdb0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800cd7e:	887b      	ldrh	r3, [r7, #2]
 800cd80:	9300      	str	r3, [sp, #0]
 800cd82:	4613      	mov	r3, r2
 800cd84:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cd88:	2100      	movs	r1, #0
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f000 f872 	bl	800ce74 <USBH_GetDescriptor>
 800cd90:	4603      	mov	r3, r0
 800cd92:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800cd94:	7bfb      	ldrb	r3, [r7, #15]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d109      	bne.n	800cdae <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cda0:	887a      	ldrh	r2, [r7, #2]
 800cda2:	4619      	mov	r1, r3
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f000 f929 	bl	800cffc <USBH_ParseDevDesc>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cdae:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3710      	adds	r7, #16
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}

0800cdb8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b086      	sub	sp, #24
 800cdbc:	af02      	add	r7, sp, #8
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	460b      	mov	r3, r1
 800cdc2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	331c      	adds	r3, #28
 800cdc8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800cdca:	887b      	ldrh	r3, [r7, #2]
 800cdcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdd0:	d901      	bls.n	800cdd6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800cdd2:	2303      	movs	r3, #3
 800cdd4:	e016      	b.n	800ce04 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800cdd6:	887b      	ldrh	r3, [r7, #2]
 800cdd8:	9300      	str	r3, [sp, #0]
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cde0:	2100      	movs	r1, #0
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f000 f846 	bl	800ce74 <USBH_GetDescriptor>
 800cde8:	4603      	mov	r3, r0
 800cdea:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800cdec:	7bfb      	ldrb	r3, [r7, #15]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d107      	bne.n	800ce02 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800cdf2:	887b      	ldrh	r3, [r7, #2]
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	68b9      	ldr	r1, [r7, #8]
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f000 f9b3 	bl	800d164 <USBH_ParseCfgDesc>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ce02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3710      	adds	r7, #16
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b088      	sub	sp, #32
 800ce10:	af02      	add	r7, sp, #8
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	607a      	str	r2, [r7, #4]
 800ce16:	461a      	mov	r2, r3
 800ce18:	460b      	mov	r3, r1
 800ce1a:	72fb      	strb	r3, [r7, #11]
 800ce1c:	4613      	mov	r3, r2
 800ce1e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800ce20:	893b      	ldrh	r3, [r7, #8]
 800ce22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce26:	d802      	bhi.n	800ce2e <USBH_Get_StringDesc+0x22>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d101      	bne.n	800ce32 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ce2e:	2303      	movs	r3, #3
 800ce30:	e01c      	b.n	800ce6c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800ce32:	7afb      	ldrb	r3, [r7, #11]
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ce3a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800ce42:	893b      	ldrh	r3, [r7, #8]
 800ce44:	9300      	str	r3, [sp, #0]
 800ce46:	460b      	mov	r3, r1
 800ce48:	2100      	movs	r1, #0
 800ce4a:	68f8      	ldr	r0, [r7, #12]
 800ce4c:	f000 f812 	bl	800ce74 <USBH_GetDescriptor>
 800ce50:	4603      	mov	r3, r0
 800ce52:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ce54:	7dfb      	ldrb	r3, [r7, #23]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d107      	bne.n	800ce6a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ce60:	893a      	ldrh	r2, [r7, #8]
 800ce62:	6879      	ldr	r1, [r7, #4]
 800ce64:	4618      	mov	r0, r3
 800ce66:	f000 fb93 	bl	800d590 <USBH_ParseStringDesc>
  }

  return status;
 800ce6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3718      	adds	r7, #24
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}

0800ce74 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b084      	sub	sp, #16
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	607b      	str	r3, [r7, #4]
 800ce7e:	460b      	mov	r3, r1
 800ce80:	72fb      	strb	r3, [r7, #11]
 800ce82:	4613      	mov	r3, r2
 800ce84:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	789b      	ldrb	r3, [r3, #2]
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d11c      	bne.n	800cec8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ce8e:	7afb      	ldrb	r3, [r7, #11]
 800ce90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce94:	b2da      	uxtb	r2, r3
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	2206      	movs	r2, #6
 800ce9e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	893a      	ldrh	r2, [r7, #8]
 800cea4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800cea6:	893b      	ldrh	r3, [r7, #8]
 800cea8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ceac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ceb0:	d104      	bne.n	800cebc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	f240 4209 	movw	r2, #1033	; 0x409
 800ceb8:	829a      	strh	r2, [r3, #20]
 800ceba:	e002      	b.n	800cec2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	2200      	movs	r2, #0
 800cec0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	8b3a      	ldrh	r2, [r7, #24]
 800cec6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800cec8:	8b3b      	ldrh	r3, [r7, #24]
 800ceca:	461a      	mov	r2, r3
 800cecc:	6879      	ldr	r1, [r7, #4]
 800cece:	68f8      	ldr	r0, [r7, #12]
 800ced0:	f000 fbac 	bl	800d62c <USBH_CtlReq>
 800ced4:	4603      	mov	r3, r0
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3710      	adds	r7, #16
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800cede:	b580      	push	{r7, lr}
 800cee0:	b082      	sub	sp, #8
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
 800cee6:	460b      	mov	r3, r1
 800cee8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	789b      	ldrb	r3, [r3, #2]
 800ceee:	2b01      	cmp	r3, #1
 800cef0:	d10f      	bne.n	800cf12 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2200      	movs	r2, #0
 800cef6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2205      	movs	r2, #5
 800cefc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800cefe:	78fb      	ldrb	r3, [r7, #3]
 800cf00:	b29a      	uxth	r2, r3
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cf12:	2200      	movs	r2, #0
 800cf14:	2100      	movs	r1, #0
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f000 fb88 	bl	800d62c <USBH_CtlReq>
 800cf1c:	4603      	mov	r3, r0
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3708      	adds	r7, #8
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}

0800cf26 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800cf26:	b580      	push	{r7, lr}
 800cf28:	b082      	sub	sp, #8
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
 800cf2e:	460b      	mov	r3, r1
 800cf30:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	789b      	ldrb	r3, [r3, #2]
 800cf36:	2b01      	cmp	r3, #1
 800cf38:	d10e      	bne.n	800cf58 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2209      	movs	r2, #9
 800cf44:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	887a      	ldrh	r2, [r7, #2]
 800cf4a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2200      	movs	r2, #0
 800cf56:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cf58:	2200      	movs	r2, #0
 800cf5a:	2100      	movs	r1, #0
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f000 fb65 	bl	800d62c <USBH_CtlReq>
 800cf62:	4603      	mov	r3, r0
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3708      	adds	r7, #8
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	460b      	mov	r3, r1
 800cf76:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	789b      	ldrb	r3, [r3, #2]
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d10f      	bne.n	800cfa0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2200      	movs	r2, #0
 800cf84:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2203      	movs	r2, #3
 800cf8a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800cf8c:	78fb      	ldrb	r3, [r7, #3]
 800cf8e:	b29a      	uxth	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	2100      	movs	r1, #0
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f000 fb41 	bl	800d62c <USBH_CtlReq>
 800cfaa:	4603      	mov	r3, r0
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3708      	adds	r7, #8
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b082      	sub	sp, #8
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	789b      	ldrb	r3, [r3, #2]
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d10f      	bne.n	800cfe8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2202      	movs	r2, #2
 800cfcc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2201      	movs	r2, #1
 800cfd2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800cfda:	78fb      	ldrb	r3, [r7, #3]
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cfe8:	2200      	movs	r2, #0
 800cfea:	2100      	movs	r1, #0
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f000 fb1d 	bl	800d62c <USBH_CtlReq>
 800cff2:	4603      	mov	r3, r0
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3708      	adds	r7, #8
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b087      	sub	sp, #28
 800d000:	af00      	add	r7, sp, #0
 800d002:	60f8      	str	r0, [r7, #12]
 800d004:	60b9      	str	r1, [r7, #8]
 800d006:	4613      	mov	r3, r2
 800d008:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f203 3326 	addw	r3, r3, #806	; 0x326
 800d010:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800d012:	2300      	movs	r3, #0
 800d014:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d101      	bne.n	800d020 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800d01c:	2302      	movs	r3, #2
 800d01e:	e098      	b.n	800d152 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	781a      	ldrb	r2, [r3, #0]
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	785a      	ldrb	r2, [r3, #1]
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	3302      	adds	r3, #2
 800d034:	781b      	ldrb	r3, [r3, #0]
 800d036:	b29a      	uxth	r2, r3
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	3303      	adds	r3, #3
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	b29b      	uxth	r3, r3
 800d040:	021b      	lsls	r3, r3, #8
 800d042:	b29b      	uxth	r3, r3
 800d044:	4313      	orrs	r3, r2
 800d046:	b29a      	uxth	r2, r3
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	791a      	ldrb	r2, [r3, #4]
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	795a      	ldrb	r2, [r3, #5]
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	799a      	ldrb	r2, [r3, #6]
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	79da      	ldrb	r2, [r3, #7]
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d072:	2b00      	cmp	r3, #0
 800d074:	d004      	beq.n	800d080 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d11b      	bne.n	800d0b8 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	79db      	ldrb	r3, [r3, #7]
 800d084:	2b20      	cmp	r3, #32
 800d086:	dc0f      	bgt.n	800d0a8 <USBH_ParseDevDesc+0xac>
 800d088:	2b08      	cmp	r3, #8
 800d08a:	db0f      	blt.n	800d0ac <USBH_ParseDevDesc+0xb0>
 800d08c:	3b08      	subs	r3, #8
 800d08e:	4a34      	ldr	r2, [pc, #208]	; (800d160 <USBH_ParseDevDesc+0x164>)
 800d090:	fa22 f303 	lsr.w	r3, r2, r3
 800d094:	f003 0301 	and.w	r3, r3, #1
 800d098:	2b00      	cmp	r3, #0
 800d09a:	bf14      	ite	ne
 800d09c:	2301      	movne	r3, #1
 800d09e:	2300      	moveq	r3, #0
 800d0a0:	b2db      	uxtb	r3, r3
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d106      	bne.n	800d0b4 <USBH_ParseDevDesc+0xb8>
 800d0a6:	e001      	b.n	800d0ac <USBH_ParseDevDesc+0xb0>
 800d0a8:	2b40      	cmp	r3, #64	; 0x40
 800d0aa:	d003      	beq.n	800d0b4 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	2208      	movs	r2, #8
 800d0b0:	71da      	strb	r2, [r3, #7]
        break;
 800d0b2:	e000      	b.n	800d0b6 <USBH_ParseDevDesc+0xba>
        break;
 800d0b4:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800d0b6:	e00e      	b.n	800d0d6 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d0be:	2b02      	cmp	r3, #2
 800d0c0:	d107      	bne.n	800d0d2 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	79db      	ldrb	r3, [r3, #7]
 800d0c6:	2b08      	cmp	r3, #8
 800d0c8:	d005      	beq.n	800d0d6 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	2208      	movs	r2, #8
 800d0ce:	71da      	strb	r2, [r3, #7]
 800d0d0:	e001      	b.n	800d0d6 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d0d2:	2303      	movs	r3, #3
 800d0d4:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800d0d6:	88fb      	ldrh	r3, [r7, #6]
 800d0d8:	2b08      	cmp	r3, #8
 800d0da:	d939      	bls.n	800d150 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	3308      	adds	r3, #8
 800d0e0:	781b      	ldrb	r3, [r3, #0]
 800d0e2:	b29a      	uxth	r2, r3
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	3309      	adds	r3, #9
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	b29b      	uxth	r3, r3
 800d0ec:	021b      	lsls	r3, r3, #8
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	4313      	orrs	r3, r2
 800d0f2:	b29a      	uxth	r2, r3
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	330a      	adds	r3, #10
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	b29a      	uxth	r2, r3
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	330b      	adds	r3, #11
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	b29b      	uxth	r3, r3
 800d108:	021b      	lsls	r3, r3, #8
 800d10a:	b29b      	uxth	r3, r3
 800d10c:	4313      	orrs	r3, r2
 800d10e:	b29a      	uxth	r2, r3
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	330c      	adds	r3, #12
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	b29a      	uxth	r2, r3
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	330d      	adds	r3, #13
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	b29b      	uxth	r3, r3
 800d124:	021b      	lsls	r3, r3, #8
 800d126:	b29b      	uxth	r3, r3
 800d128:	4313      	orrs	r3, r2
 800d12a:	b29a      	uxth	r2, r3
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	7b9a      	ldrb	r2, [r3, #14]
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	7bda      	ldrb	r2, [r3, #15]
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	7c1a      	ldrb	r2, [r3, #16]
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	7c5a      	ldrb	r2, [r3, #17]
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800d150:	7dfb      	ldrb	r3, [r7, #23]
}
 800d152:	4618      	mov	r0, r3
 800d154:	371c      	adds	r7, #28
 800d156:	46bd      	mov	sp, r7
 800d158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15c:	4770      	bx	lr
 800d15e:	bf00      	nop
 800d160:	01000101 	.word	0x01000101

0800d164 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b08c      	sub	sp, #48	; 0x30
 800d168:	af00      	add	r7, sp, #0
 800d16a:	60f8      	str	r0, [r7, #12]
 800d16c:	60b9      	str	r1, [r7, #8]
 800d16e:	4613      	mov	r3, r2
 800d170:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d178:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d17a:	2300      	movs	r3, #0
 800d17c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d180:	2300      	movs	r3, #0
 800d182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800d186:	2300      	movs	r3, #0
 800d188:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d101      	bne.n	800d196 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800d192:	2302      	movs	r3, #2
 800d194:	e0db      	b.n	800d34e <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	781a      	ldrb	r2, [r3, #0]
 800d19e:	6a3b      	ldr	r3, [r7, #32]
 800d1a0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	785a      	ldrb	r2, [r3, #1]
 800d1a6:	6a3b      	ldr	r3, [r7, #32]
 800d1a8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	3302      	adds	r3, #2
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	b29a      	uxth	r2, r3
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	3303      	adds	r3, #3
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	021b      	lsls	r3, r3, #8
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	4313      	orrs	r3, r2
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1c6:	bf28      	it	cs
 800d1c8:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800d1cc:	b29a      	uxth	r2, r3
 800d1ce:	6a3b      	ldr	r3, [r7, #32]
 800d1d0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	791a      	ldrb	r2, [r3, #4]
 800d1d6:	6a3b      	ldr	r3, [r7, #32]
 800d1d8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	795a      	ldrb	r2, [r3, #5]
 800d1de:	6a3b      	ldr	r3, [r7, #32]
 800d1e0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	799a      	ldrb	r2, [r3, #6]
 800d1e6:	6a3b      	ldr	r3, [r7, #32]
 800d1e8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	79da      	ldrb	r2, [r3, #7]
 800d1ee:	6a3b      	ldr	r3, [r7, #32]
 800d1f0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	7a1a      	ldrb	r2, [r3, #8]
 800d1f6:	6a3b      	ldr	r3, [r7, #32]
 800d1f8:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800d1fa:	6a3b      	ldr	r3, [r7, #32]
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	2b09      	cmp	r3, #9
 800d200:	d002      	beq.n	800d208 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d202:	6a3b      	ldr	r3, [r7, #32]
 800d204:	2209      	movs	r2, #9
 800d206:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d208:	88fb      	ldrh	r3, [r7, #6]
 800d20a:	2b09      	cmp	r3, #9
 800d20c:	f240 809d 	bls.w	800d34a <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800d210:	2309      	movs	r3, #9
 800d212:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d214:	2300      	movs	r3, #0
 800d216:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d218:	e081      	b.n	800d31e <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d21a:	f107 0316 	add.w	r3, r7, #22
 800d21e:	4619      	mov	r1, r3
 800d220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d222:	f000 f9e8 	bl	800d5f6 <USBH_GetNextDesc>
 800d226:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d22a:	785b      	ldrb	r3, [r3, #1]
 800d22c:	2b04      	cmp	r3, #4
 800d22e:	d176      	bne.n	800d31e <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	2b09      	cmp	r3, #9
 800d236:	d002      	beq.n	800d23e <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23a:	2209      	movs	r2, #9
 800d23c:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800d23e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d242:	221a      	movs	r2, #26
 800d244:	fb02 f303 	mul.w	r3, r2, r3
 800d248:	3308      	adds	r3, #8
 800d24a:	6a3a      	ldr	r2, [r7, #32]
 800d24c:	4413      	add	r3, r2
 800d24e:	3302      	adds	r3, #2
 800d250:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d252:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d254:	69f8      	ldr	r0, [r7, #28]
 800d256:	f000 f87e 	bl	800d356 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d25a:	2300      	movs	r3, #0
 800d25c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800d260:	2300      	movs	r3, #0
 800d262:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d264:	e043      	b.n	800d2ee <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d266:	f107 0316 	add.w	r3, r7, #22
 800d26a:	4619      	mov	r1, r3
 800d26c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d26e:	f000 f9c2 	bl	800d5f6 <USBH_GetNextDesc>
 800d272:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d276:	785b      	ldrb	r3, [r3, #1]
 800d278:	2b05      	cmp	r3, #5
 800d27a:	d138      	bne.n	800d2ee <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	795b      	ldrb	r3, [r3, #5]
 800d280:	2b01      	cmp	r3, #1
 800d282:	d113      	bne.n	800d2ac <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d284:	69fb      	ldr	r3, [r7, #28]
 800d286:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800d288:	2b02      	cmp	r3, #2
 800d28a:	d003      	beq.n	800d294 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d28c:	69fb      	ldr	r3, [r7, #28]
 800d28e:	799b      	ldrb	r3, [r3, #6]
 800d290:	2b03      	cmp	r3, #3
 800d292:	d10b      	bne.n	800d2ac <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d294:	69fb      	ldr	r3, [r7, #28]
 800d296:	79db      	ldrb	r3, [r3, #7]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d10b      	bne.n	800d2b4 <USBH_ParseCfgDesc+0x150>
 800d29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	2b09      	cmp	r3, #9
 800d2a2:	d007      	beq.n	800d2b4 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800d2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a6:	2209      	movs	r2, #9
 800d2a8:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d2aa:	e003      	b.n	800d2b4 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ae:	2207      	movs	r2, #7
 800d2b0:	701a      	strb	r2, [r3, #0]
 800d2b2:	e000      	b.n	800d2b6 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d2b4:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d2b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2ba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d2be:	3201      	adds	r2, #1
 800d2c0:	00d2      	lsls	r2, r2, #3
 800d2c2:	211a      	movs	r1, #26
 800d2c4:	fb01 f303 	mul.w	r3, r1, r3
 800d2c8:	4413      	add	r3, r2
 800d2ca:	3308      	adds	r3, #8
 800d2cc:	6a3a      	ldr	r2, [r7, #32]
 800d2ce:	4413      	add	r3, r2
 800d2d0:	3304      	adds	r3, #4
 800d2d2:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800d2d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2d6:	69b9      	ldr	r1, [r7, #24]
 800d2d8:	68f8      	ldr	r0, [r7, #12]
 800d2da:	f000 f870 	bl	800d3be <USBH_ParseEPDesc>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800d2e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d2e8:	3301      	adds	r3, #1
 800d2ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d2ee:	69fb      	ldr	r3, [r7, #28]
 800d2f0:	791b      	ldrb	r3, [r3, #4]
 800d2f2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d204      	bcs.n	800d304 <USBH_ParseCfgDesc+0x1a0>
 800d2fa:	6a3b      	ldr	r3, [r7, #32]
 800d2fc:	885a      	ldrh	r2, [r3, #2]
 800d2fe:	8afb      	ldrh	r3, [r7, #22]
 800d300:	429a      	cmp	r2, r3
 800d302:	d8b0      	bhi.n	800d266 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	791b      	ldrb	r3, [r3, #4]
 800d308:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d201      	bcs.n	800d314 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800d310:	2303      	movs	r3, #3
 800d312:	e01c      	b.n	800d34e <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800d314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d318:	3301      	adds	r3, #1
 800d31a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d31e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d322:	2b01      	cmp	r3, #1
 800d324:	d805      	bhi.n	800d332 <USBH_ParseCfgDesc+0x1ce>
 800d326:	6a3b      	ldr	r3, [r7, #32]
 800d328:	885a      	ldrh	r2, [r3, #2]
 800d32a:	8afb      	ldrh	r3, [r7, #22]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	f63f af74 	bhi.w	800d21a <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800d332:	6a3b      	ldr	r3, [r7, #32]
 800d334:	791b      	ldrb	r3, [r3, #4]
 800d336:	2b02      	cmp	r3, #2
 800d338:	bf28      	it	cs
 800d33a:	2302      	movcs	r3, #2
 800d33c:	b2db      	uxtb	r3, r3
 800d33e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d342:	429a      	cmp	r2, r3
 800d344:	d201      	bcs.n	800d34a <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800d346:	2303      	movs	r3, #3
 800d348:	e001      	b.n	800d34e <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800d34a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3730      	adds	r7, #48	; 0x30
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}

0800d356 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800d356:	b480      	push	{r7}
 800d358:	b083      	sub	sp, #12
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
 800d35e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	781a      	ldrb	r2, [r3, #0]
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	785a      	ldrb	r2, [r3, #1]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	789a      	ldrb	r2, [r3, #2]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	78da      	ldrb	r2, [r3, #3]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	3304      	adds	r3, #4
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	2b02      	cmp	r3, #2
 800d388:	bf28      	it	cs
 800d38a:	2302      	movcs	r3, #2
 800d38c:	b2da      	uxtb	r2, r3
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	795a      	ldrb	r2, [r3, #5]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	799a      	ldrb	r2, [r3, #6]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	79da      	ldrb	r2, [r3, #7]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	7a1a      	ldrb	r2, [r3, #8]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	721a      	strb	r2, [r3, #8]
}
 800d3b2:	bf00      	nop
 800d3b4:	370c      	adds	r7, #12
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3bc:	4770      	bx	lr

0800d3be <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800d3be:	b480      	push	{r7}
 800d3c0:	b087      	sub	sp, #28
 800d3c2:	af00      	add	r7, sp, #0
 800d3c4:	60f8      	str	r0, [r7, #12]
 800d3c6:	60b9      	str	r1, [r7, #8]
 800d3c8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	781a      	ldrb	r2, [r3, #0]
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	785a      	ldrb	r2, [r3, #1]
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	789a      	ldrb	r2, [r3, #2]
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	78da      	ldrb	r2, [r3, #3]
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	3304      	adds	r3, #4
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	b29a      	uxth	r2, r3
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	3305      	adds	r3, #5
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	021b      	lsls	r3, r3, #8
 800d400:	b29b      	uxth	r3, r3
 800d402:	4313      	orrs	r3, r2
 800d404:	b29a      	uxth	r2, r3
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	799a      	ldrb	r2, [r3, #6]
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	889b      	ldrh	r3, [r3, #4]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d009      	beq.n	800d42e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d41e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d422:	d804      	bhi.n	800d42e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d42c:	d901      	bls.n	800d432 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800d42e:	2303      	movs	r3, #3
 800d430:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d136      	bne.n	800d4aa <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	78db      	ldrb	r3, [r3, #3]
 800d440:	f003 0303 	and.w	r3, r3, #3
 800d444:	2b02      	cmp	r3, #2
 800d446:	d108      	bne.n	800d45a <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	889b      	ldrh	r3, [r3, #4]
 800d44c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d450:	f240 8097 	bls.w	800d582 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800d454:	2303      	movs	r3, #3
 800d456:	75fb      	strb	r3, [r7, #23]
 800d458:	e093      	b.n	800d582 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	78db      	ldrb	r3, [r3, #3]
 800d45e:	f003 0303 	and.w	r3, r3, #3
 800d462:	2b00      	cmp	r3, #0
 800d464:	d107      	bne.n	800d476 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	889b      	ldrh	r3, [r3, #4]
 800d46a:	2b40      	cmp	r3, #64	; 0x40
 800d46c:	f240 8089 	bls.w	800d582 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800d470:	2303      	movs	r3, #3
 800d472:	75fb      	strb	r3, [r7, #23]
 800d474:	e085      	b.n	800d582 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	78db      	ldrb	r3, [r3, #3]
 800d47a:	f003 0303 	and.w	r3, r3, #3
 800d47e:	2b01      	cmp	r3, #1
 800d480:	d005      	beq.n	800d48e <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	78db      	ldrb	r3, [r3, #3]
 800d486:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d48a:	2b03      	cmp	r3, #3
 800d48c:	d10a      	bne.n	800d4a4 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	799b      	ldrb	r3, [r3, #6]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d003      	beq.n	800d49e <USBH_ParseEPDesc+0xe0>
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	799b      	ldrb	r3, [r3, #6]
 800d49a:	2b10      	cmp	r3, #16
 800d49c:	d970      	bls.n	800d580 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d49e:	2303      	movs	r3, #3
 800d4a0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d4a2:	e06d      	b.n	800d580 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d4a4:	2303      	movs	r3, #3
 800d4a6:	75fb      	strb	r3, [r7, #23]
 800d4a8:	e06b      	b.n	800d582 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d13c      	bne.n	800d52e <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	78db      	ldrb	r3, [r3, #3]
 800d4b8:	f003 0303 	and.w	r3, r3, #3
 800d4bc:	2b02      	cmp	r3, #2
 800d4be:	d005      	beq.n	800d4cc <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	78db      	ldrb	r3, [r3, #3]
 800d4c4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d106      	bne.n	800d4da <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	889b      	ldrh	r3, [r3, #4]
 800d4d0:	2b40      	cmp	r3, #64	; 0x40
 800d4d2:	d956      	bls.n	800d582 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800d4d4:	2303      	movs	r3, #3
 800d4d6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d4d8:	e053      	b.n	800d582 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	78db      	ldrb	r3, [r3, #3]
 800d4de:	f003 0303 	and.w	r3, r3, #3
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	d10e      	bne.n	800d504 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	799b      	ldrb	r3, [r3, #6]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d007      	beq.n	800d4fe <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800d4f2:	2b10      	cmp	r3, #16
 800d4f4:	d803      	bhi.n	800d4fe <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800d4fa:	2b40      	cmp	r3, #64	; 0x40
 800d4fc:	d941      	bls.n	800d582 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800d4fe:	2303      	movs	r3, #3
 800d500:	75fb      	strb	r3, [r7, #23]
 800d502:	e03e      	b.n	800d582 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	78db      	ldrb	r3, [r3, #3]
 800d508:	f003 0303 	and.w	r3, r3, #3
 800d50c:	2b03      	cmp	r3, #3
 800d50e:	d10b      	bne.n	800d528 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	799b      	ldrb	r3, [r3, #6]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d004      	beq.n	800d522 <USBH_ParseEPDesc+0x164>
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	889b      	ldrh	r3, [r3, #4]
 800d51c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d520:	d32f      	bcc.n	800d582 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800d522:	2303      	movs	r3, #3
 800d524:	75fb      	strb	r3, [r7, #23]
 800d526:	e02c      	b.n	800d582 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d528:	2303      	movs	r3, #3
 800d52a:	75fb      	strb	r3, [r7, #23]
 800d52c:	e029      	b.n	800d582 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d534:	2b02      	cmp	r3, #2
 800d536:	d120      	bne.n	800d57a <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	78db      	ldrb	r3, [r3, #3]
 800d53c:	f003 0303 	and.w	r3, r3, #3
 800d540:	2b00      	cmp	r3, #0
 800d542:	d106      	bne.n	800d552 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	889b      	ldrh	r3, [r3, #4]
 800d548:	2b08      	cmp	r3, #8
 800d54a:	d01a      	beq.n	800d582 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800d54c:	2303      	movs	r3, #3
 800d54e:	75fb      	strb	r3, [r7, #23]
 800d550:	e017      	b.n	800d582 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	78db      	ldrb	r3, [r3, #3]
 800d556:	f003 0303 	and.w	r3, r3, #3
 800d55a:	2b03      	cmp	r3, #3
 800d55c:	d10a      	bne.n	800d574 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	799b      	ldrb	r3, [r3, #6]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d003      	beq.n	800d56e <USBH_ParseEPDesc+0x1b0>
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	889b      	ldrh	r3, [r3, #4]
 800d56a:	2b08      	cmp	r3, #8
 800d56c:	d909      	bls.n	800d582 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800d56e:	2303      	movs	r3, #3
 800d570:	75fb      	strb	r3, [r7, #23]
 800d572:	e006      	b.n	800d582 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d574:	2303      	movs	r3, #3
 800d576:	75fb      	strb	r3, [r7, #23]
 800d578:	e003      	b.n	800d582 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d57a:	2303      	movs	r3, #3
 800d57c:	75fb      	strb	r3, [r7, #23]
 800d57e:	e000      	b.n	800d582 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d580:	bf00      	nop
  }

  return status;
 800d582:	7dfb      	ldrb	r3, [r7, #23]
}
 800d584:	4618      	mov	r0, r3
 800d586:	371c      	adds	r7, #28
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr

0800d590 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d590:	b480      	push	{r7}
 800d592:	b087      	sub	sp, #28
 800d594:	af00      	add	r7, sp, #0
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	60b9      	str	r1, [r7, #8]
 800d59a:	4613      	mov	r3, r2
 800d59c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	781b      	ldrb	r3, [r3, #0]
 800d5a4:	2b03      	cmp	r3, #3
 800d5a6:	d120      	bne.n	800d5ea <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	1e9a      	subs	r2, r3, #2
 800d5ae:	88fb      	ldrh	r3, [r7, #6]
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	bf28      	it	cs
 800d5b4:	4613      	movcs	r3, r2
 800d5b6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	3302      	adds	r3, #2
 800d5bc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d5be:	2300      	movs	r3, #0
 800d5c0:	82fb      	strh	r3, [r7, #22]
 800d5c2:	e00b      	b.n	800d5dc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d5c4:	8afb      	ldrh	r3, [r7, #22]
 800d5c6:	68fa      	ldr	r2, [r7, #12]
 800d5c8:	4413      	add	r3, r2
 800d5ca:	781a      	ldrb	r2, [r3, #0]
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d5d6:	8afb      	ldrh	r3, [r7, #22]
 800d5d8:	3302      	adds	r3, #2
 800d5da:	82fb      	strh	r3, [r7, #22]
 800d5dc:	8afa      	ldrh	r2, [r7, #22]
 800d5de:	8abb      	ldrh	r3, [r7, #20]
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d3ef      	bcc.n	800d5c4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	701a      	strb	r2, [r3, #0]
  }
}
 800d5ea:	bf00      	nop
 800d5ec:	371c      	adds	r7, #28
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f4:	4770      	bx	lr

0800d5f6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d5f6:	b480      	push	{r7}
 800d5f8:	b085      	sub	sp, #20
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	6078      	str	r0, [r7, #4]
 800d5fe:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	881a      	ldrh	r2, [r3, #0]
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	b29b      	uxth	r3, r3
 800d60a:	4413      	add	r3, r2
 800d60c:	b29a      	uxth	r2, r3
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	4413      	add	r3, r2
 800d61c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d61e:	68fb      	ldr	r3, [r7, #12]
}
 800d620:	4618      	mov	r0, r3
 800d622:	3714      	adds	r7, #20
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr

0800d62c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b086      	sub	sp, #24
 800d630:	af00      	add	r7, sp, #0
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	60b9      	str	r1, [r7, #8]
 800d636:	4613      	mov	r3, r2
 800d638:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d63a:	2301      	movs	r3, #1
 800d63c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	789b      	ldrb	r3, [r3, #2]
 800d642:	2b01      	cmp	r3, #1
 800d644:	d002      	beq.n	800d64c <USBH_CtlReq+0x20>
 800d646:	2b02      	cmp	r3, #2
 800d648:	d00f      	beq.n	800d66a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d64a:	e027      	b.n	800d69c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	68ba      	ldr	r2, [r7, #8]
 800d650:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	88fa      	ldrh	r2, [r7, #6]
 800d656:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2201      	movs	r2, #1
 800d65c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2202      	movs	r2, #2
 800d662:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d664:	2301      	movs	r3, #1
 800d666:	75fb      	strb	r3, [r7, #23]
      break;
 800d668:	e018      	b.n	800d69c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d66a:	68f8      	ldr	r0, [r7, #12]
 800d66c:	f000 f81c 	bl	800d6a8 <USBH_HandleControl>
 800d670:	4603      	mov	r3, r0
 800d672:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d674:	7dfb      	ldrb	r3, [r7, #23]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d002      	beq.n	800d680 <USBH_CtlReq+0x54>
 800d67a:	7dfb      	ldrb	r3, [r7, #23]
 800d67c:	2b03      	cmp	r3, #3
 800d67e:	d106      	bne.n	800d68e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	2201      	movs	r2, #1
 800d684:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2200      	movs	r2, #0
 800d68a:	761a      	strb	r2, [r3, #24]
      break;
 800d68c:	e005      	b.n	800d69a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d68e:	7dfb      	ldrb	r3, [r7, #23]
 800d690:	2b02      	cmp	r3, #2
 800d692:	d102      	bne.n	800d69a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2201      	movs	r2, #1
 800d698:	709a      	strb	r2, [r3, #2]
      break;
 800d69a:	bf00      	nop
  }
  return status;
 800d69c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3718      	adds	r7, #24
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
	...

0800d6a8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b086      	sub	sp, #24
 800d6ac:	af02      	add	r7, sp, #8
 800d6ae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	7e1b      	ldrb	r3, [r3, #24]
 800d6bc:	3b01      	subs	r3, #1
 800d6be:	2b0a      	cmp	r3, #10
 800d6c0:	f200 8156 	bhi.w	800d970 <USBH_HandleControl+0x2c8>
 800d6c4:	a201      	add	r2, pc, #4	; (adr r2, 800d6cc <USBH_HandleControl+0x24>)
 800d6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6ca:	bf00      	nop
 800d6cc:	0800d6f9 	.word	0x0800d6f9
 800d6d0:	0800d713 	.word	0x0800d713
 800d6d4:	0800d77d 	.word	0x0800d77d
 800d6d8:	0800d7a3 	.word	0x0800d7a3
 800d6dc:	0800d7db 	.word	0x0800d7db
 800d6e0:	0800d805 	.word	0x0800d805
 800d6e4:	0800d857 	.word	0x0800d857
 800d6e8:	0800d879 	.word	0x0800d879
 800d6ec:	0800d8b5 	.word	0x0800d8b5
 800d6f0:	0800d8db 	.word	0x0800d8db
 800d6f4:	0800d919 	.word	0x0800d919
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f103 0110 	add.w	r1, r3, #16
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	795b      	ldrb	r3, [r3, #5]
 800d702:	461a      	mov	r2, r3
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f000 f943 	bl	800d990 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2202      	movs	r2, #2
 800d70e:	761a      	strb	r2, [r3, #24]
      break;
 800d710:	e139      	b.n	800d986 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	795b      	ldrb	r3, [r3, #5]
 800d716:	4619      	mov	r1, r3
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f000 fd29 	bl	800e170 <USBH_LL_GetURBState>
 800d71e:	4603      	mov	r3, r0
 800d720:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d722:	7bbb      	ldrb	r3, [r7, #14]
 800d724:	2b01      	cmp	r3, #1
 800d726:	d11e      	bne.n	800d766 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	7c1b      	ldrb	r3, [r3, #16]
 800d72c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d730:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	8adb      	ldrh	r3, [r3, #22]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d00a      	beq.n	800d750 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d73a:	7b7b      	ldrb	r3, [r7, #13]
 800d73c:	2b80      	cmp	r3, #128	; 0x80
 800d73e:	d103      	bne.n	800d748 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2203      	movs	r2, #3
 800d744:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d746:	e115      	b.n	800d974 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2205      	movs	r2, #5
 800d74c:	761a      	strb	r2, [r3, #24]
      break;
 800d74e:	e111      	b.n	800d974 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800d750:	7b7b      	ldrb	r3, [r7, #13]
 800d752:	2b80      	cmp	r3, #128	; 0x80
 800d754:	d103      	bne.n	800d75e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2209      	movs	r2, #9
 800d75a:	761a      	strb	r2, [r3, #24]
      break;
 800d75c:	e10a      	b.n	800d974 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2207      	movs	r2, #7
 800d762:	761a      	strb	r2, [r3, #24]
      break;
 800d764:	e106      	b.n	800d974 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d766:	7bbb      	ldrb	r3, [r7, #14]
 800d768:	2b04      	cmp	r3, #4
 800d76a:	d003      	beq.n	800d774 <USBH_HandleControl+0xcc>
 800d76c:	7bbb      	ldrb	r3, [r7, #14]
 800d76e:	2b02      	cmp	r3, #2
 800d770:	f040 8100 	bne.w	800d974 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	220b      	movs	r2, #11
 800d778:	761a      	strb	r2, [r3, #24]
      break;
 800d77a:	e0fb      	b.n	800d974 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d782:	b29a      	uxth	r2, r3
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6899      	ldr	r1, [r3, #8]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	899a      	ldrh	r2, [r3, #12]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	791b      	ldrb	r3, [r3, #4]
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f000 f93a 	bl	800da0e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2204      	movs	r2, #4
 800d79e:	761a      	strb	r2, [r3, #24]
      break;
 800d7a0:	e0f1      	b.n	800d986 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	791b      	ldrb	r3, [r3, #4]
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f000 fce1 	bl	800e170 <USBH_LL_GetURBState>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d7b2:	7bbb      	ldrb	r3, [r7, #14]
 800d7b4:	2b01      	cmp	r3, #1
 800d7b6:	d102      	bne.n	800d7be <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2209      	movs	r2, #9
 800d7bc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d7be:	7bbb      	ldrb	r3, [r7, #14]
 800d7c0:	2b05      	cmp	r3, #5
 800d7c2:	d102      	bne.n	800d7ca <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d7c4:	2303      	movs	r3, #3
 800d7c6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d7c8:	e0d6      	b.n	800d978 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800d7ca:	7bbb      	ldrb	r3, [r7, #14]
 800d7cc:	2b04      	cmp	r3, #4
 800d7ce:	f040 80d3 	bne.w	800d978 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	220b      	movs	r2, #11
 800d7d6:	761a      	strb	r2, [r3, #24]
      break;
 800d7d8:	e0ce      	b.n	800d978 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6899      	ldr	r1, [r3, #8]
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	899a      	ldrh	r2, [r3, #12]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	795b      	ldrb	r3, [r3, #5]
 800d7e6:	2001      	movs	r0, #1
 800d7e8:	9000      	str	r0, [sp, #0]
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f000 f8ea 	bl	800d9c4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d7f6:	b29a      	uxth	r2, r3
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2206      	movs	r2, #6
 800d800:	761a      	strb	r2, [r3, #24]
      break;
 800d802:	e0c0      	b.n	800d986 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	795b      	ldrb	r3, [r3, #5]
 800d808:	4619      	mov	r1, r3
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f000 fcb0 	bl	800e170 <USBH_LL_GetURBState>
 800d810:	4603      	mov	r3, r0
 800d812:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d814:	7bbb      	ldrb	r3, [r7, #14]
 800d816:	2b01      	cmp	r3, #1
 800d818:	d103      	bne.n	800d822 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2207      	movs	r2, #7
 800d81e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d820:	e0ac      	b.n	800d97c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800d822:	7bbb      	ldrb	r3, [r7, #14]
 800d824:	2b05      	cmp	r3, #5
 800d826:	d105      	bne.n	800d834 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	220c      	movs	r2, #12
 800d82c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d82e:	2303      	movs	r3, #3
 800d830:	73fb      	strb	r3, [r7, #15]
      break;
 800d832:	e0a3      	b.n	800d97c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d834:	7bbb      	ldrb	r3, [r7, #14]
 800d836:	2b02      	cmp	r3, #2
 800d838:	d103      	bne.n	800d842 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2205      	movs	r2, #5
 800d83e:	761a      	strb	r2, [r3, #24]
      break;
 800d840:	e09c      	b.n	800d97c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800d842:	7bbb      	ldrb	r3, [r7, #14]
 800d844:	2b04      	cmp	r3, #4
 800d846:	f040 8099 	bne.w	800d97c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	220b      	movs	r2, #11
 800d84e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d850:	2302      	movs	r3, #2
 800d852:	73fb      	strb	r3, [r7, #15]
      break;
 800d854:	e092      	b.n	800d97c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	791b      	ldrb	r3, [r3, #4]
 800d85a:	2200      	movs	r2, #0
 800d85c:	2100      	movs	r1, #0
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f000 f8d5 	bl	800da0e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d86a:	b29a      	uxth	r2, r3
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2208      	movs	r2, #8
 800d874:	761a      	strb	r2, [r3, #24]

      break;
 800d876:	e086      	b.n	800d986 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	791b      	ldrb	r3, [r3, #4]
 800d87c:	4619      	mov	r1, r3
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f000 fc76 	bl	800e170 <USBH_LL_GetURBState>
 800d884:	4603      	mov	r3, r0
 800d886:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d888:	7bbb      	ldrb	r3, [r7, #14]
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d105      	bne.n	800d89a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	220d      	movs	r2, #13
 800d892:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d894:	2300      	movs	r3, #0
 800d896:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d898:	e072      	b.n	800d980 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800d89a:	7bbb      	ldrb	r3, [r7, #14]
 800d89c:	2b04      	cmp	r3, #4
 800d89e:	d103      	bne.n	800d8a8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	220b      	movs	r2, #11
 800d8a4:	761a      	strb	r2, [r3, #24]
      break;
 800d8a6:	e06b      	b.n	800d980 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800d8a8:	7bbb      	ldrb	r3, [r7, #14]
 800d8aa:	2b05      	cmp	r3, #5
 800d8ac:	d168      	bne.n	800d980 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800d8ae:	2303      	movs	r3, #3
 800d8b0:	73fb      	strb	r3, [r7, #15]
      break;
 800d8b2:	e065      	b.n	800d980 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	795b      	ldrb	r3, [r3, #5]
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	9200      	str	r2, [sp, #0]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	2100      	movs	r1, #0
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f000 f87f 	bl	800d9c4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d8cc:	b29a      	uxth	r2, r3
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	220a      	movs	r2, #10
 800d8d6:	761a      	strb	r2, [r3, #24]
      break;
 800d8d8:	e055      	b.n	800d986 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	795b      	ldrb	r3, [r3, #5]
 800d8de:	4619      	mov	r1, r3
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f000 fc45 	bl	800e170 <USBH_LL_GetURBState>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d8ea:	7bbb      	ldrb	r3, [r7, #14]
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d105      	bne.n	800d8fc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	220d      	movs	r2, #13
 800d8f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d8fa:	e043      	b.n	800d984 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d8fc:	7bbb      	ldrb	r3, [r7, #14]
 800d8fe:	2b02      	cmp	r3, #2
 800d900:	d103      	bne.n	800d90a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2209      	movs	r2, #9
 800d906:	761a      	strb	r2, [r3, #24]
      break;
 800d908:	e03c      	b.n	800d984 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800d90a:	7bbb      	ldrb	r3, [r7, #14]
 800d90c:	2b04      	cmp	r3, #4
 800d90e:	d139      	bne.n	800d984 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	220b      	movs	r2, #11
 800d914:	761a      	strb	r2, [r3, #24]
      break;
 800d916:	e035      	b.n	800d984 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	7e5b      	ldrb	r3, [r3, #25]
 800d91c:	3301      	adds	r3, #1
 800d91e:	b2da      	uxtb	r2, r3
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	765a      	strb	r2, [r3, #25]
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	7e5b      	ldrb	r3, [r3, #25]
 800d928:	2b02      	cmp	r3, #2
 800d92a:	d806      	bhi.n	800d93a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2201      	movs	r2, #1
 800d930:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2201      	movs	r2, #1
 800d936:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d938:	e025      	b.n	800d986 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d940:	2106      	movs	r1, #6
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2200      	movs	r2, #0
 800d94a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	795b      	ldrb	r3, [r3, #5]
 800d950:	4619      	mov	r1, r3
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f000 f90c 	bl	800db70 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	791b      	ldrb	r3, [r3, #4]
 800d95c:	4619      	mov	r1, r3
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 f906 	bl	800db70 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2200      	movs	r2, #0
 800d968:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d96a:	2302      	movs	r3, #2
 800d96c:	73fb      	strb	r3, [r7, #15]
      break;
 800d96e:	e00a      	b.n	800d986 <USBH_HandleControl+0x2de>

    default:
      break;
 800d970:	bf00      	nop
 800d972:	e008      	b.n	800d986 <USBH_HandleControl+0x2de>
      break;
 800d974:	bf00      	nop
 800d976:	e006      	b.n	800d986 <USBH_HandleControl+0x2de>
      break;
 800d978:	bf00      	nop
 800d97a:	e004      	b.n	800d986 <USBH_HandleControl+0x2de>
      break;
 800d97c:	bf00      	nop
 800d97e:	e002      	b.n	800d986 <USBH_HandleControl+0x2de>
      break;
 800d980:	bf00      	nop
 800d982:	e000      	b.n	800d986 <USBH_HandleControl+0x2de>
      break;
 800d984:	bf00      	nop
  }

  return status;
 800d986:	7bfb      	ldrb	r3, [r7, #15]
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3710      	adds	r7, #16
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b088      	sub	sp, #32
 800d994:	af04      	add	r7, sp, #16
 800d996:	60f8      	str	r0, [r7, #12]
 800d998:	60b9      	str	r1, [r7, #8]
 800d99a:	4613      	mov	r3, r2
 800d99c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d99e:	79f9      	ldrb	r1, [r7, #7]
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	9303      	str	r3, [sp, #12]
 800d9a4:	2308      	movs	r3, #8
 800d9a6:	9302      	str	r3, [sp, #8]
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	9301      	str	r3, [sp, #4]
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	9300      	str	r3, [sp, #0]
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	68f8      	ldr	r0, [r7, #12]
 800d9b6:	f000 fbaa 	bl	800e10e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d9ba:	2300      	movs	r3, #0
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3710      	adds	r7, #16
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b088      	sub	sp, #32
 800d9c8:	af04      	add	r7, sp, #16
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	4611      	mov	r1, r2
 800d9d0:	461a      	mov	r2, r3
 800d9d2:	460b      	mov	r3, r1
 800d9d4:	80fb      	strh	r3, [r7, #6]
 800d9d6:	4613      	mov	r3, r2
 800d9d8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d001      	beq.n	800d9e8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d9e8:	7979      	ldrb	r1, [r7, #5]
 800d9ea:	7e3b      	ldrb	r3, [r7, #24]
 800d9ec:	9303      	str	r3, [sp, #12]
 800d9ee:	88fb      	ldrh	r3, [r7, #6]
 800d9f0:	9302      	str	r3, [sp, #8]
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	9301      	str	r3, [sp, #4]
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	9300      	str	r3, [sp, #0]
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	68f8      	ldr	r0, [r7, #12]
 800da00:	f000 fb85 	bl	800e10e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800da04:	2300      	movs	r3, #0
}
 800da06:	4618      	mov	r0, r3
 800da08:	3710      	adds	r7, #16
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}

0800da0e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800da0e:	b580      	push	{r7, lr}
 800da10:	b088      	sub	sp, #32
 800da12:	af04      	add	r7, sp, #16
 800da14:	60f8      	str	r0, [r7, #12]
 800da16:	60b9      	str	r1, [r7, #8]
 800da18:	4611      	mov	r1, r2
 800da1a:	461a      	mov	r2, r3
 800da1c:	460b      	mov	r3, r1
 800da1e:	80fb      	strh	r3, [r7, #6]
 800da20:	4613      	mov	r3, r2
 800da22:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800da24:	7979      	ldrb	r1, [r7, #5]
 800da26:	2300      	movs	r3, #0
 800da28:	9303      	str	r3, [sp, #12]
 800da2a:	88fb      	ldrh	r3, [r7, #6]
 800da2c:	9302      	str	r3, [sp, #8]
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	9301      	str	r3, [sp, #4]
 800da32:	2301      	movs	r3, #1
 800da34:	9300      	str	r3, [sp, #0]
 800da36:	2300      	movs	r3, #0
 800da38:	2201      	movs	r2, #1
 800da3a:	68f8      	ldr	r0, [r7, #12]
 800da3c:	f000 fb67 	bl	800e10e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800da40:	2300      	movs	r3, #0

}
 800da42:	4618      	mov	r0, r3
 800da44:	3710      	adds	r7, #16
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}

0800da4a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800da4a:	b580      	push	{r7, lr}
 800da4c:	b088      	sub	sp, #32
 800da4e:	af04      	add	r7, sp, #16
 800da50:	60f8      	str	r0, [r7, #12]
 800da52:	60b9      	str	r1, [r7, #8]
 800da54:	4611      	mov	r1, r2
 800da56:	461a      	mov	r2, r3
 800da58:	460b      	mov	r3, r1
 800da5a:	80fb      	strh	r3, [r7, #6]
 800da5c:	4613      	mov	r3, r2
 800da5e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800da66:	2b00      	cmp	r3, #0
 800da68:	d001      	beq.n	800da6e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800da6a:	2300      	movs	r3, #0
 800da6c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800da6e:	7979      	ldrb	r1, [r7, #5]
 800da70:	7e3b      	ldrb	r3, [r7, #24]
 800da72:	9303      	str	r3, [sp, #12]
 800da74:	88fb      	ldrh	r3, [r7, #6]
 800da76:	9302      	str	r3, [sp, #8]
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	9301      	str	r3, [sp, #4]
 800da7c:	2301      	movs	r3, #1
 800da7e:	9300      	str	r3, [sp, #0]
 800da80:	2302      	movs	r3, #2
 800da82:	2200      	movs	r2, #0
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	f000 fb42 	bl	800e10e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800da8a:	2300      	movs	r3, #0
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3710      	adds	r7, #16
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}

0800da94 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b088      	sub	sp, #32
 800da98:	af04      	add	r7, sp, #16
 800da9a:	60f8      	str	r0, [r7, #12]
 800da9c:	60b9      	str	r1, [r7, #8]
 800da9e:	4611      	mov	r1, r2
 800daa0:	461a      	mov	r2, r3
 800daa2:	460b      	mov	r3, r1
 800daa4:	80fb      	strh	r3, [r7, #6]
 800daa6:	4613      	mov	r3, r2
 800daa8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800daaa:	7979      	ldrb	r1, [r7, #5]
 800daac:	2300      	movs	r3, #0
 800daae:	9303      	str	r3, [sp, #12]
 800dab0:	88fb      	ldrh	r3, [r7, #6]
 800dab2:	9302      	str	r3, [sp, #8]
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	9301      	str	r3, [sp, #4]
 800dab8:	2301      	movs	r3, #1
 800daba:	9300      	str	r3, [sp, #0]
 800dabc:	2302      	movs	r3, #2
 800dabe:	2201      	movs	r2, #1
 800dac0:	68f8      	ldr	r0, [r7, #12]
 800dac2:	f000 fb24 	bl	800e10e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800dac6:	2300      	movs	r3, #0
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3710      	adds	r7, #16
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b086      	sub	sp, #24
 800dad4:	af04      	add	r7, sp, #16
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	4608      	mov	r0, r1
 800dada:	4611      	mov	r1, r2
 800dadc:	461a      	mov	r2, r3
 800dade:	4603      	mov	r3, r0
 800dae0:	70fb      	strb	r3, [r7, #3]
 800dae2:	460b      	mov	r3, r1
 800dae4:	70bb      	strb	r3, [r7, #2]
 800dae6:	4613      	mov	r3, r2
 800dae8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800daea:	7878      	ldrb	r0, [r7, #1]
 800daec:	78ba      	ldrb	r2, [r7, #2]
 800daee:	78f9      	ldrb	r1, [r7, #3]
 800daf0:	8b3b      	ldrh	r3, [r7, #24]
 800daf2:	9302      	str	r3, [sp, #8]
 800daf4:	7d3b      	ldrb	r3, [r7, #20]
 800daf6:	9301      	str	r3, [sp, #4]
 800daf8:	7c3b      	ldrb	r3, [r7, #16]
 800dafa:	9300      	str	r3, [sp, #0]
 800dafc:	4603      	mov	r3, r0
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 fab7 	bl	800e072 <USBH_LL_OpenPipe>

  return USBH_OK;
 800db04:	2300      	movs	r3, #0
}
 800db06:	4618      	mov	r0, r3
 800db08:	3708      	adds	r7, #8
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}

0800db0e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800db0e:	b580      	push	{r7, lr}
 800db10:	b082      	sub	sp, #8
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
 800db16:	460b      	mov	r3, r1
 800db18:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800db1a:	78fb      	ldrb	r3, [r7, #3]
 800db1c:	4619      	mov	r1, r3
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f000 fad6 	bl	800e0d0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800db24:	2300      	movs	r3, #0
}
 800db26:	4618      	mov	r0, r3
 800db28:	3708      	adds	r7, #8
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}

0800db2e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800db2e:	b580      	push	{r7, lr}
 800db30:	b084      	sub	sp, #16
 800db32:	af00      	add	r7, sp, #0
 800db34:	6078      	str	r0, [r7, #4]
 800db36:	460b      	mov	r3, r1
 800db38:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f000 f836 	bl	800dbac <USBH_GetFreePipe>
 800db40:	4603      	mov	r3, r0
 800db42:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800db44:	89fb      	ldrh	r3, [r7, #14]
 800db46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d00a      	beq.n	800db64 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800db4e:	78fa      	ldrb	r2, [r7, #3]
 800db50:	89fb      	ldrh	r3, [r7, #14]
 800db52:	f003 030f 	and.w	r3, r3, #15
 800db56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800db5a:	6879      	ldr	r1, [r7, #4]
 800db5c:	33e0      	adds	r3, #224	; 0xe0
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	440b      	add	r3, r1
 800db62:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800db64:	89fb      	ldrh	r3, [r7, #14]
 800db66:	b2db      	uxtb	r3, r3
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3710      	adds	r7, #16
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800db70:	b480      	push	{r7}
 800db72:	b083      	sub	sp, #12
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	460b      	mov	r3, r1
 800db7a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800db7c:	78fb      	ldrb	r3, [r7, #3]
 800db7e:	2b0f      	cmp	r3, #15
 800db80:	d80d      	bhi.n	800db9e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800db82:	78fb      	ldrb	r3, [r7, #3]
 800db84:	687a      	ldr	r2, [r7, #4]
 800db86:	33e0      	adds	r3, #224	; 0xe0
 800db88:	009b      	lsls	r3, r3, #2
 800db8a:	4413      	add	r3, r2
 800db8c:	685a      	ldr	r2, [r3, #4]
 800db8e:	78fb      	ldrb	r3, [r7, #3]
 800db90:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800db94:	6879      	ldr	r1, [r7, #4]
 800db96:	33e0      	adds	r3, #224	; 0xe0
 800db98:	009b      	lsls	r3, r3, #2
 800db9a:	440b      	add	r3, r1
 800db9c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800db9e:	2300      	movs	r3, #0
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	370c      	adds	r7, #12
 800dba4:	46bd      	mov	sp, r7
 800dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbaa:	4770      	bx	lr

0800dbac <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800dbac:	b480      	push	{r7}
 800dbae:	b085      	sub	sp, #20
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800dbb8:	2300      	movs	r3, #0
 800dbba:	73fb      	strb	r3, [r7, #15]
 800dbbc:	e00f      	b.n	800dbde <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800dbbe:	7bfb      	ldrb	r3, [r7, #15]
 800dbc0:	687a      	ldr	r2, [r7, #4]
 800dbc2:	33e0      	adds	r3, #224	; 0xe0
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	4413      	add	r3, r2
 800dbc8:	685b      	ldr	r3, [r3, #4]
 800dbca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d102      	bne.n	800dbd8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800dbd2:	7bfb      	ldrb	r3, [r7, #15]
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	e007      	b.n	800dbe8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800dbd8:	7bfb      	ldrb	r3, [r7, #15]
 800dbda:	3301      	adds	r3, #1
 800dbdc:	73fb      	strb	r3, [r7, #15]
 800dbde:	7bfb      	ldrb	r3, [r7, #15]
 800dbe0:	2b0f      	cmp	r3, #15
 800dbe2:	d9ec      	bls.n	800dbbe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800dbe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3714      	adds	r7, #20
 800dbec:	46bd      	mov	sp, r7
 800dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf2:	4770      	bx	lr

0800dbf4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b087      	sub	sp, #28
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	60b9      	str	r1, [r7, #8]
 800dbfe:	4613      	mov	r3, r2
 800dc00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dc02:	2301      	movs	r3, #1
 800dc04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dc06:	2300      	movs	r3, #0
 800dc08:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dc0a:	4b1f      	ldr	r3, [pc, #124]	; (800dc88 <FATFS_LinkDriverEx+0x94>)
 800dc0c:	7a5b      	ldrb	r3, [r3, #9]
 800dc0e:	b2db      	uxtb	r3, r3
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d131      	bne.n	800dc78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dc14:	4b1c      	ldr	r3, [pc, #112]	; (800dc88 <FATFS_LinkDriverEx+0x94>)
 800dc16:	7a5b      	ldrb	r3, [r3, #9]
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	4b1a      	ldr	r3, [pc, #104]	; (800dc88 <FATFS_LinkDriverEx+0x94>)
 800dc1e:	2100      	movs	r1, #0
 800dc20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dc22:	4b19      	ldr	r3, [pc, #100]	; (800dc88 <FATFS_LinkDriverEx+0x94>)
 800dc24:	7a5b      	ldrb	r3, [r3, #9]
 800dc26:	b2db      	uxtb	r3, r3
 800dc28:	4a17      	ldr	r2, [pc, #92]	; (800dc88 <FATFS_LinkDriverEx+0x94>)
 800dc2a:	009b      	lsls	r3, r3, #2
 800dc2c:	4413      	add	r3, r2
 800dc2e:	68fa      	ldr	r2, [r7, #12]
 800dc30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dc32:	4b15      	ldr	r3, [pc, #84]	; (800dc88 <FATFS_LinkDriverEx+0x94>)
 800dc34:	7a5b      	ldrb	r3, [r3, #9]
 800dc36:	b2db      	uxtb	r3, r3
 800dc38:	461a      	mov	r2, r3
 800dc3a:	4b13      	ldr	r3, [pc, #76]	; (800dc88 <FATFS_LinkDriverEx+0x94>)
 800dc3c:	4413      	add	r3, r2
 800dc3e:	79fa      	ldrb	r2, [r7, #7]
 800dc40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dc42:	4b11      	ldr	r3, [pc, #68]	; (800dc88 <FATFS_LinkDriverEx+0x94>)
 800dc44:	7a5b      	ldrb	r3, [r3, #9]
 800dc46:	b2db      	uxtb	r3, r3
 800dc48:	1c5a      	adds	r2, r3, #1
 800dc4a:	b2d1      	uxtb	r1, r2
 800dc4c:	4a0e      	ldr	r2, [pc, #56]	; (800dc88 <FATFS_LinkDriverEx+0x94>)
 800dc4e:	7251      	strb	r1, [r2, #9]
 800dc50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dc52:	7dbb      	ldrb	r3, [r7, #22]
 800dc54:	3330      	adds	r3, #48	; 0x30
 800dc56:	b2da      	uxtb	r2, r3
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	3301      	adds	r3, #1
 800dc60:	223a      	movs	r2, #58	; 0x3a
 800dc62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	3302      	adds	r3, #2
 800dc68:	222f      	movs	r2, #47	; 0x2f
 800dc6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	3303      	adds	r3, #3
 800dc70:	2200      	movs	r2, #0
 800dc72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dc74:	2300      	movs	r3, #0
 800dc76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dc78:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	371c      	adds	r7, #28
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc84:	4770      	bx	lr
 800dc86:	bf00      	nop
 800dc88:	20000910 	.word	0x20000910

0800dc8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b082      	sub	sp, #8
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dc96:	2200      	movs	r2, #0
 800dc98:	6839      	ldr	r1, [r7, #0]
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f7ff ffaa 	bl	800dbf4 <FATFS_LinkDriverEx>
 800dca0:	4603      	mov	r3, r0
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3708      	adds	r7, #8
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}
	...

0800dcac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800dcb0:	2201      	movs	r2, #1
 800dcb2:	490e      	ldr	r1, [pc, #56]	; (800dcec <MX_USB_HOST_Init+0x40>)
 800dcb4:	480e      	ldr	r0, [pc, #56]	; (800dcf0 <MX_USB_HOST_Init+0x44>)
 800dcb6:	f7fe faa9 	bl	800c20c <USBH_Init>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d001      	beq.n	800dcc4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800dcc0:	f7f3 f93a 	bl	8000f38 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800dcc4:	490b      	ldr	r1, [pc, #44]	; (800dcf4 <MX_USB_HOST_Init+0x48>)
 800dcc6:	480a      	ldr	r0, [pc, #40]	; (800dcf0 <MX_USB_HOST_Init+0x44>)
 800dcc8:	f7fe fb4d 	bl	800c366 <USBH_RegisterClass>
 800dccc:	4603      	mov	r3, r0
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d001      	beq.n	800dcd6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800dcd2:	f7f3 f931 	bl	8000f38 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800dcd6:	4806      	ldr	r0, [pc, #24]	; (800dcf0 <MX_USB_HOST_Init+0x44>)
 800dcd8:	f7fe fbd1 	bl	800c47e <USBH_Start>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d001      	beq.n	800dce6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800dce2:	f7f3 f929 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800dce6:	bf00      	nop
 800dce8:	bd80      	pop	{r7, pc}
 800dcea:	bf00      	nop
 800dcec:	0800dd0d 	.word	0x0800dd0d
 800dcf0:	2000091c 	.word	0x2000091c
 800dcf4:	2000000c 	.word	0x2000000c

0800dcf8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800dcfc:	4802      	ldr	r0, [pc, #8]	; (800dd08 <MX_USB_HOST_Process+0x10>)
 800dcfe:	f7fe fbcf 	bl	800c4a0 <USBH_Process>
}
 800dd02:	bf00      	nop
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	bf00      	nop
 800dd08:	2000091c 	.word	0x2000091c

0800dd0c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b083      	sub	sp, #12
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	460b      	mov	r3, r1
 800dd16:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800dd18:	78fb      	ldrb	r3, [r7, #3]
 800dd1a:	3b01      	subs	r3, #1
 800dd1c:	2b04      	cmp	r3, #4
 800dd1e:	d819      	bhi.n	800dd54 <USBH_UserProcess+0x48>
 800dd20:	a201      	add	r2, pc, #4	; (adr r2, 800dd28 <USBH_UserProcess+0x1c>)
 800dd22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd26:	bf00      	nop
 800dd28:	0800dd55 	.word	0x0800dd55
 800dd2c:	0800dd45 	.word	0x0800dd45
 800dd30:	0800dd55 	.word	0x0800dd55
 800dd34:	0800dd4d 	.word	0x0800dd4d
 800dd38:	0800dd3d 	.word	0x0800dd3d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800dd3c:	4b09      	ldr	r3, [pc, #36]	; (800dd64 <USBH_UserProcess+0x58>)
 800dd3e:	2203      	movs	r2, #3
 800dd40:	701a      	strb	r2, [r3, #0]
  break;
 800dd42:	e008      	b.n	800dd56 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800dd44:	4b07      	ldr	r3, [pc, #28]	; (800dd64 <USBH_UserProcess+0x58>)
 800dd46:	2202      	movs	r2, #2
 800dd48:	701a      	strb	r2, [r3, #0]
  break;
 800dd4a:	e004      	b.n	800dd56 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800dd4c:	4b05      	ldr	r3, [pc, #20]	; (800dd64 <USBH_UserProcess+0x58>)
 800dd4e:	2201      	movs	r2, #1
 800dd50:	701a      	strb	r2, [r3, #0]
  break;
 800dd52:	e000      	b.n	800dd56 <USBH_UserProcess+0x4a>

  default:
  break;
 800dd54:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800dd56:	bf00      	nop
 800dd58:	370c      	adds	r7, #12
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd60:	4770      	bx	lr
 800dd62:	bf00      	nop
 800dd64:	20000cf4 	.word	0x20000cf4

0800dd68 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b0a0      	sub	sp, #128	; 0x80
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dd70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800dd74:	2200      	movs	r2, #0
 800dd76:	601a      	str	r2, [r3, #0]
 800dd78:	605a      	str	r2, [r3, #4]
 800dd7a:	609a      	str	r2, [r3, #8]
 800dd7c:	60da      	str	r2, [r3, #12]
 800dd7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800dd80:	f107 0310 	add.w	r3, r7, #16
 800dd84:	225c      	movs	r2, #92	; 0x5c
 800dd86:	2100      	movs	r1, #0
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f001 f9ab 	bl	800f0e4 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dd96:	d149      	bne.n	800de2c <HAL_HCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800dd98:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd9c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800dda2:	f107 0310 	add.w	r3, r7, #16
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7f8 fa86 	bl	80062b8 <HAL_RCCEx_PeriphCLKConfig>
 800ddac:	4603      	mov	r3, r0
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d001      	beq.n	800ddb6 <HAL_HCD_MspInit+0x4e>
    {
      Error_Handler();
 800ddb2:	f7f3 f8c1 	bl	8000f38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	60fb      	str	r3, [r7, #12]
 800ddba:	4b1e      	ldr	r3, [pc, #120]	; (800de34 <HAL_HCD_MspInit+0xcc>)
 800ddbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddbe:	4a1d      	ldr	r2, [pc, #116]	; (800de34 <HAL_HCD_MspInit+0xcc>)
 800ddc0:	f043 0301 	orr.w	r3, r3, #1
 800ddc4:	6313      	str	r3, [r2, #48]	; 0x30
 800ddc6:	4b1b      	ldr	r3, [pc, #108]	; (800de34 <HAL_HCD_MspInit+0xcc>)
 800ddc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddca:	f003 0301 	and.w	r3, r3, #1
 800ddce:	60fb      	str	r3, [r7, #12]
 800ddd0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ddd2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ddd6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddd8:	2302      	movs	r3, #2
 800ddda:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dddc:	2300      	movs	r3, #0
 800ddde:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dde0:	2303      	movs	r3, #3
 800dde2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dde4:	230a      	movs	r3, #10
 800dde6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dde8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ddec:	4619      	mov	r1, r3
 800ddee:	4812      	ldr	r0, [pc, #72]	; (800de38 <HAL_HCD_MspInit+0xd0>)
 800ddf0:	f7f4 fd34 	bl	800285c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ddf4:	4b0f      	ldr	r3, [pc, #60]	; (800de34 <HAL_HCD_MspInit+0xcc>)
 800ddf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddf8:	4a0e      	ldr	r2, [pc, #56]	; (800de34 <HAL_HCD_MspInit+0xcc>)
 800ddfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddfe:	6353      	str	r3, [r2, #52]	; 0x34
 800de00:	2300      	movs	r3, #0
 800de02:	60bb      	str	r3, [r7, #8]
 800de04:	4b0b      	ldr	r3, [pc, #44]	; (800de34 <HAL_HCD_MspInit+0xcc>)
 800de06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de08:	4a0a      	ldr	r2, [pc, #40]	; (800de34 <HAL_HCD_MspInit+0xcc>)
 800de0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800de0e:	6453      	str	r3, [r2, #68]	; 0x44
 800de10:	4b08      	ldr	r3, [pc, #32]	; (800de34 <HAL_HCD_MspInit+0xcc>)
 800de12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de18:	60bb      	str	r3, [r7, #8]
 800de1a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800de1c:	2200      	movs	r2, #0
 800de1e:	2100      	movs	r1, #0
 800de20:	2043      	movs	r0, #67	; 0x43
 800de22:	f7f4 f900 	bl	8002026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800de26:	2043      	movs	r0, #67	; 0x43
 800de28:	f7f4 f919 	bl	800205e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800de2c:	bf00      	nop
 800de2e:	3780      	adds	r7, #128	; 0x80
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}
 800de34:	40023800 	.word	0x40023800
 800de38:	40020000 	.word	0x40020000

0800de3c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b082      	sub	sp, #8
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7fe ff07 	bl	800cc5e <USBH_LL_IncTimer>
}
 800de50:	bf00      	nop
 800de52:	3708      	adds	r7, #8
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800de66:	4618      	mov	r0, r3
 800de68:	f7fe ff3f 	bl	800ccea <USBH_LL_Connect>
}
 800de6c:	bf00      	nop
 800de6e:	3708      	adds	r7, #8
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}

0800de74 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b082      	sub	sp, #8
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800de82:	4618      	mov	r0, r3
 800de84:	f7fe ff48 	bl	800cd18 <USBH_LL_Disconnect>
}
 800de88:	bf00      	nop
 800de8a:	3708      	adds	r7, #8
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}

0800de90 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800de90:	b480      	push	{r7}
 800de92:	b083      	sub	sp, #12
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	460b      	mov	r3, r1
 800de9a:	70fb      	strb	r3, [r7, #3]
 800de9c:	4613      	mov	r3, r2
 800de9e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800dea0:	bf00      	nop
 800dea2:	370c      	adds	r7, #12
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr

0800deac <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b082      	sub	sp, #8
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800deba:	4618      	mov	r0, r3
 800debc:	f7fe fef9 	bl	800ccb2 <USBH_LL_PortEnabled>
}
 800dec0:	bf00      	nop
 800dec2:	3708      	adds	r7, #8
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}

0800dec8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800ded6:	4618      	mov	r0, r3
 800ded8:	f7fe fef9 	bl	800ccce <USBH_LL_PortDisabled>
}
 800dedc:	bf00      	nop
 800dede:	3708      	adds	r7, #8
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b082      	sub	sp, #8
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800def2:	2b01      	cmp	r3, #1
 800def4:	d12a      	bne.n	800df4c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800def6:	4a18      	ldr	r2, [pc, #96]	; (800df58 <USBH_LL_Init+0x74>)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	4a15      	ldr	r2, [pc, #84]	; (800df58 <USBH_LL_Init+0x74>)
 800df02:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800df06:	4b14      	ldr	r3, [pc, #80]	; (800df58 <USBH_LL_Init+0x74>)
 800df08:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800df0c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800df0e:	4b12      	ldr	r3, [pc, #72]	; (800df58 <USBH_LL_Init+0x74>)
 800df10:	220c      	movs	r2, #12
 800df12:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_LOW;
 800df14:	4b10      	ldr	r3, [pc, #64]	; (800df58 <USBH_LL_Init+0x74>)
 800df16:	2201      	movs	r2, #1
 800df18:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800df1a:	4b0f      	ldr	r3, [pc, #60]	; (800df58 <USBH_LL_Init+0x74>)
 800df1c:	2200      	movs	r2, #0
 800df1e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800df20:	4b0d      	ldr	r3, [pc, #52]	; (800df58 <USBH_LL_Init+0x74>)
 800df22:	2202      	movs	r2, #2
 800df24:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800df26:	4b0c      	ldr	r3, [pc, #48]	; (800df58 <USBH_LL_Init+0x74>)
 800df28:	2200      	movs	r2, #0
 800df2a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800df2c:	480a      	ldr	r0, [pc, #40]	; (800df58 <USBH_LL_Init+0x74>)
 800df2e:	f7f4 fe5a 	bl	8002be6 <HAL_HCD_Init>
 800df32:	4603      	mov	r3, r0
 800df34:	2b00      	cmp	r3, #0
 800df36:	d001      	beq.n	800df3c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800df38:	f7f2 fffe 	bl	8000f38 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800df3c:	4806      	ldr	r0, [pc, #24]	; (800df58 <USBH_LL_Init+0x74>)
 800df3e:	f7f5 fabb 	bl	80034b8 <HAL_HCD_GetCurrentFrame>
 800df42:	4603      	mov	r3, r0
 800df44:	4619      	mov	r1, r3
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f7fe fe7a 	bl	800cc40 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800df4c:	2300      	movs	r3, #0
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3708      	adds	r7, #8
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	20000cf8 	.word	0x20000cf8

0800df5c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b084      	sub	sp, #16
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df64:	2300      	movs	r3, #0
 800df66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800df68:	2300      	movs	r3, #0
 800df6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800df72:	4618      	mov	r0, r3
 800df74:	f7f5 fa28 	bl	80033c8 <HAL_HCD_Start>
 800df78:	4603      	mov	r3, r0
 800df7a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800df7c:	7bfb      	ldrb	r3, [r7, #15]
 800df7e:	4618      	mov	r0, r3
 800df80:	f000 f988 	bl	800e294 <USBH_Get_USB_Status>
 800df84:	4603      	mov	r3, r0
 800df86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df88:	7bbb      	ldrb	r3, [r7, #14]
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3710      	adds	r7, #16
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}

0800df92 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800df92:	b580      	push	{r7, lr}
 800df94:	b084      	sub	sp, #16
 800df96:	af00      	add	r7, sp, #0
 800df98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df9a:	2300      	movs	r3, #0
 800df9c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7f5 fa30 	bl	800340e <HAL_HCD_Stop>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dfb2:	7bfb      	ldrb	r3, [r7, #15]
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f000 f96d 	bl	800e294 <USBH_Get_USB_Status>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3710      	adds	r7, #16
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b084      	sub	sp, #16
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f7f5 fa7a 	bl	80034d4 <HAL_HCD_GetCurrentSpeed>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	2b02      	cmp	r3, #2
 800dfe4:	d00c      	beq.n	800e000 <USBH_LL_GetSpeed+0x38>
 800dfe6:	2b02      	cmp	r3, #2
 800dfe8:	d80d      	bhi.n	800e006 <USBH_LL_GetSpeed+0x3e>
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d002      	beq.n	800dff4 <USBH_LL_GetSpeed+0x2c>
 800dfee:	2b01      	cmp	r3, #1
 800dff0:	d003      	beq.n	800dffa <USBH_LL_GetSpeed+0x32>
 800dff2:	e008      	b.n	800e006 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800dff4:	2300      	movs	r3, #0
 800dff6:	73fb      	strb	r3, [r7, #15]
    break;
 800dff8:	e008      	b.n	800e00c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800dffa:	2301      	movs	r3, #1
 800dffc:	73fb      	strb	r3, [r7, #15]
    break;
 800dffe:	e005      	b.n	800e00c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e000:	2302      	movs	r3, #2
 800e002:	73fb      	strb	r3, [r7, #15]
    break;
 800e004:	e002      	b.n	800e00c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e006:	2301      	movs	r3, #1
 800e008:	73fb      	strb	r3, [r7, #15]
    break;
 800e00a:	bf00      	nop
  }
  return  speed;
 800e00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3710      	adds	r7, #16
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}

0800e016 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e016:	b580      	push	{r7, lr}
 800e018:	b084      	sub	sp, #16
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e01e:	2300      	movs	r3, #0
 800e020:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e022:	2300      	movs	r3, #0
 800e024:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7f5 fa0b 	bl	8003448 <HAL_HCD_ResetPort>
 800e032:	4603      	mov	r3, r0
 800e034:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e036:	7bfb      	ldrb	r3, [r7, #15]
 800e038:	4618      	mov	r0, r3
 800e03a:	f000 f92b 	bl	800e294 <USBH_Get_USB_Status>
 800e03e:	4603      	mov	r3, r0
 800e040:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e042:	7bbb      	ldrb	r3, [r7, #14]
}
 800e044:	4618      	mov	r0, r3
 800e046:	3710      	adds	r7, #16
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}

0800e04c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b082      	sub	sp, #8
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	460b      	mov	r3, r1
 800e056:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e05e:	78fa      	ldrb	r2, [r7, #3]
 800e060:	4611      	mov	r1, r2
 800e062:	4618      	mov	r0, r3
 800e064:	f7f5 fa13 	bl	800348e <HAL_HCD_HC_GetXferCount>
 800e068:	4603      	mov	r3, r0
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3708      	adds	r7, #8
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e072:	b590      	push	{r4, r7, lr}
 800e074:	b089      	sub	sp, #36	; 0x24
 800e076:	af04      	add	r7, sp, #16
 800e078:	6078      	str	r0, [r7, #4]
 800e07a:	4608      	mov	r0, r1
 800e07c:	4611      	mov	r1, r2
 800e07e:	461a      	mov	r2, r3
 800e080:	4603      	mov	r3, r0
 800e082:	70fb      	strb	r3, [r7, #3]
 800e084:	460b      	mov	r3, r1
 800e086:	70bb      	strb	r3, [r7, #2]
 800e088:	4613      	mov	r3, r2
 800e08a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e08c:	2300      	movs	r3, #0
 800e08e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e090:	2300      	movs	r3, #0
 800e092:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e09a:	787c      	ldrb	r4, [r7, #1]
 800e09c:	78ba      	ldrb	r2, [r7, #2]
 800e09e:	78f9      	ldrb	r1, [r7, #3]
 800e0a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e0a2:	9302      	str	r3, [sp, #8]
 800e0a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e0a8:	9301      	str	r3, [sp, #4]
 800e0aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e0ae:	9300      	str	r3, [sp, #0]
 800e0b0:	4623      	mov	r3, r4
 800e0b2:	f7f4 fdff 	bl	8002cb4 <HAL_HCD_HC_Init>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e0ba:	7bfb      	ldrb	r3, [r7, #15]
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f000 f8e9 	bl	800e294 <USBH_Get_USB_Status>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3714      	adds	r7, #20
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd90      	pop	{r4, r7, pc}

0800e0d0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b084      	sub	sp, #16
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
 800e0d8:	460b      	mov	r3, r1
 800e0da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e0ea:	78fa      	ldrb	r2, [r7, #3]
 800e0ec:	4611      	mov	r1, r2
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f7f4 fe98 	bl	8002e24 <HAL_HCD_HC_Halt>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e0f8:	7bfb      	ldrb	r3, [r7, #15]
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f000 f8ca 	bl	800e294 <USBH_Get_USB_Status>
 800e100:	4603      	mov	r3, r0
 800e102:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e104:	7bbb      	ldrb	r3, [r7, #14]
}
 800e106:	4618      	mov	r0, r3
 800e108:	3710      	adds	r7, #16
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}

0800e10e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e10e:	b590      	push	{r4, r7, lr}
 800e110:	b089      	sub	sp, #36	; 0x24
 800e112:	af04      	add	r7, sp, #16
 800e114:	6078      	str	r0, [r7, #4]
 800e116:	4608      	mov	r0, r1
 800e118:	4611      	mov	r1, r2
 800e11a:	461a      	mov	r2, r3
 800e11c:	4603      	mov	r3, r0
 800e11e:	70fb      	strb	r3, [r7, #3]
 800e120:	460b      	mov	r3, r1
 800e122:	70bb      	strb	r3, [r7, #2]
 800e124:	4613      	mov	r3, r2
 800e126:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e128:	2300      	movs	r3, #0
 800e12a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e12c:	2300      	movs	r3, #0
 800e12e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e136:	787c      	ldrb	r4, [r7, #1]
 800e138:	78ba      	ldrb	r2, [r7, #2]
 800e13a:	78f9      	ldrb	r1, [r7, #3]
 800e13c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e140:	9303      	str	r3, [sp, #12]
 800e142:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e144:	9302      	str	r3, [sp, #8]
 800e146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e148:	9301      	str	r3, [sp, #4]
 800e14a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e14e:	9300      	str	r3, [sp, #0]
 800e150:	4623      	mov	r3, r4
 800e152:	f7f4 fe8b 	bl	8002e6c <HAL_HCD_HC_SubmitRequest>
 800e156:	4603      	mov	r3, r0
 800e158:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e15a:	7bfb      	ldrb	r3, [r7, #15]
 800e15c:	4618      	mov	r0, r3
 800e15e:	f000 f899 	bl	800e294 <USBH_Get_USB_Status>
 800e162:	4603      	mov	r3, r0
 800e164:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e166:	7bbb      	ldrb	r3, [r7, #14]
}
 800e168:	4618      	mov	r0, r3
 800e16a:	3714      	adds	r7, #20
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd90      	pop	{r4, r7, pc}

0800e170 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b082      	sub	sp, #8
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	460b      	mov	r3, r1
 800e17a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e182:	78fa      	ldrb	r2, [r7, #3]
 800e184:	4611      	mov	r1, r2
 800e186:	4618      	mov	r0, r3
 800e188:	f7f5 f96c 	bl	8003464 <HAL_HCD_HC_GetURBState>
 800e18c:	4603      	mov	r3, r0
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3708      	adds	r7, #8
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}

0800e196 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e196:	b580      	push	{r7, lr}
 800e198:	b082      	sub	sp, #8
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	6078      	str	r0, [r7, #4]
 800e19e:	460b      	mov	r3, r1
 800e1a0:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800e1a2:	20c8      	movs	r0, #200	; 0xc8
 800e1a4:	f7f3 fbce 	bl	8001944 <HAL_Delay>
  return USBH_OK;
 800e1a8:	2300      	movs	r3, #0
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3708      	adds	r7, #8
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}

0800e1b2 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e1b2:	b480      	push	{r7}
 800e1b4:	b085      	sub	sp, #20
 800e1b6:	af00      	add	r7, sp, #0
 800e1b8:	6078      	str	r0, [r7, #4]
 800e1ba:	460b      	mov	r3, r1
 800e1bc:	70fb      	strb	r3, [r7, #3]
 800e1be:	4613      	mov	r3, r2
 800e1c0:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e1c8:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e1ca:	78fa      	ldrb	r2, [r7, #3]
 800e1cc:	68f9      	ldr	r1, [r7, #12]
 800e1ce:	4613      	mov	r3, r2
 800e1d0:	011b      	lsls	r3, r3, #4
 800e1d2:	1a9b      	subs	r3, r3, r2
 800e1d4:	009b      	lsls	r3, r3, #2
 800e1d6:	440b      	add	r3, r1
 800e1d8:	3317      	adds	r3, #23
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d00a      	beq.n	800e1f6 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e1e0:	78fa      	ldrb	r2, [r7, #3]
 800e1e2:	68f9      	ldr	r1, [r7, #12]
 800e1e4:	4613      	mov	r3, r2
 800e1e6:	011b      	lsls	r3, r3, #4
 800e1e8:	1a9b      	subs	r3, r3, r2
 800e1ea:	009b      	lsls	r3, r3, #2
 800e1ec:	440b      	add	r3, r1
 800e1ee:	333c      	adds	r3, #60	; 0x3c
 800e1f0:	78ba      	ldrb	r2, [r7, #2]
 800e1f2:	701a      	strb	r2, [r3, #0]
 800e1f4:	e009      	b.n	800e20a <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e1f6:	78fa      	ldrb	r2, [r7, #3]
 800e1f8:	68f9      	ldr	r1, [r7, #12]
 800e1fa:	4613      	mov	r3, r2
 800e1fc:	011b      	lsls	r3, r3, #4
 800e1fe:	1a9b      	subs	r3, r3, r2
 800e200:	009b      	lsls	r3, r3, #2
 800e202:	440b      	add	r3, r1
 800e204:	333d      	adds	r3, #61	; 0x3d
 800e206:	78ba      	ldrb	r2, [r7, #2]
 800e208:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e20a:	2300      	movs	r3, #0
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3714      	adds	r7, #20
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr

0800e218 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e218:	b480      	push	{r7}
 800e21a:	b085      	sub	sp, #20
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	460b      	mov	r3, r1
 800e222:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800e224:	2300      	movs	r3, #0
 800e226:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e22e:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800e230:	78fa      	ldrb	r2, [r7, #3]
 800e232:	68b9      	ldr	r1, [r7, #8]
 800e234:	4613      	mov	r3, r2
 800e236:	011b      	lsls	r3, r3, #4
 800e238:	1a9b      	subs	r3, r3, r2
 800e23a:	009b      	lsls	r3, r3, #2
 800e23c:	440b      	add	r3, r1
 800e23e:	3317      	adds	r3, #23
 800e240:	781b      	ldrb	r3, [r3, #0]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d00a      	beq.n	800e25c <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800e246:	78fa      	ldrb	r2, [r7, #3]
 800e248:	68b9      	ldr	r1, [r7, #8]
 800e24a:	4613      	mov	r3, r2
 800e24c:	011b      	lsls	r3, r3, #4
 800e24e:	1a9b      	subs	r3, r3, r2
 800e250:	009b      	lsls	r3, r3, #2
 800e252:	440b      	add	r3, r1
 800e254:	333c      	adds	r3, #60	; 0x3c
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	73fb      	strb	r3, [r7, #15]
 800e25a:	e009      	b.n	800e270 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800e25c:	78fa      	ldrb	r2, [r7, #3]
 800e25e:	68b9      	ldr	r1, [r7, #8]
 800e260:	4613      	mov	r3, r2
 800e262:	011b      	lsls	r3, r3, #4
 800e264:	1a9b      	subs	r3, r3, r2
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	440b      	add	r3, r1
 800e26a:	333d      	adds	r3, #61	; 0x3d
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800e270:	7bfb      	ldrb	r3, [r7, #15]
}
 800e272:	4618      	mov	r0, r3
 800e274:	3714      	adds	r7, #20
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr

0800e27e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e27e:	b580      	push	{r7, lr}
 800e280:	b082      	sub	sp, #8
 800e282:	af00      	add	r7, sp, #0
 800e284:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f7f3 fb5c 	bl	8001944 <HAL_Delay>
}
 800e28c:	bf00      	nop
 800e28e:	3708      	adds	r7, #8
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}

0800e294 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e294:	b480      	push	{r7}
 800e296:	b085      	sub	sp, #20
 800e298:	af00      	add	r7, sp, #0
 800e29a:	4603      	mov	r3, r0
 800e29c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e2a2:	79fb      	ldrb	r3, [r7, #7]
 800e2a4:	2b03      	cmp	r3, #3
 800e2a6:	d817      	bhi.n	800e2d8 <USBH_Get_USB_Status+0x44>
 800e2a8:	a201      	add	r2, pc, #4	; (adr r2, 800e2b0 <USBH_Get_USB_Status+0x1c>)
 800e2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ae:	bf00      	nop
 800e2b0:	0800e2c1 	.word	0x0800e2c1
 800e2b4:	0800e2c7 	.word	0x0800e2c7
 800e2b8:	0800e2cd 	.word	0x0800e2cd
 800e2bc:	0800e2d3 	.word	0x0800e2d3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	73fb      	strb	r3, [r7, #15]
    break;
 800e2c4:	e00b      	b.n	800e2de <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e2c6:	2302      	movs	r3, #2
 800e2c8:	73fb      	strb	r3, [r7, #15]
    break;
 800e2ca:	e008      	b.n	800e2de <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	73fb      	strb	r3, [r7, #15]
    break;
 800e2d0:	e005      	b.n	800e2de <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e2d2:	2302      	movs	r3, #2
 800e2d4:	73fb      	strb	r3, [r7, #15]
    break;
 800e2d6:	e002      	b.n	800e2de <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e2d8:	2302      	movs	r3, #2
 800e2da:	73fb      	strb	r3, [r7, #15]
    break;
 800e2dc:	bf00      	nop
  }
  return usb_status;
 800e2de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3714      	adds	r7, #20
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ea:	4770      	bx	lr

0800e2ec <GetAddressRange>:
    GENERAL_DATA_START_ADDR,
    PRODUCT_INFO_START_ADDR,
    DARK_COUNT_START_ADDR
};
// Helper function to get the start and end addresses for a given data type
static void GetAddressRange(DataType type, uint32_t* start, uint32_t* end) {
 800e2ec:	b480      	push	{r7}
 800e2ee:	b085      	sub	sp, #20
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	60b9      	str	r1, [r7, #8]
 800e2f6:	607a      	str	r2, [r7, #4]
 800e2f8:	73fb      	strb	r3, [r7, #15]
    switch (type) {
 800e2fa:	7bfb      	ldrb	r3, [r7, #15]
 800e2fc:	2b03      	cmp	r3, #3
 800e2fe:	d827      	bhi.n	800e350 <GetAddressRange+0x64>
 800e300:	a201      	add	r2, pc, #4	; (adr r2, 800e308 <GetAddressRange+0x1c>)
 800e302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e306:	bf00      	nop
 800e308:	0800e319 	.word	0x0800e319
 800e30c:	0800e327 	.word	0x0800e327
 800e310:	0800e335 	.word	0x0800e335
 800e314:	0800e343 	.word	0x0800e343

    	case DATA_TYPE_ERROR_CODES:
            *start = ERROR_CODES_START_ADDR;
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	4a14      	ldr	r2, [pc, #80]	; (800e36c <GetAddressRange+0x80>)
 800e31c:	601a      	str	r2, [r3, #0]
            *end = ERROR_CODES_START_ADDR + ERROR_CODES_SIZE;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	4a13      	ldr	r2, [pc, #76]	; (800e370 <GetAddressRange+0x84>)
 800e322:	601a      	str	r2, [r3, #0]
            break;
 800e324:	e01b      	b.n	800e35e <GetAddressRange+0x72>

    	case DATA_TYPE_GENERAL_DATA:
            *start = GENERAL_DATA_START_ADDR;
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	4a11      	ldr	r2, [pc, #68]	; (800e370 <GetAddressRange+0x84>)
 800e32a:	601a      	str	r2, [r3, #0]
            *end = GENERAL_DATA_START_ADDR + GENERAL_DATA_SIZE;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	4a11      	ldr	r2, [pc, #68]	; (800e374 <GetAddressRange+0x88>)
 800e330:	601a      	str	r2, [r3, #0]
            break;
 800e332:	e014      	b.n	800e35e <GetAddressRange+0x72>

    	case DATA_TYPE_PRODUCT_INFO:
            *start = PRODUCT_INFO_START_ADDR;
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	4a10      	ldr	r2, [pc, #64]	; (800e378 <GetAddressRange+0x8c>)
 800e338:	601a      	str	r2, [r3, #0]
            *end = PRODUCT_INFO_START_ADDR + PRODUCT_INFO_SIZE;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	4a0f      	ldr	r2, [pc, #60]	; (800e37c <GetAddressRange+0x90>)
 800e33e:	601a      	str	r2, [r3, #0]
            break;
 800e340:	e00d      	b.n	800e35e <GetAddressRange+0x72>

    	case DATA_TYPE_DARK_COUNT:
            *start = DARK_COUNT_START_ADDR;
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	4a0b      	ldr	r2, [pc, #44]	; (800e374 <GetAddressRange+0x88>)
 800e346:	601a      	str	r2, [r3, #0]
            *end = DARK_COUNT_START_ADDR + DARK_COUNT_SIZE;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	4a0b      	ldr	r2, [pc, #44]	; (800e378 <GetAddressRange+0x8c>)
 800e34c:	601a      	str	r2, [r3, #0]
            break;
 800e34e:	e006      	b.n	800e35e <GetAddressRange+0x72>

    	default:
            *start = 0;
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	2200      	movs	r2, #0
 800e354:	601a      	str	r2, [r3, #0]
            *end = 0;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2200      	movs	r2, #0
 800e35a:	601a      	str	r2, [r3, #0]
    }
}
 800e35c:	bf00      	nop
 800e35e:	bf00      	nop
 800e360:	3714      	adds	r7, #20
 800e362:	46bd      	mov	sp, r7
 800e364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e368:	4770      	bx	lr
 800e36a:	bf00      	nop
 800e36c:	08060000 	.word	0x08060000
 800e370:	08064000 	.word	0x08064000
 800e374:	0807b000 	.word	0x0807b000
 800e378:	0807c000 	.word	0x0807c000
 800e37c:	08080000 	.word	0x08080000

0800e380 <EraseFlashSector>:


// Function to erase a sector
static HAL_StatusTypeDef EraseFlashSector(uint32_t sector) {
 800e380:	b580      	push	{r7, lr}
 800e382:	b088      	sub	sp, #32
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
    FLASH_EraseInitTypeDef EraseInitStruct = {0};
 800e388:	f107 030c 	add.w	r3, r7, #12
 800e38c:	2200      	movs	r2, #0
 800e38e:	601a      	str	r2, [r3, #0]
 800e390:	605a      	str	r2, [r3, #4]
 800e392:	609a      	str	r2, [r3, #8]
 800e394:	60da      	str	r2, [r3, #12]
 800e396:	611a      	str	r2, [r3, #16]
    uint32_t SectorError = 0;
 800e398:	2300      	movs	r3, #0
 800e39a:	60bb      	str	r3, [r7, #8]

    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800e39c:	2300      	movs	r3, #0
 800e39e:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800e3a0:	2302      	movs	r3, #2
 800e3a2:	61fb      	str	r3, [r7, #28]
    EraseInitStruct.Sector = sector;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	617b      	str	r3, [r7, #20]
    EraseInitStruct.NbSectors = 1;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	61bb      	str	r3, [r7, #24]

    return HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 800e3ac:	f107 0208 	add.w	r2, r7, #8
 800e3b0:	f107 030c 	add.w	r3, r7, #12
 800e3b4:	4611      	mov	r1, r2
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f7f4 f92e 	bl	8002618 <HAL_FLASHEx_Erase>
 800e3bc:	4603      	mov	r3, r0
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3720      	adds	r7, #32
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}

0800e3c6 <WriteToFlashAddress>:

// Function to write data to a specific address
HAL_StatusTypeDef WriteToFlashAddress(uint32_t address, const uint8_t* data, uint32_t size) {
 800e3c6:	b5b0      	push	{r4, r5, r7, lr}
 800e3c8:	b088      	sub	sp, #32
 800e3ca:	af00      	add	r7, sp, #0
 800e3cc:	60f8      	str	r0, [r7, #12]
 800e3ce:	60b9      	str	r1, [r7, #8]
 800e3d0:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Unlock();
 800e3d6:	f7f3 ffad 	bl	8002334 <HAL_FLASH_Unlock>

    for (uint32_t i = 0; i < size; i += 4) {
 800e3da:	2300      	movs	r3, #0
 800e3dc:	61bb      	str	r3, [r7, #24]
 800e3de:	e018      	b.n	800e412 <WriteToFlashAddress+0x4c>
        uint32_t data_word = *(uint32_t*)&data[i];
 800e3e0:	68ba      	ldr	r2, [r7, #8]
 800e3e2:	69bb      	ldr	r3, [r7, #24]
 800e3e4:	4413      	add	r3, r2
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	617b      	str	r3, [r7, #20]
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i, data_word);
 800e3ea:	68fa      	ldr	r2, [r7, #12]
 800e3ec:	69bb      	ldr	r3, [r7, #24]
 800e3ee:	18d1      	adds	r1, r2, r3
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	461c      	mov	r4, r3
 800e3f6:	4615      	mov	r5, r2
 800e3f8:	4622      	mov	r2, r4
 800e3fa:	462b      	mov	r3, r5
 800e3fc:	2002      	movs	r0, #2
 800e3fe:	f7f3 ff45 	bl	800228c <HAL_FLASH_Program>
 800e402:	4603      	mov	r3, r0
 800e404:	77fb      	strb	r3, [r7, #31]
        if (status != HAL_OK) {
 800e406:	7ffb      	ldrb	r3, [r7, #31]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d107      	bne.n	800e41c <WriteToFlashAddress+0x56>
    for (uint32_t i = 0; i < size; i += 4) {
 800e40c:	69bb      	ldr	r3, [r7, #24]
 800e40e:	3304      	adds	r3, #4
 800e410:	61bb      	str	r3, [r7, #24]
 800e412:	69ba      	ldr	r2, [r7, #24]
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	429a      	cmp	r2, r3
 800e418:	d3e2      	bcc.n	800e3e0 <WriteToFlashAddress+0x1a>
 800e41a:	e000      	b.n	800e41e <WriteToFlashAddress+0x58>
            break;
 800e41c:	bf00      	nop
        }
    }

    HAL_FLASH_Lock();
 800e41e:	f7f3 ffab 	bl	8002378 <HAL_FLASH_Lock>
    return status;
 800e422:	7ffb      	ldrb	r3, [r7, #31]
}
 800e424:	4618      	mov	r0, r3
 800e426:	3720      	adds	r7, #32
 800e428:	46bd      	mov	sp, r7
 800e42a:	bdb0      	pop	{r4, r5, r7, pc}

0800e42c <ReadFromFlashAddress>:

// Function to read data from a specific address
void ReadFromFlashAddress(uint32_t address, uint8_t* data, uint32_t size) {
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b084      	sub	sp, #16
 800e430:	af00      	add	r7, sp, #0
 800e432:	60f8      	str	r0, [r7, #12]
 800e434:	60b9      	str	r1, [r7, #8]
 800e436:	607a      	str	r2, [r7, #4]
    memcpy(data, (void*)address, size);
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	687a      	ldr	r2, [r7, #4]
 800e43c:	4619      	mov	r1, r3
 800e43e:	68b8      	ldr	r0, [r7, #8]
 800e440:	f000 fe94 	bl	800f16c <memcpy>
}
 800e444:	bf00      	nop
 800e446:	3710      	adds	r7, #16
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <GetSectorForAddress>:

// Helper function to get the sector number for a given address
uint32_t GetSectorForAddress(uint32_t address) {
 800e44c:	b480      	push	{r7}
 800e44e:	b083      	sub	sp, #12
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]

    if (address >= 0x08060000 && address < 0x0807FFFF) return FLASH_SECTOR_7;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	4a08      	ldr	r2, [pc, #32]	; (800e478 <GetSectorForAddress+0x2c>)
 800e458:	4293      	cmp	r3, r2
 800e45a:	d905      	bls.n	800e468 <GetSectorForAddress+0x1c>
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	4a07      	ldr	r2, [pc, #28]	; (800e47c <GetSectorForAddress+0x30>)
 800e460:	4293      	cmp	r3, r2
 800e462:	d201      	bcs.n	800e468 <GetSectorForAddress+0x1c>
 800e464:	2307      	movs	r3, #7
 800e466:	e001      	b.n	800e46c <GetSectorForAddress+0x20>
    return 0xFFFFFFFF; // Invalid sector
 800e468:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	370c      	adds	r7, #12
 800e470:	46bd      	mov	sp, r7
 800e472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e476:	4770      	bx	lr
 800e478:	0805ffff 	.word	0x0805ffff
 800e47c:	0807ffff 	.word	0x0807ffff

0800e480 <WriteDataToFlash>:

// Function to write data, erasing the sector if necessary
HAL_StatusTypeDef WriteDataToFlash(uint32_t address, const uint8_t* data, uint32_t size) {
 800e480:	b580      	push	{r7, lr}
 800e482:	b08a      	sub	sp, #40	; 0x28
 800e484:	af00      	add	r7, sp, #0
 800e486:	60f8      	str	r0, [r7, #12]
 800e488:	60b9      	str	r1, [r7, #8]
 800e48a:	607a      	str	r2, [r7, #4]
    uint32_t sector = GetSectorForAddress(address);
 800e48c:	68f8      	ldr	r0, [r7, #12]
 800e48e:	f7ff ffdd 	bl	800e44c <GetSectorForAddress>
 800e492:	61f8      	str	r0, [r7, #28]
    if (sector == 0xFFFFFFFF) {
 800e494:	69fb      	ldr	r3, [r7, #28]
 800e496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e49a:	d101      	bne.n	800e4a0 <WriteDataToFlash+0x20>
        return HAL_ERROR; // Invalid address
 800e49c:	2301      	movs	r3, #1
 800e49e:	e030      	b.n	800e502 <WriteDataToFlash+0x82>
    }

    HAL_StatusTypeDef status;

    // Check if the sector needs to be erased
    uint32_t* flash_ptr = (uint32_t*)address;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	61bb      	str	r3, [r7, #24]
    bool needs_erase = false;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for (uint32_t i = 0; i < (size + 3) / 4; i++) {
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	623b      	str	r3, [r7, #32]
 800e4ae:	e00e      	b.n	800e4ce <WriteDataToFlash+0x4e>
        if (flash_ptr[i] != 0xFFFFFFFF) {
 800e4b0:	6a3b      	ldr	r3, [r7, #32]
 800e4b2:	009b      	lsls	r3, r3, #2
 800e4b4:	69ba      	ldr	r2, [r7, #24]
 800e4b6:	4413      	add	r3, r2
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4be:	d003      	beq.n	800e4c8 <WriteDataToFlash+0x48>
            needs_erase = true;
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e4c6:	e008      	b.n	800e4da <WriteDataToFlash+0x5a>
    for (uint32_t i = 0; i < (size + 3) / 4; i++) {
 800e4c8:	6a3b      	ldr	r3, [r7, #32]
 800e4ca:	3301      	adds	r3, #1
 800e4cc:	623b      	str	r3, [r7, #32]
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	3303      	adds	r3, #3
 800e4d2:	089b      	lsrs	r3, r3, #2
 800e4d4:	6a3a      	ldr	r2, [r7, #32]
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d3ea      	bcc.n	800e4b0 <WriteDataToFlash+0x30>
        }
    }

    if (needs_erase) {
 800e4da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d009      	beq.n	800e4f6 <WriteDataToFlash+0x76>
        status = EraseFlashSector(sector);
 800e4e2:	69f8      	ldr	r0, [r7, #28]
 800e4e4:	f7ff ff4c 	bl	800e380 <EraseFlashSector>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	75fb      	strb	r3, [r7, #23]
        if (status != HAL_OK) {
 800e4ec:	7dfb      	ldrb	r3, [r7, #23]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d001      	beq.n	800e4f6 <WriteDataToFlash+0x76>
            return status;
 800e4f2:	7dfb      	ldrb	r3, [r7, #23]
 800e4f4:	e005      	b.n	800e502 <WriteDataToFlash+0x82>
        }
    }

    return WriteToFlashAddress(address, data, size);
 800e4f6:	687a      	ldr	r2, [r7, #4]
 800e4f8:	68b9      	ldr	r1, [r7, #8]
 800e4fa:	68f8      	ldr	r0, [r7, #12]
 800e4fc:	f7ff ff63 	bl	800e3c6 <WriteToFlashAddress>
 800e500:	4603      	mov	r3, r0
}
 800e502:	4618      	mov	r0, r3
 800e504:	3728      	adds	r7, #40	; 0x28
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}
	...

0800e50c <FindNextWriteAddress>:

    return HAL_ERROR;  // No valid dark count found
}

// Function to find the next available write address for a given data type
static HAL_StatusTypeDef FindNextWriteAddress(DataType type) {
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b088      	sub	sp, #32
 800e510:	af00      	add	r7, sp, #0
 800e512:	4603      	mov	r3, r0
 800e514:	71fb      	strb	r3, [r7, #7]
    uint32_t start, end;
    GetAddressRange(type, &start, &end);
 800e516:	f107 0214 	add.w	r2, r7, #20
 800e51a:	f107 0118 	add.w	r1, r7, #24
 800e51e:	79fb      	ldrb	r3, [r7, #7]
 800e520:	4618      	mov	r0, r3
 800e522:	f7ff fee3 	bl	800e2ec <GetAddressRange>

    uint32_t address = start;
 800e526:	69bb      	ldr	r3, [r7, #24]
 800e528:	61fb      	str	r3, [r7, #28]
    RecordHeader header;

    while (address < end) {
 800e52a:	e01b      	b.n	800e564 <FindNextWriteAddress+0x58>
        ReadFromFlashAddress(address, (uint8_t*)&header, sizeof(RecordHeader));
 800e52c:	f107 030c 	add.w	r3, r7, #12
 800e530:	2208      	movs	r2, #8
 800e532:	4619      	mov	r1, r3
 800e534:	69f8      	ldr	r0, [r7, #28]
 800e536:	f7ff ff79 	bl	800e42c <ReadFromFlashAddress>

        if (header.status == 0xFFFFFFFF) {
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e540:	d106      	bne.n	800e550 <FindNextWriteAddress+0x44>
            // Found an empty spot
            last_write_address[type] = address;
 800e542:	79fb      	ldrb	r3, [r7, #7]
 800e544:	490c      	ldr	r1, [pc, #48]	; (800e578 <FindNextWriteAddress+0x6c>)
 800e546:	69fa      	ldr	r2, [r7, #28]
 800e548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            return HAL_OK;
 800e54c:	2300      	movs	r3, #0
 800e54e:	e00e      	b.n	800e56e <FindNextWriteAddress+0x62>
        }

        // Move to the next record
        address += RECORD_HEADER_SIZE + header.size;
 800e550:	68fa      	ldr	r2, [r7, #12]
 800e552:	69fb      	ldr	r3, [r7, #28]
 800e554:	4413      	add	r3, r2
 800e556:	3308      	adds	r3, #8
 800e558:	61fb      	str	r3, [r7, #28]

        // Align to 4-byte boundary
        address = (address + 3) & ~3;
 800e55a:	69fb      	ldr	r3, [r7, #28]
 800e55c:	3303      	adds	r3, #3
 800e55e:	f023 0303 	bic.w	r3, r3, #3
 800e562:	61fb      	str	r3, [r7, #28]
    while (address < end) {
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	69fa      	ldr	r2, [r7, #28]
 800e568:	429a      	cmp	r2, r3
 800e56a:	d3df      	bcc.n	800e52c <FindNextWriteAddress+0x20>
    }

    // If we're here, we've run out of space
    return HAL_ERROR;
 800e56c:	2301      	movs	r3, #1
}
 800e56e:	4618      	mov	r0, r3
 800e570:	3720      	adds	r7, #32
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}
 800e576:	bf00      	nop
 800e578:	2000002c 	.word	0x2000002c

0800e57c <AppendData>:

HAL_StatusTypeDef AppendData(DataType type, const uint8_t* data, uint32_t size) {
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b088      	sub	sp, #32
 800e580:	af00      	add	r7, sp, #0
 800e582:	4603      	mov	r3, r0
 800e584:	60b9      	str	r1, [r7, #8]
 800e586:	607a      	str	r2, [r7, #4]
 800e588:	73fb      	strb	r3, [r7, #15]
    if (size > RECORD_MAX_SIZE) {
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e590:	d901      	bls.n	800e596 <AppendData+0x1a>
        return HAL_ERROR;
 800e592:	2301      	movs	r3, #1
 800e594:	e055      	b.n	800e642 <AppendData+0xc6>
    }

    if (FindNextWriteAddress(type) != HAL_OK) {
 800e596:	7bfb      	ldrb	r3, [r7, #15]
 800e598:	4618      	mov	r0, r3
 800e59a:	f7ff ffb7 	bl	800e50c <FindNextWriteAddress>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d011      	beq.n	800e5c8 <AppendData+0x4c>
        // No space left, need to perform garbage collection
        if (PerformGarbageCollection(type) != HAL_OK) {
 800e5a4:	7bfb      	ldrb	r3, [r7, #15]
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f000 f8ae 	bl	800e708 <PerformGarbageCollection>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d001      	beq.n	800e5b6 <AppendData+0x3a>
            return HAL_ERROR;
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	e045      	b.n	800e642 <AppendData+0xc6>
        }
        if (FindNextWriteAddress(type) != HAL_OK) {
 800e5b6:	7bfb      	ldrb	r3, [r7, #15]
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f7ff ffa7 	bl	800e50c <FindNextWriteAddress>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d001      	beq.n	800e5c8 <AppendData+0x4c>
            return HAL_ERROR;
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	e03c      	b.n	800e642 <AppendData+0xc6>
        }
    }

    RecordHeader header = {size, 0x00000000};  // Valid status
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	617b      	str	r3, [r7, #20]
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	61bb      	str	r3, [r7, #24]

    HAL_StatusTypeDef status = WriteDataToFlash(last_write_address[type], (uint8_t*)&header, sizeof(RecordHeader));
 800e5d0:	7bfb      	ldrb	r3, [r7, #15]
 800e5d2:	4a1e      	ldr	r2, [pc, #120]	; (800e64c <AppendData+0xd0>)
 800e5d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5d8:	f107 0114 	add.w	r1, r7, #20
 800e5dc:	2208      	movs	r2, #8
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f7ff ff4e 	bl	800e480 <WriteDataToFlash>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) {
 800e5e8:	7ffb      	ldrb	r3, [r7, #31]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d001      	beq.n	800e5f2 <AppendData+0x76>
        return status;
 800e5ee:	7ffb      	ldrb	r3, [r7, #31]
 800e5f0:	e027      	b.n	800e642 <AppendData+0xc6>
    }

    status = WriteDataToFlash(last_write_address[type] + sizeof(RecordHeader), data, size);
 800e5f2:	7bfb      	ldrb	r3, [r7, #15]
 800e5f4:	4a15      	ldr	r2, [pc, #84]	; (800e64c <AppendData+0xd0>)
 800e5f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5fa:	3308      	adds	r3, #8
 800e5fc:	687a      	ldr	r2, [r7, #4]
 800e5fe:	68b9      	ldr	r1, [r7, #8]
 800e600:	4618      	mov	r0, r3
 800e602:	f7ff ff3d 	bl	800e480 <WriteDataToFlash>
 800e606:	4603      	mov	r3, r0
 800e608:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) {
 800e60a:	7ffb      	ldrb	r3, [r7, #31]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d001      	beq.n	800e614 <AppendData+0x98>
        return status;
 800e610:	7ffb      	ldrb	r3, [r7, #31]
 800e612:	e016      	b.n	800e642 <AppendData+0xc6>
    }

    last_write_address[type] += RECORD_HEADER_SIZE + size;
 800e614:	7bfb      	ldrb	r3, [r7, #15]
 800e616:	4a0d      	ldr	r2, [pc, #52]	; (800e64c <AppendData+0xd0>)
 800e618:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	441a      	add	r2, r3
 800e620:	7bfb      	ldrb	r3, [r7, #15]
 800e622:	3208      	adds	r2, #8
 800e624:	4909      	ldr	r1, [pc, #36]	; (800e64c <AppendData+0xd0>)
 800e626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    last_write_address[type] = (last_write_address[type] + 3) & ~3;  // Align to 4-byte boundary
 800e62a:	7bfb      	ldrb	r3, [r7, #15]
 800e62c:	4a07      	ldr	r2, [pc, #28]	; (800e64c <AppendData+0xd0>)
 800e62e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e632:	1cda      	adds	r2, r3, #3
 800e634:	7bfb      	ldrb	r3, [r7, #15]
 800e636:	f022 0203 	bic.w	r2, r2, #3
 800e63a:	4904      	ldr	r1, [pc, #16]	; (800e64c <AppendData+0xd0>)
 800e63c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return HAL_OK;
 800e640:	2300      	movs	r3, #0
}
 800e642:	4618      	mov	r0, r3
 800e644:	3720      	adds	r7, #32
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}
 800e64a:	bf00      	nop
 800e64c:	2000002c 	.word	0x2000002c

0800e650 <WriteDarkCount>:
    }

    return HAL_ERROR;  // Record not found
}

HAL_StatusTypeDef WriteDarkCount(uint32_t dark_count) {
 800e650:	b580      	push	{r7, lr}
 800e652:	b08c      	sub	sp, #48	; 0x30
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
    uint32_t start, end;
    GetAddressRange(DATA_TYPE_DARK_COUNT, &start, &end);
 800e658:	f107 021c 	add.w	r2, r7, #28
 800e65c:	f107 0320 	add.w	r3, r7, #32
 800e660:	4619      	mov	r1, r3
 800e662:	2003      	movs	r0, #3
 800e664:	f7ff fe42 	bl	800e2ec <GetAddressRange>

    uint32_t address = start;
 800e668:	6a3b      	ldr	r3, [r7, #32]
 800e66a:	62fb      	str	r3, [r7, #44]	; 0x2c
    RecordHeader header;
    uint32_t latest_valid_address = 0;
 800e66c:	2300      	movs	r3, #0
 800e66e:	62bb      	str	r3, [r7, #40]	; 0x28

    // Find the latest valid dark count
    while (address < end) {
 800e670:	e015      	b.n	800e69e <WriteDarkCount+0x4e>
        ReadFromFlashAddress(address, (uint8_t*)&header, sizeof(RecordHeader));
 800e672:	f107 0314 	add.w	r3, r7, #20
 800e676:	2208      	movs	r2, #8
 800e678:	4619      	mov	r1, r3
 800e67a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e67c:	f7ff fed6 	bl	800e42c <ReadFromFlashAddress>

        if (header.status == 0x00000000) {  // Valid record
 800e680:	69bb      	ldr	r3, [r7, #24]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d101      	bne.n	800e68a <WriteDarkCount+0x3a>
            latest_valid_address = address;
 800e686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e688:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        address += RECORD_HEADER_SIZE + header.size;
 800e68a:	697a      	ldr	r2, [r7, #20]
 800e68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e68e:	4413      	add	r3, r2
 800e690:	3308      	adds	r3, #8
 800e692:	62fb      	str	r3, [r7, #44]	; 0x2c
        address = (address + 3) & ~3;  // Align to 4-byte boundary
 800e694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e696:	3303      	adds	r3, #3
 800e698:	f023 0303 	bic.w	r3, r3, #3
 800e69c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (address < end) {
 800e69e:	69fb      	ldr	r3, [r7, #28]
 800e6a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d3e5      	bcc.n	800e672 <WriteDarkCount+0x22>
    }

    // Invalidate the previous dark count if it exists
    if (latest_valid_address != 0) {
 800e6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d013      	beq.n	800e6d4 <WriteDarkCount+0x84>
        uint32_t invalidate_status = 0x00000001;
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	60bb      	str	r3, [r7, #8]
        HAL_StatusTypeDef status = WriteDataToFlash(latest_valid_address + 4, (uint8_t*)&invalidate_status, 4);
 800e6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b2:	3304      	adds	r3, #4
 800e6b4:	f107 0108 	add.w	r1, r7, #8
 800e6b8:	2204      	movs	r2, #4
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7ff fee0 	bl	800e480 <WriteDataToFlash>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK) {
 800e6c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d002      	beq.n	800e6d4 <WriteDarkCount+0x84>
            return status;
 800e6ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6d2:	e014      	b.n	800e6fe <WriteDarkCount+0xae>
        }
    }

    // Write the new dark count
    RecordHeader new_header = {sizeof(uint32_t), 0x00000000};  // Valid status
 800e6d4:	2304      	movs	r3, #4
 800e6d6:	60fb      	str	r3, [r7, #12]
 800e6d8:	2300      	movs	r3, #0
 800e6da:	613b      	str	r3, [r7, #16]
    HAL_StatusTypeDef status = AppendData(DATA_TYPE_DARK_COUNT, (uint8_t*)&dark_count, sizeof(uint32_t));
 800e6dc:	1d3b      	adds	r3, r7, #4
 800e6de:	2204      	movs	r2, #4
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	2003      	movs	r0, #3
 800e6e4:	f7ff ff4a 	bl	800e57c <AppendData>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if (status != HAL_OK) {
 800e6ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d002      	beq.n	800e6fc <WriteDarkCount+0xac>
        return status;
 800e6f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e6fa:	e000      	b.n	800e6fe <WriteDarkCount+0xae>
    }

    return HAL_OK;
 800e6fc:	2300      	movs	r3, #0
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	3730      	adds	r7, #48	; 0x30
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
	...

0800e708 <PerformGarbageCollection>:

HAL_StatusTypeDef PerformGarbageCollection(DataType type) {
 800e708:	b580      	push	{r7, lr}
 800e70a:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 800e70e:	af00      	add	r7, sp, #0
 800e710:	4602      	mov	r2, r0
 800e712:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800e716:	f2a3 4321 	subw	r3, r3, #1057	; 0x421
 800e71a:	701a      	strb	r2, [r3, #0]
    uint32_t start, end;
    GetAddressRange(type, &start, &end);
 800e71c:	f207 4214 	addw	r2, r7, #1044	; 0x414
 800e720:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 800e724:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800e728:	f2a3 4321 	subw	r3, r3, #1057	; 0x421
 800e72c:	781b      	ldrb	r3, [r3, #0]
 800e72e:	4618      	mov	r0, r3
 800e730:	f7ff fddc 	bl	800e2ec <GetAddressRange>

    uint32_t read_address = start;
 800e734:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 800e738:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
    uint32_t write_address = start;
 800e73c:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 800e740:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
    RecordHeader header;

    while (read_address < end) {
 800e744:	e04b      	b.n	800e7de <PerformGarbageCollection+0xd6>
        ReadFromFlashAddress(read_address, (uint8_t*)&header, sizeof(RecordHeader));
 800e746:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 800e74a:	2208      	movs	r2, #8
 800e74c:	4619      	mov	r1, r3
 800e74e:	f8d7 0424 	ldr.w	r0, [r7, #1060]	; 0x424
 800e752:	f7ff fe6b 	bl	800e42c <ReadFromFlashAddress>

        if (header.status == 0x00000000) {  // Valid record
 800e756:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d130      	bne.n	800e7c0 <PerformGarbageCollection+0xb8>
            if (read_address != write_address) {
 800e75e:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 800e762:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800e766:	429a      	cmp	r2, r3
 800e768:	d01b      	beq.n	800e7a2 <PerformGarbageCollection+0x9a>
                // Move the record
                uint8_t buffer[RECORD_MAX_SIZE];
                ReadFromFlashAddress(read_address + sizeof(RecordHeader), buffer, header.size);
 800e76a:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800e76e:	3308      	adds	r3, #8
 800e770:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 800e774:	f107 010c 	add.w	r1, r7, #12
 800e778:	4618      	mov	r0, r3
 800e77a:	f7ff fe57 	bl	800e42c <ReadFromFlashAddress>

                WriteDataToFlash(write_address, (uint8_t*)&header, sizeof(RecordHeader));
 800e77e:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 800e782:	2208      	movs	r2, #8
 800e784:	4619      	mov	r1, r3
 800e786:	f8d7 0420 	ldr.w	r0, [r7, #1056]	; 0x420
 800e78a:	f7ff fe79 	bl	800e480 <WriteDataToFlash>
                WriteDataToFlash(write_address + sizeof(RecordHeader), buffer, header.size);
 800e78e:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800e792:	3308      	adds	r3, #8
 800e794:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 800e798:	f107 010c 	add.w	r1, r7, #12
 800e79c:	4618      	mov	r0, r3
 800e79e:	f7ff fe6f 	bl	800e480 <WriteDataToFlash>
            }
            write_address += RECORD_HEADER_SIZE + header.size;
 800e7a2:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 800e7a6:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800e7aa:	4413      	add	r3, r2
 800e7ac:	3308      	adds	r3, #8
 800e7ae:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
            write_address = (write_address + 3) & ~3;  // Align to 4-byte boundary
 800e7b2:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800e7b6:	3303      	adds	r3, #3
 800e7b8:	f023 0303 	bic.w	r3, r3, #3
 800e7bc:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
        }

        read_address += RECORD_HEADER_SIZE + header.size;
 800e7c0:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 800e7c4:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800e7c8:	4413      	add	r3, r2
 800e7ca:	3308      	adds	r3, #8
 800e7cc:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
        read_address = (read_address + 3) & ~3;  // Align to 4-byte boundary
 800e7d0:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800e7d4:	3303      	adds	r3, #3
 800e7d6:	f023 0303 	bic.w	r3, r3, #3
 800e7da:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
    while (read_address < end) {
 800e7de:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800e7e2:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 800e7e6:	429a      	cmp	r2, r3
 800e7e8:	d3ad      	bcc.n	800e746 <PerformGarbageCollection+0x3e>
    }

    // Erase remaining space
    uint32_t sector = GetSectorForAddress(write_address);
 800e7ea:	f8d7 0420 	ldr.w	r0, [r7, #1056]	; 0x420
 800e7ee:	f7ff fe2d 	bl	800e44c <GetSectorForAddress>
 800e7f2:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c
    while (sector <= GetSectorForAddress(end - 1)) {
 800e7f6:	e008      	b.n	800e80a <PerformGarbageCollection+0x102>
        EraseFlashSector(sector);
 800e7f8:	f8d7 041c 	ldr.w	r0, [r7, #1052]	; 0x41c
 800e7fc:	f7ff fdc0 	bl	800e380 <EraseFlashSector>
        sector++;
 800e800:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800e804:	3301      	adds	r3, #1
 800e806:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
    while (sector <= GetSectorForAddress(end - 1)) {
 800e80a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800e80e:	3b01      	subs	r3, #1
 800e810:	4618      	mov	r0, r3
 800e812:	f7ff fe1b 	bl	800e44c <GetSectorForAddress>
 800e816:	4602      	mov	r2, r0
 800e818:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800e81c:	4293      	cmp	r3, r2
 800e81e:	d9eb      	bls.n	800e7f8 <PerformGarbageCollection+0xf0>
    }

    last_write_address[type] = write_address;
 800e820:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800e824:	f2a3 4321 	subw	r3, r3, #1057	; 0x421
 800e828:	781b      	ldrb	r3, [r3, #0]
 800e82a:	4905      	ldr	r1, [pc, #20]	; (800e840 <PerformGarbageCollection+0x138>)
 800e82c:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 800e830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return HAL_OK;
 800e834:	2300      	movs	r3, #0
}
 800e836:	4618      	mov	r0, r3
 800e838:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}
 800e840:	2000002c 	.word	0x2000002c

0800e844 <initLevelSense_SingleEnded>:
 */
#include "levelSense.h"


// Single ended configuration
HAL_StatusTypeDef initLevelSense_SingleEnded(I2C_HandleTypeDef *hi2c, uint8_t measChnl, uint8_t measConfig, bool capdac, uint8_t capdacVal ){
 800e844:	b580      	push	{r7, lr}
 800e846:	b086      	sub	sp, #24
 800e848:	af02      	add	r7, sp, #8
 800e84a:	6078      	str	r0, [r7, #4]
 800e84c:	4608      	mov	r0, r1
 800e84e:	4611      	mov	r1, r2
 800e850:	461a      	mov	r2, r3
 800e852:	4603      	mov	r3, r0
 800e854:	70fb      	strb	r3, [r7, #3]
 800e856:	460b      	mov	r3, r1
 800e858:	70bb      	strb	r3, [r7, #2]
 800e85a:	4613      	mov	r3, r2
 800e85c:	707b      	strb	r3, [r7, #1]

	// Checking for invalid parameter input
	if(measChnl < 1 || measChnl > 4 || measConfig < 1 || measConfig > 4){
 800e85e:	78fb      	ldrb	r3, [r7, #3]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d008      	beq.n	800e876 <initLevelSense_SingleEnded+0x32>
 800e864:	78fb      	ldrb	r3, [r7, #3]
 800e866:	2b04      	cmp	r3, #4
 800e868:	d805      	bhi.n	800e876 <initLevelSense_SingleEnded+0x32>
 800e86a:	78bb      	ldrb	r3, [r7, #2]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d002      	beq.n	800e876 <initLevelSense_SingleEnded+0x32>
 800e870:	78bb      	ldrb	r3, [r7, #2]
 800e872:	2b04      	cmp	r3, #4
 800e874:	d901      	bls.n	800e87a <initLevelSense_SingleEnded+0x36>
		return HAL_ERROR;
 800e876:	2301      	movs	r3, #1
 800e878:	e035      	b.n	800e8e6 <initLevelSense_SingleEnded+0xa2>
	}

	if(capdac && (capdacVal > 0x1F)){
 800e87a:	787b      	ldrb	r3, [r7, #1]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d004      	beq.n	800e88a <initLevelSense_SingleEnded+0x46>
 800e880:	7e3b      	ldrb	r3, [r7, #24]
 800e882:	2b1f      	cmp	r3, #31
 800e884:	d901      	bls.n	800e88a <initLevelSense_SingleEnded+0x46>
		return HAL_ERROR;
 800e886:	2301      	movs	r3, #1
 800e888:	e02d      	b.n	800e8e6 <initLevelSense_SingleEnded+0xa2>
	}

	// Calculate address of config register
	uint8_t config_reg = CONF_MEAS1 + (measConfig-1);
 800e88a:	78bb      	ldrb	r3, [r7, #2]
 800e88c:	3307      	adds	r3, #7
 800e88e:	73bb      	strb	r3, [r7, #14]

	// Configuration for the initialization
	uint8_t config_Value = 0;
 800e890:	2300      	movs	r3, #0
 800e892:	73fb      	strb	r3, [r7, #15]

	// Set the CHA field (bits [15:13]) for the positive input pin
	config_Value |= (measChnl-1) << 13;
 800e894:	78fb      	ldrb	r3, [r7, #3]
 800e896:	3b01      	subs	r3, #1
 800e898:	035b      	lsls	r3, r3, #13
 800e89a:	b25a      	sxtb	r2, r3
 800e89c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8a0:	4313      	orrs	r3, r2
 800e8a2:	b25b      	sxtb	r3, r3
 800e8a4:	73fb      	strb	r3, [r7, #15]

    // Set the CAPDAC field (bits [9:5]) if capdac is true
    if (capdac) {
 800e8a6:	787b      	ldrb	r3, [r7, #1]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d009      	beq.n	800e8c0 <initLevelSense_SingleEnded+0x7c>
        // Setting capdac value
        uint8_t capdac_value = capdacVal; // Example CAPDAC value
 800e8ac:	7e3b      	ldrb	r3, [r7, #24]
 800e8ae:	737b      	strb	r3, [r7, #13]
        config_Value |= (capdac_value << 5);
 800e8b0:	7b7b      	ldrb	r3, [r7, #13]
 800e8b2:	015b      	lsls	r3, r3, #5
 800e8b4:	b25a      	sxtb	r2, r3
 800e8b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8ba:	4313      	orrs	r3, r2
 800e8bc:	b25b      	sxtb	r3, r3
 800e8be:	73fb      	strb	r3, [r7, #15]
    }

    // Buffer for sending i2c (High byte first)
    uint8_t data_Buffer[3];
    data_Buffer[0] = config_reg & 0xFF;
 800e8c0:	7bbb      	ldrb	r3, [r7, #14]
 800e8c2:	723b      	strb	r3, [r7, #8]
    data_Buffer[1] = (config_Value>>8) & 0xFF;
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	727b      	strb	r3, [r7, #9]
    data_Buffer[2] = config_Value & 0xFF;
 800e8c8:	7bfb      	ldrb	r3, [r7, #15]
 800e8ca:	72bb      	strb	r3, [r7, #10]

    // Sending on I2C
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(hi2c, (FDC1004_ADDR<<1) , data_Buffer, 3, HAL_MAX_DELAY);
 800e8cc:	f107 0208 	add.w	r2, r7, #8
 800e8d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e8d4:	9300      	str	r3, [sp, #0]
 800e8d6:	2303      	movs	r3, #3
 800e8d8:	21a0      	movs	r1, #160	; 0xa0
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f7f6 fbe2 	bl	80050a4 <HAL_I2C_Master_Transmit>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	733b      	strb	r3, [r7, #12]
    return status;
 800e8e4:	7b3b      	ldrb	r3, [r7, #12]
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3710      	adds	r7, #16
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}

0800e8ee <readValue_singleEnded>:

// function to read a single value from the IC for specified config
HAL_StatusTypeDef readValue_singleEnded(I2C_HandleTypeDef *hi2c, uint8_t measConfig, uint16_t* measVal){
 800e8ee:	b580      	push	{r7, lr}
 800e8f0:	b08a      	sub	sp, #40	; 0x28
 800e8f2:	af02      	add	r7, sp, #8
 800e8f4:	60f8      	str	r0, [r7, #12]
 800e8f6:	460b      	mov	r3, r1
 800e8f8:	607a      	str	r2, [r7, #4]
 800e8fa:	72fb      	strb	r3, [r7, #11]
	// data buffer for data
    uint8_t msb_data[2];
    uint8_t lsb_data[2];

    // Wait for measurement completion (polling done flag)
    uint8_t reg = FDC_CONF;
 800e8fc:	230c      	movs	r3, #12
 800e8fe:	74fb      	strb	r3, [r7, #19]
    uint8_t status[2];

    data_Buffer[0] = FDC_CONF & 0xFF;
 800e900:	230c      	movs	r3, #12
 800e902:	773b      	strb	r3, [r7, #28]
    data_Buffer[1] = 0x00;  // REPEAT disabled, RATE = 100S/s
 800e904:	2300      	movs	r3, #0
 800e906:	777b      	strb	r3, [r7, #29]
    data_Buffer[2] = (0x01 << 7) >> (measConfig-1);  // MEAS1 enabled
 800e908:	7afb      	ldrb	r3, [r7, #11]
 800e90a:	3b01      	subs	r3, #1
 800e90c:	2280      	movs	r2, #128	; 0x80
 800e90e:	fa42 f303 	asr.w	r3, r2, r3
 800e912:	b2db      	uxtb	r3, r3
 800e914:	77bb      	strb	r3, [r7, #30]

    HAL_I2C_Master_Transmit(hi2c, (FDC1004_ADDR<<1) , data_Buffer, 3, HAL_MAX_DELAY);
 800e916:	f107 021c 	add.w	r2, r7, #28
 800e91a:	f04f 33ff 	mov.w	r3, #4294967295
 800e91e:	9300      	str	r3, [sp, #0]
 800e920:	2303      	movs	r3, #3
 800e922:	21a0      	movs	r1, #160	; 0xa0
 800e924:	68f8      	ldr	r0, [r7, #12]
 800e926:	f7f6 fbbd 	bl	80050a4 <HAL_I2C_Master_Transmit>

    do {
            if (HAL_I2C_Master_Transmit(hi2c, (FDC1004_ADDR<<1), &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 800e92a:	f107 0213 	add.w	r2, r7, #19
 800e92e:	f04f 33ff 	mov.w	r3, #4294967295
 800e932:	9300      	str	r3, [sp, #0]
 800e934:	2301      	movs	r3, #1
 800e936:	21a0      	movs	r1, #160	; 0xa0
 800e938:	68f8      	ldr	r0, [r7, #12]
 800e93a:	f7f6 fbb3 	bl	80050a4 <HAL_I2C_Master_Transmit>
 800e93e:	4603      	mov	r3, r0
 800e940:	2b00      	cmp	r3, #0
 800e942:	d001      	beq.n	800e948 <readValue_singleEnded+0x5a>
                return HAL_ERROR;
 800e944:	2301      	movs	r3, #1
 800e946:	e06a      	b.n	800ea1e <readValue_singleEnded+0x130>
            }
            if (HAL_I2C_Master_Receive(hi2c, (FDC1004_ADDR<<1), status, 2, HAL_MAX_DELAY) != HAL_OK) {
 800e948:	f107 0210 	add.w	r2, r7, #16
 800e94c:	f04f 33ff 	mov.w	r3, #4294967295
 800e950:	9300      	str	r3, [sp, #0]
 800e952:	2302      	movs	r3, #2
 800e954:	21a0      	movs	r1, #160	; 0xa0
 800e956:	68f8      	ldr	r0, [r7, #12]
 800e958:	f7f6 fca2 	bl	80052a0 <HAL_I2C_Master_Receive>
 800e95c:	4603      	mov	r3, r0
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d001      	beq.n	800e966 <readValue_singleEnded+0x78>
                return HAL_ERROR;
 800e962:	2301      	movs	r3, #1
 800e964:	e05b      	b.n	800ea1e <readValue_singleEnded+0x130>
            }
        } while ((status[1] & (0x01 << (4 - measConfig))) == 0);  // Check DONE_n Flag
 800e966:	7c7b      	ldrb	r3, [r7, #17]
 800e968:	461a      	mov	r2, r3
 800e96a:	7afb      	ldrb	r3, [r7, #11]
 800e96c:	f1c3 0304 	rsb	r3, r3, #4
 800e970:	fa42 f303 	asr.w	r3, r2, r3
 800e974:	f003 0301 	and.w	r3, r3, #1
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d0d6      	beq.n	800e92a <readValue_singleEnded+0x3c>

    reg = MEAS1_MSB + (2 * (measConfig - 1));
 800e97c:	7afb      	ldrb	r3, [r7, #11]
 800e97e:	3b01      	subs	r3, #1
 800e980:	b2db      	uxtb	r3, r3
 800e982:	005b      	lsls	r3, r3, #1
 800e984:	b2db      	uxtb	r3, r3
 800e986:	74fb      	strb	r3, [r7, #19]


    // Getting MSB of the measured Data
    if (HAL_I2C_Master_Transmit(hi2c, FDC1004_ADDR, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 800e988:	f107 0213 	add.w	r2, r7, #19
 800e98c:	f04f 33ff 	mov.w	r3, #4294967295
 800e990:	9300      	str	r3, [sp, #0]
 800e992:	2301      	movs	r3, #1
 800e994:	2150      	movs	r1, #80	; 0x50
 800e996:	68f8      	ldr	r0, [r7, #12]
 800e998:	f7f6 fb84 	bl	80050a4 <HAL_I2C_Master_Transmit>
 800e99c:	4603      	mov	r3, r0
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d001      	beq.n	800e9a6 <readValue_singleEnded+0xb8>
        return HAL_ERROR;
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	e03b      	b.n	800ea1e <readValue_singleEnded+0x130>
    }
    if (HAL_I2C_Master_Receive(hi2c, FDC1004_ADDR, msb_data, 2, HAL_MAX_DELAY) != HAL_OK) {
 800e9a6:	f107 0218 	add.w	r2, r7, #24
 800e9aa:	f04f 33ff 	mov.w	r3, #4294967295
 800e9ae:	9300      	str	r3, [sp, #0]
 800e9b0:	2302      	movs	r3, #2
 800e9b2:	2150      	movs	r1, #80	; 0x50
 800e9b4:	68f8      	ldr	r0, [r7, #12]
 800e9b6:	f7f6 fc73 	bl	80052a0 <HAL_I2C_Master_Receive>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d001      	beq.n	800e9c4 <readValue_singleEnded+0xd6>
        return HAL_ERROR;
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	e02c      	b.n	800ea1e <readValue_singleEnded+0x130>
    }

    reg += 1;
 800e9c4:	7cfb      	ldrb	r3, [r7, #19]
 800e9c6:	3301      	adds	r3, #1
 800e9c8:	b2db      	uxtb	r3, r3
 800e9ca:	74fb      	strb	r3, [r7, #19]

    // Getting LSB of the measured Data
    if (HAL_I2C_Master_Transmit(hi2c, FDC1004_ADDR, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 800e9cc:	f107 0213 	add.w	r2, r7, #19
 800e9d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e9d4:	9300      	str	r3, [sp, #0]
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	2150      	movs	r1, #80	; 0x50
 800e9da:	68f8      	ldr	r0, [r7, #12]
 800e9dc:	f7f6 fb62 	bl	80050a4 <HAL_I2C_Master_Transmit>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d001      	beq.n	800e9ea <readValue_singleEnded+0xfc>
            return HAL_ERROR;
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	e019      	b.n	800ea1e <readValue_singleEnded+0x130>
        }
        if (HAL_I2C_Master_Receive(hi2c, FDC1004_ADDR, lsb_data, 2, HAL_MAX_DELAY) != HAL_OK) {
 800e9ea:	f107 0214 	add.w	r2, r7, #20
 800e9ee:	f04f 33ff 	mov.w	r3, #4294967295
 800e9f2:	9300      	str	r3, [sp, #0]
 800e9f4:	2302      	movs	r3, #2
 800e9f6:	2150      	movs	r1, #80	; 0x50
 800e9f8:	68f8      	ldr	r0, [r7, #12]
 800e9fa:	f7f6 fc51 	bl	80052a0 <HAL_I2C_Master_Receive>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d001      	beq.n	800ea08 <readValue_singleEnded+0x11a>
            return HAL_ERROR;
 800ea04:	2301      	movs	r3, #1
 800ea06:	e00a      	b.n	800ea1e <readValue_singleEnded+0x130>
        }

    // Combine MSB and LSB to form the 24-bit result
    *measVal = ((uint32_t)msb_data[0] << 16) | ((uint32_t)msb_data[1] << 8) | lsb_data[0];
 800ea08:	7e7b      	ldrb	r3, [r7, #25]
 800ea0a:	b29b      	uxth	r3, r3
 800ea0c:	021b      	lsls	r3, r3, #8
 800ea0e:	b29a      	uxth	r2, r3
 800ea10:	7d3b      	ldrb	r3, [r7, #20]
 800ea12:	b29b      	uxth	r3, r3
 800ea14:	4313      	orrs	r3, r2
 800ea16:	b29a      	uxth	r2, r3
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 800ea1c:	2300      	movs	r3, #0

}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3720      	adds	r7, #32
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}

0800ea26 <initLevelSensors>:

HAL_StatusTypeDef initLevelSensors(I2C_HandleTypeDef *hi2c) {
 800ea26:	b580      	push	{r7, lr}
 800ea28:	b086      	sub	sp, #24
 800ea2a:	af02      	add	r7, sp, #8
 800ea2c:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    // Setup measurement 1 for channel 1
    status = initLevelSense_SingleEnded(hi2c, 1, 1, false, 0);
 800ea2e:	2300      	movs	r3, #0
 800ea30:	9300      	str	r3, [sp, #0]
 800ea32:	2300      	movs	r3, #0
 800ea34:	2201      	movs	r2, #1
 800ea36:	2101      	movs	r1, #1
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	f7ff ff03 	bl	800e844 <initLevelSense_SingleEnded>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 800ea42:	7bfb      	ldrb	r3, [r7, #15]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d001      	beq.n	800ea4c <initLevelSensors+0x26>
 800ea48:	7bfb      	ldrb	r3, [r7, #15]
 800ea4a:	e01e      	b.n	800ea8a <initLevelSensors+0x64>

    // Setup measurement 2 for channel 2
    status = initLevelSense_SingleEnded(hi2c, 2, 2, false, 0);
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	9300      	str	r3, [sp, #0]
 800ea50:	2300      	movs	r3, #0
 800ea52:	2202      	movs	r2, #2
 800ea54:	2102      	movs	r1, #2
 800ea56:	6878      	ldr	r0, [r7, #4]
 800ea58:	f7ff fef4 	bl	800e844 <initLevelSense_SingleEnded>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 800ea60:	7bfb      	ldrb	r3, [r7, #15]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d001      	beq.n	800ea6a <initLevelSensors+0x44>
 800ea66:	7bfb      	ldrb	r3, [r7, #15]
 800ea68:	e00f      	b.n	800ea8a <initLevelSensors+0x64>

    // Setup measurement 3 for channel 3
    status = initLevelSense_SingleEnded(hi2c, 3, 3, false, 0);
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	9300      	str	r3, [sp, #0]
 800ea6e:	2300      	movs	r3, #0
 800ea70:	2203      	movs	r2, #3
 800ea72:	2103      	movs	r1, #3
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f7ff fee5 	bl	800e844 <initLevelSense_SingleEnded>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 800ea7e:	7bfb      	ldrb	r3, [r7, #15]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d001      	beq.n	800ea88 <initLevelSensors+0x62>
 800ea84:	7bfb      	ldrb	r3, [r7, #15]
 800ea86:	e000      	b.n	800ea8a <initLevelSensors+0x64>

    return HAL_OK;
 800ea88:	2300      	movs	r3, #0
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3710      	adds	r7, #16
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}
	...

0800ea94 <readLevelSensors>:

HAL_StatusTypeDef readLevelSensors(I2C_HandleTypeDef *hi2c, float *channel1, float *channel2, float *channel3) {
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b08a      	sub	sp, #40	; 0x28
 800ea98:	af02      	add	r7, sp, #8
 800ea9a:	60f8      	str	r0, [r7, #12]
 800ea9c:	60b9      	str	r1, [r7, #8]
 800ea9e:	607a      	str	r2, [r7, #4]
 800eaa0:	603b      	str	r3, [r7, #0]
    HAL_StatusTypeDef status;

    // Trigger measurements
    uint8_t fdc_conf[3] = {FDC_CONF, 0x04, 0x07}; // 100S/s, MEAS_1, MEAS_2, and MEAS_3 enabled
 800eaa2:	4a51      	ldr	r2, [pc, #324]	; (800ebe8 <readLevelSensors+0x154>)
 800eaa4:	f107 031c 	add.w	r3, r7, #28
 800eaa8:	6812      	ldr	r2, [r2, #0]
 800eaaa:	4611      	mov	r1, r2
 800eaac:	8019      	strh	r1, [r3, #0]
 800eaae:	3302      	adds	r3, #2
 800eab0:	0c12      	lsrs	r2, r2, #16
 800eab2:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Master_Transmit(hi2c, (FDC1004_ADDR<<1), fdc_conf, 3, HAL_MAX_DELAY);
 800eab4:	f107 021c 	add.w	r2, r7, #28
 800eab8:	f04f 33ff 	mov.w	r3, #4294967295
 800eabc:	9300      	str	r3, [sp, #0]
 800eabe:	2303      	movs	r3, #3
 800eac0:	21a0      	movs	r1, #160	; 0xa0
 800eac2:	68f8      	ldr	r0, [r7, #12]
 800eac4:	f7f6 faee 	bl	80050a4 <HAL_I2C_Master_Transmit>
 800eac8:	4603      	mov	r3, r0
 800eaca:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) return status;
 800eacc:	7ffb      	ldrb	r3, [r7, #31]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d001      	beq.n	800ead6 <readLevelSensors+0x42>
 800ead2:	7ffb      	ldrb	r3, [r7, #31]
 800ead4:	e083      	b.n	800ebde <readLevelSensors+0x14a>

    // Wait for measurements to complete
    uint8_t status_reg[2];
    do {
        uint8_t reg = FDC_CONF;
 800ead6:	230c      	movs	r3, #12
 800ead8:	757b      	strb	r3, [r7, #21]
        status = HAL_I2C_Master_Transmit(hi2c, (FDC1004_ADDR<<1), &reg, 1, HAL_MAX_DELAY);
 800eada:	f107 0215 	add.w	r2, r7, #21
 800eade:	f04f 33ff 	mov.w	r3, #4294967295
 800eae2:	9300      	str	r3, [sp, #0]
 800eae4:	2301      	movs	r3, #1
 800eae6:	21a0      	movs	r1, #160	; 0xa0
 800eae8:	68f8      	ldr	r0, [r7, #12]
 800eaea:	f7f6 fadb 	bl	80050a4 <HAL_I2C_Master_Transmit>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	77fb      	strb	r3, [r7, #31]
        if (status != HAL_OK) return status;
 800eaf2:	7ffb      	ldrb	r3, [r7, #31]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d001      	beq.n	800eafc <readLevelSensors+0x68>
 800eaf8:	7ffb      	ldrb	r3, [r7, #31]
 800eafa:	e070      	b.n	800ebde <readLevelSensors+0x14a>
        
        status = HAL_I2C_Master_Receive(hi2c, (FDC1004_ADDR<<1), status_reg, 2, HAL_MAX_DELAY);
 800eafc:	f107 0218 	add.w	r2, r7, #24
 800eb00:	f04f 33ff 	mov.w	r3, #4294967295
 800eb04:	9300      	str	r3, [sp, #0]
 800eb06:	2302      	movs	r3, #2
 800eb08:	21a0      	movs	r1, #160	; 0xa0
 800eb0a:	68f8      	ldr	r0, [r7, #12]
 800eb0c:	f7f6 fbc8 	bl	80052a0 <HAL_I2C_Master_Receive>
 800eb10:	4603      	mov	r3, r0
 800eb12:	77fb      	strb	r3, [r7, #31]
        if (status != HAL_OK) return status;
 800eb14:	7ffb      	ldrb	r3, [r7, #31]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d001      	beq.n	800eb1e <readLevelSensors+0x8a>
 800eb1a:	7ffb      	ldrb	r3, [r7, #31]
 800eb1c:	e05f      	b.n	800ebde <readLevelSensors+0x14a>
    } while ((status_reg[1] & 0x07) != 0x07); // Wait for DONE_1, DONE_2, and DONE_3
 800eb1e:	7e7b      	ldrb	r3, [r7, #25]
 800eb20:	f003 0307 	and.w	r3, r3, #7
 800eb24:	2b07      	cmp	r3, #7
 800eb26:	d1d6      	bne.n	800ead6 <readLevelSensors+0x42>

    // Read values
    uint16_t raw_value;
    
    status = readValue_singleEnded(hi2c, 1, &raw_value);
 800eb28:	f107 0316 	add.w	r3, r7, #22
 800eb2c:	461a      	mov	r2, r3
 800eb2e:	2101      	movs	r1, #1
 800eb30:	68f8      	ldr	r0, [r7, #12]
 800eb32:	f7ff fedc 	bl	800e8ee <readValue_singleEnded>
 800eb36:	4603      	mov	r3, r0
 800eb38:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) return status;
 800eb3a:	7ffb      	ldrb	r3, [r7, #31]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d001      	beq.n	800eb44 <readLevelSensors+0xb0>
 800eb40:	7ffb      	ldrb	r3, [r7, #31]
 800eb42:	e04c      	b.n	800ebde <readLevelSensors+0x14a>
    *channel1 = ((float)raw_value / 524288.0f) - 16.0f;
 800eb44:	8afb      	ldrh	r3, [r7, #22]
 800eb46:	ee07 3a90 	vmov	s15, r3
 800eb4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800eb4e:	eddf 6a27 	vldr	s13, [pc, #156]	; 800ebec <readLevelSensors+0x158>
 800eb52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800eb56:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800eb5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	edc3 7a00 	vstr	s15, [r3]

    status = readValue_singleEnded(hi2c, 2, &raw_value);
 800eb64:	f107 0316 	add.w	r3, r7, #22
 800eb68:	461a      	mov	r2, r3
 800eb6a:	2102      	movs	r1, #2
 800eb6c:	68f8      	ldr	r0, [r7, #12]
 800eb6e:	f7ff febe 	bl	800e8ee <readValue_singleEnded>
 800eb72:	4603      	mov	r3, r0
 800eb74:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) return status;
 800eb76:	7ffb      	ldrb	r3, [r7, #31]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d001      	beq.n	800eb80 <readLevelSensors+0xec>
 800eb7c:	7ffb      	ldrb	r3, [r7, #31]
 800eb7e:	e02e      	b.n	800ebde <readLevelSensors+0x14a>
    *channel2 = ((float)raw_value / 524288.0f) - 16.0f;
 800eb80:	8afb      	ldrh	r3, [r7, #22]
 800eb82:	ee07 3a90 	vmov	s15, r3
 800eb86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800eb8a:	eddf 6a18 	vldr	s13, [pc, #96]	; 800ebec <readLevelSensors+0x158>
 800eb8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800eb92:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800eb96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	edc3 7a00 	vstr	s15, [r3]

    status = readValue_singleEnded(hi2c, 3, &raw_value);
 800eba0:	f107 0316 	add.w	r3, r7, #22
 800eba4:	461a      	mov	r2, r3
 800eba6:	2103      	movs	r1, #3
 800eba8:	68f8      	ldr	r0, [r7, #12]
 800ebaa:	f7ff fea0 	bl	800e8ee <readValue_singleEnded>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) return status;
 800ebb2:	7ffb      	ldrb	r3, [r7, #31]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d001      	beq.n	800ebbc <readLevelSensors+0x128>
 800ebb8:	7ffb      	ldrb	r3, [r7, #31]
 800ebba:	e010      	b.n	800ebde <readLevelSensors+0x14a>
    *channel3 = ((float)raw_value / 524288.0f) - 16.0f;
 800ebbc:	8afb      	ldrh	r3, [r7, #22]
 800ebbe:	ee07 3a90 	vmov	s15, r3
 800ebc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ebc6:	eddf 6a09 	vldr	s13, [pc, #36]	; 800ebec <readLevelSensors+0x158>
 800ebca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ebce:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800ebd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	edc3 7a00 	vstr	s15, [r3]

    return HAL_OK;
 800ebdc:	2300      	movs	r3, #0
}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3720      	adds	r7, #32
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}
 800ebe6:	bf00      	nop
 800ebe8:	0800f23c 	.word	0x0800f23c
 800ebec:	49000000 	.word	0x49000000

0800ebf0 <calculate_level>:

uint8_t calculate_level(I2C_HandleTypeDef *hi2c){
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b086      	sub	sp, #24
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
    
    float channel1, channel2, channel3;
    uint8_t level = 0;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	75fb      	strb	r3, [r7, #23]
    // Get the three readings
    readLevelSensors(hi2c,&channel1,&channel2,&channel3);
 800ebfc:	f107 0308 	add.w	r3, r7, #8
 800ec00:	f107 020c 	add.w	r2, r7, #12
 800ec04:	f107 0110 	add.w	r1, r7, #16
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f7ff ff43 	bl	800ea94 <readLevelSensors>

    // CH1 - LEV, CH2 - RE, CH3 - RL
    // (lev - lev0)/(rl - re)
    
    level = (channel1 - CLEV0)/(channel3 - channel2);
 800ec0e:	edd7 7a04 	vldr	s15, [r7, #16]
 800ec12:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800ec40 <calculate_level+0x50>
 800ec16:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800ec1a:	ed97 7a02 	vldr	s14, [r7, #8]
 800ec1e:	edd7 7a03 	vldr	s15, [r7, #12]
 800ec22:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ec26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ec2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ec2e:	edc7 7a00 	vstr	s15, [r7]
 800ec32:	783b      	ldrb	r3, [r7, #0]
 800ec34:	75fb      	strb	r3, [r7, #23]

    return level;
 800ec36:	7dfb      	ldrb	r3, [r7, #23]

}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3718      	adds	r7, #24
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}
 800ec40:	43fa0000 	.word	0x43fa0000

0800ec44 <main_app>:
StateMachine_t StateMachine;



void main_app(void)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	af00      	add	r7, sp, #0
    // Initialize the state machine
    StateMachine.eState = ST_INIT;
 800ec48:	4b05      	ldr	r3, [pc, #20]	; (800ec60 <main_app+0x1c>)
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	701a      	strb	r2, [r3, #0]
    StateMachine.eEvent = NO_EVENT;
 800ec4e:	4b04      	ldr	r3, [pc, #16]	; (800ec60 <main_app+0x1c>)
 800ec50:	2200      	movs	r2, #0
 800ec52:	705a      	strb	r2, [r3, #1]
    StateMachine.bEventOccurred = false;
 800ec54:	4b02      	ldr	r3, [pc, #8]	; (800ec60 <main_app+0x1c>)
 800ec56:	2200      	movs	r2, #0
 800ec58:	709a      	strb	r2, [r3, #2]

    // Main loop
    while (1)
    {
        // Run the state machine
        StateTransition();
 800ec5a:	f000 f853 	bl	800ed04 <StateTransition>
 800ec5e:	e7fc      	b.n	800ec5a <main_app+0x16>
 800ec60:	200010d8 	.word	0x200010d8

0800ec64 <HMI_changepage>:
        // Other system tasks can be performed here
    }
}


HAL_StatusTypeDef HMI_changepage(UART_HandleTypeDef *uart, uint16_t pagenum){
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b086      	sub	sp, #24
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	807b      	strh	r3, [r7, #2]

	uint8_t buffer[10];  // Buffer to hold all bytes to be sent

    // Prepare the buffer
    buffer[0] = 0x5A;
 800ec70:	235a      	movs	r3, #90	; 0x5a
 800ec72:	733b      	strb	r3, [r7, #12]
    buffer[1] = 0xA5;
 800ec74:	23a5      	movs	r3, #165	; 0xa5
 800ec76:	737b      	strb	r3, [r7, #13]
    buffer[2] = 0x07;
 800ec78:	2307      	movs	r3, #7
 800ec7a:	73bb      	strb	r3, [r7, #14]
    buffer[3] = 0x82;
 800ec7c:	2382      	movs	r3, #130	; 0x82
 800ec7e:	73fb      	strb	r3, [r7, #15]
    buffer[4] = 0x00;
 800ec80:	2300      	movs	r3, #0
 800ec82:	743b      	strb	r3, [r7, #16]
    buffer[5] = 0x84;
 800ec84:	2384      	movs	r3, #132	; 0x84
 800ec86:	747b      	strb	r3, [r7, #17]
    buffer[6] = 0x5A;
 800ec88:	235a      	movs	r3, #90	; 0x5a
 800ec8a:	74bb      	strb	r3, [r7, #18]
    buffer[7] = 0x01;
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	74fb      	strb	r3, [r7, #19]

    // Add PAGE_MENU as two bytes (16 bits)
    buffer[8] = (pagenum >> 8) & 0xFF;  // High byte
 800ec90:	887b      	ldrh	r3, [r7, #2]
 800ec92:	0a1b      	lsrs	r3, r3, #8
 800ec94:	b29b      	uxth	r3, r3
 800ec96:	b2db      	uxtb	r3, r3
 800ec98:	753b      	strb	r3, [r7, #20]
    buffer[9] = pagenum & 0xFF;         // Low byte
 800ec9a:	887b      	ldrh	r3, [r7, #2]
 800ec9c:	b2db      	uxtb	r3, r3
 800ec9e:	757b      	strb	r3, [r7, #21]

    // Changes page to menu
    HAL_UART_Transmit(uart, buffer, 10 , HAL_MAX_DELAY);
 800eca0:	f107 010c 	add.w	r1, r7, #12
 800eca4:	f04f 33ff 	mov.w	r3, #4294967295
 800eca8:	220a      	movs	r2, #10
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f7f9 ff32 	bl	8008b14 <HAL_UART_Transmit>

    return HAL_OK;
 800ecb0:	2300      	movs	r3, #0
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3718      	adds	r7, #24
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
	...

0800ecbc <PULSES_darkcount>:
 */
#include "pulses.h"

volatile uint32_t pulse_count = 0;

uint32_t PULSES_darkcount(TIM_HandleTypeDef *htim) {
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b084      	sub	sp, #16
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
  // Reset pulse count
  pulse_count = 0;
 800ecc4:	4b0d      	ldr	r3, [pc, #52]	; (800ecfc <PULSES_darkcount+0x40>)
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	601a      	str	r2, [r3, #0]

  // Start timer
  HAL_TIM_IC_Start(htim, TIM_CHANNEL_1);
 800ecca:	2100      	movs	r1, #0
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f7f8 fdfd 	bl	80078cc <HAL_TIM_IC_Start>

  // Wait for 3 seconds
  HAL_Delay(3000);
 800ecd2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ecd6:	f7f2 fe35 	bl	8001944 <HAL_Delay>

  // Stop timer
  HAL_TIM_IC_Stop(htim, TIM_CHANNEL_1);
 800ecda:	2100      	movs	r1, #0
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f7f8 fed1 	bl	8007a84 <HAL_TIM_IC_Stop>

  // Calculate average pulses per second
  uint32_t average_pulses = pulse_count / 3;
 800ece2:	4b06      	ldr	r3, [pc, #24]	; (800ecfc <PULSES_darkcount+0x40>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	4a06      	ldr	r2, [pc, #24]	; (800ed00 <PULSES_darkcount+0x44>)
 800ece8:	fba2 2303 	umull	r2, r3, r2, r3
 800ecec:	085b      	lsrs	r3, r3, #1
 800ecee:	60fb      	str	r3, [r7, #12]

  return average_pulses;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3710      	adds	r7, #16
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}
 800ecfa:	bf00      	nop
 800ecfc:	200010dc 	.word	0x200010dc
 800ed00:	aaaaaaab 	.word	0xaaaaaaab

0800ed04 <StateTransition>:
// For example:
// #include "fatfs.h"
// #include "usb_host.h"

void StateTransition(void)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b082      	sub	sp, #8
 800ed08:	af00      	add	r7, sp, #0
    if (StateMachine.bEventOccurred)
 800ed0a:	4b1e      	ldr	r3, [pc, #120]	; (800ed84 <StateTransition+0x80>)
 800ed0c:	789b      	ldrb	r3, [r3, #2]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d02d      	beq.n	800ed6e <StateTransition+0x6a>
    {
        StateMachine.bEventOccurred = false;
 800ed12:	4b1c      	ldr	r3, [pc, #112]	; (800ed84 <StateTransition+0x80>)
 800ed14:	2200      	movs	r2, #0
 800ed16:	709a      	strb	r2, [r3, #2]
        for (uint32_t idx = 0U; idx < STATE_TABLE_SIZE; idx++)
 800ed18:	2300      	movs	r3, #0
 800ed1a:	607b      	str	r3, [r7, #4]
 800ed1c:	e024      	b.n	800ed68 <StateTransition+0x64>
        {
            if ((StateTransitionTable[idx].eCurrState == StateMachine.eState) &&
 800ed1e:	491a      	ldr	r1, [pc, #104]	; (800ed88 <StateTransition+0x84>)
 800ed20:	687a      	ldr	r2, [r7, #4]
 800ed22:	4613      	mov	r3, r2
 800ed24:	005b      	lsls	r3, r3, #1
 800ed26:	4413      	add	r3, r2
 800ed28:	440b      	add	r3, r1
 800ed2a:	781a      	ldrb	r2, [r3, #0]
 800ed2c:	4b15      	ldr	r3, [pc, #84]	; (800ed84 <StateTransition+0x80>)
 800ed2e:	781b      	ldrb	r3, [r3, #0]
 800ed30:	429a      	cmp	r2, r3
 800ed32:	d116      	bne.n	800ed62 <StateTransition+0x5e>
                (StateTransitionTable[idx].eEvent == StateMachine.eEvent))
 800ed34:	4914      	ldr	r1, [pc, #80]	; (800ed88 <StateTransition+0x84>)
 800ed36:	687a      	ldr	r2, [r7, #4]
 800ed38:	4613      	mov	r3, r2
 800ed3a:	005b      	lsls	r3, r3, #1
 800ed3c:	4413      	add	r3, r2
 800ed3e:	440b      	add	r3, r1
 800ed40:	3301      	adds	r3, #1
 800ed42:	781a      	ldrb	r2, [r3, #0]
 800ed44:	4b0f      	ldr	r3, [pc, #60]	; (800ed84 <StateTransition+0x80>)
 800ed46:	785b      	ldrb	r3, [r3, #1]
            if ((StateTransitionTable[idx].eCurrState == StateMachine.eState) &&
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d10a      	bne.n	800ed62 <StateTransition+0x5e>
            {
                StateMachine.eState = StateTransitionTable[idx].eNextState;
 800ed4c:	490e      	ldr	r1, [pc, #56]	; (800ed88 <StateTransition+0x84>)
 800ed4e:	687a      	ldr	r2, [r7, #4]
 800ed50:	4613      	mov	r3, r2
 800ed52:	005b      	lsls	r3, r3, #1
 800ed54:	4413      	add	r3, r2
 800ed56:	440b      	add	r3, r1
 800ed58:	3302      	adds	r3, #2
 800ed5a:	781a      	ldrb	r2, [r3, #0]
 800ed5c:	4b09      	ldr	r3, [pc, #36]	; (800ed84 <StateTransition+0x80>)
 800ed5e:	701a      	strb	r2, [r3, #0]
                break;
 800ed60:	e005      	b.n	800ed6e <StateTransition+0x6a>
        for (uint32_t idx = 0U; idx < STATE_TABLE_SIZE; idx++)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	3301      	adds	r3, #1
 800ed66:	607b      	str	r3, [r7, #4]
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2b0a      	cmp	r3, #10
 800ed6c:	d9d7      	bls.n	800ed1e <StateTransition+0x1a>
            }
        }
    }
    StateArray[StateMachine.eState]();
 800ed6e:	4b05      	ldr	r3, [pc, #20]	; (800ed84 <StateTransition+0x80>)
 800ed70:	781b      	ldrb	r3, [r3, #0]
 800ed72:	461a      	mov	r2, r3
 800ed74:	4b05      	ldr	r3, [pc, #20]	; (800ed8c <StateTransition+0x88>)
 800ed76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed7a:	4798      	blx	r3
}
 800ed7c:	bf00      	nop
 800ed7e:	3708      	adds	r7, #8
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}
 800ed84:	200010d8 	.word	0x200010d8
 800ed88:	0800f27c 	.word	0x0800f27c
 800ed8c:	0800f26c 	.word	0x0800f26c

0800ed90 <stateInit>:

void stateInit(void) {
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b082      	sub	sp, #8
 800ed94:	af00      	add	r7, sp, #0
    HMI_changepage(&huart2, PAGE_SPASH);
 800ed96:	2100      	movs	r1, #0
 800ed98:	480c      	ldr	r0, [pc, #48]	; (800edcc <stateInit+0x3c>)
 800ed9a:	f7ff ff63 	bl	800ec64 <HMI_changepage>

    HAL_Delay(2000);
 800ed9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800eda2:	f7f2 fdcf 	bl	8001944 <HAL_Delay>

    // Send command to change screen to system check screen

    HAL_StatusTypeDef status = initLevelSensors(&hi2c1);
 800eda6:	480a      	ldr	r0, [pc, #40]	; (800edd0 <stateInit+0x40>)
 800eda8:	f7ff fe3d 	bl	800ea26 <initLevelSensors>
 800edac:	4603      	mov	r3, r0
 800edae:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) {
       // Error_Handler();
    }

    StateMachine.bEventOccurred = true;
 800edb0:	4b08      	ldr	r3, [pc, #32]	; (800edd4 <stateInit+0x44>)
 800edb2:	2201      	movs	r2, #1
 800edb4:	709a      	strb	r2, [r3, #2]
    StateMachine.eEvent = EVENT_INIT_COMPLETE;
 800edb6:	4b07      	ldr	r3, [pc, #28]	; (800edd4 <stateInit+0x44>)
 800edb8:	2201      	movs	r2, #1
 800edba:	705a      	strb	r2, [r3, #1]

    HMI_changepage(&huart2, PAGE_INIT);
 800edbc:	2101      	movs	r1, #1
 800edbe:	4803      	ldr	r0, [pc, #12]	; (800edcc <stateInit+0x3c>)
 800edc0:	f7ff ff50 	bl	800ec64 <HMI_changepage>

    // Exit the state function (the event will be handled in the state transition function)
    return;
 800edc4:	bf00      	nop
}
 800edc6:	3708      	adds	r7, #8
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	200003b4 	.word	0x200003b4
 800edd0:	20000104 	.word	0x20000104
 800edd4:	200010d8 	.word	0x200010d8

0800edd8 <stateStartUp>:

void stateStartUp(void) {
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0

	//uint32_t data
	//ReadData(DATA_TYPE_ERROR_CODES, 1, &data, sizeof(data));

	// Bringing cuvette holder to position TODO: Change it to RESET
	if(HAL_GPIO_ReadPin(LIMIT_SW_1_GPIO_Port, LIMIT_SW_1_Pin) == GPIO_PIN_RESET){
 800edde:	2102      	movs	r1, #2
 800ede0:	4814      	ldr	r0, [pc, #80]	; (800ee34 <stateStartUp+0x5c>)
 800ede2:	f7f3 fecf 	bl	8002b84 <HAL_GPIO_ReadPin>
 800ede6:	4603      	mov	r3, r0
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d103      	bne.n	800edf4 <stateStartUp+0x1c>
		cuvetteRotate(&htim9, &hdac);
 800edec:	4912      	ldr	r1, [pc, #72]	; (800ee38 <stateStartUp+0x60>)
 800edee:	4813      	ldr	r0, [pc, #76]	; (800ee3c <stateStartUp+0x64>)
 800edf0:	f000 f83c 	bl	800ee6c <cuvetteRotate>
	}

	// Dark count
	uint32_t new_dark_count = 0000;
 800edf4:	2300      	movs	r3, #0
 800edf6:	607b      	str	r3, [r7, #4]
	new_dark_count = PULSES_darkcount(&htim2);
 800edf8:	4811      	ldr	r0, [pc, #68]	; (800ee40 <stateStartUp+0x68>)
 800edfa:	f7ff ff5f 	bl	800ecbc <PULSES_darkcount>
 800edfe:	6078      	str	r0, [r7, #4]
//	    StateMachine.eEvent = EVENT_STARTUP_FAILED_DARK;
//        return;
//	}

	// Saving new dark count
	HAL_StatusTypeDef status = WriteDarkCount(new_dark_count);
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f7ff fc25 	bl	800e650 <WriteDarkCount>
 800ee06:	4603      	mov	r3, r0
 800ee08:	70fb      	strb	r3, [r7, #3]
//	    StateMachine.eEvent = EVENT_STARTUP_FAILED_FLASH;
//        return;
//	}

	// Starter Level
    if(calculate_level(&hi2c1) < 5 ){
 800ee0a:	480e      	ldr	r0, [pc, #56]	; (800ee44 <stateStartUp+0x6c>)
 800ee0c:	f7ff fef0 	bl	800ebf0 <calculate_level>
//        StateMachine.eState = EVENT_STARTUP_FAILED_STARTER;
//        return;
    }


    StateMachine.bEventOccurred = true;
 800ee10:	4b0d      	ldr	r3, [pc, #52]	; (800ee48 <stateStartUp+0x70>)
 800ee12:	2201      	movs	r2, #1
 800ee14:	709a      	strb	r2, [r3, #2]
    StateMachine.eEvent = EVENT_STARTUP_COMPLETE;
 800ee16:	4b0c      	ldr	r3, [pc, #48]	; (800ee48 <stateStartUp+0x70>)
 800ee18:	2202      	movs	r2, #2
 800ee1a:	705a      	strb	r2, [r3, #1]

    HMI_changepage(&huart2, PAGE_MENU);
 800ee1c:	2102      	movs	r1, #2
 800ee1e:	480b      	ldr	r0, [pc, #44]	; (800ee4c <stateStartUp+0x74>)
 800ee20:	f7ff ff20 	bl	800ec64 <HMI_changepage>
    HAL_Delay(2000);
 800ee24:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ee28:	f7f2 fd8c 	bl	8001944 <HAL_Delay>

    return;
 800ee2c:	bf00      	nop

}
 800ee2e:	3708      	adds	r7, #8
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}
 800ee34:	40020c00 	.word	0x40020c00
 800ee38:	200000f0 	.word	0x200000f0
 800ee3c:	200002dc 	.word	0x200002dc
 800ee40:	2000024c 	.word	0x2000024c
 800ee44:	20000104 	.word	0x20000104
 800ee48:	200010d8 	.word	0x200010d8
 800ee4c:	200003b4 	.word	0x200003b4

0800ee50 <stateHomeMenu>:

void stateHomeMenu(void) {
 800ee50:	b480      	push	{r7}
 800ee52:	af00      	add	r7, sp, #0
    // Implement home menu logic here
}
 800ee54:	bf00      	nop
 800ee56:	46bd      	mov	sp, r7
 800ee58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5c:	4770      	bx	lr

0800ee5e <stateError>:

void stateError(void) {
 800ee5e:	b480      	push	{r7}
 800ee60:	af00      	add	r7, sp, #0
    // Implement error handling logic here
}
 800ee62:	bf00      	nop
 800ee64:	46bd      	mov	sp, r7
 800ee66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6a:	4770      	bx	lr

0800ee6c <cuvetteRotate>:
 */

#include "main_app.h"


HAL_StatusTypeDef cuvetteRotate(TIM_HandleTypeDef* tim_handle, DAC_HandleTypeDef* dac_handle) {
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b086      	sub	sp, #24
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	6039      	str	r1, [r7, #0]

	// Start the PWM
    HAL_TIM_PWM_Start(tim_handle, TIM_CHANNEL_1);
 800ee76:	2100      	movs	r1, #0
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f7f8 fb9f 	bl	80075bc <HAL_TIM_PWM_Start>

    // Set Micro-step
    HAL_GPIO_WritePin(MS1_1_GPIO_Port, MS1_1_Pin, GPIO_PIN_RESET);
 800ee7e:	2200      	movs	r2, #0
 800ee80:	2110      	movs	r1, #16
 800ee82:	4838      	ldr	r0, [pc, #224]	; (800ef64 <cuvetteRotate+0xf8>)
 800ee84:	f7f3 fe96 	bl	8002bb4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MS2_1_GPIO_Port, MS2_1_Pin, GPIO_PIN_RESET);
 800ee88:	2200      	movs	r2, #0
 800ee8a:	2120      	movs	r1, #32
 800ee8c:	4835      	ldr	r0, [pc, #212]	; (800ef64 <cuvetteRotate+0xf8>)
 800ee8e:	f7f3 fe91 	bl	8002bb4 <HAL_GPIO_WritePin>

    if( HAL_DAC_Start(dac_handle, DAC_CHANNEL_1) != HAL_OK){
 800ee92:	2100      	movs	r1, #0
 800ee94:	6838      	ldr	r0, [r7, #0]
 800ee96:	f7f3 f91e 	bl	80020d6 <HAL_DAC_Start>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d001      	beq.n	800eea4 <cuvetteRotate+0x38>
    	Error_Handler();
 800eea0:	f7f2 f84a 	bl	8000f38 <Error_Handler>
    }

    if (HAL_DAC_SetValue(dac_handle, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2000) != HAL_OK){
 800eea4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800eea8:	2200      	movs	r2, #0
 800eeaa:	2100      	movs	r1, #0
 800eeac:	6838      	ldr	r0, [r7, #0]
 800eeae:	f7f3 f969 	bl	8002184 <HAL_DAC_SetValue>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d001      	beq.n	800eebc <cuvetteRotate+0x50>
    	Error_Handler();
 800eeb8:	f7f2 f83e 	bl	8000f38 <Error_Handler>
    }

    if( HAL_DAC_Start(dac_handle, DAC_CHANNEL_2) != HAL_OK){
 800eebc:	2110      	movs	r1, #16
 800eebe:	6838      	ldr	r0, [r7, #0]
 800eec0:	f7f3 f909 	bl	80020d6 <HAL_DAC_Start>
 800eec4:	4603      	mov	r3, r0
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d001      	beq.n	800eece <cuvetteRotate+0x62>
    	Error_Handler();
 800eeca:	f7f2 f835 	bl	8000f38 <Error_Handler>
    }

    if (HAL_DAC_SetValue(dac_handle, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 2000) != HAL_OK){
 800eece:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800eed2:	2200      	movs	r2, #0
 800eed4:	2110      	movs	r1, #16
 800eed6:	6838      	ldr	r0, [r7, #0]
 800eed8:	f7f3 f954 	bl	8002184 <HAL_DAC_SetValue>
 800eedc:	4603      	mov	r3, r0
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d001      	beq.n	800eee6 <cuvetteRotate+0x7a>
    	Error_Handler();
 800eee2:	f7f2 f829 	bl	8000f38 <Error_Handler>
    }



    // Set Direction
    HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_SET);
 800eee6:	2201      	movs	r2, #1
 800eee8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800eeec:	481d      	ldr	r0, [pc, #116]	; (800ef64 <cuvetteRotate+0xf8>)
 800eeee:	f7f3 fe61 	bl	8002bb4 <HAL_GPIO_WritePin>

    GPIO_PinState lastState = GPIO_PIN_RESET;
 800eef2:	2300      	movs	r3, #0
 800eef4:	75fb      	strb	r3, [r7, #23]
    GPIO_PinState currentState;
    uint32_t startTime = HAL_GetTick();
 800eef6:	f7f2 fd19 	bl	800192c <HAL_GetTick>
 800eefa:	6138      	str	r0, [r7, #16]
    uint32_t timeout = 300; // 30 seconds timeout
 800eefc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800ef00:	60fb      	str	r3, [r7, #12]

    while (1) {
        currentState = HAL_GPIO_ReadPin(LIMIT_SW_1_GPIO_Port, LIMIT_SW_1_Pin);
 800ef02:	2102      	movs	r1, #2
 800ef04:	4818      	ldr	r0, [pc, #96]	; (800ef68 <cuvetteRotate+0xfc>)
 800ef06:	f7f3 fe3d 	bl	8002b84 <HAL_GPIO_ReadPin>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	72fb      	strb	r3, [r7, #11]
    	HAL_DAC_SetValue(dac_handle, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0x100);
 800ef0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ef12:	2200      	movs	r2, #0
 800ef14:	2100      	movs	r1, #0
 800ef16:	6838      	ldr	r0, [r7, #0]
 800ef18:	f7f3 f934 	bl	8002184 <HAL_DAC_SetValue>

        // Detect falling edge
        if (lastState == GPIO_PIN_SET && currentState == GPIO_PIN_RESET) {
 800ef1c:	7dfb      	ldrb	r3, [r7, #23]
 800ef1e:	2b01      	cmp	r3, #1
 800ef20:	d108      	bne.n	800ef34 <cuvetteRotate+0xc8>
 800ef22:	7afb      	ldrb	r3, [r7, #11]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d105      	bne.n	800ef34 <cuvetteRotate+0xc8>
            HAL_TIM_PWM_Stop(tim_handle, TIM_CHANNEL_1);
 800ef28:	2100      	movs	r1, #0
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f7f8 fc0e 	bl	800774c <HAL_TIM_PWM_Stop>
            return HAL_OK;
 800ef30:	2300      	movs	r3, #0
 800ef32:	e013      	b.n	800ef5c <cuvetteRotate+0xf0>
        }

        lastState = currentState;
 800ef34:	7afb      	ldrb	r3, [r7, #11]
 800ef36:	75fb      	strb	r3, [r7, #23]

        // Check for timeout
        if (HAL_GetTick() - startTime > timeout) {
 800ef38:	f7f2 fcf8 	bl	800192c <HAL_GetTick>
 800ef3c:	4602      	mov	r2, r0
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	1ad3      	subs	r3, r2, r3
 800ef42:	68fa      	ldr	r2, [r7, #12]
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d205      	bcs.n	800ef54 <cuvetteRotate+0xe8>
            HAL_TIM_PWM_Stop(tim_handle, TIM_CHANNEL_1);
 800ef48:	2100      	movs	r1, #0
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f7f8 fbfe 	bl	800774c <HAL_TIM_PWM_Stop>
            return HAL_TIMEOUT;
 800ef50:	2303      	movs	r3, #3
 800ef52:	e003      	b.n	800ef5c <cuvetteRotate+0xf0>
        }

        HAL_Delay(10);
 800ef54:	200a      	movs	r0, #10
 800ef56:	f7f2 fcf5 	bl	8001944 <HAL_Delay>
        currentState = HAL_GPIO_ReadPin(LIMIT_SW_1_GPIO_Port, LIMIT_SW_1_Pin);
 800ef5a:	e7d2      	b.n	800ef02 <cuvetteRotate+0x96>
    }
}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	3718      	adds	r7, #24
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}
 800ef64:	40020400 	.word	0x40020400
 800ef68:	40020c00 	.word	0x40020c00

0800ef6c <malloc>:
 800ef6c:	4b02      	ldr	r3, [pc, #8]	; (800ef78 <malloc+0xc>)
 800ef6e:	4601      	mov	r1, r0
 800ef70:	6818      	ldr	r0, [r3, #0]
 800ef72:	f000 b82b 	b.w	800efcc <_malloc_r>
 800ef76:	bf00      	nop
 800ef78:	20000088 	.word	0x20000088

0800ef7c <free>:
 800ef7c:	4b02      	ldr	r3, [pc, #8]	; (800ef88 <free+0xc>)
 800ef7e:	4601      	mov	r1, r0
 800ef80:	6818      	ldr	r0, [r3, #0]
 800ef82:	f000 b901 	b.w	800f188 <_free_r>
 800ef86:	bf00      	nop
 800ef88:	20000088 	.word	0x20000088

0800ef8c <sbrk_aligned>:
 800ef8c:	b570      	push	{r4, r5, r6, lr}
 800ef8e:	4e0e      	ldr	r6, [pc, #56]	; (800efc8 <sbrk_aligned+0x3c>)
 800ef90:	460c      	mov	r4, r1
 800ef92:	6831      	ldr	r1, [r6, #0]
 800ef94:	4605      	mov	r5, r0
 800ef96:	b911      	cbnz	r1, 800ef9e <sbrk_aligned+0x12>
 800ef98:	f000 f8ac 	bl	800f0f4 <_sbrk_r>
 800ef9c:	6030      	str	r0, [r6, #0]
 800ef9e:	4621      	mov	r1, r4
 800efa0:	4628      	mov	r0, r5
 800efa2:	f000 f8a7 	bl	800f0f4 <_sbrk_r>
 800efa6:	1c43      	adds	r3, r0, #1
 800efa8:	d00a      	beq.n	800efc0 <sbrk_aligned+0x34>
 800efaa:	1cc4      	adds	r4, r0, #3
 800efac:	f024 0403 	bic.w	r4, r4, #3
 800efb0:	42a0      	cmp	r0, r4
 800efb2:	d007      	beq.n	800efc4 <sbrk_aligned+0x38>
 800efb4:	1a21      	subs	r1, r4, r0
 800efb6:	4628      	mov	r0, r5
 800efb8:	f000 f89c 	bl	800f0f4 <_sbrk_r>
 800efbc:	3001      	adds	r0, #1
 800efbe:	d101      	bne.n	800efc4 <sbrk_aligned+0x38>
 800efc0:	f04f 34ff 	mov.w	r4, #4294967295
 800efc4:	4620      	mov	r0, r4
 800efc6:	bd70      	pop	{r4, r5, r6, pc}
 800efc8:	200010e4 	.word	0x200010e4

0800efcc <_malloc_r>:
 800efcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efd0:	1ccd      	adds	r5, r1, #3
 800efd2:	f025 0503 	bic.w	r5, r5, #3
 800efd6:	3508      	adds	r5, #8
 800efd8:	2d0c      	cmp	r5, #12
 800efda:	bf38      	it	cc
 800efdc:	250c      	movcc	r5, #12
 800efde:	2d00      	cmp	r5, #0
 800efe0:	4607      	mov	r7, r0
 800efe2:	db01      	blt.n	800efe8 <_malloc_r+0x1c>
 800efe4:	42a9      	cmp	r1, r5
 800efe6:	d905      	bls.n	800eff4 <_malloc_r+0x28>
 800efe8:	230c      	movs	r3, #12
 800efea:	603b      	str	r3, [r7, #0]
 800efec:	2600      	movs	r6, #0
 800efee:	4630      	mov	r0, r6
 800eff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eff4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f0c8 <_malloc_r+0xfc>
 800eff8:	f000 f868 	bl	800f0cc <__malloc_lock>
 800effc:	f8d8 3000 	ldr.w	r3, [r8]
 800f000:	461c      	mov	r4, r3
 800f002:	bb5c      	cbnz	r4, 800f05c <_malloc_r+0x90>
 800f004:	4629      	mov	r1, r5
 800f006:	4638      	mov	r0, r7
 800f008:	f7ff ffc0 	bl	800ef8c <sbrk_aligned>
 800f00c:	1c43      	adds	r3, r0, #1
 800f00e:	4604      	mov	r4, r0
 800f010:	d155      	bne.n	800f0be <_malloc_r+0xf2>
 800f012:	f8d8 4000 	ldr.w	r4, [r8]
 800f016:	4626      	mov	r6, r4
 800f018:	2e00      	cmp	r6, #0
 800f01a:	d145      	bne.n	800f0a8 <_malloc_r+0xdc>
 800f01c:	2c00      	cmp	r4, #0
 800f01e:	d048      	beq.n	800f0b2 <_malloc_r+0xe6>
 800f020:	6823      	ldr	r3, [r4, #0]
 800f022:	4631      	mov	r1, r6
 800f024:	4638      	mov	r0, r7
 800f026:	eb04 0903 	add.w	r9, r4, r3
 800f02a:	f000 f863 	bl	800f0f4 <_sbrk_r>
 800f02e:	4581      	cmp	r9, r0
 800f030:	d13f      	bne.n	800f0b2 <_malloc_r+0xe6>
 800f032:	6821      	ldr	r1, [r4, #0]
 800f034:	1a6d      	subs	r5, r5, r1
 800f036:	4629      	mov	r1, r5
 800f038:	4638      	mov	r0, r7
 800f03a:	f7ff ffa7 	bl	800ef8c <sbrk_aligned>
 800f03e:	3001      	adds	r0, #1
 800f040:	d037      	beq.n	800f0b2 <_malloc_r+0xe6>
 800f042:	6823      	ldr	r3, [r4, #0]
 800f044:	442b      	add	r3, r5
 800f046:	6023      	str	r3, [r4, #0]
 800f048:	f8d8 3000 	ldr.w	r3, [r8]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d038      	beq.n	800f0c2 <_malloc_r+0xf6>
 800f050:	685a      	ldr	r2, [r3, #4]
 800f052:	42a2      	cmp	r2, r4
 800f054:	d12b      	bne.n	800f0ae <_malloc_r+0xe2>
 800f056:	2200      	movs	r2, #0
 800f058:	605a      	str	r2, [r3, #4]
 800f05a:	e00f      	b.n	800f07c <_malloc_r+0xb0>
 800f05c:	6822      	ldr	r2, [r4, #0]
 800f05e:	1b52      	subs	r2, r2, r5
 800f060:	d41f      	bmi.n	800f0a2 <_malloc_r+0xd6>
 800f062:	2a0b      	cmp	r2, #11
 800f064:	d917      	bls.n	800f096 <_malloc_r+0xca>
 800f066:	1961      	adds	r1, r4, r5
 800f068:	42a3      	cmp	r3, r4
 800f06a:	6025      	str	r5, [r4, #0]
 800f06c:	bf18      	it	ne
 800f06e:	6059      	strne	r1, [r3, #4]
 800f070:	6863      	ldr	r3, [r4, #4]
 800f072:	bf08      	it	eq
 800f074:	f8c8 1000 	streq.w	r1, [r8]
 800f078:	5162      	str	r2, [r4, r5]
 800f07a:	604b      	str	r3, [r1, #4]
 800f07c:	4638      	mov	r0, r7
 800f07e:	f104 060b 	add.w	r6, r4, #11
 800f082:	f000 f829 	bl	800f0d8 <__malloc_unlock>
 800f086:	f026 0607 	bic.w	r6, r6, #7
 800f08a:	1d23      	adds	r3, r4, #4
 800f08c:	1af2      	subs	r2, r6, r3
 800f08e:	d0ae      	beq.n	800efee <_malloc_r+0x22>
 800f090:	1b9b      	subs	r3, r3, r6
 800f092:	50a3      	str	r3, [r4, r2]
 800f094:	e7ab      	b.n	800efee <_malloc_r+0x22>
 800f096:	42a3      	cmp	r3, r4
 800f098:	6862      	ldr	r2, [r4, #4]
 800f09a:	d1dd      	bne.n	800f058 <_malloc_r+0x8c>
 800f09c:	f8c8 2000 	str.w	r2, [r8]
 800f0a0:	e7ec      	b.n	800f07c <_malloc_r+0xb0>
 800f0a2:	4623      	mov	r3, r4
 800f0a4:	6864      	ldr	r4, [r4, #4]
 800f0a6:	e7ac      	b.n	800f002 <_malloc_r+0x36>
 800f0a8:	4634      	mov	r4, r6
 800f0aa:	6876      	ldr	r6, [r6, #4]
 800f0ac:	e7b4      	b.n	800f018 <_malloc_r+0x4c>
 800f0ae:	4613      	mov	r3, r2
 800f0b0:	e7cc      	b.n	800f04c <_malloc_r+0x80>
 800f0b2:	230c      	movs	r3, #12
 800f0b4:	603b      	str	r3, [r7, #0]
 800f0b6:	4638      	mov	r0, r7
 800f0b8:	f000 f80e 	bl	800f0d8 <__malloc_unlock>
 800f0bc:	e797      	b.n	800efee <_malloc_r+0x22>
 800f0be:	6025      	str	r5, [r4, #0]
 800f0c0:	e7dc      	b.n	800f07c <_malloc_r+0xb0>
 800f0c2:	605b      	str	r3, [r3, #4]
 800f0c4:	deff      	udf	#255	; 0xff
 800f0c6:	bf00      	nop
 800f0c8:	200010e0 	.word	0x200010e0

0800f0cc <__malloc_lock>:
 800f0cc:	4801      	ldr	r0, [pc, #4]	; (800f0d4 <__malloc_lock+0x8>)
 800f0ce:	f000 b84b 	b.w	800f168 <__retarget_lock_acquire_recursive>
 800f0d2:	bf00      	nop
 800f0d4:	20001224 	.word	0x20001224

0800f0d8 <__malloc_unlock>:
 800f0d8:	4801      	ldr	r0, [pc, #4]	; (800f0e0 <__malloc_unlock+0x8>)
 800f0da:	f000 b846 	b.w	800f16a <__retarget_lock_release_recursive>
 800f0de:	bf00      	nop
 800f0e0:	20001224 	.word	0x20001224

0800f0e4 <memset>:
 800f0e4:	4402      	add	r2, r0
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	4293      	cmp	r3, r2
 800f0ea:	d100      	bne.n	800f0ee <memset+0xa>
 800f0ec:	4770      	bx	lr
 800f0ee:	f803 1b01 	strb.w	r1, [r3], #1
 800f0f2:	e7f9      	b.n	800f0e8 <memset+0x4>

0800f0f4 <_sbrk_r>:
 800f0f4:	b538      	push	{r3, r4, r5, lr}
 800f0f6:	4d06      	ldr	r5, [pc, #24]	; (800f110 <_sbrk_r+0x1c>)
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	4604      	mov	r4, r0
 800f0fc:	4608      	mov	r0, r1
 800f0fe:	602b      	str	r3, [r5, #0]
 800f100:	f7f2 fb3c 	bl	800177c <_sbrk>
 800f104:	1c43      	adds	r3, r0, #1
 800f106:	d102      	bne.n	800f10e <_sbrk_r+0x1a>
 800f108:	682b      	ldr	r3, [r5, #0]
 800f10a:	b103      	cbz	r3, 800f10e <_sbrk_r+0x1a>
 800f10c:	6023      	str	r3, [r4, #0]
 800f10e:	bd38      	pop	{r3, r4, r5, pc}
 800f110:	20001220 	.word	0x20001220

0800f114 <__errno>:
 800f114:	4b01      	ldr	r3, [pc, #4]	; (800f11c <__errno+0x8>)
 800f116:	6818      	ldr	r0, [r3, #0]
 800f118:	4770      	bx	lr
 800f11a:	bf00      	nop
 800f11c:	20000088 	.word	0x20000088

0800f120 <__libc_init_array>:
 800f120:	b570      	push	{r4, r5, r6, lr}
 800f122:	4d0d      	ldr	r5, [pc, #52]	; (800f158 <__libc_init_array+0x38>)
 800f124:	4c0d      	ldr	r4, [pc, #52]	; (800f15c <__libc_init_array+0x3c>)
 800f126:	1b64      	subs	r4, r4, r5
 800f128:	10a4      	asrs	r4, r4, #2
 800f12a:	2600      	movs	r6, #0
 800f12c:	42a6      	cmp	r6, r4
 800f12e:	d109      	bne.n	800f144 <__libc_init_array+0x24>
 800f130:	4d0b      	ldr	r5, [pc, #44]	; (800f160 <__libc_init_array+0x40>)
 800f132:	4c0c      	ldr	r4, [pc, #48]	; (800f164 <__libc_init_array+0x44>)
 800f134:	f000 f874 	bl	800f220 <_init>
 800f138:	1b64      	subs	r4, r4, r5
 800f13a:	10a4      	asrs	r4, r4, #2
 800f13c:	2600      	movs	r6, #0
 800f13e:	42a6      	cmp	r6, r4
 800f140:	d105      	bne.n	800f14e <__libc_init_array+0x2e>
 800f142:	bd70      	pop	{r4, r5, r6, pc}
 800f144:	f855 3b04 	ldr.w	r3, [r5], #4
 800f148:	4798      	blx	r3
 800f14a:	3601      	adds	r6, #1
 800f14c:	e7ee      	b.n	800f12c <__libc_init_array+0xc>
 800f14e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f152:	4798      	blx	r3
 800f154:	3601      	adds	r6, #1
 800f156:	e7f2      	b.n	800f13e <__libc_init_array+0x1e>
 800f158:	0800f2a8 	.word	0x0800f2a8
 800f15c:	0800f2a8 	.word	0x0800f2a8
 800f160:	0800f2a8 	.word	0x0800f2a8
 800f164:	0800f2ac 	.word	0x0800f2ac

0800f168 <__retarget_lock_acquire_recursive>:
 800f168:	4770      	bx	lr

0800f16a <__retarget_lock_release_recursive>:
 800f16a:	4770      	bx	lr

0800f16c <memcpy>:
 800f16c:	440a      	add	r2, r1
 800f16e:	4291      	cmp	r1, r2
 800f170:	f100 33ff 	add.w	r3, r0, #4294967295
 800f174:	d100      	bne.n	800f178 <memcpy+0xc>
 800f176:	4770      	bx	lr
 800f178:	b510      	push	{r4, lr}
 800f17a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f17e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f182:	4291      	cmp	r1, r2
 800f184:	d1f9      	bne.n	800f17a <memcpy+0xe>
 800f186:	bd10      	pop	{r4, pc}

0800f188 <_free_r>:
 800f188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f18a:	2900      	cmp	r1, #0
 800f18c:	d044      	beq.n	800f218 <_free_r+0x90>
 800f18e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f192:	9001      	str	r0, [sp, #4]
 800f194:	2b00      	cmp	r3, #0
 800f196:	f1a1 0404 	sub.w	r4, r1, #4
 800f19a:	bfb8      	it	lt
 800f19c:	18e4      	addlt	r4, r4, r3
 800f19e:	f7ff ff95 	bl	800f0cc <__malloc_lock>
 800f1a2:	4a1e      	ldr	r2, [pc, #120]	; (800f21c <_free_r+0x94>)
 800f1a4:	9801      	ldr	r0, [sp, #4]
 800f1a6:	6813      	ldr	r3, [r2, #0]
 800f1a8:	b933      	cbnz	r3, 800f1b8 <_free_r+0x30>
 800f1aa:	6063      	str	r3, [r4, #4]
 800f1ac:	6014      	str	r4, [r2, #0]
 800f1ae:	b003      	add	sp, #12
 800f1b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1b4:	f7ff bf90 	b.w	800f0d8 <__malloc_unlock>
 800f1b8:	42a3      	cmp	r3, r4
 800f1ba:	d908      	bls.n	800f1ce <_free_r+0x46>
 800f1bc:	6825      	ldr	r5, [r4, #0]
 800f1be:	1961      	adds	r1, r4, r5
 800f1c0:	428b      	cmp	r3, r1
 800f1c2:	bf01      	itttt	eq
 800f1c4:	6819      	ldreq	r1, [r3, #0]
 800f1c6:	685b      	ldreq	r3, [r3, #4]
 800f1c8:	1949      	addeq	r1, r1, r5
 800f1ca:	6021      	streq	r1, [r4, #0]
 800f1cc:	e7ed      	b.n	800f1aa <_free_r+0x22>
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	685b      	ldr	r3, [r3, #4]
 800f1d2:	b10b      	cbz	r3, 800f1d8 <_free_r+0x50>
 800f1d4:	42a3      	cmp	r3, r4
 800f1d6:	d9fa      	bls.n	800f1ce <_free_r+0x46>
 800f1d8:	6811      	ldr	r1, [r2, #0]
 800f1da:	1855      	adds	r5, r2, r1
 800f1dc:	42a5      	cmp	r5, r4
 800f1de:	d10b      	bne.n	800f1f8 <_free_r+0x70>
 800f1e0:	6824      	ldr	r4, [r4, #0]
 800f1e2:	4421      	add	r1, r4
 800f1e4:	1854      	adds	r4, r2, r1
 800f1e6:	42a3      	cmp	r3, r4
 800f1e8:	6011      	str	r1, [r2, #0]
 800f1ea:	d1e0      	bne.n	800f1ae <_free_r+0x26>
 800f1ec:	681c      	ldr	r4, [r3, #0]
 800f1ee:	685b      	ldr	r3, [r3, #4]
 800f1f0:	6053      	str	r3, [r2, #4]
 800f1f2:	440c      	add	r4, r1
 800f1f4:	6014      	str	r4, [r2, #0]
 800f1f6:	e7da      	b.n	800f1ae <_free_r+0x26>
 800f1f8:	d902      	bls.n	800f200 <_free_r+0x78>
 800f1fa:	230c      	movs	r3, #12
 800f1fc:	6003      	str	r3, [r0, #0]
 800f1fe:	e7d6      	b.n	800f1ae <_free_r+0x26>
 800f200:	6825      	ldr	r5, [r4, #0]
 800f202:	1961      	adds	r1, r4, r5
 800f204:	428b      	cmp	r3, r1
 800f206:	bf04      	itt	eq
 800f208:	6819      	ldreq	r1, [r3, #0]
 800f20a:	685b      	ldreq	r3, [r3, #4]
 800f20c:	6063      	str	r3, [r4, #4]
 800f20e:	bf04      	itt	eq
 800f210:	1949      	addeq	r1, r1, r5
 800f212:	6021      	streq	r1, [r4, #0]
 800f214:	6054      	str	r4, [r2, #4]
 800f216:	e7ca      	b.n	800f1ae <_free_r+0x26>
 800f218:	b003      	add	sp, #12
 800f21a:	bd30      	pop	{r4, r5, pc}
 800f21c:	200010e0 	.word	0x200010e0

0800f220 <_init>:
 800f220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f222:	bf00      	nop
 800f224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f226:	bc08      	pop	{r3}
 800f228:	469e      	mov	lr, r3
 800f22a:	4770      	bx	lr

0800f22c <_fini>:
 800f22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f22e:	bf00      	nop
 800f230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f232:	bc08      	pop	{r3}
 800f234:	469e      	mov	lr, r3
 800f236:	4770      	bx	lr
