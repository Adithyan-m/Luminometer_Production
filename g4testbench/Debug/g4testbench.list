
g4testbench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025b4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800278c  0800278c  0001278c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027a4  080027a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027a4  080027a4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027a4  080027a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027a4  080027a4  000127a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027a8  080027a8  000127a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  2000000c  080027b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  080027b8  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007ae7  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000174d  00000000  00000000  00027b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000830  00000000  00000000  000292b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000061c  00000000  00000000  00029ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002437a  00000000  00000000  0002a104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008cfa  00000000  00000000  0004e47e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e49ed  00000000  00000000  00057178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ffc  00000000  00000000  0013bb68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0013db64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002774 	.word	0x08002774

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002774 	.word	0x08002774

08000218 <main>:
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
void SystemClock_Config(void);

int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  HAL_Init();
 800021e:	f000 fd82 	bl	8000d26 <HAL_Init>
  SystemClock_Config();
 8000222:	f000 f8b3 	bl	800038c <SystemClock_Config>
  MX_GPIO_Init();
 8000226:	f000 f93d 	bl	80004a4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800022a:	f000 f8fd 	bl	8000428 <MX_SPI1_Init>

  // Initialize MFRC522
  MFRC522_Init();
 800022e:	f000 fa22 	bl	8000676 <MFRC522_Init>

  uint8_t size;

  while (1)
  {
    status = MFRC522_Request(PICC_REQIDL, str);
 8000232:	494d      	ldr	r1, [pc, #308]	; (8000368 <main+0x150>)
 8000234:	2026      	movs	r0, #38	; 0x26
 8000236:	f000 fb14 	bl	8000862 <MFRC522_Request>
 800023a:	4603      	mov	r3, r0
 800023c:	461a      	mov	r2, r3
 800023e:	4b4b      	ldr	r3, [pc, #300]	; (800036c <main+0x154>)
 8000240:	701a      	strb	r2, [r3, #0]
    if (status == MI_OK)
 8000242:	4b4a      	ldr	r3, [pc, #296]	; (800036c <main+0x154>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	2b00      	cmp	r3, #0
 8000248:	f040 8089 	bne.w	800035e <main+0x146>
    {
      status = MFRC522_Anticoll(str);
 800024c:	4846      	ldr	r0, [pc, #280]	; (8000368 <main+0x150>)
 800024e:	f000 fb2d 	bl	80008ac <MFRC522_Anticoll>
 8000252:	4603      	mov	r3, r0
 8000254:	461a      	mov	r2, r3
 8000256:	4b45      	ldr	r3, [pc, #276]	; (800036c <main+0x154>)
 8000258:	701a      	strb	r2, [r3, #0]
      if (status == MI_OK)
 800025a:	4b44      	ldr	r3, [pc, #272]	; (800036c <main+0x154>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d17d      	bne.n	800035e <main+0x146>
      {
        memcpy(sNum, str, 20);
 8000262:	2214      	movs	r2, #20
 8000264:	4940      	ldr	r1, [pc, #256]	; (8000368 <main+0x150>)
 8000266:	4842      	ldr	r0, [pc, #264]	; (8000370 <main+0x158>)
 8000268:	f002 fa76 	bl	8002758 <memcpy>
        size = MFRC522_SelectTag(sNum);
 800026c:	4840      	ldr	r0, [pc, #256]	; (8000370 <main+0x158>)
 800026e:	f000 fba3 	bl	80009b8 <MFRC522_SelectTag>
 8000272:	4603      	mov	r3, r0
 8000274:	71fb      	strb	r3, [r7, #7]

        if (size > 0)
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d070      	beq.n	800035e <main+0x146>
        {
          // Reset the read status array
          memset((void*)g_blockReadStatus, 0, MAX_BLOCKS);
 800027c:	2240      	movs	r2, #64	; 0x40
 800027e:	2100      	movs	r1, #0
 8000280:	483c      	ldr	r0, [pc, #240]	; (8000374 <main+0x15c>)
 8000282:	f002 fa3d 	bl	8002700 <memset>

          // Try reading without authentication first
          for (g_currentBlock = 0; g_currentBlock < MAX_BLOCKS; g_currentBlock++)
 8000286:	4b3c      	ldr	r3, [pc, #240]	; (8000378 <main+0x160>)
 8000288:	2200      	movs	r2, #0
 800028a:	701a      	strb	r2, [r3, #0]
 800028c:	e060      	b.n	8000350 <main+0x138>
          {
            g_readStatus = MFRC522_Read(g_currentBlock, (uint8_t*)g_allBlockData[g_currentBlock]);
 800028e:	4b3a      	ldr	r3, [pc, #232]	; (8000378 <main+0x160>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	b2da      	uxtb	r2, r3
 8000294:	4b38      	ldr	r3, [pc, #224]	; (8000378 <main+0x160>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	b2db      	uxtb	r3, r3
 800029a:	011b      	lsls	r3, r3, #4
 800029c:	4937      	ldr	r1, [pc, #220]	; (800037c <main+0x164>)
 800029e:	440b      	add	r3, r1
 80002a0:	4619      	mov	r1, r3
 80002a2:	4610      	mov	r0, r2
 80002a4:	f000 fc2d 	bl	8000b02 <MFRC522_Read>
 80002a8:	4603      	mov	r3, r0
 80002aa:	461a      	mov	r2, r3
 80002ac:	4b34      	ldr	r3, [pc, #208]	; (8000380 <main+0x168>)
 80002ae:	701a      	strb	r2, [r3, #0]

            if (g_readStatus != MI_OK)
 80002b0:	4b33      	ldr	r3, [pc, #204]	; (8000380 <main+0x168>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d037      	beq.n	800032a <main+0x112>
            {
              // If read fails, try to authenticate
              uint8_t key[6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}; // Default key
 80002ba:	4a32      	ldr	r2, [pc, #200]	; (8000384 <main+0x16c>)
 80002bc:	463b      	mov	r3, r7
 80002be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002c2:	6018      	str	r0, [r3, #0]
 80002c4:	3304      	adds	r3, #4
 80002c6:	8019      	strh	r1, [r3, #0]
              g_authStatus = MFRC522_Auth(PICC_AUTHENT1A, g_currentBlock, key, sNum);
 80002c8:	4b2b      	ldr	r3, [pc, #172]	; (8000378 <main+0x160>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	b2d9      	uxtb	r1, r3
 80002ce:	463a      	mov	r2, r7
 80002d0:	4b27      	ldr	r3, [pc, #156]	; (8000370 <main+0x158>)
 80002d2:	2060      	movs	r0, #96	; 0x60
 80002d4:	f000 fbb2 	bl	8000a3c <MFRC522_Auth>
 80002d8:	4603      	mov	r3, r0
 80002da:	461a      	mov	r2, r3
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <main+0x170>)
 80002de:	701a      	strb	r2, [r3, #0]

              if (g_authStatus == MI_OK)
 80002e0:	4b29      	ldr	r3, [pc, #164]	; (8000388 <main+0x170>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d111      	bne.n	800030e <main+0xf6>
              {
                g_readStatus = MFRC522_Read(g_currentBlock, (uint8_t*)g_allBlockData[g_currentBlock]);
 80002ea:	4b23      	ldr	r3, [pc, #140]	; (8000378 <main+0x160>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	4b21      	ldr	r3, [pc, #132]	; (8000378 <main+0x160>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	011b      	lsls	r3, r3, #4
 80002f8:	4920      	ldr	r1, [pc, #128]	; (800037c <main+0x164>)
 80002fa:	440b      	add	r3, r1
 80002fc:	4619      	mov	r1, r3
 80002fe:	4610      	mov	r0, r2
 8000300:	f000 fbff 	bl	8000b02 <MFRC522_Read>
 8000304:	4603      	mov	r3, r0
 8000306:	461a      	mov	r2, r3
 8000308:	4b1d      	ldr	r3, [pc, #116]	; (8000380 <main+0x168>)
 800030a:	701a      	strb	r2, [r3, #0]
 800030c:	e00d      	b.n	800032a <main+0x112>
              }
              else
              {
                // Authentication failed, move to next sector
                g_currentBlock = ((g_currentBlock / 4) + 1) * 4 - 1;
 800030e:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <main+0x160>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	b2db      	uxtb	r3, r3
 8000314:	089b      	lsrs	r3, r3, #2
 8000316:	b2db      	uxtb	r3, r3
 8000318:	3301      	adds	r3, #1
 800031a:	b2db      	uxtb	r3, r3
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	b2db      	uxtb	r3, r3
 8000320:	3b01      	subs	r3, #1
 8000322:	b2da      	uxtb	r2, r3
 8000324:	4b14      	ldr	r3, [pc, #80]	; (8000378 <main+0x160>)
 8000326:	701a      	strb	r2, [r3, #0]
 8000328:	e00b      	b.n	8000342 <main+0x12a>
                continue;
              }
            }

            if (g_readStatus == MI_OK)
 800032a:	4b15      	ldr	r3, [pc, #84]	; (8000380 <main+0x168>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b00      	cmp	r3, #0
 8000332:	d106      	bne.n	8000342 <main+0x12a>
            {
              g_blockReadStatus[g_currentBlock] = 1;  // Mark as successfully read
 8000334:	4b10      	ldr	r3, [pc, #64]	; (8000378 <main+0x160>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	b2db      	uxtb	r3, r3
 800033a:	461a      	mov	r2, r3
 800033c:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <main+0x15c>)
 800033e:	2101      	movs	r1, #1
 8000340:	5499      	strb	r1, [r3, r2]
          for (g_currentBlock = 0; g_currentBlock < MAX_BLOCKS; g_currentBlock++)
 8000342:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <main+0x160>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	b2db      	uxtb	r3, r3
 8000348:	3301      	adds	r3, #1
 800034a:	b2da      	uxtb	r2, r3
 800034c:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <main+0x160>)
 800034e:	701a      	strb	r2, [r3, #0]
 8000350:	4b09      	ldr	r3, [pc, #36]	; (8000378 <main+0x160>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	2b3f      	cmp	r3, #63	; 0x3f
 8000358:	d999      	bls.n	800028e <main+0x76>
            }
          }

          MFRC522_Halt();
 800035a:	f000 fbfe 	bl	8000b5a <MFRC522_Halt>
        }
      }
    }

    HAL_Delay(1000);  // Wait for 1 second before next read attempt
 800035e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000362:	f000 fd51 	bl	8000e08 <HAL_Delay>
    status = MFRC522_Request(PICC_REQIDL, str);
 8000366:	e764      	b.n	8000232 <main+0x1a>
 8000368:	20000090 	.word	0x20000090
 800036c:	2000008c 	.word	0x2000008c
 8000370:	200000a0 	.word	0x200000a0
 8000374:	200004b4 	.word	0x200004b4
 8000378:	200000b0 	.word	0x200000b0
 800037c:	200000b4 	.word	0x200000b4
 8000380:	200000b1 	.word	0x200000b1
 8000384:	0800278c 	.word	0x0800278c
 8000388:	200000b2 	.word	0x200000b2

0800038c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b094      	sub	sp, #80	; 0x50
 8000390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000392:	f107 0318 	add.w	r3, r7, #24
 8000396:	2238      	movs	r2, #56	; 0x38
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f002 f9b0 	bl	8002700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
 80003ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003b2:	f000 ffc9 	bl	8001348 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b6:	2302      	movs	r3, #2
 80003b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003be:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c0:	2340      	movs	r3, #64	; 0x40
 80003c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c4:	2302      	movs	r3, #2
 80003c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003c8:	2302      	movs	r3, #2
 80003ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80003cc:	2301      	movs	r3, #1
 80003ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 9;
 80003d0:	2309      	movs	r3, #9
 80003d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80003d4:	2308      	movs	r3, #8
 80003d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 80003d8:	2308      	movs	r3, #8
 80003da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003dc:	2302      	movs	r3, #2
 80003de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e0:	f107 0318 	add.w	r3, r7, #24
 80003e4:	4618      	mov	r0, r3
 80003e6:	f001 f863 	bl	80014b0 <HAL_RCC_OscConfig>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80003f0:	f000 f88a 	bl	8000508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f4:	230f      	movs	r3, #15
 80003f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f8:	2303      	movs	r3, #3
 80003fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000404:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2102      	movs	r1, #2
 800040e:	4618      	mov	r0, r3
 8000410:	f001 fb60 	bl	8001ad4 <HAL_RCC_ClockConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800041a:	f000 f875 	bl	8000508 <Error_Handler>
  }
}
 800041e:	bf00      	nop
 8000420:	3750      	adds	r7, #80	; 0x50
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
	...

08000428 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800042c:	4b1b      	ldr	r3, [pc, #108]	; (800049c <MX_SPI1_Init+0x74>)
 800042e:	4a1c      	ldr	r2, [pc, #112]	; (80004a0 <MX_SPI1_Init+0x78>)
 8000430:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000432:	4b1a      	ldr	r3, [pc, #104]	; (800049c <MX_SPI1_Init+0x74>)
 8000434:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000438:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800043a:	4b18      	ldr	r3, [pc, #96]	; (800049c <MX_SPI1_Init+0x74>)
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000440:	4b16      	ldr	r3, [pc, #88]	; (800049c <MX_SPI1_Init+0x74>)
 8000442:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000446:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000448:	4b14      	ldr	r3, [pc, #80]	; (800049c <MX_SPI1_Init+0x74>)
 800044a:	2200      	movs	r2, #0
 800044c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800044e:	4b13      	ldr	r3, [pc, #76]	; (800049c <MX_SPI1_Init+0x74>)
 8000450:	2200      	movs	r2, #0
 8000452:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000454:	4b11      	ldr	r3, [pc, #68]	; (800049c <MX_SPI1_Init+0x74>)
 8000456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800045a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <MX_SPI1_Init+0x74>)
 800045e:	2210      	movs	r2, #16
 8000460:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000462:	4b0e      	ldr	r3, [pc, #56]	; (800049c <MX_SPI1_Init+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000468:	4b0c      	ldr	r3, [pc, #48]	; (800049c <MX_SPI1_Init+0x74>)
 800046a:	2200      	movs	r2, #0
 800046c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800046e:	4b0b      	ldr	r3, [pc, #44]	; (800049c <MX_SPI1_Init+0x74>)
 8000470:	2200      	movs	r2, #0
 8000472:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000474:	4b09      	ldr	r3, [pc, #36]	; (800049c <MX_SPI1_Init+0x74>)
 8000476:	2207      	movs	r2, #7
 8000478:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800047a:	4b08      	ldr	r3, [pc, #32]	; (800049c <MX_SPI1_Init+0x74>)
 800047c:	2200      	movs	r2, #0
 800047e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <MX_SPI1_Init+0x74>)
 8000482:	2208      	movs	r2, #8
 8000484:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000486:	4805      	ldr	r0, [pc, #20]	; (800049c <MX_SPI1_Init+0x74>)
 8000488:	f001 fd08 	bl	8001e9c <HAL_SPI_Init>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000492:	f000 f839 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	20000028 	.word	0x20000028
 80004a0:	40013000 	.word	0x40013000

080004a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b086      	sub	sp, #24
 80004a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	60da      	str	r2, [r3, #12]
 80004b6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <MX_GPIO_Init+0x60>)
 80004ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004bc:	4a11      	ldr	r2, [pc, #68]	; (8000504 <MX_GPIO_Init+0x60>)
 80004be:	f043 0301 	orr.w	r3, r3, #1
 80004c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004c4:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <MX_GPIO_Init+0x60>)
 80004c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c8:	f003 0301 	and.w	r3, r3, #1
 80004cc:	603b      	str	r3, [r7, #0]
 80004ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|RST_Pin, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 7188 	mov.w	r1, #272	; 0x110
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004da:	f000 ff1d 	bl	8001318 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin RST_Pin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin;
 80004de:	f44f 7388 	mov.w	r3, #272	; 0x110
 80004e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e4:	2301      	movs	r3, #1
 80004e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ec:	2300      	movs	r3, #0
 80004ee:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	4619      	mov	r1, r3
 80004f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f8:	f000 fd8c 	bl	8001014 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004fc:	bf00      	nop
 80004fe:	3718      	adds	r7, #24
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40021000 	.word	0x40021000

08000508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
}
 800050e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000510:	e7fe      	b.n	8000510 <Error_Handler+0x8>
	...

08000514 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af02      	add	r7, sp, #8
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 800051e:	f107 020f 	add.w	r2, r7, #15
 8000522:	1df9      	adds	r1, r7, #7
 8000524:	2364      	movs	r3, #100	; 0x64
 8000526:	9300      	str	r3, [sp, #0]
 8000528:	2301      	movs	r3, #1
 800052a:	4804      	ldr	r0, [pc, #16]	; (800053c <RC522_SPI_Transfer+0x28>)
 800052c:	f001 fd61 	bl	8001ff2 <HAL_SPI_TransmitReceive>

	return rx_data;
 8000530:	7bfb      	ldrb	r3, [r7, #15]
}
 8000532:	4618      	mov	r0, r3
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000028 	.word	0x20000028

08000540 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	460a      	mov	r2, r1
 800054a:	71fb      	strb	r3, [r7, #7]
 800054c:	4613      	mov	r3, r2
 800054e:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2110      	movs	r1, #16
 8000554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000558:	f000 fede 	bl	8001318 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	b2db      	uxtb	r3, r3
 8000562:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000566:	b2db      	uxtb	r3, r3
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff ffd3 	bl	8000514 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 800056e:	79bb      	ldrb	r3, [r7, #6]
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff ffcf 	bl	8000514 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000576:	2201      	movs	r2, #1
 8000578:	2110      	movs	r1, #16
 800057a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057e:	f000 fecb 	bl	8001318 <HAL_GPIO_WritePin>
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b084      	sub	sp, #16
 800058e:	af00      	add	r7, sp, #0
 8000590:	4603      	mov	r3, r0
 8000592:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2110      	movs	r1, #16
 8000598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059c:	f000 febc 	bl	8001318 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	b25b      	sxtb	r3, r3
 80005a6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005b0:	b25b      	sxtb	r3, r3
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ffad 	bl	8000514 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f7ff ffaa 	bl	8000514 <RC522_SPI_Transfer>
 80005c0:	4603      	mov	r3, r0
 80005c2:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2110      	movs	r1, #16
 80005c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005cc:	f000 fea4 	bl	8001318 <HAL_GPIO_WritePin>

	return val;
 80005d0:	7bfb      	ldrb	r3, [r7, #15]

}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b084      	sub	sp, #16
 80005de:	af00      	add	r7, sp, #0
 80005e0:	4603      	mov	r3, r0
 80005e2:	460a      	mov	r2, r1
 80005e4:	71fb      	strb	r3, [r7, #7]
 80005e6:	4613      	mov	r3, r2
 80005e8:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ffcc 	bl	800058a <Read_MFRC522>
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80005f6:	7bfa      	ldrb	r2, [r7, #15]
 80005f8:	79bb      	ldrb	r3, [r7, #6]
 80005fa:	4313      	orrs	r3, r2
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	4611      	mov	r1, r2
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff ff9c 	bl	8000540 <Write_MFRC522>
}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	460a      	mov	r2, r1
 800061a:	71fb      	strb	r3, [r7, #7]
 800061c:	4613      	mov	r3, r2
 800061e:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ffb1 	bl	800058a <Read_MFRC522>
 8000628:	4603      	mov	r3, r0
 800062a:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 800062c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000630:	43db      	mvns	r3, r3
 8000632:	b25a      	sxtb	r2, r3
 8000634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000638:	4013      	ands	r3, r2
 800063a:	b25b      	sxtb	r3, r3
 800063c:	b2da      	uxtb	r2, r3
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	4611      	mov	r1, r2
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff ff7c 	bl	8000540 <Write_MFRC522>
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8000654:	2014      	movs	r0, #20
 8000656:	f7ff ff98 	bl	800058a <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 800065a:	2103      	movs	r1, #3
 800065c:	2014      	movs	r0, #20
 800065e:	f7ff ffbc 	bl	80005da <SetBitMask>
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}

08000666 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 800066a:	210f      	movs	r1, #15
 800066c:	2001      	movs	r0, #1
 800066e:	f7ff ff67 	bl	8000540 <Write_MFRC522>
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}

08000676 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800067a:	2201      	movs	r2, #1
 800067c:	2110      	movs	r1, #16
 800067e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000682:	f000 fe49 	bl	8001318 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000690:	f000 fe42 	bl	8001318 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8000694:	f7ff ffe7 	bl	8000666 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000698:	218d      	movs	r1, #141	; 0x8d
 800069a:	202a      	movs	r0, #42	; 0x2a
 800069c:	f7ff ff50 	bl	8000540 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80006a0:	213e      	movs	r1, #62	; 0x3e
 80006a2:	202b      	movs	r0, #43	; 0x2b
 80006a4:	f7ff ff4c 	bl	8000540 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 80006a8:	211e      	movs	r1, #30
 80006aa:	202d      	movs	r0, #45	; 0x2d
 80006ac:	f7ff ff48 	bl	8000540 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80006b0:	2100      	movs	r1, #0
 80006b2:	202c      	movs	r0, #44	; 0x2c
 80006b4:	f7ff ff44 	bl	8000540 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 80006b8:	2140      	movs	r1, #64	; 0x40
 80006ba:	2015      	movs	r0, #21
 80006bc:	f7ff ff40 	bl	8000540 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 80006c0:	213d      	movs	r1, #61	; 0x3d
 80006c2:	2011      	movs	r0, #17
 80006c4:	f7ff ff3c 	bl	8000540 <Write_MFRC522>

	AntennaOn();
 80006c8:	f7ff ffc2 	bl	8000650 <AntennaOn>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b089      	sub	sp, #36	; 0x24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60b9      	str	r1, [r7, #8]
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4603      	mov	r3, r0
 80006dc:	73fb      	strb	r3, [r7, #15]
 80006de:	4613      	mov	r3, r2
 80006e0:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 80006e2:	2302      	movs	r3, #2
 80006e4:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 80006e6:	2300      	movs	r3, #0
 80006e8:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 80006ea:	2300      	movs	r3, #0
 80006ec:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	2b0c      	cmp	r3, #12
 80006f2:	d006      	beq.n	8000702 <MFRC522_ToCard+0x32>
 80006f4:	2b0e      	cmp	r3, #14
 80006f6:	d109      	bne.n	800070c <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 80006f8:	2312      	movs	r3, #18
 80006fa:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 80006fc:	2310      	movs	r3, #16
 80006fe:	777b      	strb	r3, [r7, #29]
			break;
 8000700:	e005      	b.n	800070e <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8000702:	2377      	movs	r3, #119	; 0x77
 8000704:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8000706:	2330      	movs	r3, #48	; 0x30
 8000708:	777b      	strb	r3, [r7, #29]
			break;
 800070a:	e000      	b.n	800070e <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 800070c:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 800070e:	7fbb      	ldrb	r3, [r7, #30]
 8000710:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000714:	b2db      	uxtb	r3, r3
 8000716:	4619      	mov	r1, r3
 8000718:	2002      	movs	r0, #2
 800071a:	f7ff ff11 	bl	8000540 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 800071e:	2180      	movs	r1, #128	; 0x80
 8000720:	2004      	movs	r0, #4
 8000722:	f7ff ff75 	bl	8000610 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8000726:	2180      	movs	r1, #128	; 0x80
 8000728:	200a      	movs	r0, #10
 800072a:	f7ff ff56 	bl	80005da <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 800072e:	2100      	movs	r1, #0
 8000730:	2001      	movs	r0, #1
 8000732:	f7ff ff05 	bl	8000540 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
 800073a:	e00a      	b.n	8000752 <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 800073c:	68ba      	ldr	r2, [r7, #8]
 800073e:	69bb      	ldr	r3, [r7, #24]
 8000740:	4413      	add	r3, r2
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4619      	mov	r1, r3
 8000746:	2009      	movs	r0, #9
 8000748:	f7ff fefa 	bl	8000540 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	3301      	adds	r3, #1
 8000750:	61bb      	str	r3, [r7, #24]
 8000752:	7bbb      	ldrb	r3, [r7, #14]
 8000754:	69ba      	ldr	r2, [r7, #24]
 8000756:	429a      	cmp	r2, r3
 8000758:	d3f0      	bcc.n	800073c <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	4619      	mov	r1, r3
 800075e:	2001      	movs	r0, #1
 8000760:	f7ff feee 	bl	8000540 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	2b0c      	cmp	r3, #12
 8000768:	d103      	bne.n	8000772 <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 800076a:	2180      	movs	r1, #128	; 0x80
 800076c:	200d      	movs	r0, #13
 800076e:	f7ff ff34 	bl	80005da <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000772:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000776:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8000778:	2004      	movs	r0, #4
 800077a:	f7ff ff06 	bl	800058a <Read_MFRC522>
 800077e:	4603      	mov	r3, r0
 8000780:	773b      	strb	r3, [r7, #28]
        i--;
 8000782:	69bb      	ldr	r3, [r7, #24]
 8000784:	3b01      	subs	r3, #1
 8000786:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d00a      	beq.n	80007a4 <MFRC522_ToCard+0xd4>
 800078e:	7f3b      	ldrb	r3, [r7, #28]
 8000790:	f003 0301 	and.w	r3, r3, #1
 8000794:	2b00      	cmp	r3, #0
 8000796:	d105      	bne.n	80007a4 <MFRC522_ToCard+0xd4>
 8000798:	7f3a      	ldrb	r2, [r7, #28]
 800079a:	7f7b      	ldrb	r3, [r7, #29]
 800079c:	4013      	ands	r3, r2
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d0e9      	beq.n	8000778 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 80007a4:	2180      	movs	r1, #128	; 0x80
 80007a6:	200d      	movs	r0, #13
 80007a8:	f7ff ff32 	bl	8000610 <ClearBitMask>

    if (i != 0)
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d052      	beq.n	8000858 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 80007b2:	2006      	movs	r0, #6
 80007b4:	f7ff fee9 	bl	800058a <Read_MFRC522>
 80007b8:	4603      	mov	r3, r0
 80007ba:	f003 031b 	and.w	r3, r3, #27
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d148      	bne.n	8000854 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 80007c2:	2300      	movs	r3, #0
 80007c4:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 80007c6:	7f3a      	ldrb	r2, [r7, #28]
 80007c8:	7fbb      	ldrb	r3, [r7, #30]
 80007ca:	4013      	ands	r3, r2
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	2b0c      	cmp	r3, #12
 80007de:	d13b      	bne.n	8000858 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 80007e0:	200a      	movs	r0, #10
 80007e2:	f7ff fed2 	bl	800058a <Read_MFRC522>
 80007e6:	4603      	mov	r3, r0
 80007e8:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 80007ea:	200c      	movs	r0, #12
 80007ec:	f7ff fecd 	bl	800058a <Read_MFRC522>
 80007f0:	4603      	mov	r3, r0
 80007f2:	f003 0307 	and.w	r3, r3, #7
 80007f6:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 80007f8:	7dfb      	ldrb	r3, [r7, #23]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d008      	beq.n	8000810 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 80007fe:	7f3b      	ldrb	r3, [r7, #28]
 8000800:	3b01      	subs	r3, #1
 8000802:	00da      	lsls	r2, r3, #3
 8000804:	7dfb      	ldrb	r3, [r7, #23]
 8000806:	4413      	add	r3, r2
 8000808:	461a      	mov	r2, r3
 800080a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	e004      	b.n	800081a <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8000810:	7f3b      	ldrb	r3, [r7, #28]
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	461a      	mov	r2, r3
 8000816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000818:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 800081a:	7f3b      	ldrb	r3, [r7, #28]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d101      	bne.n	8000824 <MFRC522_ToCard+0x154>
                {
					n = 1;
 8000820:	2301      	movs	r3, #1
 8000822:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8000824:	7f3b      	ldrb	r3, [r7, #28]
 8000826:	2b10      	cmp	r3, #16
 8000828:	d901      	bls.n	800082e <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 800082a:	2310      	movs	r3, #16
 800082c:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
 8000832:	e00a      	b.n	800084a <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	69bb      	ldr	r3, [r7, #24]
 8000838:	18d4      	adds	r4, r2, r3
 800083a:	2009      	movs	r0, #9
 800083c:	f7ff fea5 	bl	800058a <Read_MFRC522>
 8000840:	4603      	mov	r3, r0
 8000842:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	3301      	adds	r3, #1
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	7f3b      	ldrb	r3, [r7, #28]
 800084c:	69ba      	ldr	r2, [r7, #24]
 800084e:	429a      	cmp	r2, r3
 8000850:	d3f0      	bcc.n	8000834 <MFRC522_ToCard+0x164>
 8000852:	e001      	b.n	8000858 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8000854:	2302      	movs	r3, #2
 8000856:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8000858:	7ffb      	ldrb	r3, [r7, #31]
}
 800085a:	4618      	mov	r0, r3
 800085c:	3724      	adds	r7, #36	; 0x24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd90      	pop	{r4, r7, pc}

08000862 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b086      	sub	sp, #24
 8000866:	af02      	add	r7, sp, #8
 8000868:	4603      	mov	r3, r0
 800086a:	6039      	str	r1, [r7, #0]
 800086c:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 800086e:	2107      	movs	r1, #7
 8000870:	200d      	movs	r0, #13
 8000872:	f7ff fe65 	bl	8000540 <Write_MFRC522>

	TagType[0] = reqMode;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	79fa      	ldrb	r2, [r7, #7]
 800087a:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800087c:	f107 0308 	add.w	r3, r7, #8
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	2201      	movs	r2, #1
 8000886:	6839      	ldr	r1, [r7, #0]
 8000888:	200c      	movs	r0, #12
 800088a:	f7ff ff21 	bl	80006d0 <MFRC522_ToCard>
 800088e:	4603      	mov	r3, r0
 8000890:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d102      	bne.n	800089e <MFRC522_Request+0x3c>
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	2b10      	cmp	r3, #16
 800089c:	d001      	beq.n	80008a2 <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 800089e:	2302      	movs	r3, #2
 80008a0:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af02      	add	r7, sp, #8
 80008b2:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80008b8:	2100      	movs	r1, #0
 80008ba:	200d      	movs	r0, #13
 80008bc:	f7ff fe40 	bl	8000540 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2293      	movs	r2, #147	; 0x93
 80008c4:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	3301      	adds	r3, #1
 80008ca:	2220      	movs	r2, #32
 80008cc:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2202      	movs	r2, #2
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	200c      	movs	r0, #12
 80008dc:	f7ff fef8 	bl	80006d0 <MFRC522_ToCard>
 80008e0:	4603      	mov	r3, r0
 80008e2:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d118      	bne.n	800091c <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 80008ea:	2300      	movs	r3, #0
 80008ec:	73bb      	strb	r3, [r7, #14]
 80008ee:	e009      	b.n	8000904 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 80008f0:	7bbb      	ldrb	r3, [r7, #14]
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	781a      	ldrb	r2, [r3, #0]
 80008f8:	7b7b      	ldrb	r3, [r7, #13]
 80008fa:	4053      	eors	r3, r2
 80008fc:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 80008fe:	7bbb      	ldrb	r3, [r7, #14]
 8000900:	3301      	adds	r3, #1
 8000902:	73bb      	strb	r3, [r7, #14]
 8000904:	7bbb      	ldrb	r3, [r7, #14]
 8000906:	2b03      	cmp	r3, #3
 8000908:	d9f2      	bls.n	80008f0 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 800090a:	7bbb      	ldrb	r3, [r7, #14]
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	4413      	add	r3, r2
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	7b7a      	ldrb	r2, [r7, #13]
 8000914:	429a      	cmp	r2, r3
 8000916:	d001      	beq.n	800091c <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8000918:	2302      	movs	r3, #2
 800091a:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 800091c:	7bfb      	ldrb	r3, [r7, #15]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <CalulateCRC>:
 * Description: CRC calculation with MF522
 * Input parameters: pIndata - To read the CRC data, len - the data length, pOutData - CRC calculation results
 * Return value: None
 */
void CalulateCRC(uchar *pIndata, uchar len, uchar *pOutData)
{
 8000926:	b590      	push	{r4, r7, lr}
 8000928:	b087      	sub	sp, #28
 800092a:	af00      	add	r7, sp, #0
 800092c:	60f8      	str	r0, [r7, #12]
 800092e:	460b      	mov	r3, r1
 8000930:	607a      	str	r2, [r7, #4]
 8000932:	72fb      	strb	r3, [r7, #11]
    uchar i, n;

    ClearBitMask(DivIrqReg, 0x04);			//CRCIrq = 0
 8000934:	2104      	movs	r1, #4
 8000936:	2005      	movs	r0, #5
 8000938:	f7ff fe6a 	bl	8000610 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			//Clear the FIFO pointer
 800093c:	2180      	movs	r1, #128	; 0x80
 800093e:	200a      	movs	r0, #10
 8000940:	f7ff fe4b 	bl	80005da <SetBitMask>

    //Writing data to the FIFO
    for (i=0; i<len; i++)
 8000944:	2300      	movs	r3, #0
 8000946:	75fb      	strb	r3, [r7, #23]
 8000948:	e00a      	b.n	8000960 <CalulateCRC+0x3a>
    {
		Write_MFRC522(FIFODataReg, *(pIndata+i));
 800094a:	7dfb      	ldrb	r3, [r7, #23]
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	4413      	add	r3, r2
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	4619      	mov	r1, r3
 8000954:	2009      	movs	r0, #9
 8000956:	f7ff fdf3 	bl	8000540 <Write_MFRC522>
    for (i=0; i<len; i++)
 800095a:	7dfb      	ldrb	r3, [r7, #23]
 800095c:	3301      	adds	r3, #1
 800095e:	75fb      	strb	r3, [r7, #23]
 8000960:	7dfa      	ldrb	r2, [r7, #23]
 8000962:	7afb      	ldrb	r3, [r7, #11]
 8000964:	429a      	cmp	r2, r3
 8000966:	d3f0      	bcc.n	800094a <CalulateCRC+0x24>
	}
    Write_MFRC522(CommandReg, PCD_CALCCRC);
 8000968:	2103      	movs	r1, #3
 800096a:	2001      	movs	r0, #1
 800096c:	f7ff fde8 	bl	8000540 <Write_MFRC522>

    //Wait CRC calculation is complete
    i = 0xFF;
 8000970:	23ff      	movs	r3, #255	; 0xff
 8000972:	75fb      	strb	r3, [r7, #23]
    do
    {
        n = Read_MFRC522(DivIrqReg);
 8000974:	2005      	movs	r0, #5
 8000976:	f7ff fe08 	bl	800058a <Read_MFRC522>
 800097a:	4603      	mov	r3, r0
 800097c:	75bb      	strb	r3, [r7, #22]
        i--;
 800097e:	7dfb      	ldrb	r3, [r7, #23]
 8000980:	3b01      	subs	r3, #1
 8000982:	75fb      	strb	r3, [r7, #23]
    }
    while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8000984:	7dfb      	ldrb	r3, [r7, #23]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d004      	beq.n	8000994 <CalulateCRC+0x6e>
 800098a:	7dbb      	ldrb	r3, [r7, #22]
 800098c:	f003 0304 	and.w	r3, r3, #4
 8000990:	2b00      	cmp	r3, #0
 8000992:	d0ef      	beq.n	8000974 <CalulateCRC+0x4e>

    //Read CRC calculation result
    pOutData[0] = Read_MFRC522(CRCResultRegL);
 8000994:	2022      	movs	r0, #34	; 0x22
 8000996:	f7ff fdf8 	bl	800058a <Read_MFRC522>
 800099a:	4603      	mov	r3, r0
 800099c:	461a      	mov	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	701a      	strb	r2, [r3, #0]
    pOutData[1] = Read_MFRC522(CRCResultRegH);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	1c5c      	adds	r4, r3, #1
 80009a6:	2021      	movs	r0, #33	; 0x21
 80009a8:	f7ff fdef 	bl	800058a <Read_MFRC522>
 80009ac:	4603      	mov	r3, r0
 80009ae:	7023      	strb	r3, [r4, #0]
}
 80009b0:	bf00      	nop
 80009b2:	371c      	adds	r7, #28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd90      	pop	{r4, r7, pc}

080009b8 <MFRC522_SelectTag>:
 * Description: election card, read the card memory capacity
 * Input parameters: serNum - Incoming card serial number
 * Return value: the successful return of card capacity
 */
uchar MFRC522_SelectTag(uchar *serNum)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af02      	add	r7, sp, #8
 80009be:	6078      	str	r0, [r7, #4]
	uint recvBits;
	uchar buffer[9];

	//ClearBitMask(Status2Reg, 0x08);			//MFCrypto1On=0

    buffer[0] = PICC_SElECTTAG;
 80009c0:	2393      	movs	r3, #147	; 0x93
 80009c2:	733b      	strb	r3, [r7, #12]
    buffer[1] = 0x70;
 80009c4:	2370      	movs	r3, #112	; 0x70
 80009c6:	737b      	strb	r3, [r7, #13]
    for (i=0; i<5; i++)
 80009c8:	2300      	movs	r3, #0
 80009ca:	77fb      	strb	r3, [r7, #31]
 80009cc:	e00c      	b.n	80009e8 <MFRC522_SelectTag+0x30>
    {
    	buffer[i+2] = *(serNum+i);
 80009ce:	7ffb      	ldrb	r3, [r7, #31]
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	441a      	add	r2, r3
 80009d4:	7ffb      	ldrb	r3, [r7, #31]
 80009d6:	3302      	adds	r3, #2
 80009d8:	7812      	ldrb	r2, [r2, #0]
 80009da:	3320      	adds	r3, #32
 80009dc:	443b      	add	r3, r7
 80009de:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i=0; i<5; i++)
 80009e2:	7ffb      	ldrb	r3, [r7, #31]
 80009e4:	3301      	adds	r3, #1
 80009e6:	77fb      	strb	r3, [r7, #31]
 80009e8:	7ffb      	ldrb	r3, [r7, #31]
 80009ea:	2b04      	cmp	r3, #4
 80009ec:	d9ef      	bls.n	80009ce <MFRC522_SelectTag+0x16>
    }
	CalulateCRC(buffer, 7, &buffer[7]);
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	1dda      	adds	r2, r3, #7
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2107      	movs	r1, #7
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff ff93 	bl	8000926 <CalulateCRC>
    status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 8000a00:	f107 020c 	add.w	r2, r7, #12
 8000a04:	f107 010c 	add.w	r1, r7, #12
 8000a08:	f107 0318 	add.w	r3, r7, #24
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	2209      	movs	r2, #9
 8000a12:	200c      	movs	r0, #12
 8000a14:	f7ff fe5c 	bl	80006d0 <MFRC522_ToCard>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	777b      	strb	r3, [r7, #29]

    if ((status == MI_OK) && (recvBits == 0x18))
 8000a1c:	7f7b      	ldrb	r3, [r7, #29]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d105      	bne.n	8000a2e <MFRC522_SelectTag+0x76>
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	2b18      	cmp	r3, #24
 8000a26:	d102      	bne.n	8000a2e <MFRC522_SelectTag+0x76>
    {
		size = buffer[0];
 8000a28:	7b3b      	ldrb	r3, [r7, #12]
 8000a2a:	77bb      	strb	r3, [r7, #30]
 8000a2c:	e001      	b.n	8000a32 <MFRC522_SelectTag+0x7a>
	}
    else
    {
		size = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	77bb      	strb	r3, [r7, #30]
	}

    return size;
 8000a32:	7fbb      	ldrb	r3, [r7, #30]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3720      	adds	r7, #32
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <MFRC522_Auth>:
             Sectorkey--Sector password
             serNum--Card serial number, 4-byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Auth(uchar authMode, uchar BlockAddr, uchar *Sectorkey, uchar *serNum)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	; 0x30
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	60ba      	str	r2, [r7, #8]
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4603      	mov	r3, r0
 8000a48:	73fb      	strb	r3, [r7, #15]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	73bb      	strb	r3, [r7, #14]
    uint recvBits;
    uchar i;
	uchar buff[12];

	//Verify the command block address + sector + password + card serial number
    buff[0] = authMode;
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	753b      	strb	r3, [r7, #20]
    buff[1] = BlockAddr;
 8000a52:	7bbb      	ldrb	r3, [r7, #14]
 8000a54:	757b      	strb	r3, [r7, #21]
    for (i=0; i<6; i++)
 8000a56:	2300      	movs	r3, #0
 8000a58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000a5c:	e010      	b.n	8000a80 <MFRC522_Auth+0x44>
    {
		buff[i+2] = *(Sectorkey+i);
 8000a5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	441a      	add	r2, r3
 8000a66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a6a:	3302      	adds	r3, #2
 8000a6c:	7812      	ldrb	r2, [r2, #0]
 8000a6e:	3328      	adds	r3, #40	; 0x28
 8000a70:	443b      	add	r3, r7
 8000a72:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i=0; i<6; i++)
 8000a76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000a80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a84:	2b05      	cmp	r3, #5
 8000a86:	d9ea      	bls.n	8000a5e <MFRC522_Auth+0x22>
	}
    for (i=0; i<4; i++)
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000a8e:	e010      	b.n	8000ab2 <MFRC522_Auth+0x76>
    {
		buff[i+8] = *(serNum+i);
 8000a90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	441a      	add	r2, r3
 8000a98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a9c:	3308      	adds	r3, #8
 8000a9e:	7812      	ldrb	r2, [r2, #0]
 8000aa0:	3328      	adds	r3, #40	; 0x28
 8000aa2:	443b      	add	r3, r7
 8000aa4:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i=0; i<4; i++)
 8000aa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000aac:	3301      	adds	r3, #1
 8000aae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ab2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ab6:	2b03      	cmp	r3, #3
 8000ab8:	d9ea      	bls.n	8000a90 <MFRC522_Auth+0x54>
	}
    status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 8000aba:	f107 0214 	add.w	r2, r7, #20
 8000abe:	f107 0114 	add.w	r1, r7, #20
 8000ac2:	f107 0320 	add.w	r3, r7, #32
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	220c      	movs	r2, #12
 8000acc:	200e      	movs	r0, #14
 8000ace:	f7ff fdff 	bl	80006d0 <MFRC522_ToCard>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((status != MI_OK) || (!(Read_MFRC522(Status2Reg) & 0x08)))
 8000ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d107      	bne.n	8000af0 <MFRC522_Auth+0xb4>
 8000ae0:	2008      	movs	r0, #8
 8000ae2:	f7ff fd52 	bl	800058a <Read_MFRC522>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	f003 0308 	and.w	r3, r3, #8
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <MFRC522_Auth+0xba>
    {
		status = MI_ERR;
 8000af0:	2302      	movs	r3, #2
 8000af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

    return status;
 8000af6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3728      	adds	r7, #40	; 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <MFRC522_Read>:
 * Description: Read block data
 * Input parameters: blockAddr - block address; recvData - read block data
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Read(uchar blockAddr, uchar *recvData)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b086      	sub	sp, #24
 8000b06:	af02      	add	r7, sp, #8
 8000b08:	4603      	mov	r3, r0
 8000b0a:	6039      	str	r1, [r7, #0]
 8000b0c:	71fb      	strb	r3, [r7, #7]
    uchar status;
    uint unLen;

    recvData[0] = PICC_READ;
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	2230      	movs	r2, #48	; 0x30
 8000b12:	701a      	strb	r2, [r3, #0]
    recvData[1] = blockAddr;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	3301      	adds	r3, #1
 8000b18:	79fa      	ldrb	r2, [r7, #7]
 8000b1a:	701a      	strb	r2, [r3, #0]
    CalulateCRC(recvData,2, &recvData[2]);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	3302      	adds	r3, #2
 8000b20:	461a      	mov	r2, r3
 8000b22:	2102      	movs	r1, #2
 8000b24:	6838      	ldr	r0, [r7, #0]
 8000b26:	f7ff fefe 	bl	8000926 <CalulateCRC>
    status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	2204      	movs	r2, #4
 8000b34:	6839      	ldr	r1, [r7, #0]
 8000b36:	200c      	movs	r0, #12
 8000b38:	f7ff fdca 	bl	80006d0 <MFRC522_ToCard>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	73fb      	strb	r3, [r7, #15]

    if ((status != MI_OK) || (unLen != 0x90))
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d102      	bne.n	8000b4c <MFRC522_Read+0x4a>
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	2b90      	cmp	r3, #144	; 0x90
 8000b4a:	d001      	beq.n	8000b50 <MFRC522_Read+0x4e>
    {
        status = MI_ERR;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <MFRC522_Halt>:
 * Description: Command card into hibernation
 * Input: None
 * Return value: None
 */
void MFRC522_Halt(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b084      	sub	sp, #16
 8000b5e:	af02      	add	r7, sp, #8
	uint unLen;
	uchar buff[4];

	buff[0] = PICC_HALT;
 8000b60:	2350      	movs	r3, #80	; 0x50
 8000b62:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	707b      	strb	r3, [r7, #1]
	CalulateCRC(buff, 2, &buff[2]);
 8000b68:	463b      	mov	r3, r7
 8000b6a:	1c9a      	adds	r2, r3, #2
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	2102      	movs	r1, #2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fed8 	bl	8000926 <CalulateCRC>

	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff,&unLen);
 8000b76:	463a      	mov	r2, r7
 8000b78:	4639      	mov	r1, r7
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	2204      	movs	r2, #4
 8000b82:	200c      	movs	r0, #12
 8000b84:	f7ff fda4 	bl	80006d0 <MFRC522_ToCard>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <HAL_MspInit+0x44>)
 8000b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9a:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <HAL_MspInit+0x44>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <HAL_MspInit+0x44>)
 8000ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_MspInit+0x44>)
 8000bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_MspInit+0x44>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_MspInit+0x44>)
 8000bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bc6:	f000 fc63 	bl	8001490 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a17      	ldr	r2, [pc, #92]	; (8000c54 <HAL_SPI_MspInit+0x7c>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d128      	bne.n	8000c4c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <HAL_SPI_MspInit+0x80>)
 8000bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfe:	4a16      	ldr	r2, [pc, #88]	; (8000c58 <HAL_SPI_MspInit+0x80>)
 8000c00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c04:	6613      	str	r3, [r2, #96]	; 0x60
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <HAL_SPI_MspInit+0x80>)
 8000c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <HAL_SPI_MspInit+0x80>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <HAL_SPI_MspInit+0x80>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <HAL_SPI_MspInit+0x80>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c2a:	23e0      	movs	r3, #224	; 0xe0
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c48:	f000 f9e4 	bl	8001014 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	; 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40013000 	.word	0x40013000
 8000c58:	40021000 	.word	0x40021000

08000c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c60:	e7fe      	b.n	8000c60 <NMI_Handler+0x4>

08000c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <HardFault_Handler+0x4>

08000c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <MemManage_Handler+0x4>

08000c6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <BusFault_Handler+0x4>

08000c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <UsageFault_Handler+0x4>

08000c7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca8:	f000 f890 	bl	8000dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <SystemInit+0x20>)
 8000cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cba:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <SystemInit+0x20>)
 8000cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cd6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cd8:	f7ff ffea 	bl	8000cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cdc:	480c      	ldr	r0, [pc, #48]	; (8000d10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cde:	490d      	ldr	r1, [pc, #52]	; (8000d14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	; (8000d18 <LoopForever+0xe>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ce4:	e002      	b.n	8000cec <LoopCopyDataInit>

08000ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cea:	3304      	adds	r3, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf0:	d3f9      	bcc.n	8000ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf4:	4c0a      	ldr	r4, [pc, #40]	; (8000d20 <LoopForever+0x16>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf8:	e001      	b.n	8000cfe <LoopFillZerobss>

08000cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cfc:	3204      	adds	r2, #4

08000cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d00:	d3fb      	bcc.n	8000cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d02:	f001 fd05 	bl	8002710 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d06:	f7ff fa87 	bl	8000218 <main>

08000d0a <LoopForever>:

LoopForever:
    b LoopForever
 8000d0a:	e7fe      	b.n	8000d0a <LoopForever>
  ldr   r0, =_estack
 8000d0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d18:	080027ac 	.word	0x080027ac
  ldr r2, =_sbss
 8000d1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d20:	200004f8 	.word	0x200004f8

08000d24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d24:	e7fe      	b.n	8000d24 <ADC1_2_IRQHandler>

08000d26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d30:	2003      	movs	r0, #3
 8000d32:	f000 f93d 	bl	8000fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d36:	2000      	movs	r0, #0
 8000d38:	f000 f80e 	bl	8000d58 <HAL_InitTick>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d002      	beq.n	8000d48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	71fb      	strb	r3, [r7, #7]
 8000d46:	e001      	b.n	8000d4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d48:	f7ff ff22 	bl	8000b90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d4c:	79fb      	ldrb	r3, [r7, #7]

}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d60:	2300      	movs	r3, #0
 8000d62:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <HAL_InitTick+0x68>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d022      	beq.n	8000db2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_InitTick+0x6c>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <HAL_InitTick+0x68>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d78:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 f93a 	bl	8000ffa <HAL_SYSTICK_Config>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d10f      	bne.n	8000dac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b0f      	cmp	r3, #15
 8000d90:	d809      	bhi.n	8000da6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d92:	2200      	movs	r2, #0
 8000d94:	6879      	ldr	r1, [r7, #4]
 8000d96:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9a:	f000 f914 	bl	8000fc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <HAL_InitTick+0x70>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	e007      	b.n	8000db6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	73fb      	strb	r3, [r7, #15]
 8000daa:	e004      	b.n	8000db6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	73fb      	strb	r3, [r7, #15]
 8000db0:	e001      	b.n	8000db6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000004 	.word	0x20000004

08000dcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <HAL_IncTick+0x1c>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_IncTick+0x20>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a03      	ldr	r2, [pc, #12]	; (8000de8 <HAL_IncTick+0x1c>)
 8000ddc:	6013      	str	r3, [r2, #0]
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	200004f4 	.word	0x200004f4
 8000dec:	20000008 	.word	0x20000008

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <HAL_GetTick+0x14>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200004f4 	.word	0x200004f4

08000e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e10:	f7ff ffee 	bl	8000df0 <HAL_GetTick>
 8000e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e20:	d004      	beq.n	8000e2c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_Delay+0x40>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	4413      	add	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e2c:	bf00      	nop
 8000e2e:	f7ff ffdf 	bl	8000df0 <HAL_GetTick>
 8000e32:	4602      	mov	r2, r0
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d8f7      	bhi.n	8000e2e <HAL_Delay+0x26>
  {
  }
}
 8000e3e:	bf00      	nop
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000008 	.word	0x20000008

08000e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <__NVIC_GetPriorityGrouping+0x18>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	db0a      	blt.n	8000eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	490c      	ldr	r1, [pc, #48]	; (8000efc <__NVIC_SetPriority+0x4c>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	0112      	lsls	r2, r2, #4
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed8:	e00a      	b.n	8000ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4908      	ldr	r1, [pc, #32]	; (8000f00 <__NVIC_SetPriority+0x50>)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	0112      	lsls	r2, r2, #4
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	440b      	add	r3, r1
 8000eee:	761a      	strb	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000e100 	.word	0xe000e100
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f1c3 0307 	rsb	r3, r3, #7
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	bf28      	it	cs
 8000f22:	2304      	movcs	r3, #4
 8000f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d902      	bls.n	8000f34 <NVIC_EncodePriority+0x30>
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3b03      	subs	r3, #3
 8000f32:	e000      	b.n	8000f36 <NVIC_EncodePriority+0x32>
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43da      	mvns	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	401a      	ands	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43d9      	mvns	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	4313      	orrs	r3, r2
         );
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3724      	adds	r7, #36	; 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f7c:	d301      	bcc.n	8000f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00f      	b.n	8000fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <SysTick_Config+0x40>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8a:	210f      	movs	r1, #15
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f7ff ff8e 	bl	8000eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <SysTick_Config+0x40>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9a:	4b04      	ldr	r3, [pc, #16]	; (8000fac <SysTick_Config+0x40>)
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	e000e010 	.word	0xe000e010

08000fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ff47 	bl	8000e4c <__NVIC_SetPriorityGrouping>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd4:	f7ff ff5e 	bl	8000e94 <__NVIC_GetPriorityGrouping>
 8000fd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68b9      	ldr	r1, [r7, #8]
 8000fde:	6978      	ldr	r0, [r7, #20]
 8000fe0:	f7ff ff90 	bl	8000f04 <NVIC_EncodePriority>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff5f 	bl	8000eb0 <__NVIC_SetPriority>
}
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffb2 	bl	8000f6c <SysTick_Config>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001022:	e15a      	b.n	80012da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	2101      	movs	r1, #1
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	4013      	ands	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 814c 	beq.w	80012d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b01      	cmp	r3, #1
 8001046:	d005      	beq.n	8001054 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001050:	2b02      	cmp	r3, #2
 8001052:	d130      	bne.n	80010b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800108a:	2201      	movs	r2, #1
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	091b      	lsrs	r3, r3, #4
 80010a0:	f003 0201 	and.w	r2, r3, #1
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d017      	beq.n	80010f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	2203      	movs	r2, #3
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d123      	bne.n	8001146 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	08da      	lsrs	r2, r3, #3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3208      	adds	r2, #8
 8001106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	220f      	movs	r2, #15
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	691a      	ldr	r2, [r3, #16]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	6939      	ldr	r1, [r7, #16]
 8001142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0203 	and.w	r2, r3, #3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 80a6 	beq.w	80012d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001188:	4b5b      	ldr	r3, [pc, #364]	; (80012f8 <HAL_GPIO_Init+0x2e4>)
 800118a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118c:	4a5a      	ldr	r2, [pc, #360]	; (80012f8 <HAL_GPIO_Init+0x2e4>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6613      	str	r3, [r2, #96]	; 0x60
 8001194:	4b58      	ldr	r3, [pc, #352]	; (80012f8 <HAL_GPIO_Init+0x2e4>)
 8001196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011a0:	4a56      	ldr	r2, [pc, #344]	; (80012fc <HAL_GPIO_Init+0x2e8>)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011ca:	d01f      	beq.n	800120c <HAL_GPIO_Init+0x1f8>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a4c      	ldr	r2, [pc, #304]	; (8001300 <HAL_GPIO_Init+0x2ec>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d019      	beq.n	8001208 <HAL_GPIO_Init+0x1f4>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a4b      	ldr	r2, [pc, #300]	; (8001304 <HAL_GPIO_Init+0x2f0>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d013      	beq.n	8001204 <HAL_GPIO_Init+0x1f0>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a4a      	ldr	r2, [pc, #296]	; (8001308 <HAL_GPIO_Init+0x2f4>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d00d      	beq.n	8001200 <HAL_GPIO_Init+0x1ec>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a49      	ldr	r2, [pc, #292]	; (800130c <HAL_GPIO_Init+0x2f8>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d007      	beq.n	80011fc <HAL_GPIO_Init+0x1e8>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a48      	ldr	r2, [pc, #288]	; (8001310 <HAL_GPIO_Init+0x2fc>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d101      	bne.n	80011f8 <HAL_GPIO_Init+0x1e4>
 80011f4:	2305      	movs	r3, #5
 80011f6:	e00a      	b.n	800120e <HAL_GPIO_Init+0x1fa>
 80011f8:	2306      	movs	r3, #6
 80011fa:	e008      	b.n	800120e <HAL_GPIO_Init+0x1fa>
 80011fc:	2304      	movs	r3, #4
 80011fe:	e006      	b.n	800120e <HAL_GPIO_Init+0x1fa>
 8001200:	2303      	movs	r3, #3
 8001202:	e004      	b.n	800120e <HAL_GPIO_Init+0x1fa>
 8001204:	2302      	movs	r3, #2
 8001206:	e002      	b.n	800120e <HAL_GPIO_Init+0x1fa>
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <HAL_GPIO_Init+0x1fa>
 800120c:	2300      	movs	r3, #0
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	f002 0203 	and.w	r2, r2, #3
 8001214:	0092      	lsls	r2, r2, #2
 8001216:	4093      	lsls	r3, r2
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800121e:	4937      	ldr	r1, [pc, #220]	; (80012fc <HAL_GPIO_Init+0x2e8>)
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3302      	adds	r3, #2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800122c:	4b39      	ldr	r3, [pc, #228]	; (8001314 <HAL_GPIO_Init+0x300>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	43db      	mvns	r3, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001250:	4a30      	ldr	r2, [pc, #192]	; (8001314 <HAL_GPIO_Init+0x300>)
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001256:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <HAL_GPIO_Init+0x300>)
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	43db      	mvns	r3, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800127a:	4a26      	ldr	r2, [pc, #152]	; (8001314 <HAL_GPIO_Init+0x300>)
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001280:	4b24      	ldr	r3, [pc, #144]	; (8001314 <HAL_GPIO_Init+0x300>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012a4:	4a1b      	ldr	r2, [pc, #108]	; (8001314 <HAL_GPIO_Init+0x300>)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <HAL_GPIO_Init+0x300>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012ce:	4a11      	ldr	r2, [pc, #68]	; (8001314 <HAL_GPIO_Init+0x300>)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3301      	adds	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	fa22 f303 	lsr.w	r3, r2, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f47f ae9d 	bne.w	8001024 <HAL_GPIO_Init+0x10>
  }
}
 80012ea:	bf00      	nop
 80012ec:	bf00      	nop
 80012ee:	371c      	adds	r7, #28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010000 	.word	0x40010000
 8001300:	48000400 	.word	0x48000400
 8001304:	48000800 	.word	0x48000800
 8001308:	48000c00 	.word	0x48000c00
 800130c:	48001000 	.word	0x48001000
 8001310:	48001400 	.word	0x48001400
 8001314:	40010400 	.word	0x40010400

08001318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	807b      	strh	r3, [r7, #2]
 8001324:	4613      	mov	r3, r2
 8001326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001328:	787b      	ldrb	r3, [r7, #1]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800132e:	887a      	ldrh	r2, [r7, #2]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001334:	e002      	b.n	800133c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001336:	887a      	ldrh	r2, [r7, #2]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d141      	bne.n	80013da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001356:	4b4b      	ldr	r3, [pc, #300]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800135e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001362:	d131      	bne.n	80013c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001364:	4b47      	ldr	r3, [pc, #284]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800136a:	4a46      	ldr	r2, [pc, #280]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001370:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001374:	4b43      	ldr	r3, [pc, #268]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800137c:	4a41      	ldr	r2, [pc, #260]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800137e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001382:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001384:	4b40      	ldr	r3, [pc, #256]	; (8001488 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2232      	movs	r2, #50	; 0x32
 800138a:	fb02 f303 	mul.w	r3, r2, r3
 800138e:	4a3f      	ldr	r2, [pc, #252]	; (800148c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001390:	fba2 2303 	umull	r2, r3, r2, r3
 8001394:	0c9b      	lsrs	r3, r3, #18
 8001396:	3301      	adds	r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800139a:	e002      	b.n	80013a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3b01      	subs	r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013a2:	4b38      	ldr	r3, [pc, #224]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ae:	d102      	bne.n	80013b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f2      	bne.n	800139c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013b6:	4b33      	ldr	r3, [pc, #204]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013c2:	d158      	bne.n	8001476 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e057      	b.n	8001478 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013c8:	4b2e      	ldr	r3, [pc, #184]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013ce:	4a2d      	ldr	r2, [pc, #180]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80013d8:	e04d      	b.n	8001476 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013e0:	d141      	bne.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013e2:	4b28      	ldr	r3, [pc, #160]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ee:	d131      	bne.n	8001454 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013f0:	4b24      	ldr	r3, [pc, #144]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013f6:	4a23      	ldr	r2, [pc, #140]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001400:	4b20      	ldr	r3, [pc, #128]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001408:	4a1e      	ldr	r2, [pc, #120]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800140e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001410:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2232      	movs	r2, #50	; 0x32
 8001416:	fb02 f303 	mul.w	r3, r2, r3
 800141a:	4a1c      	ldr	r2, [pc, #112]	; (800148c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800141c:	fba2 2303 	umull	r2, r3, r2, r3
 8001420:	0c9b      	lsrs	r3, r3, #18
 8001422:	3301      	adds	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001426:	e002      	b.n	800142e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	3b01      	subs	r3, #1
 800142c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800143a:	d102      	bne.n	8001442 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f2      	bne.n	8001428 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800144e:	d112      	bne.n	8001476 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e011      	b.n	8001478 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001460:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001464:	e007      	b.n	8001476 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001466:	4b07      	ldr	r3, [pc, #28]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800146e:	4a05      	ldr	r2, [pc, #20]	; (8001484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001470:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001474:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	40007000 	.word	0x40007000
 8001488:	20000000 	.word	0x20000000
 800148c:	431bde83 	.word	0x431bde83

08001490 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	4a04      	ldr	r2, [pc, #16]	; (80014ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800149a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149e:	6093      	str	r3, [r2, #8]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40007000 	.word	0x40007000

080014b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e2fe      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d075      	beq.n	80015ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ce:	4b97      	ldr	r3, [pc, #604]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014d8:	4b94      	ldr	r3, [pc, #592]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	2b0c      	cmp	r3, #12
 80014e6:	d102      	bne.n	80014ee <HAL_RCC_OscConfig+0x3e>
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	d002      	beq.n	80014f4 <HAL_RCC_OscConfig+0x44>
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	d10b      	bne.n	800150c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	4b8d      	ldr	r3, [pc, #564]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d05b      	beq.n	80015b8 <HAL_RCC_OscConfig+0x108>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d157      	bne.n	80015b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e2d9      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001514:	d106      	bne.n	8001524 <HAL_RCC_OscConfig+0x74>
 8001516:	4b85      	ldr	r3, [pc, #532]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a84      	ldr	r2, [pc, #528]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 800151c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e01d      	b.n	8001560 <HAL_RCC_OscConfig+0xb0>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x98>
 800152e:	4b7f      	ldr	r3, [pc, #508]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a7e      	ldr	r2, [pc, #504]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b7c      	ldr	r3, [pc, #496]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a7b      	ldr	r2, [pc, #492]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e00b      	b.n	8001560 <HAL_RCC_OscConfig+0xb0>
 8001548:	4b78      	ldr	r3, [pc, #480]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a77      	ldr	r2, [pc, #476]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 800154e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b75      	ldr	r3, [pc, #468]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a74      	ldr	r2, [pc, #464]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 800155a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d013      	beq.n	8001590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001568:	f7ff fc42 	bl	8000df0 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001570:	f7ff fc3e 	bl	8000df0 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b64      	cmp	r3, #100	; 0x64
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e29e      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001582:	4b6a      	ldr	r3, [pc, #424]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0xc0>
 800158e:	e014      	b.n	80015ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff fc2e 	bl	8000df0 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001598:	f7ff fc2a 	bl	8000df0 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	; 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e28a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015aa:	4b60      	ldr	r3, [pc, #384]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0xe8>
 80015b6:	e000      	b.n	80015ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d075      	beq.n	80016b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015c6:	4b59      	ldr	r3, [pc, #356]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d0:	4b56      	ldr	r3, [pc, #344]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b0c      	cmp	r3, #12
 80015de:	d102      	bne.n	80015e6 <HAL_RCC_OscConfig+0x136>
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d002      	beq.n	80015ec <HAL_RCC_OscConfig+0x13c>
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d11f      	bne.n	800162c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015ec:	4b4f      	ldr	r3, [pc, #316]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_OscConfig+0x154>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e25d      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001604:	4b49      	ldr	r3, [pc, #292]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	061b      	lsls	r3, r3, #24
 8001612:	4946      	ldr	r1, [pc, #280]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001618:	4b45      	ldr	r3, [pc, #276]	; (8001730 <HAL_RCC_OscConfig+0x280>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fb9b 	bl	8000d58 <HAL_InitTick>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d043      	beq.n	80016b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e249      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d023      	beq.n	800167c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001634:	4b3d      	ldr	r3, [pc, #244]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a3c      	ldr	r2, [pc, #240]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 800163a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001640:	f7ff fbd6 	bl	8000df0 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001648:	f7ff fbd2 	bl	8000df0 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e232      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800165a:	4b34      	ldr	r3, [pc, #208]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001666:	4b31      	ldr	r3, [pc, #196]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	061b      	lsls	r3, r3, #24
 8001674:	492d      	ldr	r1, [pc, #180]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001676:	4313      	orrs	r3, r2
 8001678:	604b      	str	r3, [r1, #4]
 800167a:	e01a      	b.n	80016b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167c:	4b2b      	ldr	r3, [pc, #172]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a2a      	ldr	r2, [pc, #168]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001682:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001688:	f7ff fbb2 	bl	8000df0 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001690:	f7ff fbae 	bl	8000df0 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e20e      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016a2:	4b22      	ldr	r3, [pc, #136]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x1e0>
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d041      	beq.n	8001742 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d01c      	beq.n	8001700 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 80016c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016cc:	4a17      	ldr	r2, [pc, #92]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d6:	f7ff fb8b 	bl	8000df0 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016de:	f7ff fb87 	bl	8000df0 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e1e7      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016f0:	4b0e      	ldr	r3, [pc, #56]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 80016f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0ef      	beq.n	80016de <HAL_RCC_OscConfig+0x22e>
 80016fe:	e020      	b.n	8001742 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001706:	4a09      	ldr	r2, [pc, #36]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001710:	f7ff fb6e 	bl	8000df0 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001716:	e00d      	b.n	8001734 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001718:	f7ff fb6a 	bl	8000df0 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d906      	bls.n	8001734 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e1ca      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001734:	4b8c      	ldr	r3, [pc, #560]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1ea      	bne.n	8001718 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 80a6 	beq.w	800189c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001750:	2300      	movs	r3, #0
 8001752:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001754:	4b84      	ldr	r3, [pc, #528]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_OscConfig+0x2b4>
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <HAL_RCC_OscConfig+0x2b6>
 8001764:	2300      	movs	r3, #0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00d      	beq.n	8001786 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	4b7f      	ldr	r3, [pc, #508]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800176c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176e:	4a7e      	ldr	r2, [pc, #504]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001774:	6593      	str	r3, [r2, #88]	; 0x58
 8001776:	4b7c      	ldr	r3, [pc, #496]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001782:	2301      	movs	r3, #1
 8001784:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001786:	4b79      	ldr	r3, [pc, #484]	; (800196c <HAL_RCC_OscConfig+0x4bc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178e:	2b00      	cmp	r3, #0
 8001790:	d118      	bne.n	80017c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001792:	4b76      	ldr	r3, [pc, #472]	; (800196c <HAL_RCC_OscConfig+0x4bc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a75      	ldr	r2, [pc, #468]	; (800196c <HAL_RCC_OscConfig+0x4bc>)
 8001798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800179e:	f7ff fb27 	bl	8000df0 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a6:	f7ff fb23 	bl	8000df0 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e183      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017b8:	4b6c      	ldr	r3, [pc, #432]	; (800196c <HAL_RCC_OscConfig+0x4bc>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d108      	bne.n	80017de <HAL_RCC_OscConfig+0x32e>
 80017cc:	4b66      	ldr	r3, [pc, #408]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80017ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d2:	4a65      	ldr	r2, [pc, #404]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017dc:	e024      	b.n	8001828 <HAL_RCC_OscConfig+0x378>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b05      	cmp	r3, #5
 80017e4:	d110      	bne.n	8001808 <HAL_RCC_OscConfig+0x358>
 80017e6:	4b60      	ldr	r3, [pc, #384]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80017e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ec:	4a5e      	ldr	r2, [pc, #376]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017f6:	4b5c      	ldr	r3, [pc, #368]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80017f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fc:	4a5a      	ldr	r2, [pc, #360]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001806:	e00f      	b.n	8001828 <HAL_RCC_OscConfig+0x378>
 8001808:	4b57      	ldr	r3, [pc, #348]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800180a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800180e:	4a56      	ldr	r2, [pc, #344]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001818:	4b53      	ldr	r3, [pc, #332]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800181a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181e:	4a52      	ldr	r2, [pc, #328]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001820:	f023 0304 	bic.w	r3, r3, #4
 8001824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d016      	beq.n	800185e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001830:	f7ff fade 	bl	8000df0 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001836:	e00a      	b.n	800184e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001838:	f7ff fada 	bl	8000df0 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	f241 3288 	movw	r2, #5000	; 0x1388
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e138      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800184e:	4b46      	ldr	r3, [pc, #280]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0ed      	beq.n	8001838 <HAL_RCC_OscConfig+0x388>
 800185c:	e015      	b.n	800188a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185e:	f7ff fac7 	bl	8000df0 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001864:	e00a      	b.n	800187c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001866:	f7ff fac3 	bl	8000df0 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	f241 3288 	movw	r2, #5000	; 0x1388
 8001874:	4293      	cmp	r3, r2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e121      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800187c:	4b3a      	ldr	r3, [pc, #232]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800187e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1ed      	bne.n	8001866 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800188a:	7ffb      	ldrb	r3, [r7, #31]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d105      	bne.n	800189c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001890:	4b35      	ldr	r3, [pc, #212]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001894:	4a34      	ldr	r2, [pc, #208]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800189a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0320 	and.w	r3, r3, #32
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d03c      	beq.n	8001922 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d01c      	beq.n	80018ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018b0:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80018b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018b6:	4a2c      	ldr	r2, [pc, #176]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c0:	f7ff fa96 	bl	8000df0 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018c8:	f7ff fa92 	bl	8000df0 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e0f2      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018da:	4b23      	ldr	r3, [pc, #140]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80018dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0ef      	beq.n	80018c8 <HAL_RCC_OscConfig+0x418>
 80018e8:	e01b      	b.n	8001922 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018ea:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80018ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018f0:	4a1d      	ldr	r2, [pc, #116]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80018f2:	f023 0301 	bic.w	r3, r3, #1
 80018f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fa:	f7ff fa79 	bl	8000df0 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001902:	f7ff fa75 	bl	8000df0 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e0d5      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001916:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1ef      	bne.n	8001902 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 80c9 	beq.w	8001abe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 030c 	and.w	r3, r3, #12
 8001934:	2b0c      	cmp	r3, #12
 8001936:	f000 8083 	beq.w	8001a40 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d15e      	bne.n	8001a00 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a08      	ldr	r2, [pc, #32]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001948:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800194c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194e:	f7ff fa4f 	bl	8000df0 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001954:	e00c      	b.n	8001970 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001956:	f7ff fa4b 	bl	8000df0 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d905      	bls.n	8001970 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e0ab      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
 8001968:	40021000 	.word	0x40021000
 800196c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001970:	4b55      	ldr	r3, [pc, #340]	; (8001ac8 <HAL_RCC_OscConfig+0x618>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1ec      	bne.n	8001956 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800197c:	4b52      	ldr	r3, [pc, #328]	; (8001ac8 <HAL_RCC_OscConfig+0x618>)
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	4b52      	ldr	r3, [pc, #328]	; (8001acc <HAL_RCC_OscConfig+0x61c>)
 8001982:	4013      	ands	r3, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6a11      	ldr	r1, [r2, #32]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800198c:	3a01      	subs	r2, #1
 800198e:	0112      	lsls	r2, r2, #4
 8001990:	4311      	orrs	r1, r2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001996:	0212      	lsls	r2, r2, #8
 8001998:	4311      	orrs	r1, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800199e:	0852      	lsrs	r2, r2, #1
 80019a0:	3a01      	subs	r2, #1
 80019a2:	0552      	lsls	r2, r2, #21
 80019a4:	4311      	orrs	r1, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019aa:	0852      	lsrs	r2, r2, #1
 80019ac:	3a01      	subs	r2, #1
 80019ae:	0652      	lsls	r2, r2, #25
 80019b0:	4311      	orrs	r1, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019b6:	06d2      	lsls	r2, r2, #27
 80019b8:	430a      	orrs	r2, r1
 80019ba:	4943      	ldr	r1, [pc, #268]	; (8001ac8 <HAL_RCC_OscConfig+0x618>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c0:	4b41      	ldr	r3, [pc, #260]	; (8001ac8 <HAL_RCC_OscConfig+0x618>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a40      	ldr	r2, [pc, #256]	; (8001ac8 <HAL_RCC_OscConfig+0x618>)
 80019c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019cc:	4b3e      	ldr	r3, [pc, #248]	; (8001ac8 <HAL_RCC_OscConfig+0x618>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4a3d      	ldr	r2, [pc, #244]	; (8001ac8 <HAL_RCC_OscConfig+0x618>)
 80019d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff fa0a 	bl	8000df0 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e0:	f7ff fa06 	bl	8000df0 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e066      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f2:	4b35      	ldr	r3, [pc, #212]	; (8001ac8 <HAL_RCC_OscConfig+0x618>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x530>
 80019fe:	e05e      	b.n	8001abe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a00:	4b31      	ldr	r3, [pc, #196]	; (8001ac8 <HAL_RCC_OscConfig+0x618>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a30      	ldr	r2, [pc, #192]	; (8001ac8 <HAL_RCC_OscConfig+0x618>)
 8001a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff f9f0 	bl	8000df0 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a14:	f7ff f9ec 	bl	8000df0 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e04c      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a26:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <HAL_RCC_OscConfig+0x618>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a32:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <HAL_RCC_OscConfig+0x618>)
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	4924      	ldr	r1, [pc, #144]	; (8001ac8 <HAL_RCC_OscConfig+0x618>)
 8001a38:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <HAL_RCC_OscConfig+0x620>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	60cb      	str	r3, [r1, #12]
 8001a3e:	e03e      	b.n	8001abe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e039      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <HAL_RCC_OscConfig+0x618>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f003 0203 	and.w	r2, r3, #3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d12c      	bne.n	8001aba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d123      	bne.n	8001aba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d11b      	bne.n	8001aba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d113      	bne.n	8001aba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	085b      	lsrs	r3, r3, #1
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d109      	bne.n	8001aba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab0:	085b      	lsrs	r3, r3, #1
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d001      	beq.n	8001abe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3720      	adds	r7, #32
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	019f800c 	.word	0x019f800c
 8001ad0:	feeefffc 	.word	0xfeeefffc

08001ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e11e      	b.n	8001d2a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aec:	4b91      	ldr	r3, [pc, #580]	; (8001d34 <HAL_RCC_ClockConfig+0x260>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 030f 	and.w	r3, r3, #15
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d910      	bls.n	8001b1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afa:	4b8e      	ldr	r3, [pc, #568]	; (8001d34 <HAL_RCC_ClockConfig+0x260>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 020f 	bic.w	r2, r3, #15
 8001b02:	498c      	ldr	r1, [pc, #560]	; (8001d34 <HAL_RCC_ClockConfig+0x260>)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	4b8a      	ldr	r3, [pc, #552]	; (8001d34 <HAL_RCC_ClockConfig+0x260>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e106      	b.n	8001d2a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d073      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d129      	bne.n	8001b84 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b30:	4b81      	ldr	r3, [pc, #516]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0f4      	b.n	8001d2a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b40:	f000 f966 	bl	8001e10 <RCC_GetSysClockFreqFromPLLSource>
 8001b44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4a7c      	ldr	r2, [pc, #496]	; (8001d3c <HAL_RCC_ClockConfig+0x268>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d93f      	bls.n	8001bce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b4e:	4b7a      	ldr	r3, [pc, #488]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d009      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d033      	beq.n	8001bce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d12f      	bne.n	8001bce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b6e:	4b72      	ldr	r3, [pc, #456]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b76:	4a70      	ldr	r2, [pc, #448]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b7c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	e024      	b.n	8001bce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d107      	bne.n	8001b9c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b8c:	4b6a      	ldr	r3, [pc, #424]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d109      	bne.n	8001bac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0c6      	b.n	8001d2a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b9c:	4b66      	ldr	r3, [pc, #408]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0be      	b.n	8001d2a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001bac:	f000 f8ce 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4a61      	ldr	r2, [pc, #388]	; (8001d3c <HAL_RCC_ClockConfig+0x268>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d909      	bls.n	8001bce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bba:	4b5f      	ldr	r3, [pc, #380]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bc2:	4a5d      	ldr	r2, [pc, #372]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bce:	4b5a      	ldr	r3, [pc, #360]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f023 0203 	bic.w	r2, r3, #3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	4957      	ldr	r1, [pc, #348]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001be0:	f7ff f906 	bl	8000df0 <HAL_GetTick>
 8001be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be6:	e00a      	b.n	8001bfe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be8:	f7ff f902 	bl	8000df0 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e095      	b.n	8001d2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfe:	4b4e      	ldr	r3, [pc, #312]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 020c 	and.w	r2, r3, #12
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d1eb      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d023      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c28:	4b43      	ldr	r3, [pc, #268]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	4a42      	ldr	r2, [pc, #264]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c32:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d007      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001c40:	4b3d      	ldr	r3, [pc, #244]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001c48:	4a3b      	ldr	r2, [pc, #236]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c50:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	4936      	ldr	r1, [pc, #216]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b80      	cmp	r3, #128	; 0x80
 8001c68:	d105      	bne.n	8001c76 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c6a:	4b33      	ldr	r3, [pc, #204]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	4a32      	ldr	r2, [pc, #200]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001c70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c74:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c76:	4b2f      	ldr	r3, [pc, #188]	; (8001d34 <HAL_RCC_ClockConfig+0x260>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d21d      	bcs.n	8001cc0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c84:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <HAL_RCC_ClockConfig+0x260>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 020f 	bic.w	r2, r3, #15
 8001c8c:	4929      	ldr	r1, [pc, #164]	; (8001d34 <HAL_RCC_ClockConfig+0x260>)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c94:	f7ff f8ac 	bl	8000df0 <HAL_GetTick>
 8001c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9c:	f7ff f8a8 	bl	8000df0 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e03b      	b.n	8001d2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb2:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <HAL_RCC_ClockConfig+0x260>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d1ed      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d008      	beq.n	8001cde <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ccc:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	4917      	ldr	r1, [pc, #92]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d009      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cea:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	490f      	ldr	r1, [pc, #60]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cfe:	f000 f825 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 8001d02:	4602      	mov	r2, r0
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <HAL_RCC_ClockConfig+0x264>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	490c      	ldr	r1, [pc, #48]	; (8001d40 <HAL_RCC_ClockConfig+0x26c>)
 8001d10:	5ccb      	ldrb	r3, [r1, r3]
 8001d12:	f003 031f 	and.w	r3, r3, #31
 8001d16:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <HAL_RCC_ClockConfig+0x270>)
 8001d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <HAL_RCC_ClockConfig+0x274>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff f818 	bl	8000d58 <HAL_InitTick>
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40022000 	.word	0x40022000
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	04c4b400 	.word	0x04c4b400
 8001d40:	08002794 	.word	0x08002794
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000004 	.word	0x20000004

08001d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d52:	4b2c      	ldr	r3, [pc, #176]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d102      	bne.n	8001d64 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	e047      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d64:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d102      	bne.n	8001d76 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d70:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	e03e      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d76:	4b23      	ldr	r3, [pc, #140]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b0c      	cmp	r3, #12
 8001d80:	d136      	bne.n	8001df0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d82:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	3301      	adds	r3, #1
 8001d98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d10c      	bne.n	8001dba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001da0:	4a1a      	ldr	r2, [pc, #104]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da8:	4a16      	ldr	r2, [pc, #88]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001daa:	68d2      	ldr	r2, [r2, #12]
 8001dac:	0a12      	lsrs	r2, r2, #8
 8001dae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001db2:	fb02 f303 	mul.w	r3, r2, r3
 8001db6:	617b      	str	r3, [r7, #20]
      break;
 8001db8:	e00c      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dba:	4a13      	ldr	r2, [pc, #76]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	4a10      	ldr	r2, [pc, #64]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc4:	68d2      	ldr	r2, [r2, #12]
 8001dc6:	0a12      	lsrs	r2, r2, #8
 8001dc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001dcc:	fb02 f303 	mul.w	r3, r2, r3
 8001dd0:	617b      	str	r3, [r7, #20]
      break;
 8001dd2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	0e5b      	lsrs	r3, r3, #25
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	3301      	adds	r3, #1
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	e001      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001df4:	693b      	ldr	r3, [r7, #16]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	371c      	adds	r7, #28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	00f42400 	.word	0x00f42400
 8001e0c:	007a1200 	.word	0x007a1200

08001e10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e16:	4b1e      	ldr	r3, [pc, #120]	; (8001e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e20:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	d10c      	bne.n	8001e4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e34:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3c:	4a14      	ldr	r2, [pc, #80]	; (8001e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e3e:	68d2      	ldr	r2, [r2, #12]
 8001e40:	0a12      	lsrs	r2, r2, #8
 8001e42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e46:	fb02 f303 	mul.w	r3, r2, r3
 8001e4a:	617b      	str	r3, [r7, #20]
    break;
 8001e4c:	e00c      	b.n	8001e68 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e4e:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e56:	4a0e      	ldr	r2, [pc, #56]	; (8001e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e58:	68d2      	ldr	r2, [r2, #12]
 8001e5a:	0a12      	lsrs	r2, r2, #8
 8001e5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e60:	fb02 f303 	mul.w	r3, r2, r3
 8001e64:	617b      	str	r3, [r7, #20]
    break;
 8001e66:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	0e5b      	lsrs	r3, r3, #25
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	3301      	adds	r3, #1
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e80:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e82:	687b      	ldr	r3, [r7, #4]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	371c      	adds	r7, #28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	40021000 	.word	0x40021000
 8001e94:	007a1200 	.word	0x007a1200
 8001e98:	00f42400 	.word	0x00f42400

08001e9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e09d      	b.n	8001fea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d108      	bne.n	8001ec8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ebe:	d009      	beq.n	8001ed4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]
 8001ec6:	e005      	b.n	8001ed4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d106      	bne.n	8001ef4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7fe fe72 	bl	8000bd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f14:	d902      	bls.n	8001f1c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	e002      	b.n	8001f22 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001f2a:	d007      	beq.n	8001f3c <HAL_SPI_Init+0xa0>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f34:	d002      	beq.n	8001f3c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7e:	ea42 0103 	orr.w	r1, r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f86:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	0c1b      	lsrs	r3, r3, #16
 8001f98:	f003 0204 	and.w	r2, r3, #4
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001fb8:	ea42 0103 	orr.w	r1, r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	69da      	ldr	r2, [r3, #28]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b08a      	sub	sp, #40	; 0x28
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002000:	2301      	movs	r3, #1
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_SPI_TransmitReceive+0x26>
 8002014:	2302      	movs	r3, #2
 8002016:	e20a      	b.n	800242e <HAL_SPI_TransmitReceive+0x43c>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002020:	f7fe fee6 	bl	8000df0 <HAL_GetTick>
 8002024:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800202c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002034:	887b      	ldrh	r3, [r7, #2]
 8002036:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002038:	887b      	ldrh	r3, [r7, #2]
 800203a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800203c:	7efb      	ldrb	r3, [r7, #27]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d00e      	beq.n	8002060 <HAL_SPI_TransmitReceive+0x6e>
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002048:	d106      	bne.n	8002058 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d102      	bne.n	8002058 <HAL_SPI_TransmitReceive+0x66>
 8002052:	7efb      	ldrb	r3, [r7, #27]
 8002054:	2b04      	cmp	r3, #4
 8002056:	d003      	beq.n	8002060 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002058:	2302      	movs	r3, #2
 800205a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800205e:	e1e0      	b.n	8002422 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d005      	beq.n	8002072 <HAL_SPI_TransmitReceive+0x80>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d002      	beq.n	8002072 <HAL_SPI_TransmitReceive+0x80>
 800206c:	887b      	ldrh	r3, [r7, #2]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d103      	bne.n	800207a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002078:	e1d3      	b.n	8002422 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b04      	cmp	r3, #4
 8002084:	d003      	beq.n	800208e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2205      	movs	r2, #5
 800208a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	887a      	ldrh	r2, [r7, #2]
 800209e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	887a      	ldrh	r2, [r7, #2]
 80020a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	887a      	ldrh	r2, [r7, #2]
 80020b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	887a      	ldrh	r2, [r7, #2]
 80020ba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80020d0:	d802      	bhi.n	80020d8 <HAL_SPI_TransmitReceive+0xe6>
 80020d2:	8a3b      	ldrh	r3, [r7, #16]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d908      	bls.n	80020ea <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	e007      	b.n	80020fa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80020f8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002104:	2b40      	cmp	r3, #64	; 0x40
 8002106:	d007      	beq.n	8002118 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002116:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002120:	f240 8081 	bls.w	8002226 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d002      	beq.n	8002132 <HAL_SPI_TransmitReceive+0x140>
 800212c:	8a7b      	ldrh	r3, [r7, #18]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d16d      	bne.n	800220e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002136:	881a      	ldrh	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002142:	1c9a      	adds	r2, r3, #2
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800214c:	b29b      	uxth	r3, r3
 800214e:	3b01      	subs	r3, #1
 8002150:	b29a      	uxth	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002156:	e05a      	b.n	800220e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b02      	cmp	r3, #2
 8002164:	d11b      	bne.n	800219e <HAL_SPI_TransmitReceive+0x1ac>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800216a:	b29b      	uxth	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	d016      	beq.n	800219e <HAL_SPI_TransmitReceive+0x1ac>
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	2b01      	cmp	r3, #1
 8002174:	d113      	bne.n	800219e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217a:	881a      	ldrh	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002186:	1c9a      	adds	r2, r3, #2
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d11c      	bne.n	80021e6 <HAL_SPI_TransmitReceive+0x1f4>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d016      	beq.n	80021e6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	b292      	uxth	r2, r2
 80021c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	1c9a      	adds	r2, r3, #2
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021e2:	2301      	movs	r3, #1
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80021e6:	f7fe fe03 	bl	8000df0 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d80b      	bhi.n	800220e <HAL_SPI_TransmitReceive+0x21c>
 80021f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fc:	d007      	beq.n	800220e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800220c:	e109      	b.n	8002422 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002212:	b29b      	uxth	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d19f      	bne.n	8002158 <HAL_SPI_TransmitReceive+0x166>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800221e:	b29b      	uxth	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d199      	bne.n	8002158 <HAL_SPI_TransmitReceive+0x166>
 8002224:	e0e3      	b.n	80023ee <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_SPI_TransmitReceive+0x244>
 800222e:	8a7b      	ldrh	r3, [r7, #18]
 8002230:	2b01      	cmp	r3, #1
 8002232:	f040 80cf 	bne.w	80023d4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800223a:	b29b      	uxth	r3, r3
 800223c:	2b01      	cmp	r3, #1
 800223e:	d912      	bls.n	8002266 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002244:	881a      	ldrh	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002250:	1c9a      	adds	r2, r3, #2
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800225a:	b29b      	uxth	r3, r3
 800225c:	3b02      	subs	r3, #2
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002264:	e0b6      	b.n	80023d4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	330c      	adds	r3, #12
 8002270:	7812      	ldrb	r2, [r2, #0]
 8002272:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002282:	b29b      	uxth	r3, r3
 8002284:	3b01      	subs	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800228c:	e0a2      	b.n	80023d4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b02      	cmp	r3, #2
 800229a:	d134      	bne.n	8002306 <HAL_SPI_TransmitReceive+0x314>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d02f      	beq.n	8002306 <HAL_SPI_TransmitReceive+0x314>
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d12c      	bne.n	8002306 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d912      	bls.n	80022dc <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ba:	881a      	ldrh	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c6:	1c9a      	adds	r2, r3, #2
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	3b02      	subs	r3, #2
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022da:	e012      	b.n	8002302 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	330c      	adds	r3, #12
 80022e6:	7812      	ldrb	r2, [r2, #0]
 80022e8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b01      	cmp	r3, #1
 8002312:	d148      	bne.n	80023a6 <HAL_SPI_TransmitReceive+0x3b4>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800231a:	b29b      	uxth	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d042      	beq.n	80023a6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002326:	b29b      	uxth	r3, r3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d923      	bls.n	8002374 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	b292      	uxth	r2, r2
 8002338:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	1c9a      	adds	r2, r3, #2
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800234a:	b29b      	uxth	r3, r3
 800234c:	3b02      	subs	r3, #2
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800235c:	b29b      	uxth	r3, r3
 800235e:	2b01      	cmp	r3, #1
 8002360:	d81f      	bhi.n	80023a2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	e016      	b.n	80023a2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f103 020c 	add.w	r2, r3, #12
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	7812      	ldrb	r2, [r2, #0]
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002396:	b29b      	uxth	r3, r3
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023a2:	2301      	movs	r3, #1
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80023a6:	f7fe fd23 	bl	8000df0 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d803      	bhi.n	80023be <HAL_SPI_TransmitReceive+0x3cc>
 80023b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023bc:	d102      	bne.n	80023c4 <HAL_SPI_TransmitReceive+0x3d2>
 80023be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d107      	bne.n	80023d4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80023d2:	e026      	b.n	8002422 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f47f af57 	bne.w	800228e <HAL_SPI_TransmitReceive+0x29c>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f47f af50 	bne.w	800228e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f93e 	bl	8002674 <SPI_EndRxTxTransaction>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002418:	e003      	b.n	8002422 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800242a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800242e:	4618      	mov	r0, r3
 8002430:	3728      	adds	r7, #40	; 0x28
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	4613      	mov	r3, r2
 8002446:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002448:	f7fe fcd2 	bl	8000df0 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	1a9b      	subs	r3, r3, r2
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	4413      	add	r3, r2
 8002456:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002458:	f7fe fcca 	bl	8000df0 <HAL_GetTick>
 800245c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800245e:	4b39      	ldr	r3, [pc, #228]	; (8002544 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	015b      	lsls	r3, r3, #5
 8002464:	0d1b      	lsrs	r3, r3, #20
 8002466:	69fa      	ldr	r2, [r7, #28]
 8002468:	fb02 f303 	mul.w	r3, r2, r3
 800246c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800246e:	e054      	b.n	800251a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002476:	d050      	beq.n	800251a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002478:	f7fe fcba 	bl	8000df0 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	69fa      	ldr	r2, [r7, #28]
 8002484:	429a      	cmp	r2, r3
 8002486:	d902      	bls.n	800248e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d13d      	bne.n	800250a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800249c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024a6:	d111      	bne.n	80024cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024b0:	d004      	beq.n	80024bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ba:	d107      	bne.n	80024cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d4:	d10f      	bne.n	80024f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e017      	b.n	800253a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	3b01      	subs	r3, #1
 8002518:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	4013      	ands	r3, r2
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	429a      	cmp	r2, r3
 8002528:	bf0c      	ite	eq
 800252a:	2301      	moveq	r3, #1
 800252c:	2300      	movne	r3, #0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	429a      	cmp	r2, r3
 8002536:	d19b      	bne.n	8002470 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3720      	adds	r7, #32
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000000 	.word	0x20000000

08002548 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08a      	sub	sp, #40	; 0x28
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800255a:	f7fe fc49 	bl	8000df0 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002562:	1a9b      	subs	r3, r3, r2
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	4413      	add	r3, r2
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800256a:	f7fe fc41 	bl	8000df0 <HAL_GetTick>
 800256e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	330c      	adds	r3, #12
 8002576:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002578:	4b3d      	ldr	r3, [pc, #244]	; (8002670 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	00da      	lsls	r2, r3, #3
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	0d1b      	lsrs	r3, r3, #20
 8002588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258a:	fb02 f303 	mul.w	r3, r2, r3
 800258e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002590:	e060      	b.n	8002654 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002598:	d107      	bne.n	80025aa <SPI_WaitFifoStateUntilTimeout+0x62>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d104      	bne.n	80025aa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80025a8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d050      	beq.n	8002654 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025b2:	f7fe fc1d 	bl	8000df0 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025be:	429a      	cmp	r2, r3
 80025c0:	d902      	bls.n	80025c8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d13d      	bne.n	8002644 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80025d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025e0:	d111      	bne.n	8002606 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ea:	d004      	beq.n	80025f6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f4:	d107      	bne.n	8002606 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002604:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800260e:	d10f      	bne.n	8002630 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800262e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e010      	b.n	8002666 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	3b01      	subs	r3, #1
 8002652:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	4013      	ands	r3, r2
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	429a      	cmp	r2, r3
 8002662:	d196      	bne.n	8002592 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3728      	adds	r7, #40	; 0x28
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000000 	.word	0x20000000

08002674 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2200      	movs	r2, #0
 8002688:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f7ff ff5b 	bl	8002548 <SPI_WaitFifoStateUntilTimeout>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269c:	f043 0220 	orr.w	r2, r3, #32
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e027      	b.n	80026f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2200      	movs	r2, #0
 80026b0:	2180      	movs	r1, #128	; 0x80
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f7ff fec0 	bl	8002438 <SPI_WaitFlagStateUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c2:	f043 0220 	orr.w	r2, r3, #32
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e014      	b.n	80026f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f7ff ff34 	bl	8002548 <SPI_WaitFifoStateUntilTimeout>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d007      	beq.n	80026f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ea:	f043 0220 	orr.w	r2, r3, #32
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e000      	b.n	80026f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <memset>:
 8002700:	4402      	add	r2, r0
 8002702:	4603      	mov	r3, r0
 8002704:	4293      	cmp	r3, r2
 8002706:	d100      	bne.n	800270a <memset+0xa>
 8002708:	4770      	bx	lr
 800270a:	f803 1b01 	strb.w	r1, [r3], #1
 800270e:	e7f9      	b.n	8002704 <memset+0x4>

08002710 <__libc_init_array>:
 8002710:	b570      	push	{r4, r5, r6, lr}
 8002712:	4d0d      	ldr	r5, [pc, #52]	; (8002748 <__libc_init_array+0x38>)
 8002714:	4c0d      	ldr	r4, [pc, #52]	; (800274c <__libc_init_array+0x3c>)
 8002716:	1b64      	subs	r4, r4, r5
 8002718:	10a4      	asrs	r4, r4, #2
 800271a:	2600      	movs	r6, #0
 800271c:	42a6      	cmp	r6, r4
 800271e:	d109      	bne.n	8002734 <__libc_init_array+0x24>
 8002720:	4d0b      	ldr	r5, [pc, #44]	; (8002750 <__libc_init_array+0x40>)
 8002722:	4c0c      	ldr	r4, [pc, #48]	; (8002754 <__libc_init_array+0x44>)
 8002724:	f000 f826 	bl	8002774 <_init>
 8002728:	1b64      	subs	r4, r4, r5
 800272a:	10a4      	asrs	r4, r4, #2
 800272c:	2600      	movs	r6, #0
 800272e:	42a6      	cmp	r6, r4
 8002730:	d105      	bne.n	800273e <__libc_init_array+0x2e>
 8002732:	bd70      	pop	{r4, r5, r6, pc}
 8002734:	f855 3b04 	ldr.w	r3, [r5], #4
 8002738:	4798      	blx	r3
 800273a:	3601      	adds	r6, #1
 800273c:	e7ee      	b.n	800271c <__libc_init_array+0xc>
 800273e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002742:	4798      	blx	r3
 8002744:	3601      	adds	r6, #1
 8002746:	e7f2      	b.n	800272e <__libc_init_array+0x1e>
 8002748:	080027a4 	.word	0x080027a4
 800274c:	080027a4 	.word	0x080027a4
 8002750:	080027a4 	.word	0x080027a4
 8002754:	080027a8 	.word	0x080027a8

08002758 <memcpy>:
 8002758:	440a      	add	r2, r1
 800275a:	4291      	cmp	r1, r2
 800275c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002760:	d100      	bne.n	8002764 <memcpy+0xc>
 8002762:	4770      	bx	lr
 8002764:	b510      	push	{r4, lr}
 8002766:	f811 4b01 	ldrb.w	r4, [r1], #1
 800276a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800276e:	4291      	cmp	r1, r2
 8002770:	d1f9      	bne.n	8002766 <memcpy+0xe>
 8002772:	bd10      	pop	{r4, pc}

08002774 <_init>:
 8002774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002776:	bf00      	nop
 8002778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277a:	bc08      	pop	{r3}
 800277c:	469e      	mov	lr, r3
 800277e:	4770      	bx	lr

08002780 <_fini>:
 8002780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002782:	bf00      	nop
 8002784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002786:	bc08      	pop	{r3}
 8002788:	469e      	mov	lr, r3
 800278a:	4770      	bx	lr
